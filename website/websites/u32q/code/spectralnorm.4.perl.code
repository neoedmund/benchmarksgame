<span class="slc"># The Computer Language Benchmarks Game</span>
<span class="slc"># http://benchmarksgame.alioth.debian.org/</span>
<span class="slc">#</span>
<span class="slc"># Contributed by Andrew Rodland</span>
<span class="slc"># modified by R. Jelinek</span>
<span class="slc"># multicore by Mykola Zubach</span>

<span class="kwa">use</span> strict;
<span class="kwa">use</span> threads;

<span class="kwc">my</span> <span class="kwb">$cpus</span> = num_cpus();

<span class="kwc">my</span> <span class="kwb">$n</span> = <span class="kwc">shift</span> || <span class="num">500</span>;
<span class="kwc">my</span> <span class="kwb">&#64;v</span> = multiplyAtAv(
    multiplyAtAv(
        multiplyAtAv((<span class="num">1</span>) x <span class="kwb">$n</span>)
    )
);

<span class="kwc">my</span> <span class="kwb">&#64;u</span> = multiplyAtAv(<span class="kwb">&#64;v</span>);

<span class="kwc">my</span> (<span class="kwb">$vBv</span>, <span class="kwb">$vv</span>);
<span class="kwc">my</span> <span class="kwb">$i</span> = <span class="num">0</span>;
<span class="kwa">for</span> <span class="kwc">my</span> <span class="kwb">$v</span> (<span class="kwb">&#64;v</span>) {
    <span class="kwb">$vBv</span> += <span class="kwb">$u</span>[<span class="kwb">$i</span>++] * <span class="kwb">$v</span>;
    <span class="kwb">$vv</span> += <span class="kwb">$v</span> ** <span class="num">2</span>;
}

<span class="kwc">printf</span> <span class="str">&quot;</span><span class="ipl">%0</span><span class="str">.9f</span><span class="esc">\n</span><span class="str">&quot;</span>, <span class="kwc">sqrt</span>(<span class="kwb">$vBv</span> / <span class="kwb">$vv</span>);

<span class="kwa">sub</span> multiplyAtAv {
    <span class="kwa">return</span> multiplyAtv(multiplyAv(<span class="kwb">&#64;_</span>));
}

<span class="kwa">sub</span> eval_A {
    <span class="kwa">use</span> integer;
    <span class="kwc">my</span> <span class="kwb">$div</span> = ((<span class="kwb">$_</span>[<span class="num">0</span>] + <span class="kwb">$_</span>[<span class="num">1</span>]) * (<span class="kwb">$_</span>[<span class="num">0</span>] + <span class="kwb">$_</span>[<span class="num">1</span>] + <span class="num">1</span>) &gt;&gt; <span class="num">1</span>) + <span class="kwb">$_</span>[<span class="num">0</span>] + <span class="num">1</span>;
    <span class="kwa">no</span> integer;
    <span class="num">1</span> / <span class="kwb">$div</span>;
}

<span class="kwa">sub</span> multiplyAv {
    <span class="kwc">my</span>(<span class="kwb">$begin</span>, <span class="kwb">$end</span>, <span class="kwb">&#64;threads</span>);
    <span class="kwc">my</span> <span class="kwb">$chunk</span> = <span class="kwc">int</span>(<span class="kwb">$#_</span> / <span class="kwb">$cpus</span>) + <span class="num">1</span>;
    
    <span class="kwa">for</span>(<span class="kwb">$begin</span> = <span class="num">0</span>; <span class="kwb">$begin</span> &lt; <span class="kwb">$#_</span>; <span class="kwb">$begin</span> = <span class="kwb">$end</span> + <span class="num">1</span>) {
        <span class="kwb">$end</span> = <span class="kwb">$begin</span> + <span class="kwb">$chunk</span>;
        <span class="kwb">$end</span> = <span class="kwb">$#_</span> <span class="kwa">if</span> <span class="kwb">$end</span> &gt; <span class="kwb">$#_</span>;
        <span class="kwc">push</span> <span class="kwb">&#64;threads</span>, threads-&gt;<span class="kwd">create</span>( <span class="kwa">sub</span> {
            <span class="kwc">my</span> <span class="kwb">$begin</span> = <span class="kwc">shift</span>;
            <span class="kwc">my</span> <span class="kwb">$end</span> = <span class="kwc">shift</span>;
            <span class="kwa">return</span> <span class="kwc">map</span> {
                <span class="kwc">my</span> (<span class="kwb">$i</span>, <span class="kwb">$sum</span>) = (<span class="kwb">$_</span>);
                <span class="kwb">$sum</span> += eval_A(<span class="kwb">$i</span>, <span class="kwb">$_</span>) * <span class="kwb">$_</span>[<span class="kwb">$_</span>] <span class="kwa">for</span> (<span class="num">0</span> .. <span class="kwb">$#_</span>);
                <span class="kwb">$sum</span>;
            } (<span class="kwb">$begin</span> .. <span class="kwb">$end</span>);
       }, <span class="kwb">$begin</span>, <span class="kwb">$end</span>, <span class="kwb">&#64;_</span>);
    }
    <span class="kwa">return</span> <span class="kwc">map</span> <span class="kwb">$_</span>-&gt;<span class="kwc">join</span>, <span class="kwb">&#64;threads</span>;
}

<span class="kwa">sub</span> multiplyAtv {
    <span class="kwc">my</span>(<span class="kwb">$begin</span>, <span class="kwb">$end</span>, <span class="kwb">&#64;threads</span>);
    <span class="kwc">my</span> <span class="kwb">$chunk</span> = <span class="kwc">int</span>(<span class="kwb">$#_</span> / <span class="kwb">$cpus</span>) + <span class="num">1</span>;
    
    <span class="kwa">for</span>(<span class="kwb">$begin</span> = <span class="num">0</span>; <span class="kwb">$begin</span> &lt; <span class="kwb">$#_</span>; <span class="kwb">$begin</span> = <span class="kwb">$end</span> + <span class="num">1</span>) {
        <span class="kwb">$end</span> = <span class="kwb">$begin</span> + <span class="kwb">$chunk</span>;
        <span class="kwb">$end</span> = <span class="kwb">$#_</span> <span class="kwa">if</span> <span class="kwb">$end</span> &gt; <span class="kwb">$#_</span>;
        <span class="kwc">push</span> <span class="kwb">&#64;threads</span>, threads-&gt;<span class="kwd">create</span>( <span class="kwa">sub</span> {
            <span class="kwc">my</span> <span class="kwb">$begin</span> = <span class="kwc">shift</span>;
            <span class="kwc">my</span> <span class="kwb">$end</span> = <span class="kwc">shift</span>;
            <span class="kwa">return</span> <span class="kwc">map</span> {
                <span class="kwc">my</span> (<span class="kwb">$i</span>, <span class="kwb">$sum</span>) = (<span class="kwb">$_</span>);
                <span class="kwb">$sum</span> += eval_A(<span class="kwb">$_</span>, <span class="kwb">$i</span>) * <span class="kwb">$_</span>[<span class="kwb">$_</span>] <span class="kwa">for</span> (<span class="num">0</span> .. <span class="kwb">$#_</span>);
                <span class="kwb">$sum</span>;
            } (<span class="kwb">$begin</span> .. <span class="kwb">$end</span>);
       }, <span class="kwb">$begin</span>, <span class="kwb">$end</span>, <span class="kwb">&#64;_</span>);
    }
    <span class="kwa">return</span> <span class="kwc">map</span> <span class="kwb">$_</span>-&gt;<span class="kwc">join</span>, <span class="kwb">&#64;threads</span>;
}

<span class="kwa">sub</span> num_cpus {
    <span class="kwc">open my</span> <span class="kwb">$fh</span>, <span class="str">'&lt;/proc/cpuinfo'</span> <span class="kwc">or</span> <span class="kwa">return</span> <span class="num">4</span>;
    <span class="kwc">my</span> <span class="kwb">$cpus</span>;
    <span class="kwa">while</span> (&lt;<span class="kwb">$fh</span>&gt;) {
        <span class="kwb">$cpus</span> ++ <span class="kwa">if</span> <span class="kwd">/^processor\s+:/</span>;
    }
    <span class="kwa">return</span> <span class="kwb">$cpus</span>;
}
