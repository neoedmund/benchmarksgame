<span class="com">/* The Computer Language Benchmarks Game</span>
<span class="com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * Adapted by Antti Lankila from the earlier Isaac Gouy's implementation</span>
<span class="com"> */</span>

<span class="kwa">using</span> System;
<span class="kwa">using</span> System.IO;

<span class="kwa">class</span> Mandelbrot {

   <span class="kwa">public static</span> <span class="kwb">void</span> <span class="kwd">Main</span>(String[] args) {

      <span class="kwb">int</span> width = <span class="num">100</span>;
      <span class="kwa">if</span> (args.Length &gt; <span class="num">0</span>)
	 width = Int32.<span class="kwd">Parse</span>(args[<span class="num">0</span>]);

      <span class="kwb">int</span> height = width;
      <span class="kwb">int</span> maxiter = <span class="num">50</span>;
      <span class="kwb">double</span> limit = <span class="num">4.0</span>;

      Console.<span class="kwd">WriteLine</span>(<span class="str">&quot;P4&quot;</span>);
      Console.<span class="kwd">WriteLine</span>(<span class="str">&quot;</span><span class="ipl">{0} {1}</span><span class="str">&quot;</span>, width,height);
      Stream s = Console.<span class="kwd">OpenStandardOutput</span>(<span class="num">1024</span>);

      <span class="kwa">for</span> (<span class="kwb">int</span> y = <span class="num">0</span>; y &lt; height; y++) {
	 <span class="kwb">int</span> bits = <span class="num">0</span>;
	 <span class="kwb">int</span> xcounter = <span class="num">0</span>;
	 <span class="kwb">double</span> Ci = <span class="num">2.0</span>*y/height - <span class="num">1.0</span>;

         <span class="kwa">for</span> (<span class="kwb">int</span> x = <span class="num">0</span>; x &lt; width; x++){
	    <span class="kwb">double</span> Zr = <span class="num">0.0</span>;
	    <span class="kwb">double</span> Zi = <span class="num">0.0</span>;
	    <span class="kwb">double</span> Cr = <span class="num">2.0</span>*x/width - <span class="num">1.5</span>;
            <span class="kwb">int</span> i = maxiter;

            bits = bits &lt;&lt; <span class="num">1</span>;
            <span class="kwa">do</span> {
               <span class="kwb">double</span> Tr = Zr*Zr - Zi*Zi + Cr;
               Zi = <span class="num">2.0</span>*Zr*Zi + Ci;
               Zr = Tr;
               <span class="kwa">if</span> (Zr*Zr + Zi*Zi &gt; limit) {
		  bits |= <span class="num">1</span>;
		  <span class="kwa">break</span>;
	       }
            } <span class="kwa">while</span> (--i &gt; <span class="num">0</span>);

            <span class="kwa">if</span> (++xcounter == <span class="num">8</span>) {
	       s.<span class="kwd">WriteByte</span>((<span class="kwb">byte</span>) (bits ^ <span class="num">0xff</span>));
	       bits = <span class="num">0</span>;
	       xcounter = <span class="num">0</span>;
            }
         }
         <span class="kwa">if</span> (xcounter != <span class="num">0</span>)
	    s.<span class="kwd">WriteByte</span>((<span class="kwb">byte</span>) ((bits &lt;&lt; (<span class="num">8</span> - xcounter)) ^ <span class="num">0xff</span>));
      }
   }
}
