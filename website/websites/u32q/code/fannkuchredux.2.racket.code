#lang racket/base

<span class="slc">;;; The Computer Language Benchmarks Game</span>
<span class="slc">;;; http://benchmarksgame.alioth.debian.org/</span>

<span class="slc">;; Written by Dima Dorfman, 2004</span>
<span class="slc">;; Slightly improved by Sven Hartrumpf, 2005-2006</span>
<span class="slc">;; Ever-so-slightly tweaked for MzScheme by Brent Fulgham</span>
<span class="slc">;; PLT-ized for v4.0 by Matthew</span>
<span class="slc">;; Updated by Danny Yoo and Matthias Felleisen</span>
<span class="slc">;; Optimized by Gustavo Massaccesi, 2013</span>

(<span class="kwa">require</span> (<span class="kwa">for-syntax</span> (<span class="kwa">only-in</span> racket/base
                              lambda
                              syntax
                              syntax-case
                              make-rename-transformer
                              #%app)))
(<span class="kwa">require</span> racket/unsafe/ops)
(<span class="kwa">require</span> racket/cmdline)

(<span class="kwa">define-sequence-syntax</span> unsafe-in-fxrange 
  (<span class="kwa">lambda</span> () #'in-fxrange/proc) 
  (<span class="kwa">lambda</span> (<span class="kwa">stx</span>) 
    (<span class="kwa">syntax-case</span> stx () 
      [[(<span class="kwa">d</span>) (<span class="kwa">_</span> nat)] 
       #'[(<span class="kwa">d</span>) 
          (:do-in ([(<span class="kwa">n</span>) nat])
                  #f
                  ([i <span class="num">0</span>])
                  (<span class="kwa">unsafe-fx</span>&lt; i n)
                  ([(<span class="kwa">d</span>) i])
                  #t
                  #t
                  [(<span class="kwa">unsafe-fx</span>+ <span class="num">1</span> i)])]]))) 

(<span class="kwa">define</span> (<span class="kwa">unsafe-in-fxrange</span>/proc n) 
  (<span class="kwa">make-do-sequence</span> (<span class="kwa">lambda</span> () (<span class="kwa">values</span> (<span class="kwa">lambda</span> (<span class="kwa">x</span>) x)
                                       (<span class="kwa">lambda</span> (<span class="kwa">x</span>) (<span class="kwa">unsafe-fx</span>+ <span class="num">1</span> x))
                                       <span class="num">0</span>
                                       (<span class="kwa">lambda</span> (<span class="kwa">x</span>) (<span class="kwa">unsafe-fx</span>&lt; x n))
                                       #f
                                       #f)))) 


(<span class="kwa">define-syntax-rule</span> (<span class="kwa">define</span>/<span class="num">0</span>st-bool (<span class="kwa">name</span> arg0 rest ...) body ...)
  (<span class="kwa">begin</span>
    (<span class="kwa">define-syntax-rule</span> (<span class="kwa">name</span> arg0/v rest ...)
      (<span class="kwa">if</span> arg0/v (<span class="kwa">name</span>/t rest ...) (<span class="kwa">name</span>/f rest ...)))
    (<span class="kwa">define</span> (<span class="kwa">name</span>/t rest ...) (<span class="kwa">let</span> ([arg0 #t]) body ...))
    (<span class="kwa">define</span> (<span class="kwa">name</span>/f rest ...) (<span class="kwa">let</span> ([arg0 #f]) body ...))
    ))

(<span class="kwa">define</span> (<span class="kwa">fannkuch</span> n)
  (<span class="kwa">let</span> ([pi (<span class="kwa">for</span>/vector #:length n ([i (<span class="kwa">unsafe-in-fxrange</span> n)]) i)]
        [tmp (<span class="kwa">make-vector</span> n)]
        [count (<span class="kwa">make-vector</span> n)])
    (<span class="kwa">define</span>/<span class="num">0</span>st-bool (<span class="kwa">loop</span> even-parity? flips r checksum n pi tmp count)
      (<span class="kwa">for</span> ([i (<span class="kwa">unsafe-in-fxrange</span> r)])
        (<span class="kwa">unsafe-vector-set</span>! count i (<span class="kwa">unsafe-fx</span>+ <span class="num">1</span> i)))
      (<span class="kwa">let</span>* ([next-flips (<span class="kwa">count-flips</span> pi tmp)]
             [flips2 (<span class="kwa">unsafe-fxmax</span> next-flips flips)]
             [next-checksum (<span class="kwa">if</span> even-parity?
                                (<span class="kwa">unsafe-fx</span>+ checksum  next-flips)
                                (<span class="kwa">unsafe-fx-</span> checksum next-flips))])
        (<span class="kwa">let</span> loop2 ([r <span class="num">1</span>])
          (<span class="kwa">if</span> (<span class="kwa">unsafe-fx</span>= r n)
              (<span class="kwa">values</span> flips2 next-checksum)
              (<span class="kwa">let</span> ([perm0 (<span class="kwa">unsafe-vector-ref</span> pi <span class="num">0</span>)])
                (<span class="kwa">for</span> ([i (<span class="kwa">unsafe-in-fxrange</span> r)])
                  (<span class="kwa">unsafe-vector-set</span>! pi i (<span class="kwa">unsafe-vector-ref</span> pi (<span class="kwa">unsafe-fx</span>+ <span class="num">1</span> i))))
                (<span class="kwa">unsafe-vector-set</span>! pi r perm0)
                (<span class="kwa">unsafe-vector-set</span>! count r (<span class="kwa">unsafe-fx-</span> (<span class="kwa">unsafe-vector-ref</span> count r) <span class="num">1</span>))
                (<span class="kwa">if</span> (<span class="kwa">unsafe-fx</span>= (<span class="kwa">unsafe-vector-ref</span> count r) <span class="num">0</span>)
                    (<span class="kwa">loop2</span> (<span class="kwa">unsafe-fx</span>+ <span class="num">1</span> r))
                    (<span class="kwa">loop</span> (<span class="kwa">not</span> even-parity?) 
                          flips2 
                          r 
                          next-checksum 
                          n
                          pi 
                          tmp 
                          count)))))))
    (<span class="kwa">loop</span> #t <span class="num">0</span> n <span class="num">0</span>  n pi tmp count)))

(<span class="kwa">define</span> (<span class="kwa">count-flips</span> pi rho)
  (<span class="kwa">vector-copy</span>! rho <span class="num">0</span> pi)
  (<span class="kwa">let</span> loop ([k <span class="num">0</span>])
    (<span class="kwa">if</span> (<span class="kwa">unsafe-fx</span>= (<span class="kwa">unsafe-vector-ref</span> rho <span class="num">0</span>) <span class="num">0</span>)
        k
        (<span class="kwa">let</span> loop2 ([i <span class="num">0</span>]
                    [j (<span class="kwa">unsafe-vector-ref</span> rho <span class="num">0</span>)])
          (<span class="kwa">if</span> (<span class="kwa">unsafe-fx</span>&gt; j i)
              (<span class="kwa">begin</span> 
                (<span class="kwa">vector-swap</span>! rho i j)
                (<span class="kwa">loop2</span> (<span class="kwa">unsafe-fx</span>+ <span class="num">1</span> i) (<span class="kwa">unsafe-fx-</span> j <span class="num">1</span>)))
              (<span class="kwa">loop</span> (<span class="kwa">unsafe-fx</span>+ <span class="num">1</span> k)))))))

(<span class="kwa">define-syntax-rule</span> (<span class="kwa">vector-swap</span>! v i j)
  (<span class="kwa">let</span> ([t (<span class="kwa">unsafe-vector-ref</span> v i)])
    (<span class="kwa">unsafe-vector-set</span>! v i (<span class="kwa">unsafe-vector-ref</span> v j))
    (<span class="kwa">unsafe-vector-set</span>! v j t)))

(<span class="kwa">command-line</span> #:args (<span class="kwa">n</span>)
              (<span class="kwa">define-values</span> (<span class="kwa">answer</span> checksum)
                (<span class="kwa">fannkuch</span> (<span class="kwa">string-</span>&gt;number n)))
              (<span class="kwa">printf</span> <span class="str">&quot;~a</span><span class="esc">\n</span><span class="str">Pfannkuchen(~a) = ~a</span><span class="esc">\n</span><span class="str">&quot;</span> 
                      checksum
                      n 
                      answer))
