<span class="com">/* The Computer Language Benchmarks Game</span>
<span class="com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * contributed by The Go Authors.</span>
<span class="com"> * Based on C program by Joern Inge Vestgaarden</span>
<span class="com"> * and Jorge Peixoto de Morais Neto.</span>
<span class="com"> * flag.Arg hack by Isaac Gouy</span>
<span class="com"> * parallel hack by INADA Naoki</span>
<span class="com"> */</span>

<span class="kwa">package</span> main

<span class="kwa">import</span> (
   <span class="str">&quot;bufio&quot;</span>
   <span class="str">&quot;flag&quot;</span>
   <span class="str">&quot;os&quot;</span>
   <span class="str">&quot;runtime&quot;</span>
   <span class="str">&quot;strconv&quot;</span>
)

<span class="kwa">var</span> out *bufio.Writer

<span class="kwa">const</span> WIDTH = <span class="num">60</span> <span class="slc">// Fold lines after WIDTH bytes</span>

<span class="kwa">func</span> <span class="kwd">min</span>(a, b <span class="kwb">int</span>) <span class="kwb">int</span> {
   <span class="kwa">if</span> a &lt; b {
      <span class="kwa">return</span> a
   }
   <span class="kwa">return</span> b
}

<span class="kwa">type</span> AminoAcid <span class="kwa">struct</span> {
   p <span class="kwb">float64</span>
   c <span class="kwb">byte</span>
}

<span class="kwa">func</span> <span class="kwd">AccumulateProbabilities</span>(genelist []AminoAcid) {
   <span class="kwa">for</span> i := <span class="num">1</span>; i &lt; <span class="kwb">len</span>(genelist); i++ {
      genelist[i].p += genelist[i-<span class="num">1</span>].p
   }
}

<span class="slc">// RepeatFasta prints the characters of the byte slice s. When it</span>
<span class="slc">// reaches the end of the slice, it goes back to the beginning.</span>
<span class="slc">// It stops after generating count characters.</span>
<span class="slc">// After each WIDTH characters it prints a newline.</span>
<span class="slc">// It assumes that WIDTH &lt;= len(s) + 1.</span>
<span class="kwa">func</span> <span class="kwd">RepeatFasta</span>(s []<span class="kwb">byte</span>, count <span class="kwb">int</span>) {
   pos := <span class="num">0</span>
   s2 := <span class="kwb">make</span>([]<span class="kwb">byte</span>, <span class="kwb">len</span>(s)+WIDTH)
   <span class="kwd">copy</span>(s2, s)
   <span class="kwd">copy</span>(s2[<span class="kwb">len</span>(s):], s)
   <span class="kwa">for</span> count &gt; <span class="num">0</span> {
      line := <span class="kwd">min</span>(WIDTH, count)
      out.<span class="kwd">Write</span>(s2[pos : pos+line])
      out.<span class="kwd">WriteByte</span>(<span class="str">'</span><span class="esc">\n</span><span class="str">'</span>)
      pos += line
      <span class="kwa">if</span> pos &gt;= <span class="kwb">len</span>(s) {
         pos -= <span class="kwb">len</span>(s)
      }
      count -= line
   }
}

<span class="kwa">const</span> (
   IM = <span class="num">139968</span>
   IA = <span class="num">3877</span>
   IC = <span class="num">29573</span>
)

<span class="kwa">var</span> lastrandom <span class="kwb">uint32</span> = <span class="num">42</span>

<span class="kwa">func</span> <span class="kwd">generateRandom</span>(buf []<span class="kwb">float64</span>) {
   <span class="kwa">for</span> i := <span class="num">0</span>; i &lt; <span class="kwb">len</span>(buf); i++ {
      lastrandom = (lastrandom*IA + IC) % IM
      buf[i] = <span class="kwb">float64</span>(lastrandom) / IM
   }
}

<span class="slc">// generateDna generates DNA text from random sequence.</span>
<span class="slc">// Each element of genelist is a struct with a character and</span>
<span class="slc">// a floating point number p between 0 and 1.</span>
<span class="slc">// generateDna takes a random float r and</span>
<span class="slc">// finds the first element such that p &gt;= r.</span>
<span class="slc">// This is a weighted random selection.</span>
<span class="kwa">func</span> <span class="kwd">generateDna</span>(genelist []AminoAcid, rb []<span class="kwb">float64</span>, wb []<span class="kwb">byte</span>) <span class="kwb">int</span> {
   count := <span class="kwb">len</span>(rb)
   i := <span class="num">0</span>
   o := <span class="num">0</span>
   <span class="kwa">for</span> count &gt; <span class="num">0</span> {
      line := <span class="kwd">min</span>(WIDTH, count)
      count -= line
      <span class="kwa">for</span> j := <span class="num">0</span>; j &lt; line; j++ {
         r := rb[i]
         <span class="kwa">for</span> _, v := <span class="kwa">range</span> genelist {
            <span class="kwa">if</span> v.p &gt;= r {
               wb[o] = v.c
               <span class="kwa">break</span>
            }
         }
         i++
         o++
      }
      wb[o] = <span class="str">'</span><span class="esc">\n</span><span class="str">'</span>
      o++
   }
   <span class="kwa">return</span> o
}

<span class="kwa">const</span> (
   RANDOM_BUF_SIZE = WIDTH * <span class="num">1000</span>
   OUT_BUF_SIZE    = (WIDTH + <span class="num">1</span>) * <span class="num">1000</span>

   <span class="slc">// 1 for output, 4 for generateDna, 1 for generateRandom and 2 spaces</span>
   SLOT = <span class="num">8</span>
)

<span class="slc">// RandomFasta then prints the character of the array element.</span>
<span class="slc">// This sequence is repeated count times.</span>
<span class="slc">// Between each WIDTH consecutive characters, the function prints a newline.</span>
<span class="kwa">func</span> <span class="kwd">RandomFasta</span>(genelist []AminoAcid, count <span class="kwb">int</span>) {
   rbufs := <span class="kwb">make</span>([][]<span class="kwb">float64</span>, SLOT)
   wbufs := <span class="kwb">make</span>([][]<span class="kwb">byte</span>, SLOT)
   <span class="kwa">for</span> i := <span class="num">0</span>; i &lt; SLOT; i++ {
      rbufs[i] = <span class="kwb">make</span>([]<span class="kwb">float64</span>, RANDOM_BUF_SIZE)
      wbufs[i] = <span class="kwb">make</span>([]<span class="kwb">byte</span>, OUT_BUF_SIZE)
   }

   <span class="slc">// Use `chan []byte` as future object. och is queue of future.</span>
   och := <span class="kwb">make</span>(<span class="kwa">chan chan</span> []<span class="kwb">byte</span>, <span class="num">4</span>)
   done := <span class="kwb">make</span>(<span class="kwa">chan</span> <span class="kwb">bool</span>)
   <span class="kwa">go func</span>() {
      <span class="kwa">for</span> bc := <span class="kwa">range</span> och {
         buf := &lt;-bc
         out.<span class="kwd">Write</span>(buf)
      }
      done &lt;- <span class="kwb">true</span>
   }()

   <span class="kwa">for</span> i := <span class="num">0</span>; count &gt; <span class="num">0</span>; i++ {
      chunk := <span class="kwd">min</span>(count, RANDOM_BUF_SIZE)
      count -= chunk
      rb := rbufs[i%SLOT][:chunk]
      wb := wbufs[i%SLOT]
      <span class="kwd">generateRandom</span>(rb)

      c := <span class="kwb">make</span>(<span class="kwa">chan</span> []<span class="kwb">byte</span>)
      och &lt;- c
      <span class="kwa">go func</span>(rb []<span class="kwb">float64</span>, wb []<span class="kwb">byte</span>, c <span class="kwa">chan</span> []<span class="kwb">byte</span>) {
         o := <span class="kwd">generateDna</span>(genelist, rb, wb)
         c &lt;- wb[:o]
      }(rb, wb, c)
   }
   <span class="kwb">close</span>(och)
   &lt;-done
}

<span class="kwa">func</span> <span class="kwd">main</span>() {
   runtime.<span class="kwd">GOMAXPROCS</span>(runtime.<span class="kwd">NumCPU</span>())
   out = bufio.<span class="kwd">NewWriter</span>(os.Stdout)
   <span class="kwa">defer</span> out.<span class="kwd">Flush</span>()

   n := <span class="num">0</span>
   flag.<span class="kwd">Parse</span>()
   <span class="kwa">if</span> flag.<span class="kwd">NArg</span>() &gt; <span class="num">0</span> {
      n, _ = strconv.<span class="kwd">Atoi</span>(flag.<span class="kwd">Arg</span>(<span class="num">0</span>))
   }

   iub := []AminoAcid{
      AminoAcid{<span class="num">0.27</span>, <span class="str">'a'</span>},
      AminoAcid{<span class="num">0.12</span>, <span class="str">'c'</span>},
      AminoAcid{<span class="num">0.12</span>, <span class="str">'g'</span>},
      AminoAcid{<span class="num">0.27</span>, <span class="str">'t'</span>},
      AminoAcid{<span class="num">0.02</span>, <span class="str">'B'</span>},
      AminoAcid{<span class="num">0.02</span>, <span class="str">'D'</span>},
      AminoAcid{<span class="num">0.02</span>, <span class="str">'H'</span>},
      AminoAcid{<span class="num">0.02</span>, <span class="str">'K'</span>},
      AminoAcid{<span class="num">0.02</span>, <span class="str">'M'</span>},
      AminoAcid{<span class="num">0.02</span>, <span class="str">'N'</span>},
      AminoAcid{<span class="num">0.02</span>, <span class="str">'R'</span>},
      AminoAcid{<span class="num">0.02</span>, <span class="str">'S'</span>},
      AminoAcid{<span class="num">0.02</span>, <span class="str">'V'</span>},
      AminoAcid{<span class="num">0.02</span>, <span class="str">'W'</span>},
      AminoAcid{<span class="num">0.02</span>, <span class="str">'Y'</span>},
   }

   homosapiens := []AminoAcid{
      AminoAcid{<span class="num">0.3029549426680</span>, <span class="str">'a'</span>},
      AminoAcid{<span class="num">0.1979883004921</span>, <span class="str">'c'</span>},
      AminoAcid{<span class="num">0.1975473066391</span>, <span class="str">'g'</span>},
      AminoAcid{<span class="num">0.3015094502008</span>, <span class="str">'t'</span>},
   }

   <span class="kwd">AccumulateProbabilities</span>(iub)
   <span class="kwd">AccumulateProbabilities</span>(homosapiens)

   alu := []<span class="kwb">byte</span>(
      <span class="str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span> +
         <span class="str">&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span> +
         <span class="str">&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span> +
         <span class="str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span> +
         <span class="str">&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span> +
         <span class="str">&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span> +
         <span class="str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span>)

   out.<span class="kwd">WriteString</span>(<span class="str">&quot;&gt;ONE Homo sapiens alu</span><span class="esc">\n</span><span class="str">&quot;</span>)
   <span class="kwd">RepeatFasta</span>(alu, <span class="num">2</span>*n)
   out.<span class="kwd">WriteString</span>(<span class="str">&quot;&gt;TWO IUB ambiguity codes</span><span class="esc">\n</span><span class="str">&quot;</span>)
   <span class="kwd">RandomFasta</span>(iub, <span class="num">3</span>*n)
   out.<span class="kwd">WriteString</span>(<span class="str">&quot;&gt;THREE Homo sapiens frequency</span><span class="esc">\n</span><span class="str">&quot;</span>)
   <span class="kwd">RandomFasta</span>(homosapiens, <span class="num">5</span>*n)
}
