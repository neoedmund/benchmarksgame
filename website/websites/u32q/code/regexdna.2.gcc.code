<span class="com">/* The Computer Language Benchmarks Game</span>
<span class="com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">** contributed by Mike Pall</span>
<span class="com">**</span>
<span class="com">** regex-dna benchmark using PCRE</span>
<span class="com">**</span>
<span class="com">** compile with:</span>
<span class="com">**   gcc -O3 -fomit-frame-pointer -o regexdna regexdna.c -lpcre</span>
<span class="com">*/</span>

<span class="ppc">#define __USE_STRING_INLINES</span>
<span class="ppc">#include &lt;stdio.h&gt;</span>
<span class="ppc">#include &lt;string.h&gt;</span>
<span class="ppc">#include &lt;stdlib.h&gt;</span>
<span class="ppc">#include &lt;pcre.h&gt;</span>

<span class="kwc">typedef</span> <span class="kwb">struct</span> fbuf {
  <span class="kwb">char</span> *buf;
  <span class="kwb">size_t</span> size, len;
} fbuf_t;

<span class="kwb">static void</span> <span class="kwd">fb_init</span>(fbuf_t *b)
{
  b-&gt;buf = NULL;
  b-&gt;len = b-&gt;size = <span class="num">0</span>;
}

<span class="kwb">static char</span> *<span class="kwd">fb_need</span>(fbuf_t *b, <span class="kwb">size_t</span> need)
{
  need += b-&gt;len;
  <span class="kwa">if</span> (need &gt; b-&gt;size) {
    <span class="kwa">if</span> (b-&gt;size == <span class="num">0</span>) b-&gt;size = need;
    <span class="kwa">else while</span> (need &gt; b-&gt;size) b-&gt;size += b-&gt;size;
    <span class="kwa">if</span> (!(b-&gt;buf = <span class="kwd">realloc</span>(b-&gt;buf, b-&gt;size))) <span class="kwd">exit</span>(<span class="num">1</span>);
  }
  <span class="kwa">return</span> b-&gt;buf+b-&gt;len;
}

<span class="ppc">#define FB_MINREAD	(3&lt;&lt;16)</span>

<span class="com">/* Read all of a stdio stream into dst buffer. */</span>
<span class="kwb">static size_t</span> <span class="kwd">fb_readall</span>(fbuf_t *dst, <span class="kwb">FILE</span> *fp)
{
  <span class="kwb">char</span> *dp;
  <span class="kwb">int</span> n;
  <span class="kwa">for</span> (dp = <span class="kwd">fb_need</span>(dst, FB_MINREAD);
       (n = <span class="kwd">fread</span>(dp, <span class="num">1</span>, dst-&gt;size-dst-&gt;len, fp)) &gt; <span class="num">0</span>;
       dp = <span class="kwd">fb_need</span>(dst, FB_MINREAD)) dst-&gt;len += n;
  <span class="kwa">if</span> (<span class="kwd">ferror</span>(fp)) <span class="kwd">exit</span>(<span class="num">1</span>);
  <span class="kwa">return</span> dst-&gt;len;
}

<span class="com">/* Substitute pattern p with replacement r, copying from src to dst buffer. */</span>
<span class="kwb">static size_t</span> <span class="kwd">fb_subst</span>(fbuf_t *dst, fbuf_t *src, <span class="kwb">const char</span> *p, <span class="kwb">const char</span> *r)
{
  pcre *re;
  pcre_extra *re_ex;
  <span class="kwb">const char</span> *re_e;
  <span class="kwb">char</span> *dp;
  <span class="kwb">int</span> re_eo, m[<span class="num">3</span>], pos, rlen, clen;
  <span class="kwa">if</span> (!(re = <span class="kwd">pcre_compile</span>(p, PCRE_CASELESS, &amp;re_e, &amp;re_eo, NULL))) <span class="kwd">exit</span>(<span class="num">1</span>);
  re_ex = <span class="kwd">pcre_study</span>(re, <span class="num">0</span>, &amp;re_e);
  <span class="kwa">for</span> (dst-&gt;len = <span class="num">0</span>, rlen = <span class="kwd">strlen</span>(r), pos = <span class="num">0</span>;
       <span class="kwd">pcre_exec</span>(re, re_ex, src-&gt;buf, src-&gt;len, pos, <span class="num">0</span>, m, <span class="num">3</span>) &gt;= <span class="num">0</span>;
       pos = m[<span class="num">1</span>]) {
    clen = m[<span class="num">0</span>]-pos;
    dp = <span class="kwd">fb_need</span>(dst, clen+rlen);
    dst-&gt;len += clen+rlen;
    <span class="kwd">memcpy</span>(dp, src-&gt;buf+pos, clen);
    <span class="kwd">memcpy</span>(dp+clen, r, rlen);
  }
  clen = src-&gt;len-pos;
  dp = <span class="kwd">fb_need</span>(dst, clen);
  dst-&gt;len += clen;
  <span class="kwd">memcpy</span>(dp, src-&gt;buf+pos, clen);
  <span class="kwa">return</span> dst-&gt;len;
}

<span class="com">/* Count all matches with pattern p in src buffer. */</span>
<span class="kwb">static int</span> <span class="kwd">fb_countmatches</span>(fbuf_t *src, <span class="kwb">const char</span> *p)
{
  pcre *re;
  pcre_extra *re_ex;
  <span class="kwb">const char</span> *re_e;
  <span class="kwb">int</span> re_eo, m[<span class="num">3</span>], pos, count;
  <span class="kwa">if</span> (!(re = <span class="kwd">pcre_compile</span>(p, PCRE_CASELESS, &amp;re_e, &amp;re_eo, NULL))) <span class="kwd">exit</span>(<span class="num">1</span>);
  re_ex = <span class="kwd">pcre_study</span>(re, <span class="num">0</span>, &amp;re_e);
  <span class="kwa">for</span> (count = <span class="num">0</span>, pos = <span class="num">0</span>;
       <span class="kwd">pcre_exec</span>(re, re_ex, src-&gt;buf, src-&gt;len, pos, <span class="num">0</span>, m, <span class="num">3</span>) &gt;= <span class="num">0</span>;
       pos = m[<span class="num">1</span>]) count++;
  <span class="kwa">return</span> count;
}

<span class="kwb">static const char</span> *variants[] = {
  <span class="str">&quot;agggtaaa|tttaccct&quot;</span>,         <span class="str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span>,
  <span class="str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span>, <span class="str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span>,
  <span class="str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span>, <span class="str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span>,
  <span class="str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span>, <span class="str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span>,
  <span class="str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span>, NULL
};

<span class="kwb">static const char</span> *subst[] = {
  <span class="str">&quot;B&quot;</span>, <span class="str">&quot;(c|g|t)&quot;</span>, <span class="str">&quot;D&quot;</span>, <span class="str">&quot;(a|g|t)&quot;</span>,   <span class="str">&quot;H&quot;</span>, <span class="str">&quot;(a|c|t)&quot;</span>, <span class="str">&quot;K&quot;</span>, <span class="str">&quot;(g|t)&quot;</span>,
  <span class="str">&quot;M&quot;</span>, <span class="str">&quot;(a|c)&quot;</span>,   <span class="str">&quot;N&quot;</span>, <span class="str">&quot;(a|c|g|t)&quot;</span>, <span class="str">&quot;R&quot;</span>, <span class="str">&quot;(a|g)&quot;</span>,   <span class="str">&quot;S&quot;</span>, <span class="str">&quot;(c|g)&quot;</span>,
  <span class="str">&quot;V&quot;</span>, <span class="str">&quot;(a|c|g)&quot;</span>, <span class="str">&quot;W&quot;</span>, <span class="str">&quot;(a|t)&quot;</span>,     <span class="str">&quot;Y&quot;</span>, <span class="str">&quot;(c|t)&quot;</span>,   NULL
};

<span class="kwb">int</span> <span class="kwd">main</span>(<span class="kwb">int</span> argc, <span class="kwb">char</span> **argv)
{
  fbuf_t seq[<span class="num">2</span>];
  <span class="kwb">const char</span> **pp;
  <span class="kwb">size_t</span> ilen, clen, slen;
  <span class="kwb">int</span> flip;
  <span class="kwd">fb_init</span>(&amp;seq[<span class="num">0</span>]);
  <span class="kwd">fb_init</span>(&amp;seq[<span class="num">1</span>]);
  ilen = <span class="kwd">fb_readall</span>(&amp;seq[<span class="num">0</span>], stdin);
  clen = <span class="kwd">fb_subst</span>(&amp;seq[<span class="num">1</span>], &amp;seq[<span class="num">0</span>], <span class="str">&quot;&gt;.*|</span><span class="esc">\n</span><span class="str">&quot;</span>, <span class="str">&quot;&quot;</span>);
  <span class="kwa">for</span> (pp = variants; *pp; pp++)
    <span class="kwd">printf</span>(<span class="str">&quot;%s %d</span><span class="esc">\n</span><span class="str">&quot;</span>, *pp, <span class="kwd">fb_countmatches</span>(&amp;seq[<span class="num">1</span>], *pp));
  <span class="kwa">for</span> (slen = <span class="num">0</span>, flip = <span class="num">1</span>, pp = subst; *pp; pp += <span class="num">2</span>, flip = <span class="num">1</span>-flip)
    slen = <span class="kwd">fb_subst</span>(&amp;seq[<span class="num">1</span>-flip], &amp;seq[flip], *pp, pp[<span class="num">1</span>]);
  <span class="kwd">printf</span>(<span class="str">&quot;</span><span class="esc">\n</span><span class="str">%zu</span><span class="esc">\n</span><span class="str">%zu</span><span class="esc">\n</span><span class="str">%zu</span><span class="esc">\n</span><span class="str">&quot;</span>, ilen, clen, slen);
  <span class="kwa">return</span> <span class="num">0</span>;
}

