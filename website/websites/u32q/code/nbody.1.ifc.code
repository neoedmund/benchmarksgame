<span class="slc">! The Computer Language Benchmarks Game</span>
<span class="slc">! http://benchmarksgame.alioth.debian.org/</span>
<span class="slc">!</span>
<span class="slc">!   contributed by Simon Geard, translated from  Mark C. Williams nbody.java</span>
<span class="slc">!</span>
<span class="slc">! ifort -O3 -static-libcxa -o nbody nbody.f90</span>
<span class="slc">!</span>

<span class="kwa">program</span> nbody

  <span class="kwa">implicit none</span>
  <span class="kwa">integer</span> result, num, i, k
  <span class="kwa">character</span>(len=<span class="num">8</span>) argv
  <span class="kwa">real</span>*<span class="num">8</span>, <span class="kwa">parameter</span> :: tstep = <span class="num">0.01d0</span>
  <span class="kwa">real</span>*<span class="num">8</span>, <span class="kwa">parameter</span> ::  PI = <span class="num">3.141592653589793d0</span>
  <span class="kwa">real</span>*<span class="num">8</span>, <span class="kwa">parameter</span> ::  SOLAR_MASS = <span class="num">4</span> * PI * PI
  <span class="kwa">real</span>*<span class="num">8</span>, <span class="kwa">parameter</span> ::  DAYS_PER_YEAR = <span class="num">365.24d0</span>
  <span class="kwa">real</span>*<span class="num">8</span> :: e
  <span class="kwa">type</span> body
     <span class="kwa">real</span>*<span class="num">8</span> x, y, z, vx, vy, vz, mass
  <span class="kwa">end type</span> body
  <span class="kwa">type</span>(body), <span class="kwa">parameter</span> :: jupiter = <span class="kwd">body</span>( &amp;
       <span class="num">4.84143144246472090d0</span>,    -<span class="num">1.16032004402742839d0</span>, &amp;
       -<span class="num">1.03622044471123109d</span>-<span class="num">01</span>, <span class="num">1.66007664274403694d</span>-<span class="num">03</span> * DAYS_PER_YEAR, &amp;
       <span class="num">7.69901118419740425d</span>-<span class="num">03</span> * DAYS_PER_YEAR, -<span class="num">6.90460016972063023d</span>-<span class="num">05</span> * DAYS_PER_YEAR, &amp;
       <span class="num">9.54791938424326609d</span>-<span class="num">04</span> * SOLAR_MASS)

  <span class="kwa">type</span>(body), <span class="kwa">parameter</span> :: saturn = <span class="kwd">body</span>( &amp;
       <span class="num">8.34336671824457987d</span>+<span class="num">00</span>, &amp;
       <span class="num">4.12479856412430479d</span>+<span class="num">00</span>, &amp;
       -<span class="num">4.03523417114321381d</span>-<span class="num">01</span>, &amp;
       -<span class="num">2.76742510726862411d</span>-<span class="num">03</span> * DAYS_PER_YEAR, &amp;
       <span class="num">4.99852801234917238d</span>-<span class="num">03</span> * DAYS_PER_YEAR, &amp;
       <span class="num">2.30417297573763929d</span>-<span class="num">05</span> * DAYS_PER_YEAR, &amp;
       <span class="num">2.85885980666130812d</span>-<span class="num">04</span> * SOLAR_MASS)

  <span class="kwa">type</span>(body), <span class="kwa">parameter</span> :: uranus = <span class="kwd">body</span>( &amp;
	   <span class="num">1.28943695621391310d</span>+<span class="num">01</span>, &amp;
	   -<span class="num">1.51111514016986312d</span>+<span class="num">01</span>, &amp;
	   -<span class="num">2.23307578892655734d</span>-<span class="num">01</span>, &amp;
	   <span class="num">2.96460137564761618d</span>-<span class="num">03</span> * DAYS_PER_YEAR, &amp;
	   <span class="num">2.37847173959480950d</span>-<span class="num">03</span> * DAYS_PER_YEAR, &amp;
	   -<span class="num">2.96589568540237556d</span>-<span class="num">05</span> * DAYS_PER_YEAR, &amp;
	   <span class="num">4.36624404335156298d</span>-<span class="num">05</span> * SOLAR_MASS )

  <span class="kwa">type</span>(body), <span class="kwa">parameter</span> :: neptune = <span class="kwd">body</span>( &amp;
       <span class="num">1.53796971148509165d</span>+<span class="num">01</span>, &amp;
       -<span class="num">2.59193146099879641d</span>+<span class="num">01</span>, &amp;
       <span class="num">1.79258772950371181d</span>-<span class="num">01</span>, &amp;
       <span class="num">2.68067772490389322d</span>-<span class="num">03</span> * DAYS_PER_YEAR, &amp;
       <span class="num">1.62824170038242295d</span>-<span class="num">03</span> * DAYS_PER_YEAR, &amp;
       -<span class="num">9.51592254519715870d</span>-<span class="num">05</span> * DAYS_PER_YEAR, &amp;
       <span class="num">5.15138902046611451d</span>-<span class="num">05</span> * SOLAR_MASS)

  <span class="kwa">type</span>(body), <span class="kwa">parameter</span> :: sun = <span class="kwd">body</span>(<span class="num">0.0d0</span>, <span class="num">0.0d0</span>, <span class="num">0.0d0</span>, <span class="num">0.0d0</span>, <span class="num">0.0d0</span>, <span class="num">0.0d0</span>, SOLAR_MASS)

  <span class="kwa">type</span>(body), <span class="kwa">dimension</span>(<span class="num">5</span>) :: bodies
  bodies = (/ sun, jupiter, saturn, uranus, neptune /)

  <span class="kwa">call</span> <span class="kwd">getarg</span>(<span class="num">1</span>,argv)
  <span class="kwa">read</span>(argv,*) num

  <span class="kwa">call</span> <span class="kwd">offsetMomentum</span>(<span class="num">1</span>,bodies)
  e = <span class="kwd">energy</span>(bodies)
  <span class="kwa">write</span>(*,<span class="str">'(f12.9)'</span>) e
  <span class="kwa">do</span> i=<span class="num">1</span>,num
     <span class="kwa">call</span> <span class="kwd">advance</span>(tstep, bodies)
  <span class="kwa">end do</span>
  e = <span class="kwd">energy</span>(bodies)
  <span class="kwa">write</span>(*,<span class="str">'(f12.9)'</span>) e

<span class="kwa">contains</span>

  <span class="kwa">subroutine</span> <span class="kwd">offsetMomentum</span>(k, bodies)
    <span class="kwa">integer</span>, <span class="kwd">intent</span>(in) :: k
    <span class="kwa">type</span>(body), <span class="kwa">dimension</span>(:), <span class="kwd">intent</span>(inout) :: bodies
    <span class="kwa">real</span>*<span class="num">8</span> :: px, py, pz
    px = <span class="num">0.0d0</span>
    py = <span class="num">0.0d0</span>
    pz = <span class="num">0.0d0</span>
    <span class="kwa">do</span> i=<span class="num">1</span>,<span class="kwd">size</span>(bodies)
       px = px + <span class="kwd">bodies</span>(i)%vx * <span class="kwd">bodies</span>(i)%mass;
       py = py + <span class="kwd">bodies</span>(i)%vy * <span class="kwd">bodies</span>(i)%mass;
       pz = pz + <span class="kwd">bodies</span>(i)%vz * <span class="kwd">bodies</span>(i)%mass;
    <span class="kwa">end do</span>
    <span class="kwd">bodies</span>(k)%vx = -px/SOLAR_MASS
    <span class="kwd">bodies</span>(k)%vy = -py/SOLAR_MASS
    <span class="kwd">bodies</span>(k)%vz = -pz/SOLAR_MASS
  <span class="kwa">end subroutine</span> offsetMomentum


  <span class="kwa">subroutine</span> <span class="kwd">advance</span>(tstep, bodies)
  <span class="kwa">real</span>*<span class="num">8</span>, <span class="kwd">intent</span>(in) :: tstep
  <span class="kwa">type</span>(body), <span class="kwa">dimension</span>(:), <span class="kwd">intent</span>(inout) :: bodies

  <span class="kwa">real</span>*<span class="num">8</span> dx, dy, dz, distance, mag
  <span class="kwa">integer</span> i, j
  
  <span class="kwa">do</span> i=<span class="num">1</span>,<span class="kwd">size</span>(bodies)
     <span class="kwa">do</span> j=i+<span class="num">1</span>,<span class="kwd">size</span>(bodies)
        dx = <span class="kwd">bodies</span>(i)%x - <span class="kwd">bodies</span>(j)%x
        dy = <span class="kwd">bodies</span>(i)%y - <span class="kwd">bodies</span>(j)%y
        dz = <span class="kwd">bodies</span>(i)%z - <span class="kwd">bodies</span>(j)%z
        
        distance = <span class="kwd">sqrt</span>(dx*dx + dy*dy + dz*dz)
        mag = tstep / (distance * distance * distance)
        
        <span class="kwd">bodies</span>(i)%vx = <span class="kwd">bodies</span>(i)%vx - dx * <span class="kwd">bodies</span>(j)%mass * mag
        <span class="kwd">bodies</span>(i)%vy =  <span class="kwd">bodies</span>(i)%vy - dy * <span class="kwd">bodies</span>(j)%mass * mag
        <span class="kwd">bodies</span>(i)%vz =  <span class="kwd">bodies</span>(i)%vz - dz * <span class="kwd">bodies</span>(j)%mass * mag
        
        <span class="kwd">bodies</span>(j)%vx = <span class="kwd">bodies</span>(j)%vx + dx * <span class="kwd">bodies</span>(i)%mass * mag
        <span class="kwd">bodies</span>(j)%vy = <span class="kwd">bodies</span>(j)%vy + dy * <span class="kwd">bodies</span>(i)%mass * mag
        <span class="kwd">bodies</span>(j)%vz = <span class="kwd">bodies</span>(j)%vz + dz * <span class="kwd">bodies</span>(i)%mass * mag
     <span class="kwa">end do</span>
  <span class="kwa">end do</span>
     
  <span class="kwa">do</span> i=<span class="num">1</span>,<span class="kwd">size</span>(bodies)
     <span class="kwd">bodies</span>(i)%x = <span class="kwd">bodies</span>(i)%x + tstep * <span class="kwd">bodies</span>(i)%vx
     <span class="kwd">bodies</span>(i)%y = <span class="kwd">bodies</span>(i)%y + tstep * <span class="kwd">bodies</span>(i)%vy
     <span class="kwd">bodies</span>(i)%z = <span class="kwd">bodies</span>(i)%z + tstep * <span class="kwd">bodies</span>(i)%vz
  <span class="kwa">end do</span>

  <span class="kwa">end subroutine</span> advance

  <span class="kwa">real</span>*<span class="num">8</span> <span class="kwa">function</span> <span class="kwd">energy</span>(bodies)
    <span class="kwa">type</span>(body), <span class="kwa">dimension</span>(:), <span class="kwd">intent</span>(in) :: bodies
    <span class="kwa">real</span>*<span class="num">8</span> dx, dy, dz, distance
    <span class="kwa">integer</span> i, j

    energy = <span class="num">0.0d0</span>
    <span class="kwa">do</span> i=<span class="num">1</span>,<span class="kwd">size</span>(bodies)
       energy = energy + <span class="num">0.5d0</span> * <span class="kwd">bodies</span>(i)%mass *  &amp;
            ( <span class="kwd">bodies</span>(i)%vx * <span class="kwd">bodies</span>(i)%vx + &amp;
            <span class="kwd">bodies</span>(i)%vy * <span class="kwd">bodies</span>(i)%vy + &amp;
            <span class="kwd">bodies</span>(i)%vz * <span class="kwd">bodies</span>(i)%vz)

       <span class="kwa">do</span> j=i+<span class="num">1</span>,<span class="kwd">size</span>(bodies)
          dx = <span class="kwd">bodies</span>(i)%x - <span class="kwd">bodies</span>(j)%x
          dy = <span class="kwd">bodies</span>(i)%y - <span class="kwd">bodies</span>(j)%y
          dz = <span class="kwd">bodies</span>(i)%z - <span class="kwd">bodies</span>(j)%z
          distance = <span class="kwd">sqrt</span>(dx*dx + dy*dy + dz*dz)
          energy = energy - (<span class="kwd">bodies</span>(i)%mass * <span class="kwd">bodies</span>(j)%mass) / distance;
       <span class="kwa">end do</span>

    <span class="kwa">end do</span>
  <span class="kwa">end function</span> energy

<span class="kwa">end program</span> nbody
