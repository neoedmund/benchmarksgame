<span class="slc">-- The Computer Language Benchmarks Game</span>
<span class="slc">-- http://benchmarksgame.alioth.debian.org</span>
<span class="slc">--</span>
<span class="slc">-- Contributed by Pascal Obry on 2005/03/21</span>
<span class="slc">-- Modified by Brian Drummond on 2011/03/24</span>
<span class="slc">-- Updated by Jonathan Parker and Georg Bauhaus (May 2012)</span>


<span class="kwa">with</span> Ada.Command_Line; <span class="kwa">use</span> Ada.Command_Line;
<span class="kwa">with</span> Ada.Text_IO;      <span class="kwa">use</span> Ada.Text_IO;
<span class="kwa">with</span> Nbody_Pck;        <span class="kwa">use</span> Nbody_Pck;
<span class="kwa">with</span> Root;

<span class="kwa">procedure</span> Nbody <span class="kwa">is</span>

   <span class="kwa">subtype</span> Real <span class="kwa">is</span> Root.S_Real;

   <span class="kwa">package</span> RIO <span class="kwa">is new</span> Float_Io (Real);

   <span class="kwa">procedure</span> Put
     (Item : Real; Fore : Field := <span class="num">0</span>; Aft : Field := <span class="num">9</span>;
      Exp  : Field := <span class="num">0</span>) <span class="kwa">renames</span> RIO.Put;

   N : <span class="kwa">constant</span> <span class="kwb">Integer</span> := <span class="kwb">Integer</span><span class="kwd">'Value</span> (Argument (<span class="num">1</span>));

   Px, Py, Pz : Real := <span class="num">0.0</span>;

<span class="kwa">begin</span>
   <span class="kwa">for</span> I <span class="kwa">in</span> Body_Name<span class="kwd">'Range</span> <span class="kwa">loop</span>
      Add_Momentum (I, Px, Py, Pz);
   <span class="kwa">end loop</span>;

   Offset_Momentum (Sun, Px, Py, Pz);

   Put (Energy);
   New_Line;

   <span class="kwa">for</span> K <span class="kwa">in</span> <span class="num">1</span> .. N <span class="kwa">loop</span>
      Advance (<span class="num">0.01</span>);
   <span class="kwa">end loop</span>;

   Put (Energy);
   New_Line;

<span class="kwa">end</span> Nbody;

<span class="kwa">with</span> Ada.Numerics; <span class="kwa">use</span> Ada.Numerics;
<span class="kwa">with</span> Root; <span class="kwa">use</span> Root;

<span class="kwa">package</span> Nbody_Pck <span class="kwa">is</span>

   <span class="kwa">subtype</span> Real <span class="kwa">is</span> Root.S_Real;

   Solar_Mass    : <span class="kwa">constant</span> Real := <span class="num">4.0</span> * Pi * Pi;
   Days_Per_Year : <span class="kwa">constant</span> Real := <span class="num">365.24</span>;

   <span class="kwa">type</span> Signed <span class="kwa">is range</span> -<span class="num">2</span>**<span class="num">15</span> .. <span class="num">2</span>**<span class="num">15</span>-<span class="num">1</span>; 
   <span class="kwa">subtype</span> Body_Name <span class="kwa">is</span> Signed <span class="kwa">range</span> <span class="num">0</span> .. <span class="num">4</span>;

   Jupiter : <span class="kwa">constant</span> := <span class="num">0</span>;
   Saturn  : <span class="kwa">constant</span> := <span class="num">1</span>;
   Neptune : <span class="kwa">constant</span> := <span class="num">2</span>;
   Uranus  : <span class="kwa">constant</span> := <span class="num">3</span>;
   Sun     : <span class="kwa">constant</span> := <span class="num">4</span>;

   <span class="kwa">type</span> Axes <span class="kwa">is</span> (X, Y, Z);

   <span class="kwa">procedure</span> Offset_Momentum
     (Planet     : <span class="kwa">in</span> Body_Name;
      Px, Py, Pz : <span class="kwa">in</span> Real);

   <span class="kwa">procedure</span> Add_Momentum
     (Planet     : <span class="kwa">in</span>     Body_Name;
      Px, Py, Pz : <span class="kwa">in out</span> Real);

   <span class="kwa">function</span> Energy <span class="kwa">return</span> Real;

   <span class="kwa">procedure</span> Advance (Dt : <span class="kwa">in</span> Real);

<span class="kwa">private</span>

   <span class="kwa">type</span> Solar_System <span class="kwa">is array</span> (Body_Name, Axes) <span class="kwa">of</span> Real;
   <span class="kwa">pragma</span> Convention (Ada, Solar_System);

   Position : Solar_System :=
     (Jupiter =&gt; (X  =&gt;  <span class="num">4.84143144246472090e+00</span>,
                  Y  =&gt; -<span class="num">1.16032004402742839e+00</span>,
                  Z  =&gt; -<span class="num">1.03622044471123109e-01</span>),
      Saturn  =&gt; (X  =&gt;  <span class="num">8.34336671824457987e+00</span>,
                  Y  =&gt;  <span class="num">4.12479856412430479e+00</span>,
                  Z  =&gt; -<span class="num">4.03523417114321381e-01</span>),
      Uranus  =&gt; (X  =&gt;  <span class="num">1.28943695621391310e+01</span>,
                  y  =&gt; -<span class="num">1.51111514016986312e+01</span>,
                  Z  =&gt; -<span class="num">2.23307578892655734e-01</span>),
      Neptune =&gt; (X  =&gt;  <span class="num">1.53796971148509165e+01</span>,
                  Y  =&gt; -<span class="num">2.59193146099879641e+01</span>,
                  Z  =&gt;  <span class="num">1.79258772950371181e-01</span>),
      Sun     =&gt; (X  =&gt;  <span class="num">0.0</span>,
                  Y  =&gt;  <span class="num">0.0</span>,
                  Z  =&gt;  <span class="num">0.0</span>));

   Velocity : Solar_System :=
     (Jupiter =&gt; (X  =&gt;  <span class="num">1.66007664274403694e-03</span> * Days_Per_Year,
                  Y  =&gt;  <span class="num">7.69901118419740425e-03</span> * Days_Per_Year,
                  Z  =&gt; -<span class="num">6.90460016972063023e-05</span> * Days_Per_Year),
      Saturn  =&gt; (X  =&gt; -<span class="num">2.76742510726862411e-03</span> * Days_Per_Year,
                  Y  =&gt;  <span class="num">4.99852801234917238e-03</span> * Days_Per_Year,
                  Z  =&gt;  <span class="num">2.30417297573763929e-05</span> * Days_Per_Year),
      Uranus  =&gt; (X  =&gt;  <span class="num">2.96460137564761618e-03</span> * Days_Per_Year,
                  Y  =&gt;  <span class="num">2.37847173959480950e-03</span> * Days_Per_Year,
                  Z  =&gt; -<span class="num">2.96589568540237556e-05</span> * Days_Per_Year),
      Neptune =&gt; (X  =&gt;  <span class="num">2.68067772490389322e-03</span> * Days_Per_Year,
                  Y  =&gt;  <span class="num">1.62824170038242295e-03</span> * Days_Per_Year,
                  Z  =&gt; -<span class="num">9.51592254519715870e-05</span> * Days_Per_Year),
      Sun     =&gt; (X  =&gt;  <span class="num">0.0</span>,
                  Y  =&gt;  <span class="num">0.0</span>,
                  Z  =&gt;  <span class="num">0.0</span>));

   <span class="kwa">type</span> Body_Mass <span class="kwa">is array</span>(Body_Name) <span class="kwa">of</span> Real;

   Mass : <span class="kwa">constant</span> Body_Mass :=
     (Jupiter =&gt; <span class="num">9.54791938424326609e-04</span> * Solar_Mass,
      Saturn  =&gt; <span class="num">2.85885980666130812e-04</span> * Solar_Mass,
      Uranus  =&gt; <span class="num">4.36624404335156298e-05</span> * Solar_Mass,
      Neptune =&gt; <span class="num">5.15138902046611451e-05</span> * Solar_Mass,
      Sun     =&gt; Solar_Mass);

<span class="kwa">end</span> Nbody_Pck;

<span class="kwa">package body</span> Nbody_Pck <span class="kwa">is</span>

   <span class="kwa">procedure</span> Offset_Momentum
     (Planet     : <span class="kwa">in</span> Body_Name;
      Px, Py, Pz : <span class="kwa">in</span> Real) <span class="kwa">is</span>
   <span class="kwa">begin</span>
      Velocity (Planet, X) := -Px / Solar_Mass;
      Velocity (Planet, Y) := -Py / Solar_Mass;
      Velocity (Planet, Z) := -Pz / Solar_Mass;
   <span class="kwa">end</span> Offset_Momentum;

   <span class="kwa">procedure</span> Add_Momentum
     (Planet     : <span class="kwa">in</span>     Body_Name;
      Px, Py, Pz : <span class="kwa">in out</span> Real) <span class="kwa">is</span>
   <span class="kwa">begin</span>
      Px := Px + Velocity (Planet, X) * Mass (Planet);
      Py := Py + Velocity (Planet, Y) * Mass (Planet);
      Pz := Pz + Velocity (Planet, Z) * Mass (Planet);
   <span class="kwa">end</span> Add_Momentum;

   <span class="kwa">function</span> Energy <span class="kwa">return</span> Real <span class="kwa">is</span>
      Dx, Dy, Dz, Distance : Real;
      E                    : Real := <span class="num">0.0</span>;
   <span class="kwa">begin</span>
      <span class="kwa">for</span> i <span class="kwa">in</span> Body_Name <span class="kwa">loop</span>
        E := E + <span class="num">0.5</span> * Mass (i) *
          (Velocity (i, X) * Velocity (i, X)
         + Velocity (i, Y) * Velocity (i, Y)
         + Velocity (i, Z) * Velocity (i, Z));

        <span class="kwa">if</span> i /= Body_Name<span class="kwd">'Last</span> <span class="kwa">then</span>
           <span class="kwa">for</span> j <span class="kwa">in</span> Body_Name<span class="kwd">'Succ</span> (i) .. Body_Name<span class="kwd">'Last</span> <span class="kwa">loop</span>
              Dx := Position (i, X) - Position (j, X);
              Dy := Position (i, Y) - Position (j, Y);
              Dz := Position (i, Z) - Position (j, Z);
              Distance := Sqrt (Dx * Dx + Dy * Dy + Dz * Dz);
              E := E - (Mass (i) * Mass (j)) / Distance;
           <span class="kwa">end loop</span>;
        <span class="kwa">end if</span>;
      <span class="kwa">end loop</span>;
      <span class="kwa">return</span> E;
   <span class="kwa">end</span> Energy;

   <span class="kwa">procedure</span> Advance (Dt : <span class="kwa">in</span> Real) <span class="kwa">is</span>
      Dx, Dy, Dz, Mag, s : Real;
      Mass_i, Mass_j : Real;
   <span class="kwa">begin</span>
      <span class="kwa">for</span> i <span class="kwa">in</span> Body_Name <span class="kwa">loop</span>
         Mass_i := Mass(i);
         <span class="kwa">for</span> j <span class="kwa">in</span> Body_Name <span class="kwa">loop</span>
            <span class="kwa">if</span> j &gt; i <span class="kwa">then</span>
               Dx := Position (i, X) - Position (j, X);
               Dy := Position (i, Y) - Position (j, Y);
               Dz := Position (i, Z) - Position (j, Z);

               Mass_j := Mass(j);
               s      := SSE_Reciprocal_Sqrt (Dx*Dx + Dy*Dy + Dz*Dz);
               Mag    := (dt * s) * (s * s);

               Velocity (i, X) := Velocity (i, X) - Dx * Mass_j * Mag;
               Velocity (j, X) := Velocity (j, X) + Dx * Mass_i * Mag;
               Velocity (i, Y) := Velocity (i, Y) - Dy * Mass_j * Mag;
               Velocity (j, Y) := Velocity (j, Y) + Dy * Mass_i * Mag;
               Velocity (i, Z) := Velocity (i, Z) - Dz * Mass_j * Mag;
               Velocity (j, Z) := Velocity (j, Z) + Dz * Mass_i * Mag;
            <span class="kwa">end if</span>;
         <span class="kwa">end loop</span>;
      <span class="kwa">end loop</span>;

      <span class="kwa">for</span> i <span class="kwa">in</span> Body_Name <span class="kwa">loop</span>
         Position (i, X) := Position (i, X) + Dt * Velocity (i, X);
         Position (i, Y) := Position (i, Y) + Dt * Velocity (i, Y);
         Position (i, Z) := Position (i, Z) + Dt * Velocity (i, Z);
      <span class="kwa">end loop</span>;
   <span class="kwa">end</span> Advance;

<span class="kwa">end</span> Nbody_Pck;

<span class="kwa">package</span> Root <span class="kwa">is</span>

   <span class="kwa">type</span> S_Real <span class="kwa">is new</span> <span class="kwb">Long_Float</span>;

   <span class="kwa">pragma</span> Assert (S_Real<span class="kwd">'Size</span> = <span class="num">64</span> <span class="kwa">and</span> S_Real<span class="kwd">'digits</span> &gt; <span class="num">13</span>);
  
   <span class="kwa">type</span> SSE_Vector <span class="kwa">is array</span> (<span class="num">0</span> .. <span class="num">1</span>) <span class="kwa">of</span> S_Real;

   <span class="kwa">function</span> Sqrt (X : S_Real) <span class="kwa">return</span> S_Real;

   <span class="kwa">function</span> Sqrt_of_Reciprocal (X : S_Real) <span class="kwa">return</span> S_Real;

   <span class="kwa">function</span> SSE_Reciprocal_Sqrt (X : S_Real) <span class="kwa">return</span> S_Real;
   <span class="slc">-- Returns double precision 1.0 / Sqrt(X), for Long_Float X.</span>

   <span class="kwa">pragma</span> Inline (SSE_Reciprocal_Sqrt);

<span class="kwa">end</span> Root;

<span class="kwa">package body</span> root <span class="kwa">is</span>

   <span class="slc">-- &quot;divpd&quot; and &quot;sqrtpd&quot; are  double precision:</span>

   <span class="kwa">type</span> m128d <span class="kwa">is array</span> (<span class="num">0</span> .. <span class="num">1</span>) <span class="kwa">of</span> S_Real;
   <span class="kwa">for</span> m128d<span class="kwd">'Alignment</span> <span class="kwa">use</span> <span class="num">16</span>;
   <span class="kwa">pragma</span> Machine_Attribute (m128d, <span class="str">&quot;vector_type&quot;</span>);

   <span class="kwa">function</span> ia32_Div (X, Y : m128d) <span class="kwa">return</span> m128d;
   <span class="kwa">pragma</span> Import (Intrinsic, ia32_Div, <span class="str">&quot;__builtin_ia32_divpd&quot;</span>);

   <span class="kwa">function</span> ia32_Sqrt (X : m128d) <span class="kwa">return</span> m128d;
   <span class="kwa">pragma</span> Import (Intrinsic, ia32_Sqrt, <span class="str">&quot;__builtin_ia32_sqrtpd&quot;</span>);

   <span class="kwa">function</span> Sqrt (X : S_Real) <span class="kwa">return</span> S_Real <span class="kwa">is</span>
   <span class="kwa">begin return</span> ia32_Sqrt ((X, <span class="num">1.0</span>))(<span class="num">0</span>);
   <span class="kwa">end</span> Sqrt;

   <span class="kwa">function</span> Sqrt_of_Reciprocal (X : S_Real) <span class="kwa">return</span> S_Real <span class="kwa">is</span>
      a : <span class="kwa">constant</span> m128d := ia32_Div ((<span class="num">1.0</span>, <span class="num">1.0</span>), (X, <span class="num">1.0</span>));
      b : <span class="kwa">constant</span> m128d := ia32_Sqrt (a);
   <span class="kwa">begin</span>
      <span class="kwa">return</span> b(<span class="num">0</span>);
   <span class="kwa">end</span> Sqrt_of_Reciprocal;

   <span class="slc">-- &quot;rsqrtps&quot; (Reciprocal Sqrt) operates on Float (single precision):</span>

   <span class="kwa">type</span> m128s <span class="kwa">is array</span> (<span class="num">0</span> .. <span class="num">3</span>) <span class="kwa">of</span> <span class="kwb">Float</span>;
   <span class="kwa">for</span> m128s<span class="kwd">'Alignment</span> <span class="kwa">use</span> <span class="num">16</span>;
   <span class="kwa">pragma</span> Machine_Attribute (m128s, <span class="str">&quot;vector_type&quot;</span>);
   <span class="kwa">pragma</span> Assert (<span class="kwb">Float</span><span class="kwd">'Digits</span> &lt; <span class="num">7</span> <span class="kwa">and</span> m128s<span class="kwd">'size</span> = <span class="num">128</span>);

   <span class="kwa">function</span> ia32_RSqrt (X : m128s) <span class="kwa">return</span> m128s;
   <span class="kwa">pragma</span> Import (Intrinsic, ia32_RSqrt, <span class="str">&quot;__builtin_ia32_rsqrtps&quot;</span>);

   <span class="kwa">function</span> Recip_Sqrt (X : S_Real) <span class="kwa">return</span> S_Real <span class="kwa">is</span>
      Z :  <span class="kwa">constant</span> m128s := ia32_RSqrt ((<span class="kwb">Float</span> (X), <span class="kwa">others</span> =&gt; <span class="num">1.0</span>));
      r : S_Real := S_Real (Z(<span class="num">0</span>));
   <span class="kwa">begin</span>
      <span class="kwa">for</span> i <span class="kwa">in</span> <span class="num">1</span> .. <span class="num">2</span> <span class="kwa">loop</span>
         r := r * <span class="num">1.5</span> - ((<span class="num">0.5</span> * X) * r) * (r * r);
      <span class="kwa">end loop</span>;
      <span class="kwa">return</span> r;
   <span class="kwa">end</span> Recip_Sqrt;
   <span class="kwa">pragma</span> Inline (Recip_Sqrt); 

   <span class="kwa">function</span> SSE_Reciprocal_Sqrt (X : S_Real) <span class="kwa">return</span> S_Real <span class="kwa">is</span>
   <span class="kwa">begin</span>
      <span class="kwa">if Abs</span> X &lt; <span class="num">1.0e+30</span> <span class="kwa">and Abs</span> X &gt; <span class="num">1.0e-30</span> <span class="kwa">then</span>
         <span class="kwa">return</span> Recip_Sqrt (X);
      <span class="kwa">else</span>
         <span class="kwa">return</span> Sqrt_of_Reciprocal (X);
      <span class="kwa">end if</span>;
   <span class="kwa">end</span> SSE_Reciprocal_Sqrt;

   x : <span class="kwa">constant</span> m128d := (<span class="num">4.0</span>, <span class="num">6.0</span>);
   y : <span class="kwa">constant</span> m128d := (<span class="num">2.0</span>, <span class="num">2.0</span>);
   <span class="kwa">pragma</span> Assert (ia32_Div(x, y) = m128d<span class="str">'(2.0, 3.0));</span>
<span class="str">   -- Minimal test, but a good idea when using pragma Import.</span>
<span class="str"></span>
<span class="str">end root;</span>
<span class="str"></span>
<span class="str"></span>
