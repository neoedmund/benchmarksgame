<span class="com">/* The Computer Language Benchmarks Game</span>
<span class="com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Alexey Zolotov</span>
<span class="com">   modified by Vaclav Zeman</span>
<span class="com">*/</span>

<span class="ppc">#include &lt;boost/regex.hpp&gt;</span>
<span class="ppc">#include &lt;cassert&gt;</span>
<span class="ppc">#include &lt;iostream&gt;</span>
<span class="ppc">#include &lt;cstdio&gt;</span>

<span class="kwa">using namespace</span> std;

<span class="kwb">const</span> std::<span class="kwb">size_t</span> BUFSIZE = <span class="num">1024</span>;
<span class="kwb">const</span> boost::regex::flag_type re_flags = boost::regex::perl;

<span class="kwb">int</span> <span class="kwd">main</span>(<span class="kwb">void</span>)
{
    string str, out;
    <span class="kwb">int</span> len1, len2;
    <span class="kwb">int</span> read_size;
    <span class="kwb">char</span> *buf;

    <span class="kwb">char const</span> * pattern1[] = {
        <span class="str">&quot;agggtaaa|tttaccct&quot;</span>,
        <span class="str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span>,
        <span class="str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span>,
        <span class="str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span>,
        <span class="str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span>,
        <span class="str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span>,
        <span class="str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span>,
        <span class="str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span>,
        <span class="str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span>
    };

    <span class="kwb">const int</span> pattern1_count = (<span class="kwb">int</span>)(<span class="kwa">sizeof</span>(pattern1) / <span class="kwa">sizeof</span>(pattern1[<span class="num">0</span>]));

    string <span class="kwb">const</span> pattern2[] = {
        <span class="str">&quot;B&quot;</span>, <span class="str">&quot;(c|g|t)&quot;</span>, <span class="str">&quot;D&quot;</span>, <span class="str">&quot;(a|g|t)&quot;</span>, <span class="str">&quot;H&quot;</span>, <span class="str">&quot;(a|c|t)&quot;</span>, <span class="str">&quot;K&quot;</span>, <span class="str">&quot;(g|t)&quot;</span>,
        <span class="str">&quot;M&quot;</span>, <span class="str">&quot;(a|c)&quot;</span>, <span class="str">&quot;N&quot;</span>, <span class="str">&quot;(a|c|g|t)&quot;</span>, <span class="str">&quot;R&quot;</span>, <span class="str">&quot;(a|g)&quot;</span>, <span class="str">&quot;S&quot;</span>, <span class="str">&quot;(c|g)&quot;</span>,
        <span class="str">&quot;V&quot;</span>, <span class="str">&quot;(a|c|g)&quot;</span>, <span class="str">&quot;W&quot;</span>, <span class="str">&quot;(a|t)&quot;</span>, <span class="str">&quot;Y&quot;</span>, <span class="str">&quot;(c|t)&quot;</span>
    };

    <span class="kwd">fseek</span>(stdin, <span class="num">0</span>, SEEK_END);
    read_size = <span class="kwd">ftell</span>(stdin);
    <span class="kwa">assert</span>(read_size &gt; <span class="num">0</span>);

    str.<span class="kwd">resize</span> (read_size);
    <span class="kwd">rewind</span>(stdin);
    read_size = <span class="kwd">fread</span>(&amp;str[<span class="num">0</span>], <span class="num">1</span>, read_size, stdin);
    <span class="kwa">assert</span>(read_size);

    len1 = str.<span class="kwd">length</span>();
    boost::regex <span class="kwd">re1</span> (<span class="str">&quot;&gt;[^</span><span class="esc">\\</span><span class="str">n]+</span><span class="esc">\\</span><span class="str">n|[</span><span class="esc">\\</span><span class="str">n]&quot;</span>, re_flags);
    boost::<span class="kwd">regex_replace</span> (str, re1, <span class="str">&quot;&quot;</span>).<span class="kwd">swap</span> (str);
    len2 = str.<span class="kwd">length</span>();

    out = str;
    <span class="kwb">int</span> counts[pattern1_count] = { <span class="num">0</span> };

    <span class="ppc">#pragma omp parallel sections</span>
    {
    <span class="ppc">#pragma omp section</span>
        <span class="ppc">#pragma omp parallel for</span>
        <span class="kwa">for</span> (<span class="kwb">int</span> i = <span class="num">0</span>; i &lt; pattern1_count; i++)
        {
            boost::regex <span class="kwd">pat</span>(pattern1[i], re_flags);
            boost::smatch m;
            std::string::const_iterator start = str.<span class="kwd">begin</span> (), end = str.<span class="kwd">end</span> (); 
            <span class="kwa">while</span> (boost::<span class="kwd">regex_search</span> (start, end, m, pat))
            {
                ++counts[i];
                start += m.<span class="kwd">position</span> () + m.<span class="kwd">length</span> ();
            }
            
            
        }
        <span class="ppc">#pragma omp section</span>
        <span class="kwa">for</span> (<span class="kwb">int</span> i = <span class="num">0</span>; i &lt; (<span class="kwb">int</span>)(<span class="kwa">sizeof</span>(pattern2) / <span class="kwa">sizeof</span>(string)); i += <span class="num">2</span>)
        {
            boost::regex <span class="kwd">re</span> (pattern2[i], re_flags);
            boost::<span class="kwd">regex_replace</span> (out, re, pattern2[i + <span class="num">1</span>]).<span class="kwd">swap</span> (out);
        }
    }

    <span class="kwa">for</span> (<span class="kwb">int</span> i = <span class="num">0</span>; i != pattern1_count; ++i)
      cout &lt;&lt; pattern1[i] &lt;&lt; <span class="str">&quot; &quot;</span> &lt;&lt; counts[i] &lt;&lt; <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span>;

    cout &lt;&lt; <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span>;
    cout &lt;&lt; len1 &lt;&lt; <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span>;
    cout &lt;&lt; len2 &lt;&lt; <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span>;
    cout &lt;&lt; out.<span class="kwd">length</span>() &lt;&lt; endl;
}
