<span class="slc">-- The Computer Language Benchmarks Game</span>
<span class="slc">-- http://benchmarksgame.alioth.debian.org/</span>
<span class="slc">--</span>
<span class="slc">--  Contributed by Francois Fabien (23 octobre 2011)</span>
<span class="slc">--</span>
<span class="slc">-- Os threads are Ada tasks. Transfer of control is done synchronously by an</span>
<span class="slc">-- array of semaphores using a predefined Ada package.</span>
<span class="slc">-- The token is a global data that needs no protection since only one</span>
<span class="slc">-- thread at a time will use it.</span>
<span class="slc">--</span>
<span class="slc">-- Directives are in the source code, so compile only with:</span>
<span class="slc">--    gnatchop threadring.gnat</span>
<span class="slc">--    gnatmake -O3 -gnatn -march=native threadring.adb</span>
<span class="slc">-----------------------------------------------------------------------------</span>
<span class="kwa">pragma</span> Suppress (All_Checks); <span class="slc">-- go for speed not safety</span>
<span class="slc">--</span>
<span class="slc">-- pragmas used for optimization of the run-time.</span>
<span class="kwa">pragma</span> Restrictions (No_Abort_Statements);
<span class="kwa">pragma</span> Restrictions (Max_Asynchronous_Select_Nesting =&gt; <span class="num">0</span>);

<span class="slc">-----------------------------------------------------------------------------</span>

<span class="kwa">with</span> Ada.Command_Line;             <span class="kwa">use</span> Ada.Command_Line;
<span class="kwa">with</span> Ada.Synchronous_Task_Control; <span class="kwa">use</span> Ada;
<span class="kwa">with</span> Threadring_Pool;              <span class="kwa">use</span> Threadring_Pool;

<span class="kwa">pragma</span> Elaborate_All (Threadring_Pool);

<span class="kwa">procedure</span> Threadring <span class="kwa">is</span>
   <span class="slc">-- GNU ld will remove unused sections; GNAT specific</span>
   <span class="kwa">pragma</span> Linker_Options (<span class="str">&quot;-Wl,--gc-sections&quot;</span>);

<span class="kwa">begin</span>
   <span class="kwa">if</span> Argument_Count &gt; <span class="num">0</span> <span class="kwa">then</span>
      Token := Tokens<span class="kwd">'Value</span> (Argument (<span class="num">1</span>));
   <span class="kwa">end if</span>;
   Synchronous_Task_Control.Set_True (Semaphores (Ring_Nbr<span class="kwd">'First</span>));

<span class="kwa">end</span> Threadring;
<span class="slc">-----------------------------------------------------------------------------</span>

<span class="kwa">with</span> Ada.Synchronous_Task_Control; <span class="kwa">use</span> Ada, Ada.Synchronous_Task_Control;

<span class="kwa">package</span> Threadring_Pool <span class="kwa">is</span>

   Ring_Size : <span class="kwa">constant</span> := <span class="num">503</span>;
   <span class="kwa">type</span> Ring_Nbr <span class="kwa">is range</span> <span class="num">1</span> .. Ring_Size;

   <span class="kwa">type</span> Tokens <span class="kwa">is range</span> -<span class="num">1</span> .. +(<span class="num">2</span> ** <span class="num">31</span> - <span class="num">1</span>);
   <span class="slc">---- -1 =&gt; flag for task termination</span>
   <span class="kwa">for</span> Tokens<span class="kwd">'Size</span> <span class="kwa">use</span> <span class="num">32</span>;

   Token : Tokens := <span class="num">2</span> * Ring_Size - <span class="num">1</span>; <span class="slc">-- default value for testing</span>

   Semaphores : <span class="kwa">array</span> (Ring_Nbr) <span class="kwa">of</span> Suspension_Object;

<span class="kwa">private</span>

   <span class="kwa">task type</span> Threads <span class="kwa">is</span>
      <span class="kwa">entry</span> Initialize (Identifier : <span class="kwa">in</span> Ring_Nbr);
   <span class="kwa">end</span> Threads;

   Ring : <span class="kwa">array</span> (Ring_Nbr) <span class="kwa">of</span> Threads;

<span class="kwa">end</span> Threadring_Pool;
<span class="slc">-----------------------------------------------------------------------------</span>

<span class="kwa">with</span> Ada.Text_IO; <span class="kwa">use</span> Ada.Text_IO;

<span class="kwa">package body</span> Threadring_Pool <span class="kwa">is</span>

   <span class="kwa">package</span> Ring_IO <span class="kwa">is new</span> Integer_IO (Ring_Nbr);

   <span class="kwa">task body</span> Threads <span class="kwa">is</span>
      ID, Next : Ring_Nbr;
   <span class="kwa">begin</span>
      <span class="kwa">accept</span> Initialize (Identifier : <span class="kwa">in</span> Ring_Nbr) <span class="kwa">do</span>
         ID   := Identifier;
         Next := ID <span class="kwa">mod</span> Ring_Size + <span class="num">1</span>;
         Set_False (Semaphores (ID));
      <span class="kwa">end</span> Initialize;

      <span class="kwa">loop</span>
         Suspend_Until_True (Semaphores (ID));
         Set_False (Semaphores (ID));
         <span class="kwa">if</span> Token &gt; <span class="num">0</span> <span class="kwa">then</span>
            Token := Token - <span class="num">1</span>;
            Set_True (Semaphores (Next));
         <span class="kwa">else</span>
            <span class="kwa">exit</span>;
         <span class="kwa">end if</span>;
      <span class="kwa">end loop</span>;

      <span class="kwa">if</span> Token = <span class="num">0</span> <span class="kwa">then</span>
         Ring_IO.Put (ID, Width =&gt; <span class="num">0</span>);
         New_Line;
         Token := -<span class="num">1</span>;
      <span class="kwa">end if</span>;
      Set_True (Semaphores (Next));
   <span class="kwa">end</span> Threads;

<span class="kwa">begin</span>
   <span class="kwa">for</span> T <span class="kwa">in</span> Ring<span class="kwd">'Range</span> <span class="kwa">loop</span>
      Ring (T).Initialize (Identifier =&gt; T);
   <span class="kwa">end loop</span>;
<span class="kwa">end</span> Threadring_Pool;
