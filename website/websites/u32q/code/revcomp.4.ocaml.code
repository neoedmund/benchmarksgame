<span class="com">(* The Computer Language Benchmarks Game</span>
<span class="com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Ingo Bormuth</span>
<span class="com">   modified by Fabrice Le Fessant </span>
<span class="com">*)</span>

<span class="kwa">let</span> verbose = <span class="kwa">false</span>

<span class="kwa">let rec</span> print_args list =
  <span class="kwa">match</span> list <span class="kwa">with</span>
      [] -&gt; ()
    | x :: tail -&gt;
	<span class="kwc">Printf</span>.fprintf stderr <span class="str">&quot;</span> <span class="ipl">%d</span><span class="str">&quot;</span> x;
	print_args tail

<span class="kwa">let</span> enter name list =
  <span class="kwa">if</span> verbose <span class="kwa">then begin</span>
    <span class="kwc">Printf</span>.fprintf stderr <span class="str">&quot;</span><span class="ipl">%s</span><span class="str">:&quot;</span> name;
    print_args list;
    <span class="kwc">Printf</span>.fprintf stderr <span class="str">&quot;</span><span class="esc">\n</span><span class="str">%!&quot;</span>
  <span class="kwa">end</span>

<span class="kwa">let</span> arch64 =
  <span class="kwa">match</span> <span class="kwc">Sys</span>.word_size <span class="kwa">with</span>
      <span class="num">32</span> -&gt; <span class="kwa">false</span>
    | <span class="num">64</span> -&gt; <span class="kwa">true</span>
    | _ -&gt; <span class="kwa">assert false</span>


<span class="kwa">module</span> <span class="kwd">LineReader</span> : <span class="kwa">sig</span>

  <span class="com">(* read all non empty lines *)</span>
  <span class="kwa">val</span> read :
    <span class="com">(* from : *)</span> <span class="kwc">Unix</span>.file_descr -&gt;
    <span class="com">(* max_line_length : *)</span> <span class="kwb">int</span> -&gt;
    <span class="com">(* handler : *)</span> (<span class="kwb">string</span> -&gt; <span class="kwb">int</span> -&gt; <span class="kwb">int</span> -&gt; <span class="kwb">unit</span>) -&gt; <span class="kwb">unit</span>

<span class="kwa">end</span> = <span class="kwa">struct</span>

  <span class="kwa">let</span> read ic maxlen handler =
    <span class="kwa">let</span> s = <span class="kwc">String</span>.create maxlen <span class="kwa">in</span>

    <span class="kwa">let rec</span> iter begin_pos pos =
      <span class="kwa">let</span> to_read = maxlen - pos <span class="kwa">in</span>
	<span class="kwa">if</span> to_read &lt; <span class="num">32000</span> <span class="kwa">then begin</span>
	  <span class="kwa">let</span> len = pos - begin_pos <span class="kwa">in</span>
	    <span class="kwc">String</span>.blit s begin_pos s <span class="num">0</span> len;
	    iter <span class="num">0</span> len
	<span class="kwa">end else</span>
	  <span class="kwa">let</span> nread = <span class="kwc">Unix</span>.read ic s pos to_read <span class="kwa">in</span>
	<span class="kwa">if</span> nread = <span class="num">0</span> <span class="kwa">then</span> raise <span class="kwd">End_of_file</span>;
	<span class="kwa">let</span> end_pos = pos + nread <span class="kwa">in</span>
	iter2 begin_pos pos end_pos

    <span class="kwa">and</span> iter2 begin_pos pos end_pos =
      <span class="kwa">if</span> pos = end_pos <span class="kwa">then</span>
	iter begin_pos end_pos
      <span class="kwa">else</span>
	<span class="kwa">match</span> s.[pos] <span class="kwa">with</span>
	    '<span class="esc">\n</span>' | '<span class="esc">\r</span>' -&gt;
	      <span class="kwa">if</span> pos &gt; begin_pos <span class="kwa">then</span>
		handler s begin_pos (pos - begin_pos);
	      iter2 (pos+<span class="num">1</span>) (pos+<span class="num">1</span>) end_pos
	  | _ -&gt;
	      iter2 begin_pos (pos+<span class="num">1</span>) end_pos

    <span class="kwa">in</span>
      iter <span class="num">0 0</span>

<span class="kwa">end</span>

<span class="kwa">let</span> t = <span class="kwc">String</span>.make <span class="num">256</span> ' '
<span class="kwa">let</span> b = <span class="kwc">String</span>.make <span class="num">61</span> '<span class="esc">\n</span>'
<span class="kwa">let</span> bi = <span class="kwb">ref</span> <span class="num">1</span>
<span class="kwa">let</span> _ =
  <span class="kwc">String</span>.blit <span class="str">&quot;TVGHEFCDIJMLKNOPQYSAABWXRZ&quot;</span> <span class="num">0</span> t <span class="num">65 26</span>;
  <span class="kwc">String</span>.blit t <span class="num">65</span> t <span class="num">97 26</span>
;;

<span class="kwa">let</span> t =
  <span class="kwa">let</span> s = <span class="kwc">Array</span>.create <span class="num">256</span> ' ' <span class="kwa">in</span>
    <span class="kwa">for</span> i = <span class="num">0</span> <span class="kwa">to</span> <span class="num">255</span> <span class="kwa">do</span>
      s.(i) &lt;- t.[i]
    <span class="kwa">done</span>;
    s
;;

<span class="kwa">module</span> <span class="kwd">Fasta</span> : <span class="kwa">sig</span>

  <span class="kwa">val</span> clear : <span class="kwb">unit</span> -&gt; <span class="kwb">unit</span>
  <span class="kwa">val</span> flush : <span class="kwb">unit</span> -&gt; <span class="kwb">unit</span>
  <span class="kwa">val</span> print : <span class="kwb">string</span> -&gt; <span class="kwb">int</span> -&gt; <span class="kwb">int</span> -&gt; <span class="kwb">unit</span>

<span class="kwa">end</span> = <span class="kwa">struct</span>

  <span class="kwa">let</span> printed = <span class="kwb">ref</span> <span class="num">0</span>

  <span class="kwa">let</span> clear () = printed := <span class="num">0</span>
  <span class="kwa">let</span> flush () =
    <span class="kwa">if</span> !printed &gt; <span class="num">0</span> <span class="kwa">then</span> print_newline ();
    printed := <span class="num">0</span>

  <span class="kwa">let rec</span> print s pos len =
    <span class="kwa">if</span> len &gt; <span class="num">60</span> <span class="kwa">then begin</span>
      output stdout s pos <span class="num">60</span>;
      output_char stdout '<span class="esc">\n</span>';
      print s (pos + <span class="num">60</span>) (len-<span class="num">60</span>)
    <span class="kwa">end else</span>
      <span class="kwa">if</span> len &gt; <span class="num">0</span> <span class="kwa">then</span>
	<span class="kwa">begin</span>
	  output stdout s pos len;
	  printed := len
	<span class="kwa">end</span>

  <span class="kwa">let</span> print s pos len =
    <span class="kwa">let</span> to_print = <span class="num">60</span> - !printed <span class="kwa">in</span>
      <span class="kwa">if</span> len &lt; to_print <span class="kwa">then begin</span>
	output stdout s pos len;
	printed := !printed + len
      <span class="kwa">end else begin</span>
	output stdout s pos to_print;
	output_char stdout '<span class="esc">\n</span>';
	printed := <span class="num">0</span>;
	print s (pos + to_print) (len - to_print);
      <span class="kwa">end</span>

<span class="kwa">end</span>

<span class="kwa">module</span> <span class="kwd">IMPLEMENTATION32</span> : <span class="kwa">sig</span>
  <span class="kwa">val</span> main : <span class="kwb">unit</span> -&gt; <span class="kwb">unit</span>
<span class="kwa">end</span> = <span class="kwa">struct</span>

<span class="kwa">module</span> <span class="kwd">BigRevBuffer</span> : <span class="kwa">sig</span>

  <span class="kwa">val</span> clear : <span class="kwb">unit</span> -&gt; <span class="kwb">unit</span>
  <span class="kwa">val</span> length : <span class="kwb">unit</span> -&gt; <span class="kwb">int</span>
  <span class="kwa">val</span> add : <span class="kwb">string</span> -&gt; <span class="kwb">int</span> -&gt; <span class="kwb">int</span> -&gt; <span class="kwb">unit</span>
<span class="com">(*  val iter : (string -&gt; int -&gt; int -&gt; unit) -&gt; unit *)</span>
  <span class="kwa">val</span> reverse_iter : <span class="kwb">unit</span> -&gt; <span class="kwb">unit</span>

<span class="kwa">end</span> = <span class="kwa">struct</span>

<span class="com">(* don't allocate any buffers on x64 *)</span>
  <span class="kwa">let</span> nbuffers = <span class="kwa">if</span> arch64 <span class="kwa">then</span> <span class="num">0</span> <span class="kwa">else</span> <span class="num">256</span>


  <span class="kwa">let</span> buffer_len = <span class="num">1_000_000</span>

  <span class="kwa">let</span> buffers = <span class="kwc">Array</span>.init nbuffers (<span class="kwa">fun</span> _ -&gt; <span class="kwc">String</span>.create buffer_len)
  <span class="kwa">let</span> buffer_pos = <span class="kwc">Array</span>.create nbuffers buffer_len
  <span class="kwa">let</span> last_buffer = <span class="kwb">ref</span> <span class="num">0</span>

  <span class="kwa">let</span> clear () =
    last_buffer := <span class="num">0</span>;
    <span class="kwa">for</span> i = <span class="num">0</span> <span class="kwa">to</span> <span class="num">255</span> <span class="kwa">do</span>
      buffer_pos.(i) &lt;- buffer_len;
    <span class="kwa">done</span>

  <span class="kwa">let</span> length () =
    !last_buffer * buffer_len + (buffer_len - buffer_pos.(!last_buffer))

  <span class="kwa">let rec</span> blit_rev src end_pos dst dpos len =
    <span class="kwa">if</span> len &gt; <span class="num">0</span> <span class="kwa">then begin</span>
      dst.[dpos] &lt;- t.(<span class="kwc">Char</span>.code  src.[end_pos]);
      blit_rev src (end_pos-<span class="num">1</span>) dst (dpos+<span class="num">1</span>) (len-<span class="num">1</span>)
    <span class="kwa">end</span>

  <span class="kwa">let</span> blit_rev src spos dst dpos len =
    <span class="kwa">let</span> end_pos = spos + len - <span class="num">1</span> <span class="kwa">in</span>
    blit_rev src end_pos dst dpos len

  <span class="kwa">let rec</span> add s pos len =
    <span class="kwa">if</span> len &gt; <span class="num">0</span> <span class="kwa">then</span>
      <span class="kwa">let</span> b = buffers.(!last_buffer) <span class="kwa">in</span>
      <span class="kwa">let</span> bpos = buffer_pos.(!last_buffer) <span class="kwa">in</span>
	<span class="kwa">if</span> bpos &gt; len <span class="kwa">then begin</span>
	  <span class="kwa">let</span> new_pos = bpos - len <span class="kwa">in</span>
	    blit_rev s pos b new_pos len;
	    buffer_pos.(!last_buffer) &lt;- new_pos
	<span class="kwa">end else begin</span>
	  blit_rev s pos b <span class="num">0</span> bpos;
	  buffer_pos.(!last_buffer) &lt;- <span class="num">0</span>;
	  incr last_buffer;
	  add s (pos + bpos) (len - bpos)
	<span class="kwa">end</span>

<span class="com">(*</span>
<span class="com"></span>
<span class="com">  let iter f =</span>
<span class="com">    let rec iter f i last_buffer =</span>
<span class="com">      if i &lt; last_buffer then begin</span>
<span class="com">	f  buffers.(i) 0 buffer_len;</span>
<span class="com">	iter f (i+1) last_buffer</span>
<span class="com">      end</span>
<span class="com">      else</span>
<span class="com">	let pos = buffer_pos.(last_buffer) in</span>
<span class="com">	  f buffers.(last_buffer) pos (buffer_len - pos)</span>
<span class="com">    in</span>
<span class="com">      iter f 0 !last_buffer</span>
<span class="com"></span>
<span class="com">  let rev_iter f =</span>
<span class="com">    let rec iter f i =</span>
<span class="com">      if i &gt;= 0 then begin</span>
<span class="com">	f  buffers.(i) 0 buffer_len;</span>
<span class="com">	iter f (i-1)</span>
<span class="com">      end</span>
<span class="com">    in</span>
<span class="com">    let pos = buffer_pos.(!last_buffer) in</span>
<span class="com">      f buffers.(!last_buffer) pos (buffer_len - pos);</span>
<span class="com">      iter f (!last_buffer-1)</span>
<span class="com">*)</span>

  <span class="kwa">let</span> reverse_iter f =
    <span class="kwa">let rec</span> iter i =
      <span class="kwa">if</span> i &gt;= <span class="num">0</span> <span class="kwa">then begin</span>
	<span class="kwc">Fasta</span>.print  buffers.(i) <span class="num">0</span> buffer_len;
	iter (i-<span class="num">1</span>)
      <span class="kwa">end</span>
    <span class="kwa">in</span>
    <span class="kwa">let</span> pos = buffer_pos.(!last_buffer) <span class="kwa">in</span>
      <span class="kwa">if</span> pos &lt; buffer_len <span class="kwa">then</span>
	<span class="kwc">Fasta</span>.print buffers.(!last_buffer) pos (buffer_len - pos);
      iter (!last_buffer-<span class="num">1</span>)

<span class="kwa">end</span>

<span class="kwa">let</span> reverse () =
  <span class="kwa">if</span> <span class="kwc">BigRevBuffer</span>.length () &gt; <span class="num">0</span> <span class="kwa">then begin</span>
    <span class="kwc">Fasta</span>.clear ();
    <span class="kwc">BigRevBuffer</span>.reverse_iter ();
    <span class="kwc">BigRevBuffer</span>.clear ();
    <span class="kwc">Fasta</span>.flush ()
  <span class="kwa">end</span>

<span class="kwa">let</span> main () =
  <span class="kwa">try</span>
    <span class="kwc">LineReader</span>.read <span class="kwc">Unix</span>.stdin <span class="num">1_000_000</span>
      (<span class="kwa">fun</span> s pos len -&gt;
	 <span class="kwa">if</span> s.[pos] = '&gt;' <span class="kwa">then begin</span>
	   reverse ();
	   output stdout s pos len;
	   output_char stdout '<span class="esc">\n</span>';
	 <span class="kwa">end else</span>
	   <span class="kwc">BigRevBuffer</span>.add s pos len
      )
  <span class="kwa">with</span> <span class="kwd">End_of_file</span> -&gt; reverse ()
    | e -&gt;
	<span class="kwc">Printf</span>.fprintf stderr <span class="str">&quot;exception</span> <span class="ipl">%s</span><span class="str"></span><span class="esc">\n</span><span class="str">%!&quot;</span> (<span class="kwc">Printexc</span>.to_string e);
	exit <span class="num">2</span>

<span class="kwa">end</span>

<span class="kwa">module</span> <span class="kwd">IMPLEMENTATION64</span> : <span class="kwa">sig</span>

  <span class="kwa">val</span> main : <span class="kwb">unit</span> -&gt; <span class="kwb">unit</span>

<span class="kwa">end</span> = <span class="kwa">struct</span>

  <span class="kwa">let</span> buffer_len = <span class="num">150_000_000</span>

  <span class="kwa">let</span> buffer = <span class="kwa">if</span> arch64 <span class="kwa">then</span> <span class="kwc">String</span>.create buffer_len <span class="kwa">else</span> <span class="str">&quot;&quot;</span>
  <span class="kwa">let</span> buffer_pos = <span class="kwb">ref</span> buffer_len

  <span class="kwa">let</span> wait_for = <span class="kwb">ref</span> <span class="kwd">None</span>

  <span class="kwa">let</span> reverse () =
    <span class="kwa">begin</span>
      <span class="kwa">match</span> !wait_for <span class="kwa">with</span>
	  <span class="kwd">None</span> -&gt; ()
	| <span class="kwd">Some</span> ix -&gt;
	    <span class="kwa">let</span> s = <span class="kwc">String</span>.create <span class="num">1</span> <span class="kwa">in</span>
	    ignore (<span class="kwc">Unix</span>.read ix s <span class="num">0 1</span>)
    <span class="kwa">end</span>;
    <span class="kwa">let</span> len = buffer_len - !buffer_pos <span class="kwa">in</span>
      <span class="kwa">if</span> len &gt; <span class="num">0</span> <span class="kwa">then begin</span>
	<span class="kwc">Fasta</span>.clear ();
	<span class="kwc">Fasta</span>.print buffer !buffer_pos len;
	<span class="kwc">Fasta</span>.flush ();
	buffer_pos := buffer_len;
      <span class="kwa">end</span>

    <span class="kwa">let</span> maxlen = <span class="num">10_000_000</span>
    <span class="kwa">let</span> inbuf = <span class="kwc">String</span>.create maxlen

<span class="kwa">let rec</span> iter1 begin_pos () pos =
  <span class="kwa">let</span> to_read = maxlen - pos <span class="kwa">in</span>
    <span class="kwa">if</span> to_read &lt; <span class="num">32_000</span> <span class="kwa">then begin</span>
      <span class="kwa">let</span> len = pos - begin_pos <span class="kwa">in</span>
	<span class="kwc">String</span>.blit inbuf begin_pos inbuf <span class="num">0</span> len;
	iter1 <span class="num">0</span> () len
    <span class="kwa">end else</span>
      <span class="kwa">let</span> nread = <span class="kwc">Unix</span>.read <span class="kwc">Unix</span>.stdin inbuf pos to_read <span class="kwa">in</span>
	<span class="kwa">if</span> nread = <span class="num">0</span> <span class="kwa">then</span> raise <span class="kwd">End_of_file</span>;
	<span class="kwa">let</span> end_pos = pos + nread <span class="kwa">in</span>
	  iter2 begin_pos pos end_pos

<span class="kwa">and</span> iter2 begin_pos pos end_pos =
  <span class="kwa">if</span> pos = end_pos <span class="kwa">then</span>
    iter1 begin_pos () end_pos
  <span class="kwa">else</span>
    <span class="kwa">match</span> inbuf.[pos] <span class="kwa">with</span>
	'<span class="esc">\n</span>' -&gt;
	  iter2 (pos+<span class="num">1</span>) (pos+<span class="num">1</span>) end_pos
      | '&gt;' -&gt;
	  iter4 begin_pos (pos+<span class="num">1</span>) end_pos
      | c -&gt;
	  <span class="kwa">let</span> c = t.(<span class="kwc">Char</span>.code c) <span class="kwa">in</span>
	    decr buffer_pos;
	    buffer.[!buffer_pos] &lt;- c;
	    iter2 begin_pos (pos+<span class="num">1</span>) end_pos

<span class="kwa">and</span> iter3 begin_pos () pos =
  <span class="kwa">let</span> to_read = maxlen - pos <span class="kwa">in</span>
    <span class="kwa">if</span> to_read &lt; <span class="num">32000</span> <span class="kwa">then begin</span>
      <span class="kwa">let</span> len = pos - begin_pos <span class="kwa">in</span>
	<span class="kwc">String</span>.blit inbuf begin_pos inbuf <span class="num">0</span> len;
	iter3 <span class="num">0</span> () len
    <span class="kwa">end else</span>
      <span class="kwa">let</span> nread = <span class="kwc">Unix</span>.read <span class="kwc">Unix</span>.stdin inbuf pos to_read <span class="kwa">in</span>
	<span class="kwa">if</span> nread = <span class="num">0</span> <span class="kwa">then</span> raise <span class="kwd">End_of_file</span>;
	<span class="kwa">let</span> end_pos = pos + nread <span class="kwa">in</span>
	  iter4 begin_pos pos end_pos

<span class="kwa">and</span> iter4 begin_pos pos end_pos =
  <span class="kwa">if</span> pos = end_pos <span class="kwa">then</span>
    iter3 begin_pos () end_pos
  <span class="kwa">else</span>
    <span class="kwa">match</span> inbuf.[pos] <span class="kwa">with</span>
	'<span class="esc">\n</span>' | '<span class="esc">\r</span>' -&gt;
	  <span class="kwa">if</span> pos &gt; begin_pos <span class="kwa">then begin</span>
	    <span class="kwa">if</span> !buffer_pos &lt; buffer_len <span class="kwa">then begin</span>
	      <span class="kwa">let</span> (ix, ox) = <span class="kwc">Unix</span>.pipe () <span class="kwa">in</span>
		<span class="kwa">match</span> <span class="kwc">Unix</span>.fork () <span class="kwa">with</span>
		  | -<span class="num">1</span> -&gt; <span class="kwa">assert false</span>
		  | <span class="num">0</span> -&gt;
		      reverse ();
		      output stdout inbuf begin_pos (pos - begin_pos);
		      output_char stdout '<span class="esc">\n</span>';
		      ignore (<span class="kwc">Unix</span>.write ox <span class="str">&quot;X&quot;</span> <span class="num">0 1</span>);
		      <span class="kwc">Unix</span>.close ox;
		      exit <span class="num">0</span>;
		  | _ -&gt;
		      wait_for := <span class="kwd">Some</span> ix;
		      buffer_pos := buffer_len;
	    <span class="kwa">end else begin</span>
	      output stdout inbuf begin_pos (pos - begin_pos);
	      output_char stdout '<span class="esc">\n</span>';
	      flush stdout;
	    <span class="kwa">end</span>
	  <span class="kwa">end</span>;
	  iter2 (pos+<span class="num">1</span>) (pos+<span class="num">1</span>) end_pos
      | _ -&gt;
	  iter4 begin_pos (pos+<span class="num">1</span>) end_pos

<span class="kwa">let</span> read () =
    iter1 <span class="num">0</span> () <span class="num">0</span>

<span class="kwa">let</span> main () =
  enter <span class="str">&quot;main64&quot;</span> [];
  <span class="kwa">try</span>
    read ()
  <span class="kwa">with</span> <span class="kwd">End_of_file</span> -&gt; reverse ()
    | e -&gt;
	<span class="kwc">Printf</span>.fprintf stderr <span class="str">&quot;exception</span> <span class="ipl">%s</span><span class="str"></span><span class="esc">\n</span><span class="str">%!&quot;</span> (<span class="kwc">Printexc</span>.to_string e);
	exit <span class="num">2</span>

<span class="kwa">end</span>

<span class="kwa">let</span> _ =
  <span class="kwa">if</span> arch64 <span class="kwa">then</span>
    <span class="kwc">IMPLEMENTATION64</span>.main ()
  <span class="kwa">else</span>
    <span class="kwc">IMPLEMENTATION32</span>.main ()
