<span class="com">(* The Computer Language Benchmarks Game</span>
<span class="com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * Contributed by Troestler Christophe</span>
<span class="com"> * Modified by Fabrice Le Fessant</span>
<span class="com"> *)</span>

<span class="kwa">type</span> 'a tree = <span class="kwd">Empty</span> | <span class="kwd">Node</span> <span class="kwa">of</span> 'a tree * 'a * 'a tree

<span class="kwa">let rec</span> make i d =
<span class="com">(* if d = 0 then Empty *)</span>
  <span class="kwa">if</span> d = <span class="num">0</span> <span class="kwa">then</span> <span class="kwd">Node</span>(<span class="kwd">Empty</span>, i, <span class="kwd">Empty</span>)
  <span class="kwa">else let</span> i2 = <span class="num">2</span> * i <span class="kwa">and</span> d = d - <span class="num">1</span> <span class="kwa">in</span> <span class="kwd">Node</span>(make (i2 - <span class="num">1</span>) d, i, make i2 d)

<span class="kwa">let rec</span> check = <span class="kwa">function</span> <span class="kwd">Empty</span> -&gt; <span class="num">0</span> | <span class="kwd">Node</span>(l, i, r) -&gt; i + check l - check r

<span class="kwa">let</span> min_depth = <span class="num">4</span>
<span class="kwa">let</span> max_depth = (<span class="kwa">let</span> n = <span class="kwa">try</span> int_of_string(<span class="kwc">Array</span>.get <span class="kwc">Sys</span>.argv <span class="num">1</span>) <span class="kwa">with</span> _ -&gt; <span class="num">10</span> <span class="kwa">in</span>
                 max (min_depth + <span class="num">2</span>) n)
<span class="kwa">let</span> stretch_depth = max_depth + <span class="num">1</span>

<span class="kwa">let</span> () =
  <span class="com">(* Gc.set { (Gc.get()) with Gc.minor_heap_size = 1024 * 1024; max_overhead = -1; }; *)</span>
  <span class="kwa">let</span> c = check (make <span class="num">0</span> stretch_depth) <span class="kwa">in</span>
  <span class="kwc">Printf</span>.printf <span class="str">&quot;stretch tree of depth</span> <span class="ipl">%i</span><span class="str"></span><span class="esc">\t</span> <span class="str">check:</span> <span class="ipl">%i</span><span class="str"></span><span class="esc">\n</span><span class="str">&quot;</span> stretch_depth c

<span class="kwa">let</span> long_lived_tree = make <span class="num">0</span> max_depth

<span class="kwa">let rec</span> loop_depths d =
  <span class="kwa">for</span> i = <span class="num">0</span> <span class="kwa">to</span>  ((max_depth - d) / <span class="num">2</span> + <span class="num">1</span>) - <span class="num">1</span> <span class="kwa">do</span>
    <span class="kwa">let</span> d = d + i * <span class="num">2</span> <span class="kwa">in</span>
    <span class="kwa">let</span> niter = <span class="num">1</span> <span class="kwa">lsl</span> (max_depth - d + min_depth) <span class="kwa">in</span>
    <span class="kwa">let</span> c = <span class="kwb">ref</span> <span class="num">0</span> <span class="kwa">in</span>
      <span class="kwa">for</span> i = <span class="num">1</span> <span class="kwa">to</span> niter <span class="kwa">do</span> c := !c + check(make i d) + check(make (-i) d) <span class="kwa">done</span>;
      <span class="kwc">Printf</span>.printf <span class="str">&quot;</span><span class="ipl">%i</span><span class="str"></span><span class="esc">\t</span> <span class="str">trees of depth</span> <span class="ipl">%i</span><span class="str"></span><span class="esc">\t</span> <span class="str">check:</span> <span class="ipl">%i</span><span class="str"></span><span class="esc">\n</span><span class="str">&quot;</span> (<span class="num">2</span> * niter) d !c;
  <span class="kwa">done</span>

<span class="kwa">let</span> () =
  flush stdout;
  loop_depths min_depth;
  <span class="kwc">Printf</span>.printf <span class="str">&quot;long lived tree of depth</span> <span class="ipl">%i</span><span class="str"></span><span class="esc">\t</span> <span class="str">check:</span> <span class="ipl">%i</span><span class="str"></span><span class="esc">\n</span><span class="str">&quot;</span>
    max_depth (check long_lived_tree)

