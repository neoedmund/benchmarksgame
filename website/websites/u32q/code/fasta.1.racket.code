#lang racket/base

<span class="slc">;;; The Computer Language Benchmarks Game</span>
<span class="slc">;;; http://benchmarksgame.alioth.debian.org/</span>

<span class="slc">;;; Derived from the Chicken Scheme variant by Anthony Borla</span>
<span class="slc">;;; contributed by Matthew Flatt</span>


(<span class="kwa">require</span> racket/cmdline)

(<span class="kwa">define</span> +alu+
  (<span class="kwa">bytes-append</span>
   #<span class="str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span>
   #<span class="str">&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span>
   #<span class="str">&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span>
   #<span class="str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span>
   #<span class="str">&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span>
   #<span class="str">&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span>
   #<span class="str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span>))

(<span class="kwa">define</span> +iub+
  (<span class="kwa">list</span>
   '(#<span class="esc">\a</span> . <span class="num">0.27</span>) '(#\c . <span class="num">0.12</span>) '(#\g . <span class="num">0.12</span>) '(#<span class="esc">\t</span> . <span class="num">0.27</span>) '(#\B . <span class="num">0.02</span>)
   '(#\D . <span class="num">0.02</span>) '(#\H . <span class="num">0.02</span>) '(#\K . <span class="num">0.02</span>) '(#\M . <span class="num">0.02</span>) '(#\N . <span class="num">0.02</span>)
   '(#\R . <span class="num">0.02</span>) '(#\S . <span class="num">0.02</span>) '(#\V . <span class="num">0.02</span>) '(#\W . <span class="num">0.02</span>) '(#\Y . <span class="num">0.02</span>)))

(<span class="kwa">define</span> +homosapien+
  (<span class="kwa">list</span>
   '(#<span class="esc">\a</span> . <span class="num">0.3029549426680</span>) '(#\c . <span class="num">0.1979883004921</span>)
   '(#\g . <span class="num">0.1975473066391</span>) '(#<span class="esc">\t</span> . <span class="num">0.3015094502008</span>)))

<span class="slc">;; -------------</span>

(<span class="kwa">define</span> +line-size+ <span class="num">60</span>)

<span class="slc">;; -------------------------------</span>

(<span class="kwa">define</span> (<span class="kwa">make-random</span> seed)
  (<span class="kwa">let</span>* ((<span class="kwa">ia</span> <span class="num">3877</span>) (<span class="kwa">ic</span> <span class="num">29573</span>) (<span class="kwa">im</span> <span class="num">139968</span>) (<span class="kwa">last</span> seed))
    (<span class="kwa">lambda</span> (<span class="kwa">max</span>)
      (<span class="kwa">set</span>! last (<span class="kwa">modulo</span> (+ ic (* last ia)) im))
      (/ (* max last) im))))

<span class="slc">;; -------------------------------</span>

(<span class="kwa">define</span> (<span class="kwa">make-cumulative-table</span> frequency-table)
  (<span class="kwa">let</span> ([cumulative <span class="num">0.0</span>])
    (<span class="kwa">for</span>/list ([x frequency-table])
      (<span class="kwa">set</span>! cumulative (+ cumulative (<span class="kwa">cdr</span> x))) 
      (<span class="kwa">cons</span> (<span class="kwa">char-</span>&gt;integer (<span class="kwa">car</span> x)) cumulative))))

<span class="slc">;; -------------</span>

(<span class="kwa">define</span> random-next (<span class="kwa">make-random</span> <span class="num">42</span>))
(<span class="kwa">define</span> +segmarker+ <span class="str">&quot;&gt;&quot;</span>)

<span class="slc">;; -------------</span>

(<span class="kwa">define</span> (<span class="kwa">select-random</span> cumulative-table)
  (<span class="kwa">let</span> ((<span class="kwa">rvalue</span> (<span class="kwa">random-next</span> <span class="num">1.0</span>)))
    (<span class="kwa">let</span> select-over-threshold ([table cumulative-table])
      (<span class="kwa">if</span> (&lt;= rvalue (<span class="kwa">cdar</span> table))
          (<span class="kwa">caar</span> table)
          (<span class="kwa">select-over-threshold</span> (<span class="kwa">cdr</span> table))))))

<span class="slc">;; -------------</span>

(<span class="kwa">define</span> (<span class="kwa">repeat-fasta</span> id desc n_ sequence line-length)
  (<span class="kwa">let</span> ((<span class="kwa">seqlen</span> (<span class="kwa">bytes-length</span> sequence))
        (<span class="kwa">out</span> (<span class="kwa">current-output-port</span>)))
    (<span class="kwa">display</span> (<span class="kwa">string-append</span> +segmarker+ id <span class="str">&quot; &quot;</span> desc <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span>) out)
    (<span class="kwa">let</span> loop-o ((<span class="kwa">n</span> n_) (<span class="kwa">k</span> <span class="num">0</span>))
      (<span class="kwa">unless</span> (&lt;= n <span class="num">0</span>) 
        (<span class="kwa">let</span> ((<span class="kwa">m</span> (<span class="kwa">min</span> n line-length)))
          (<span class="kwa">let</span> loop-i ((<span class="kwa">i</span> <span class="num">0</span>) (<span class="kwa">k</span> k))
            (<span class="kwa">if</span> (&gt;= i m) 
                (<span class="kwa">begin</span>
                  (<span class="kwa">newline</span> out)
                  (<span class="kwa">loop-o</span> (<span class="kwa">-</span> n line-length) k))
                (<span class="kwa">let</span> ([k (<span class="kwa">if</span> (= k seqlen) <span class="num">0</span> k)])
                  (<span class="kwa">write-byte</span> (<span class="kwa">bytes-ref</span> sequence k) out)
                  (<span class="kwa">loop-i</span> (<span class="kwa">add1</span> i) (<span class="kwa">add1</span> k))))))))))

<span class="slc">;; -------------</span>

(<span class="kwa">define</span> (<span class="kwa">random-fasta</span> id desc n_ cumulative-table line-length)
  (<span class="kwa">let</span> ((<span class="kwa">out</span> (<span class="kwa">current-output-port</span>)))
    (<span class="kwa">display</span> (<span class="kwa">string-append</span> +segmarker+ id <span class="str">&quot; &quot;</span> desc <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span>) out)
    (<span class="kwa">let</span> loop-o ((<span class="kwa">n</span> n_))
      (<span class="kwa">unless</span> (&lt;= n <span class="num">0</span>)
        (<span class="kwa">for</span> ([i (<span class="kwa">in-range</span> (<span class="kwa">min</span> n line-length))])
          (<span class="kwa">write-byte</span> (<span class="kwa">select-random</span> cumulative-table) out))
        (<span class="kwa">newline</span> out)
        (<span class="kwa">loop-o</span> (<span class="kwa">-</span> n line-length))))))

<span class="slc">;; -------------------------------</span>
  
(<span class="kwa">let</span> ((<span class="kwa">n</span> (<span class="kwa">command-line</span> #:args (<span class="kwa">n</span>) (<span class="kwa">string-</span>&gt;number n))))
    
  (<span class="kwa">repeat-fasta</span> <span class="str">&quot;ONE&quot;</span> <span class="str">&quot;Homo sapiens alu&quot;</span> (* n <span class="num">2</span>) +alu+ +line-size+)
  
  (<span class="kwa">random-fasta</span> <span class="str">&quot;TWO&quot;</span> <span class="str">&quot;IUB ambiguity codes&quot;</span> (* n <span class="num">3</span>)
                (<span class="kwa">make-cumulative-table</span> +iub+) +line-size+)
  
  (<span class="kwa">random-fasta</span> <span class="str">&quot;THREE&quot;</span> <span class="str">&quot;Homo sapiens frequency&quot;</span> (* n <span class="num">5</span>)
                (<span class="kwa">make-cumulative-table</span> +homosapien+) +line-size+))
