<span class="com">/* The Computer Language Benchmarks Game</span>
<span class="com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   Adapted by Pascal Fresnay from Java version that was:</span>
<span class="com">      contributed by Michael Barker</span>
<span class="com">      based on a contribution by Luzius Meisser</span>
<span class="com">*/</span>

<span class="com">/**</span>
<span class="com"> * This implementation uses standard C# threading (native threads).</span>
<span class="com"> *</span>
<span class="com"> * This implementation simply adds the new functionality to the orginal</span>
<span class="com"> * implementation by Luzius Meisser from old chameneos task.  The interesting</span>
<span class="com"> * part of this implementation, is that while a creature is waiting it does not</span>
<span class="com"> * block its thread, rather it spins in a loop using a Thread.Sleep(0).</span>
<span class="com"> */</span>


<span class="kwa">using</span> System;
<span class="kwa">using</span> System.Threading;
<span class="kwa">using</span> System.Text;
<span class="kwa">public class</span> chameneosredux {

   <span class="kwa">public</span> <span class="kwb">enum</span> Colour {
      blue,
      red,
      yellow
   }

   <span class="kwa">private static</span> Colour <span class="kwd">doCompliment</span>(Colour c1, Colour c2) {
      <span class="kwa">switch</span> (c1) {
      <span class="kwa">case</span> Colour.blue:
         <span class="kwa">switch</span> (c2) {
         <span class="kwa">case</span> Colour.blue:
            <span class="kwa">return</span> Colour.blue;
         <span class="kwa">case</span> Colour.red:
            <span class="kwa">return</span> Colour.yellow;
         <span class="kwa">case</span> Colour.yellow:
            <span class="kwa">return</span> Colour.red;
         <span class="kwa">default</span>: <span class="kwa">break</span>;
         }
         <span class="kwa">break</span>;
      <span class="kwa">case</span> Colour.red:
         <span class="kwa">switch</span> (c2) {
         <span class="kwa">case</span> Colour.blue:
            <span class="kwa">return</span> Colour.yellow;
         <span class="kwa">case</span> Colour.red:
            <span class="kwa">return</span> Colour.red;
         <span class="kwa">case</span> Colour.yellow:
            <span class="kwa">return</span> Colour.blue;
         <span class="kwa">default</span>: <span class="kwa">break</span>;
         }
         <span class="kwa">break</span>;
      <span class="kwa">case</span> Colour.yellow:
         <span class="kwa">switch</span> (c2) {
         <span class="kwa">case</span> Colour.blue:
            <span class="kwa">return</span> Colour.red;
         <span class="kwa">case</span> Colour.red:
            <span class="kwa">return</span> Colour.blue;
         <span class="kwa">case</span> Colour.yellow:
            <span class="kwa">return</span> Colour.yellow;
         <span class="kwa">default</span>: <span class="kwa">break</span>;
         }
         <span class="kwa">break</span>;
      <span class="kwa">default</span>: <span class="kwa">break</span>;
      }
      <span class="kwa">throw new</span> <span class="kwd">Exception</span>();
   }

   <span class="kwa">sealed class</span> MeetingPlace {

      <span class="kwa">private</span> <span class="kwb">int</span> meetingsLeft;

      <span class="kwa">public</span> <span class="kwd">MeetingPlace</span>(<span class="kwb">int</span> meetings) {
         <span class="kwa">this</span>.meetingsLeft = meetings;
      }

      <span class="kwa">private</span> Colour? firstColour = <span class="kwa">null</span>;
      <span class="kwa">private</span> <span class="kwb">int</span> firstId = <span class="num">0</span>;
      Future current;

      <span class="kwa">public</span> Pair <span class="kwd">meet</span>(<span class="kwb">int</span> id, Colour c){
         Future newPair;
         <span class="kwd">lock</span> (<span class="kwa">this</span>) {
            <span class="kwa">if</span> (meetingsLeft == <span class="num">0</span>) {
               <span class="kwa">throw new</span> <span class="kwd">Exception</span>(<span class="str">&quot;Finished&quot;</span>);
            } <span class="kwa">else</span> {
               <span class="kwa">if</span> (firstColour == <span class="kwa">null</span>) {
                  firstColour = c;
                  firstId = id;
                  current = <span class="kwa">new</span> <span class="kwd">Future</span>();
               } <span class="kwa">else</span> {
                  Colour newColour = <span class="kwd">doCompliment</span>(c, firstColour.Value);
                  current.Item = <span class="kwa">new</span> <span class="kwd">Pair</span>(id == firstId, newColour);
                  firstColour = <span class="kwa">null</span>;
                  meetingsLeft--;
               }
               newPair = current;
            }
         }
         <span class="kwa">return</span> newPair.Item;
      }
   }

   <span class="kwa">public sealed class</span> Future {

      <span class="kwa">private</span> Pair? t;
      
      <span class="kwa">public</span> Pair Item
      {
         <span class="kwa">get</span>
         {
            <span class="kwa">while</span> (t == <span class="kwa">null</span>)
            {
               Thread.<span class="kwd">Sleep</span>(<span class="num">0</span>);
            }
            <span class="kwa">return</span> t.Value;
         }
         <span class="slc">// need synchronization ?</span>
         <span class="kwa">set</span>
         {
            t = <span class="kwa">value</span>;
         }
      }
   }

   <span class="kwa">sealed class</span> Creature{

      <span class="kwa">private readonly</span> MeetingPlace place;
      <span class="kwa">private</span> <span class="kwb">int</span> count = <span class="num">0</span>;
      <span class="kwa">private</span> <span class="kwb">int</span> sameCount = <span class="num">0</span>;
      <span class="kwa">private</span> Colour colour;
      <span class="kwa">private</span> <span class="kwb">int</span> id;

      <span class="kwa">public</span> <span class="kwd">Creature</span>(MeetingPlace place, Colour colour) {
         <span class="kwa">this</span>.place = place;
         <span class="kwa">this</span>.id = <span class="kwa">this</span>.<span class="kwd">GetHashCode</span>();
         <span class="kwa">this</span>.colour = colour;
      }

      <span class="kwa">public</span> <span class="kwb">void</span> <span class="kwd">run</span>() {
         <span class="kwa">try</span> {

            <span class="kwa">while</span> (<span class="kwa">true</span>) {
               Pair p = place.<span class="kwd">meet</span>(id, colour);
               colour = p.colour;
               <span class="kwa">if</span> (p.sameId) {
                  sameCount++;
               }
               count++;
            }

         } <span class="kwa">catch</span> (Exception) {}
      }

      <span class="kwa">public</span> <span class="kwb">int</span> Count {
         <span class="kwa">get</span>
         {
            <span class="kwa">return</span> count;
         }
      }

      <span class="kwa">public override</span> String <span class="kwd">ToString</span>() {
         <span class="kwa">return</span> count.<span class="kwd">ToString</span>() + <span class="kwd">getNumber</span>(sameCount);
      }
   }

   <span class="kwa">private static</span> <span class="kwb">void</span> <span class="kwd">run</span>(<span class="kwb">int</span> n, params Colour[] colours) {
      MeetingPlace place = <span class="kwa">new</span> <span class="kwd">MeetingPlace</span>(n);
      Creature[] creatures = <span class="kwa">new</span> Creature[colours.Length];
      <span class="kwa">for</span> (<span class="kwb">int</span> i = <span class="num">0</span>; i &lt; colours.Length; i++) {
         Console.<span class="kwd">Write</span>(<span class="str">&quot; &quot;</span> + colours[i]);
         creatures[i] = <span class="kwa">new</span> <span class="kwd">Creature</span>(place, colours[i]);
      }
      Console.<span class="kwd">WriteLine</span>();
      Thread[] ts = <span class="kwa">new</span> Thread[colours.Length];
      <span class="kwa">for</span> (<span class="kwb">int</span> i = <span class="num">0</span>; i &lt; colours.Length; i++) {
         ts[i] = <span class="kwa">new</span> <span class="kwd">Thread</span>(creatures[i].run);
         ts[i].<span class="kwd">Start</span>();
      }

      <span class="kwa">foreach</span> (Thread t <span class="kwa">in</span> ts) {
            t.<span class="kwd">Join</span>();
      }

      <span class="kwb">int</span> total = <span class="num">0</span>;
      <span class="kwa">foreach</span> (Creature creature <span class="kwa">in</span> creatures) {
         Console.<span class="kwd">WriteLine</span>(creature);
         total += creature.Count;
      }
      Console.<span class="kwd">WriteLine</span>(<span class="kwd">getNumber</span>(total));
      Console.<span class="kwd">WriteLine</span>();
   }

   <span class="kwa">public static</span> <span class="kwb">void</span> <span class="kwd">Main</span>(String[] args) {

      <span class="kwb">int</span> n = <span class="num">600</span>;
      <span class="kwa">if</span>(args.Length &gt; <span class="num">0</span>)
         n = Int32.<span class="kwd">Parse</span>(args[<span class="num">0</span>]);

      <span class="kwd">printColours</span>();
      Console.<span class="kwd">WriteLine</span>();
      <span class="kwd">run</span>(n, Colour.blue, Colour.red, Colour.yellow);
      <span class="kwd">run</span>(n, Colour.blue, Colour.red, Colour.yellow, Colour.red, Colour.yellow,
            Colour.blue, Colour.red, Colour.yellow, Colour.red, Colour.blue);
   }

   <span class="kwa">public</span> <span class="kwb">struct</span> Pair {
      <span class="kwa">public readonly</span> <span class="kwb">bool</span> sameId;
      <span class="kwa">public readonly</span> Colour colour;

      <span class="kwa">public</span> <span class="kwd">Pair</span>(<span class="kwb">bool</span> sameId, Colour c) {
         <span class="kwa">this</span>.sameId = sameId;
         <span class="kwa">this</span>.colour = c;
      }
   }

   <span class="kwa">private static</span> String[] NUMBERS = {
      <span class="str">&quot;zero&quot;</span>, <span class="str">&quot;one&quot;</span>, <span class="str">&quot;two&quot;</span>, <span class="str">&quot;three&quot;</span>, <span class="str">&quot;four&quot;</span>, <span class="str">&quot;five&quot;</span>,
      <span class="str">&quot;six&quot;</span>, <span class="str">&quot;seven&quot;</span>, <span class="str">&quot;eight&quot;</span>, <span class="str">&quot;nine&quot;</span>
   };

   <span class="kwa">private static</span> String <span class="kwd">getNumber</span>(<span class="kwb">int</span> n) {
      StringBuilder sb = <span class="kwa">new</span> <span class="kwd">StringBuilder</span>();
      String nStr = n.<span class="kwd">ToString</span>();
      <span class="kwa">for</span> (<span class="kwb">int</span> i = <span class="num">0</span>; i &lt; nStr.Length; i++) {
         sb.<span class="kwd">Append</span>(<span class="str">&quot; &quot;</span>);
         sb.<span class="kwd">Append</span>(NUMBERS[(<span class="kwb">int</span>)Char.<span class="kwd">GetNumericValue</span>(nStr[i])]);
      }

      <span class="kwa">return</span> sb.<span class="kwd">ToString</span>();
   }

   <span class="kwa">private static</span> <span class="kwb">void</span> <span class="kwd">printColours</span>() {
      <span class="kwd">printColours</span>(Colour.blue, Colour.blue);
      <span class="kwd">printColours</span>(Colour.blue, Colour.red);
      <span class="kwd">printColours</span>(Colour.blue, Colour.yellow);
      <span class="kwd">printColours</span>(Colour.red, Colour.blue);
      <span class="kwd">printColours</span>(Colour.red, Colour.red);
      <span class="kwd">printColours</span>(Colour.red, Colour.yellow);
      <span class="kwd">printColours</span>(Colour.yellow, Colour.blue);
      <span class="kwd">printColours</span>(Colour.yellow, Colour.red);
      <span class="kwd">printColours</span>(Colour.yellow, Colour.yellow);
   }

   <span class="kwa">private static</span> <span class="kwb">void</span> <span class="kwd">printColours</span>(Colour c1, Colour c2) {
      Console.<span class="kwd">WriteLine</span>(c1 + <span class="str">&quot; + &quot;</span> + c2 + <span class="str">&quot; -&gt; &quot;</span> + <span class="kwd">doCompliment</span>(c1, c2));
   }


}

