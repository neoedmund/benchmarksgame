<span class="com">/* The Computer Language Benchmarks Game</span>
<span class="com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Isaac Gouy, transliterated from Rex Kerr's Scala program</span>
<span class="com">*/</span>

<span class="kwa">using</span> System;

<span class="kwa">class</span> FannkuchRedux
{
   <span class="kwa">public static</span> <span class="kwb">int</span> <span class="kwd">fannkuch</span>(<span class="kwb">int</span> n) {
      <span class="kwb">int</span>[] perm = <span class="kwa">new</span> <span class="kwb">int</span>[n], perm1 = <span class="kwa">new</span> <span class="kwb">int</span>[n], count = <span class="kwa">new</span> <span class="kwb">int</span>[n];
      <span class="kwa">for</span>(<span class="kwb">int</span> j=<span class="num">0</span>; j&lt;n; j++) perm1[j] = j;
      <span class="kwb">int</span> f = <span class="num">0</span>, i = <span class="num">0</span>, k = <span class="num">0</span>, r = <span class="num">0</span>, flips = <span class="num">0</span>, nperm = <span class="num">0</span>, checksum = <span class="num">0</span>;

      r = n;
      <span class="kwa">while</span> (r&gt;<span class="num">0</span>) {
         i = <span class="num">0</span>;
         <span class="kwa">while</span> (r != <span class="num">1</span>) { count[r-<span class="num">1</span>] = r; r -= <span class="num">1</span>; }
         <span class="kwa">while</span> (i &lt; n) { perm[i] = perm1[i]; i += <span class="num">1</span>; }
      
         <span class="slc">// Count flips and update max  and checksum</span>
         f = <span class="num">0</span>;
         k = perm[<span class="num">0</span>];
         <span class="kwa">while</span> (k != <span class="num">0</span>) {
           i = <span class="num">0</span>;
           <span class="kwa">while</span> (<span class="num">2</span>*i &lt; k) {
             var t = perm[i]; perm[i] = perm[k-i]; perm[k-i] = t;
             i += <span class="num">1</span>;
           }
           k = perm[<span class="num">0</span>];
           f += <span class="num">1</span>;
         }
         <span class="kwa">if</span> (f&gt;flips) flips = f;
         <span class="kwa">if</span> ((nperm&amp;<span class="num">0x1</span>)==<span class="num">0</span>) checksum += f;
         <span class="kwa">else</span> checksum -= f;
                      
         <span class="slc">// Use incremental change to generate another permutation</span>
         var go = <span class="kwa">true</span>;
         <span class="kwa">while</span> (go) {
            <span class="kwa">if</span> (r == n) {
               Console.<span class="kwd">WriteLine</span>(checksum);
               <span class="kwa">return</span> flips;
            }
            var p0 = perm1[<span class="num">0</span>];
            i = <span class="num">0</span>;
            <span class="kwa">while</span> (i &lt; r) {
               var j = i+<span class="num">1</span>;
               perm1[i] = perm1[j];
               i = j;
            }
            perm1[r] = p0;

            count[r] -= <span class="num">1</span>;
            <span class="kwa">if</span> (count[r] &gt; <span class="num">0</span>) go = <span class="kwa">false</span>;
            <span class="kwa">else</span> r += <span class="num">1</span>;
         }
         nperm += <span class="num">1</span>;
      }
      <span class="kwa">return</span> flips;
   }

   <span class="kwa">static</span> <span class="kwb">void</span> <span class="kwd">Main</span>(<span class="kwb">string</span>[] args){
      <span class="kwb">int</span> n = <span class="num">7</span>;
      <span class="kwa">if</span> (args.Length &gt; <span class="num">0</span>) n = Int32.<span class="kwd">Parse</span>(args[<span class="num">0</span>]);
      Console.<span class="kwd">WriteLine</span>(<span class="str">&quot;Pfannkuchen(</span><span class="ipl">{0}</span><span class="str">) =</span> <span class="ipl">{1}</span><span class="str">&quot;</span>, n, <span class="kwd">fannkuch</span>(n));
   }
}
