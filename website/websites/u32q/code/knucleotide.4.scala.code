<span class="com">/* The Computer Language Benchmarks Game</span>
<span class="com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="com"> * contributed by Rex Kerr</span>
<span class="com"> * (based partially on the single-threaded version by Isaac Gouy</span>
<span class="com"> * with fixes from Iulian Dragos and Meiko Rachimow)</span>
<span class="com"> */</span>

<span class="kwa">import</span> java.io._
<span class="kwa">import</span> scala.collection.mutable._
<span class="kwa">import</span> scala.actors._
<span class="kwa">import</span> Actor.loop

<span class="kwa">object</span> knucleotide {
  <span class="kwa">class</span> <span class="kwd">ShiftScan</span>(offset:Int, stride:Int) <span class="kwa">extends</span> Actor {
    <span class="kwa">val</span> bag = <span class="kwa">new</span> HashBag
    <span class="kwa">def</span> <span class="kwd">findFreq</span>(s:String, j:Int) = {
      <span class="kwa">val</span> n = s.length - j + <span class="num">1</span>
      <span class="kwa">var</span> i = offset
      <span class="kwa">while</span> (i &lt; n) {
        <span class="kwd">bag</span>(s.<span class="kwd">substring</span>(i,i+j)).inc
        i += j
      }
      bag
    }
    <span class="kwa">def</span> <span class="kwd">act</span>() { loop { react {
      <span class="kwa">case</span> seq : String =&gt;
        sender ! <span class="kwd">findFreq</span>(seq,stride)
        exit
    }}}
  }

  <span class="kwa">class</span> <span class="kwd">SizeScan</span>(length:Int, boss:Actor) <span class="kwa">extends</span> Actor {
    <span class="kwa">var</span> bags = List[HashBag]()
    <span class="kwa">val</span> workers = (<span class="num">0</span> until length).<span class="kwd">map</span>(<span class="kwa">new</span> <span class="kwd">ShiftScan</span>(_,length))
    <span class="kwa">def</span> <span class="kwd">act</span>() { loop { react {
      <span class="kwa">case</span> b : HashBag =&gt;
        bags = b :: bags
        <span class="kwa">if</span> (bags.length==workers.length) {
          boss ! (bags.head /: bags.tail)(_ ++ _)
          exit
        }
      <span class="kwa">case</span> seq : String =&gt;
        workers.<span class="kwd">foreach</span>(_.start ! seq)
    }}}
  }

  <span class="kwa">class</span> <span class="kwd">Scan</span>(work : String*) <span class="kwa">extends</span> Actor {
    <span class="kwa">val</span> lengths = work.<span class="kwd">map</span>(_.length)
    <span class="kwa">val</span> freqs = work.<span class="kwd">filter</span>(<span class="kwd">_</span>(<span class="num">0</span>)==<span class="str">'*'</span>).<span class="kwd">map</span>(_.length)
    <span class="kwa">val</span> counts = work.<span class="kwd">filter</span>(<span class="kwd">_</span>(<span class="num">0</span>)!=<span class="str">'*'</span>)
    <span class="kwa">val</span> scans = <span class="kwa">new</span> HashMap[Int,HashBag]()
    <span class="kwa">var</span> seq_len = <span class="num">0</span>
     
    <span class="kwa">def</span> <span class="kwd">writeFreqs</span>(j : Int) {
      <span class="kwa">val</span> n  = <span class="num">1.0</span> + seq_len - j
      <span class="kwa">val</span> sorted = <span class="kwd">scans</span>(j).elements.toList.<span class="kwd">sort</span>(
        (a,b) =&gt; (a.value&gt;b.value) || (a.value==b.value &amp;&amp; a.key &gt; b.key)
      )
      sorted.<span class="kwd">foreach</span>(a =&gt; <span class="kwd">printf</span>(a.key + <span class="str">&quot; %.3f</span><span class="esc">\n</span><span class="str">&quot;</span>, a.value * <span class="num">100.0</span> / n))
      println
    }
     
    <span class="kwa">def</span> <span class="kwd">act</span>() { loop { react {
      <span class="kwa">case</span> seq : String =&gt;
        seq_len = seq.length
        lengths.<span class="kwd">foreach</span>(l =&gt; <span class="kwa">new</span> <span class="kwd">SizeScan</span>(l,<span class="kwa">this</span>).<span class="kwd">start</span>() ! seq)
      <span class="kwa">case</span> h : HashBag =&gt;
        <span class="kwa">val</span> n = h.elements.next.key.length
        <span class="kwd">scans</span>(n) = h
        <span class="kwa">if</span> (lengths.<span class="kwd">forall</span>(scans contains _)) {
          freqs.<span class="kwd">foreach</span>(<span class="kwd">writeFreqs</span>(_))
          counts.<span class="kwd">foreach</span>(s =&gt; <span class="kwd">println</span>(<span class="kwd">scans</span>(s.length)(s).value + <span class="str">&quot;</span><span class="esc">\t</span><span class="str">&quot;</span> + s))
          exit
        }
    }}}
  }

  <span class="kwa">def</span> <span class="kwd">readSequence</span>(id: String, r: BufferedReader) = {
    <span class="kwa">val</span> b = <span class="kwa">new</span> java.lang.<span class="kwd">StringBuilder</span>()
     
    <span class="kwa">var</span> line = r.readLine
    <span class="kwa">while</span> (line != null) {
      <span class="kwa">if</span> (<span class="kwd">line</span>(<span class="num">0</span>)==<span class="str">'&gt;'</span> &amp;&amp; line.<span class="kwd">startsWith</span>(id)) line = null
      <span class="kwa">else</span> line = r.readLine
    }
     
    line = r.readLine
    <span class="kwa">while</span> (line != null) {
      <span class="kwa">if</span> (<span class="kwd">line</span>(<span class="num">0</span>)==<span class="str">'&gt;'</span>) line = null
      <span class="kwa">else</span> {
        b.<span class="kwd">append</span>(line.toUpperCase)
        line = r.readLine
      }
    }
    b.toString
  }
  
  <span class="kwa">def</span> <span class="kwd">main</span>(args: Array[String]) {
    <span class="kwa">val</span> r = <span class="kwa">new</span> <span class="kwd">BufferedReader</span>(<span class="kwa">new</span> <span class="kwd">InputStreamReader</span>(System.<span class="kwa">in</span>))
    <span class="kwa">val</span> seq = <span class="kwd">readSequence</span>(<span class="str">&quot;&gt;THREE&quot;</span>,r)
    r.close
      
    <span class="kwa">val</span> scanner = <span class="kwa">new</span> <span class="kwd">Scan</span>(<span class="str">&quot;*&quot;</span>,<span class="str">&quot;**&quot;</span>,<span class="str">&quot;GGT&quot;</span>,<span class="str">&quot;GGTA&quot;</span>,<span class="str">&quot;GGTATT&quot;</span>,
                           <span class="str">&quot;GGTATTTTAATT&quot;</span>,<span class="str">&quot;GGTATTTTAATTTATAGT&quot;</span>)
    scanner.<span class="kwd">start</span>() ! seq
  }
}

<span class="kwa">class</span> HashBag <span class="kwa">extends</span> HashTable[String] {
  <span class="kwa">class</span> <span class="kwd">Counter</span>(<span class="kwa">val</span> key: String, <span class="kwa">var</span> value: Int)
        <span class="kwa">extends</span> HashEntry[String,Counter]
  {
    <span class="kwa">def</span> inc { value += <span class="num">1</span> }
    <span class="kwa">def</span> +=(i:Int) { value += i }
  }

  <span class="kwa">protected type</span> Entry = Counter
  <span class="kwa">protected def</span> <span class="kwd">entryKey</span>(e: Entry) = e.key
  <span class="kwa">def</span> elements = entries
   
  <span class="kwa">def</span> <span class="kwd">apply</span>(key:String): Counter = {
    <span class="kwa">var</span> bucket = <span class="kwd">table</span>(<span class="kwd">index</span>(<span class="kwd">elemHashCode</span>(key))).asInstanceOf[Entry]
    <span class="kwa">while</span> (bucket ne null) {
      <span class="kwa">if</span> (<span class="kwd">elemEquals</span>(<span class="kwd">entryKey</span>(bucket),key)) <span class="kwa">return</span> bucket
      bucket = bucket.next
    }
    bucket = <span class="kwa">new</span> <span class="kwd">Entry</span>(key,<span class="num">0</span>)
    <span class="kwd">addEntry</span>(bucket)
    bucket
  }
     
  <span class="kwa">def</span> ++(h : HashBag) : HashBag = {
    h.elements.<span class="kwd">foreach</span>(kv =&gt; <span class="kwa">this</span>(kv.key) += kv.value)
    <span class="kwa">this</span>
  }
}
