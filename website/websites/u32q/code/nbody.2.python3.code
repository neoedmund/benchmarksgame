<span class="slc"># The Computer Language Benchmarks Game</span>
<span class="slc"># http://benchmarksgame.alioth.debian.org/</span>
<span class="slc">#</span>
<span class="slc"># originally by Kevin Carson</span>
<span class="slc"># modified by Tupteq, Fredrik Johansson, and Daniel Nanz</span>
<span class="slc"># modified by Maciej Fijalkowski</span>
<span class="slc"># 2to3</span>
<span class="slc"># modified by Andriy Misyura</span>

<span class="kwa">import</span> sys
<span class="kwa">from</span> math <span class="kwa">import</span> sqrt

<span class="kwa">def</span> <span class="kwd">combinations</span>(l):
    result = []
    <span class="kwa">for</span> x <span class="kwa">in</span> <span class="kwb">range</span>(<span class="kwb">len</span>(l) - <span class="num">1</span>):
        ls = l[x+<span class="num">1</span>:]
        <span class="kwa">for</span> y <span class="kwa">in</span> ls:
            result.<span class="kwd">append</span>((l[x][<span class="num">0</span>],l[x][<span class="num">1</span>],l[x][<span class="num">2</span>],y[<span class="num">0</span>],y[<span class="num">1</span>],y[<span class="num">2</span>]))
    <span class="kwa">return</span> result

PI = <span class="num">3.14159265358979323</span>
SOLAR_MASS = <span class="num">4</span> * PI * PI
DAYS_PER_YEAR = <span class="num">365.24</span>

BODIES = {
    <span class="str">'sun'</span>: ([<span class="num">0.0</span>, <span class="num">0.0</span>, <span class="num">0.0</span>], [<span class="num">0.0</span>, <span class="num">0.0</span>, <span class="num">0.0</span>], SOLAR_MASS),

    <span class="str">'jupiter'</span>: ([<span class="num">4.84143144246472090e+00</span>,
                 -<span class="num">1.16032004402742839e+00</span>,
                 -<span class="num">1.03622044471123109e-01</span>],
                [<span class="num">1.66007664274403694e-03</span> * DAYS_PER_YEAR,
                 <span class="num">7.69901118419740425e-03</span> * DAYS_PER_YEAR,
                 -<span class="num">6.90460016972063023e-05</span> * DAYS_PER_YEAR],
                <span class="num">9.54791938424326609e-04</span> * SOLAR_MASS),

    <span class="str">'saturn'</span>: ([<span class="num">8.34336671824457987e+00</span>,
                <span class="num">4.12479856412430479e+00</span>,
                -<span class="num">4.03523417114321381e-01</span>],
               [-<span class="num">2.76742510726862411e-03</span> * DAYS_PER_YEAR,
                <span class="num">4.99852801234917238e-03</span> * DAYS_PER_YEAR,
                <span class="num">2.30417297573763929e-05</span> * DAYS_PER_YEAR],
               <span class="num">2.85885980666130812e-04</span> * SOLAR_MASS),

    <span class="str">'uranus'</span>: ([<span class="num">1.28943695621391310e+01</span>,
                -<span class="num">1.51111514016986312e+01</span>,
                -<span class="num">2.23307578892655734e-01</span>],
               [<span class="num">2.96460137564761618e-03</span> * DAYS_PER_YEAR,
                <span class="num">2.37847173959480950e-03</span> * DAYS_PER_YEAR,
                -<span class="num">2.96589568540237556e-05</span> * DAYS_PER_YEAR],
               <span class="num">4.36624404335156298e-05</span> * SOLAR_MASS),

    <span class="str">'neptune'</span>: ([<span class="num">1.53796971148509165e+01</span>,
                 -<span class="num">2.59193146099879641e+01</span>,
                 <span class="num">1.79258772950371181e-01</span>],
                [<span class="num">2.68067772490389322e-03</span> * DAYS_PER_YEAR,
                 <span class="num">1.62824170038242295e-03</span> * DAYS_PER_YEAR,
                 -<span class="num">9.51592254519715870e-05</span> * DAYS_PER_YEAR],
                <span class="num">5.15138902046611451e-05</span> * SOLAR_MASS) }

SYSTEM = <span class="kwb">tuple</span>(BODIES.<span class="kwd">values</span>())
PAIRS = <span class="kwb">tuple</span>(<span class="kwd">combinations</span>(SYSTEM))

<span class="kwa">def</span> <span class="kwd">advance</span>(dt, n, bodies=SYSTEM, pairs=PAIRS):
    <span class="kwa">for</span> i <span class="kwa">in</span> <span class="kwb">range</span>(n):
        <span class="kwa">for</span> ([x1, y1, z1], v1, m1, [x2, y2, z2], v2, m2) <span class="kwa">in</span> pairs:
            dx = x1 - x2
            dy = y1 - y2
            dz = z1 - z2
            dist = <span class="kwd">sqrt</span>(dx * dx + dy * dy + dz * dz);
            mag = dt / (dist*dist*dist)
            b1m = m1 * mag
            b2m = m2 * mag
            v1[<span class="num">0</span>] -= dx * b2m
            v1[<span class="num">1</span>] -= dy * b2m
            v1[<span class="num">2</span>] -= dz * b2m
            v2[<span class="num">2</span>] += dz * b1m
            v2[<span class="num">1</span>] += dy * b1m
            v2[<span class="num">0</span>] += dx * b1m
        <span class="kwa">for</span> (r, [vx, vy, vz], m) <span class="kwa">in</span> bodies:
            r[<span class="num">0</span>] += dt * vx
            r[<span class="num">1</span>] += dt * vy
            r[<span class="num">2</span>] += dt * vz

<span class="kwa">def</span> <span class="kwd">report_energy</span>(bodies=SYSTEM, pairs=PAIRS, e=<span class="num">0.0</span>):
    <span class="kwa">for</span> ((x1, y1, z1), v1, m1, (x2, y2, z2), v2, m2) <span class="kwa">in</span> pairs:
        dx = x1 - x2
        dy = y1 - y2
        dz = z1 - z2
        e -= (m1 * m2) / ((dx * dx + dy * dy + dz * dz) ** <span class="num">0.5</span>)
    <span class="kwa">for</span> (r, [vx, vy, vz], m) <span class="kwa">in</span> bodies:
        e += m * (vx * vx + vy * vy + vz * vz) / <span class="num">2</span>.
    <span class="kwa">print</span>(<span class="str">&quot;%.9f&quot;</span> % e)

<span class="kwa">def</span> <span class="kwd">offset_momentum</span>(ref, bodies=SYSTEM, px=<span class="num">0.0</span>, py=<span class="num">0.0</span>, pz=<span class="num">0.0</span>):
    <span class="kwa">for</span> (r, [vx, vy, vz], m) <span class="kwa">in</span> bodies:
        px -= vx * m
        py -= vy * m
        pz -= vz * m
    (r, v, m) = ref
    v[<span class="num">0</span>] = px / m
    v[<span class="num">1</span>] = py / m
    v[<span class="num">2</span>] = pz / m

<span class="kwa">def</span> <span class="kwd">main</span>(n, ref=<span class="str">'sun'</span>):
    <span class="kwd">offset_momentum</span>(BODIES[ref])
    <span class="kwd">report_energy</span>()
    <span class="kwd">advance</span>(<span class="num">0.01</span>, n)
    <span class="kwd">report_energy</span>()

<span class="kwa">if</span> __name__ == <span class="str">'__main__'</span>:
    <span class="kwd">main</span>(<span class="kwb">int</span>(sys.argv[<span class="num">1</span>]))
