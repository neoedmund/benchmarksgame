<span class="slc">;;   The Computer Language Benchmarks Game</span>
<span class="slc">;;   http://benchmarksgame.alioth.debian.org/</span>
<span class="slc">;;;</span>
<span class="slc">;;; By Jon Smith</span>
<span class="slc">;;; Tranlated from OCaml implementation by ?, who translated it from</span>
<span class="slc">;;; the Scala implementation by Otto Bommer.</span>
<span class="slc">;;; </span>
<span class="slc">;;; This is a single core implementation.</span>
<span class="slc">;;; I am sure that this program can be improved upon quite a lot.</span>
<span class="slc">;;; Most likely it will involve knowing how sbcl does its optimizations.</span>
<span class="slc">;;; As you can see, I simply used fixnums everywhere. There may be a better choice.</span>
<span class="slc">;;;</span>
<span class="slc">;;; To compile</span>
<span class="slc">;;; sbcl --load fannkuch.lisp --eval &quot;(save-lisp-and-die \&quot;fannkuch.core\&quot; :purify t :toplevel (lambda () (main) (quit)))&quot;</span>
<span class="slc">;;; To run</span>
<span class="slc">;;; sbcl --noinform --core fannkuch.core %A</span>

(<span class="kwa">declaim</span> (<span class="kwa">optimize</span> (<span class="kwa">speed</span> <span class="num">3</span>) (<span class="kwa">safety</span> <span class="num">0</span>) (<span class="kwa">space</span> <span class="num">1</span>) (<span class="kwa">debug</span> <span class="num">0</span>)))

(<span class="kwa">defun</span> fannkuch (<span class="kwa">n</span>)
  (<span class="kwa">declare</span> (<span class="kwa">type</span> fixnum n))
  (<span class="kwa">let</span> ((<span class="kwa">csum</span> <span class="num">0</span>)
	(<span class="kwa">fmax</span> <span class="num">0</span>))
    (<span class="kwa">declare</span> (<span class="kwa">type</span> fixnum fmax))
    (<span class="kwa">let</span> ((<span class="kwa">perm</span> (<span class="kwa">make-array</span> n :element-type 'fixnum))
	  (<span class="kwa">copy</span> (<span class="kwa">make-array</span> n :element-type 'fixnum))
	  (<span class="kwa">num</span> <span class="num">0</span>)) 

      (<span class="kwa">loop</span> for i from <span class="num">0</span> to (<span class="kwa">-</span> n <span class="num">1</span>) do (<span class="kwa">setf</span> (<span class="kwa">aref</span> perm i) i))

      (<span class="kwa">labels</span> ((<span class="kwa">do-iter</span> (<span class="kwa">ht</span>)
		 
		 (<span class="kwa">declare</span> (<span class="kwa">type</span> fixnum ht))
		 
		 (<span class="kwa">if</span> (= ht <span class="num">1</span>)
		     (<span class="kwa">progn</span>
		       (<span class="kwa">loop</span> for i from <span class="num">0</span> to (<span class="kwa">-</span> n <span class="num">1</span>) do (<span class="kwa">setf</span> (<span class="kwa">aref</span> copy i) (<span class="kwa">aref</span> perm i)))
		       (<span class="kwa">let</span> ((<span class="kwa">c</span> <span class="num">0</span>))
			 (<span class="kwa">declare</span> (<span class="kwa">type</span> fixnum c))
			 (<span class="kwa">let</span> ((<span class="kwa">z</span> (<span class="kwa">aref</span> copy <span class="num">0</span>)))
			   (<span class="kwa">loop</span> until (= z <span class="num">0</span>) do
				(<span class="kwa">progn</span>
				  (<span class="kwa">loop</span> for i from <span class="num">0</span> to (<span class="kwa">ash</span> z -<span class="num">1</span>)
				     do (<span class="kwa">let</span> ((<span class="kwa">temp</span> (<span class="kwa">aref</span> copy i))
					      (<span class="kwa">k</span> (<span class="kwa">-</span> z i)))
					  (<span class="kwa">setf</span> (<span class="kwa">aref</span> copy i) (<span class="kwa">aref</span> copy k))
					  (<span class="kwa">setf</span> (<span class="kwa">aref</span> copy k) temp)))
				  (<span class="kwa">incf</span> c)
				  (<span class="kwa">setf</span> z (<span class="kwa">aref</span> copy <span class="num">0</span>)))))
			 (<span class="kwa">setf</span> csum (+ csum  (<span class="kwa">if</span> (<span class="kwa">evenp</span> num) c (<span class="kwa">-</span> c))))
			 (<span class="kwa">when</span> (&gt; c fmax)
			   (<span class="kwa">setf</span> fmax c)))
		       (<span class="kwa">incf</span> num))
		     (<span class="kwa">loop</span> for i from <span class="num">1</span> to ht do
			  (<span class="kwa">progn</span> (<span class="kwa">do-iter</span> (<span class="kwa">-</span> ht <span class="num">1</span>))
				 (<span class="kwa">let</span> ((<span class="kwa">temp</span> (<span class="kwa">aref</span> perm <span class="num">0</span>))
				       (<span class="kwa">m</span> (<span class="kwa">-</span> ht <span class="num">1</span>)))
				   (<span class="kwa">loop</span> for i from <span class="num">1</span> to m do
					(<span class="kwa">setf</span> (<span class="kwa">aref</span> perm (<span class="kwa">-</span> i <span class="num">1</span>)) (<span class="kwa">aref</span> perm i)))
				   (<span class="kwa">setf</span> (<span class="kwa">aref</span> perm m) temp)))))))

	(<span class="kwa">do-iter</span> n)))
    (<span class="kwa">format</span> t <span class="str">&quot;~s~%Pfannkuchen(~s) = ~s~%&quot;</span> csum n fmax)))


(<span class="kwa">defun</span> main ()  
  (<span class="kwa">let</span>* ((<span class="kwa">args</span> (<span class="kwa">cdr</span> sb-ext:*posix-argv*))
         (<span class="kwa">n</span> (<span class="kwa">parse-integer</span> (<span class="kwa">car</span> args))))
    (<span class="kwa">fannkuch</span> n)))
