<span class="slc">-- The Computer Language Benchmarks Game</span>
<span class="slc">-- http://benchmarksgame.alioth.debian.org/</span>
<span class="slc">--</span>
<span class="slc">-- Contributed by Jim Rogers</span>
<span class="slc">-- Modified by Jonathan Parker (Oct 2009)</span>
<span class="slc">-- Updated by Jonathan Parker and Georg Bauhaus (May 2012)</span>

<span class="kwa">with</span> Ada.Text_IO;
<span class="kwa">with</span> Ada.Numerics.Generic_Elementary_Functions;
<span class="kwa">with</span> Ada.Command_Line; <span class="kwa">use</span> Ada.Command_Line;
<span class="kwa">with</span> Spectral_Utils, Spectral_Utils.Dist;
<span class="kwa">with</span> Division;

<span class="kwa">procedure</span> SpectralNorm <span class="kwa">is</span>

   No_of_Cores_to_Use : <span class="kwa">constant</span> := <span class="num">4</span>;

   <span class="kwa">subtype</span> Real <span class="kwa">is</span> Division.SSE_Real;
   <span class="kwa">use type</span> Real;

   <span class="kwa">package</span> Real_IO <span class="kwa">is new</span> Ada.Text_IO.Float_IO (Real);
   <span class="kwa">package</span> Real_Funcs <span class="kwa">is new</span> Ada.Numerics.Generic_Elementary_Functions (Real);
   <span class="kwa">use</span> Real_Funcs;

   N : <span class="kwb">Positive</span> := <span class="num">100</span>;
   Vbv, Vv : Real := <span class="num">0.0</span>;
<span class="kwa">begin</span>
   <span class="kwa">if</span> Argument_Count = <span class="num">1</span> <span class="kwa">then</span>
      N := <span class="kwb">Positive</span><span class="kwd">'Value</span> (Argument(<span class="num">1</span>));
   <span class="kwa">else</span>
      <span class="kwa">raise</span> Program_Error;
   <span class="kwa">end if</span>;

   <span class="kwa">declare</span>
      <span class="kwa">package</span> Spectrum <span class="kwa">is new</span> Spectral_Utils
        (Matrix_Order =&gt; N);
      <span class="kwa">package</span> Calc <span class="kwa">is new</span> Spectrum.Dist
        (Number_Of_Tasks =&gt; No_of_Cores_to_Use);
      <span class="kwa">use</span> Spectrum, Calc;
      Calculator : <span class="kwa">constant</span> Matrix_Computation<span class="kwd">'Class</span> := Make_Calculator;
      U : Matrix := (<span class="kwa">others</span> =&gt; <span class="num">1.0</span>);
      V : Matrix := (<span class="kwa">others</span> =&gt; <span class="num">0.0</span>);
   <span class="kwa">begin</span>
      <span class="kwa">for</span> I <span class="kwa">in</span> <span class="num">1</span> .. <span class="num">10</span> <span class="kwa">loop</span>
         Eval_Ata_Times_U (Calculator, U, V);
         Eval_Ata_Times_U (Calculator, V, U);
      <span class="kwa">end loop</span>;
      <span class="kwa">for</span> I <span class="kwa">in</span> V<span class="kwd">'Range</span> <span class="kwa">loop</span>
         Vbv := Vbv + U(I) * V(I);
         Vv  := Vv  + V(I) * V(I);
      <span class="kwa">end loop</span>;
   <span class="kwa">end</span>;
   Real_IO.Put(Item =&gt; Sqrt(Vbv/Vv), Fore =&gt; <span class="num">1</span>, Aft =&gt; <span class="num">9</span>, Exp =&gt; <span class="num">0</span>);
   Ada.Text_Io.New_Line;
<span class="kwa">end</span> SpectralNorm;

<span class="kwa">with</span> System;
<span class="kwa">with</span> Division;

<span class="kwa">generic</span>
   Matrix_Order : <span class="kwb">Positive</span>;
<span class="kwa">package</span> Spectral_Utils <span class="kwa">is</span>

   <span class="kwa">subtype</span> Real <span class="kwa">is</span> Division.SSE_Real;

   <span class="kwa">type</span> Matrix_Index <span class="kwa">is mod</span> <span class="num">2</span>**System.Word_Size;

   Matrix_Size : <span class="kwa">constant</span> Matrix_Index := Matrix_Index (Matrix_Order);

   <span class="kwa">type</span> Matrix <span class="kwa">is array</span>(Matrix_Index <span class="kwa">range</span> <span class="num">0</span> .. Matrix_Size-<span class="num">1</span>) <span class="kwa">of</span> Real;
   <span class="slc">-- Matrix is m_ij = 1 / ((i+j+1)*(i+j))/2 + i + 1); indices start at 0.</span>

   <span class="kwa">type</span> Matrix_Computation <span class="kwa">is abstract tagged limited null record</span>;

   <span class="kwa">function</span> Make_Calculator <span class="kwa">return</span> Matrix_Computation<span class="kwd">'Class</span>;
   <span class="slc">--  adaptive computations</span>

   <span class="slc">--  Get   AU = A * U.   Calculate only AU(Start .. Finish).</span>

   <span class="kwa">procedure</span> Eval_A_Times
     (Iron          : <span class="kwa">in</span>     Matrix_Computation;
      U             : <span class="kwa">in</span>     Matrix;
      Start, Finish : <span class="kwa">in</span>     Matrix_Index;
      AU            :    <span class="kwa">out</span> Matrix) <span class="kwa">is abstract</span>;

   <span class="slc">--  Get   AU = A_transpose * U.   Calculate only AU(Start .. Finish).</span>

   <span class="kwa">procedure</span> Eval_At_Times
     (Iron          : <span class="kwa">in</span>     Matrix_Computation;
      U             : <span class="kwa">in</span>     Matrix;
      Start, Finish : <span class="kwa">in</span>     Matrix_Index;
      AU            :    <span class="kwa">out</span> Matrix) <span class="kwa">is abstract</span>;

<span class="kwa">end</span> Spectral_Utils;

<span class="kwa">with</span> Spectral_Utils.S, Spectral_Utils.D;

<span class="kwa">package body</span> Spectral_Utils <span class="kwa">is</span>

   <span class="kwa">package</span> Plain <span class="kwa">is new</span> Spectral_Utils.D;
   <span class="kwa">package</span> Fancy <span class="kwa">is new</span> Spectral_Utils.S;

   <span class="kwa">function</span> Make_Calculator <span class="kwa">return</span> Matrix_Computation<span class="kwd">'Class</span> <span class="kwa">is</span>
   <span class="kwa">begin</span>
      <span class="kwa">if</span> System.Word_Size = <span class="num">64</span> <span class="kwa">then</span>
         <span class="kwa">return</span> Plain.Vanilla<span class="str">'(Matrix_Computation with null record);</span>
<span class="str">      else</span>
<span class="str">         return Fancy.Forced'</span>(Matrix_Computation <span class="kwa">with null record</span>);
      <span class="kwa">end if</span>;
   <span class="kwa">end</span> Make_Calculator;

<span class="kwa">end</span> Spectral_Utils;

<span class="kwa">generic package</span> Spectral_Utils.D <span class="kwa">is</span>

   <span class="kwa">type</span> Vanilla <span class="kwa">is new</span> Matrix_Computation <span class="kwa">with null record</span>;
   <span class="slc">-- computations use Division.D</span>

   overriding
   <span class="kwa">procedure</span> Eval_A_Times
     (Iron          : <span class="kwa">in</span>     Vanilla;
      U             : <span class="kwa">in</span>     Matrix;
      Start, Finish : <span class="kwa">in</span>     Matrix_Index;
      AU            :    <span class="kwa">out</span> Matrix);

   overriding
   <span class="kwa">procedure</span> Eval_At_Times
     (Iron          : <span class="kwa">in</span>     Vanilla;
      U             : <span class="kwa">in</span>     Matrix;
      Start, Finish : <span class="kwa">in</span>     Matrix_Index;
      AU            :    <span class="kwa">out</span> Matrix);

<span class="kwa">end</span> Spectral_Utils.D;

<span class="kwa">with</span> Division.D;

<span class="kwa">package body</span> Spectral_Utils.D <span class="kwa">is</span>

   <span class="kwa">use type</span> Real;
   <span class="kwa">use</span> Division.D;

   <span class="kwa">subtype</span> A_Element_Pair <span class="kwa">is</span> SSE_Vector;

   <span class="slc">--  A is the matrix. Evaluate matrix A at (I,J):</span>

   <span class="kwa">function</span> Eval_A (I, J : <span class="kwa">in</span> Matrix_Index) <span class="kwa">return</span> Real <span class="kwa">is</span>
      Denom : <span class="kwa">constant</span> Real := Real (((I + J) * (I + J + <span class="num">1</span>)) / <span class="num">2</span> + I + <span class="num">1</span>);
   <span class="kwa">begin</span>
      <span class="kwa">return</span> <span class="num">1.0</span> / Denom;
   <span class="kwa">end</span> Eval_A;

   <span class="kwa">function</span> Eval_A_tr_Twice (I, J : <span class="kwa">in</span> Matrix_Index) <span class="kwa">return</span> A_Element_Pair <span class="kwa">is</span>
      y0 : <span class="kwa">constant</span> Real := Real (((I + J    )*(I + J + <span class="num">1</span>))/<span class="num">2</span> + J + <span class="num">1</span>);
      y1 : <span class="kwa">constant</span> Real := Real (((I + J + <span class="num">1</span>)*(I + J + <span class="num">2</span>))/<span class="num">2</span> + J + <span class="num">2</span>);
   <span class="kwa">begin</span>
      <span class="kwa">return</span> Division.D.Ratios (<span class="num">1.0</span>, <span class="num">1.0</span>, y0, y1);
   <span class="kwa">end</span> Eval_A_tr_Twice;

   <span class="kwa">function</span> Eval_A_Twice (I, J : <span class="kwa">in</span> Matrix_Index) <span class="kwa">return</span> A_Element_Pair <span class="kwa">is</span>
      y0 : <span class="kwa">constant</span> Real := Real (((I + J    )*(I + J + <span class="num">1</span>))/<span class="num">2</span> + I + <span class="num">1</span>);
      y1 : <span class="kwa">constant</span> Real := Real (((I + J + <span class="num">1</span>)*(I + J + <span class="num">2</span>))/<span class="num">2</span> + I + <span class="num">1</span>);
   <span class="kwa">begin</span>
      <span class="kwa">return</span> Division.D.Ratios (<span class="num">1.0</span>, <span class="num">1.0</span>, y0, y1);
   <span class="kwa">end</span> Eval_A_Twice;

   Half_Matrix_Size : <span class="kwa">constant</span> Matrix_Index := Matrix_Size / <span class="num">2</span>;

   overriding
   <span class="kwa">procedure</span> Eval_A_Times
     (Iron          : <span class="kwa">in</span>     Vanilla;
      U             : <span class="kwa">in</span>     Matrix;
      Start, Finish : <span class="kwa">in</span>     Matrix_Index;
      Au            :    <span class="kwa">out</span> Matrix)
   <span class="kwa">is</span>
      J_Index : Matrix_Index;
      A_Elements : A_Element_Pair;
      Sum : Real;
   <span class="kwa">begin</span>
      <span class="kwa">for</span> I <span class="kwa">in</span> Start .. Finish <span class="kwa">loop</span>
         Sum := <span class="num">0.0</span>;
         <span class="kwa">for</span> J <span class="kwa">in</span> Matrix_Index <span class="kwa">range</span> <span class="num">0</span> .. Half_Matrix_Size - <span class="num">1</span> <span class="kwa">loop</span>
            J_Index    := U<span class="kwd">'First</span> + <span class="num">2</span>*J;
            A_Elements := Eval_A_Twice (I, J_Index);
            Sum := Sum + A_Elements(<span class="num">0</span>) * U(J_Index) + A_Elements(<span class="num">1</span>) * U(J_Index+<span class="num">1</span>);
         <span class="kwa">end loop</span>;
         <span class="kwa">if</span> Matrix_Size <span class="kwa">mod</span> <span class="num">2</span> = <span class="num">1</span> <span class="kwa">then</span>
            Sum := Sum + Eval_A (U<span class="kwd">'Last</span>, I) * U(U<span class="kwd">'Last</span>); <span class="slc">-- J_Index := U'Last;</span>
         <span class="kwa">end if</span>;
         Au(I) := Sum;
      <span class="kwa">end loop</span>;
   <span class="kwa">end</span> Eval_A_Times;

   overriding
   <span class="kwa">procedure</span> Eval_At_Times
     (Iron          : <span class="kwa">in</span>     Vanilla;
      U             : <span class="kwa">in</span>     Matrix;
      Start, Finish : <span class="kwa">in</span>     Matrix_Index;
      Au            :    <span class="kwa">out</span> Matrix)
   <span class="kwa">is</span>
      J_Index : Matrix_Index;
      A_Elements : A_Element_Pair;
      Sum : Real;
   <span class="kwa">begin</span>
      <span class="kwa">for</span> I <span class="kwa">in</span> Start .. Finish <span class="kwa">loop</span>
         Sum := <span class="num">0.0</span>;
         <span class="kwa">for</span> J <span class="kwa">in</span> Matrix_Index <span class="kwa">range</span> <span class="num">0</span> .. Half_Matrix_Size - <span class="num">1</span> <span class="kwa">loop</span>
            J_Index    := U<span class="kwd">'First</span> + <span class="num">2</span>*J;
            A_Elements := Eval_A_tr_Twice (I, J_Index);
            Sum := Sum + A_Elements(<span class="num">0</span>) * U(J_Index) + A_Elements(<span class="num">1</span>) * U(J_Index+<span class="num">1</span>);
         <span class="kwa">end loop</span>;
         <span class="kwa">if</span> Matrix_Size <span class="kwa">mod</span> <span class="num">2</span> = <span class="num">1</span> <span class="kwa">then</span>
            Sum := Sum + Eval_A (U<span class="kwd">'Last</span>, I) * U(U<span class="kwd">'Last</span>); <span class="slc">-- J_Index := U'Last;</span>
         <span class="kwa">end if</span>;
         Au(I) := Sum;
      <span class="kwa">end loop</span>;
   <span class="kwa">end</span> Eval_At_Times;

<span class="kwa">end</span> Spectral_Utils.D;

<span class="kwa">generic package</span> Spectral_Utils.S <span class="kwa">is</span>

   <span class="kwa">type</span> Forced <span class="kwa">is new</span> Matrix_Computation <span class="kwa">with null record</span>;
   <span class="slc">-- computations use Division.S</span>

   overriding
   <span class="kwa">procedure</span> Eval_A_Times
     (Iron          : <span class="kwa">in</span>     Forced;
      U             : <span class="kwa">in</span>     Matrix;
      Start, Finish : <span class="kwa">in</span>     Matrix_Index;
      AU            :    <span class="kwa">out</span> Matrix);

   overriding
   <span class="kwa">procedure</span> Eval_At_Times
     (Iron          : <span class="kwa">in</span>     Forced;
      U             : <span class="kwa">in</span>     Matrix;
      Start, Finish : <span class="kwa">in</span>     Matrix_Index;
      AU            :    <span class="kwa">out</span> Matrix);

<span class="kwa">end</span> Spectral_Utils.S;

<span class="kwa">with</span> Division.S;
<span class="kwa">package body</span> Spectral_Utils.S <span class="kwa">is</span>

   <span class="kwa">use type</span> Real;
   <span class="kwa">use</span> Division.S;

   <span class="kwa">subtype</span> A_Element_Pair <span class="kwa">is</span> SSE_Vector;

   <span class="slc">--  A is the matrix. Evaluate matrix A at (I,J):</span>

   <span class="kwa">function</span> Eval_A (I, J : <span class="kwa">in</span> Matrix_Index) <span class="kwa">return</span> Real <span class="kwa">is</span>
      Denom : <span class="kwa">constant</span> Real := Real (((I + J) * (I + J + <span class="num">1</span>)) / <span class="num">2</span> + I + <span class="num">1</span>);
   <span class="kwa">begin</span>
      <span class="kwa">return</span> <span class="num">1.0</span> / Denom;
   <span class="kwa">end</span> Eval_A;

   <span class="kwa">function</span> Eval_A_tr_Twice (I, J : <span class="kwa">in</span> Matrix_Index) <span class="kwa">return</span> A_Element_Pair <span class="kwa">is</span>
      Denoms : <span class="kwa">constant</span> A_Element_Pair:=
        (Real (((I + J    )*(I + J + <span class="num">1</span>))/<span class="num">2</span> + J + <span class="num">1</span>),
         Real (((I + J + <span class="num">1</span>)*(I + J + <span class="num">2</span>))/<span class="num">2</span> + J + <span class="num">2</span>));
   <span class="kwa">begin</span>
      <span class="kwa">return</span> (<span class="num">1.0</span>, <span class="num">1.0</span>) / Denoms;
   <span class="kwa">end</span> Eval_A_tr_Twice;

   <span class="kwa">function</span> Eval_A_Twice (I, J : <span class="kwa">in</span> Matrix_Index) <span class="kwa">return</span> A_Element_Pair <span class="kwa">is</span>
      Denoms : <span class="kwa">constant</span> A_Element_Pair :=
        (Real (((I + J    )*(I + J + <span class="num">1</span>))/<span class="num">2</span> + I + <span class="num">1</span>),
         Real (((I + J + <span class="num">1</span>)*(I + J + <span class="num">2</span>))/<span class="num">2</span> + I + <span class="num">1</span>));
   <span class="kwa">begin</span>
      <span class="kwa">return</span> (<span class="num">1.0</span>, <span class="num">1.0</span>) / Denoms;
   <span class="kwa">end</span> Eval_A_Twice;

   Half_Matrix_Size : <span class="kwa">constant</span> Matrix_Index := Matrix_Size / <span class="num">2</span>;

   overriding
   <span class="kwa">procedure</span> Eval_A_Times
     (Iron          : <span class="kwa">in</span>     Forced;
      U             : <span class="kwa">in</span>     Matrix;
      Start, Finish : <span class="kwa">in</span>     Matrix_Index;
      Au            :    <span class="kwa">out</span> Matrix)
   <span class="kwa">is</span>
      J_Index : Matrix_Index;
      Elements : <span class="kwa">array</span> (Matrix_Index <span class="kwa">range</span> <span class="num">0</span> .. Matrix_Size / <span class="num">2</span>) <span class="kwa">of</span> SSE_Vector;
      Sums : SSE_Vector;
   <span class="kwa">begin</span>
      <span class="kwa">for</span> I <span class="kwa">in</span> Start .. Finish <span class="kwa">loop</span>
         Sums := (<span class="num">0.0</span>, <span class="num">0.0</span>);
         <span class="kwa">for</span> J <span class="kwa">in</span> Matrix_Index <span class="kwa">range</span> <span class="num">0</span> .. Half_Matrix_Size - <span class="num">1</span> <span class="kwa">loop</span>
            J_Index      := U<span class="kwd">'First</span> + <span class="num">2</span>*J;
            Elements (J) := Eval_A_Twice (I, J_Index);
         <span class="kwa">end loop</span>;
         <span class="kwa">for</span> J <span class="kwa">in</span> Matrix_Index <span class="kwa">range</span> <span class="num">0</span> .. Half_Matrix_Size - <span class="num">1</span> <span class="kwa">loop</span>
            J_Index      := U<span class="kwd">'First</span> + <span class="num">2</span>*J;
            Sums := Sums + Elements(J) * (U(J_Index), U(J_Index+<span class="num">1</span>));
         <span class="kwa">end loop</span>;
         <span class="kwa">if</span> Matrix_Size <span class="kwa">mod</span> <span class="num">2</span> = <span class="num">1</span> <span class="kwa">then</span>
            Sums(<span class="num">0</span>) := Sums(<span class="num">0</span>) + Eval_A(I, U<span class="kwd">'Last</span>) * U(U<span class="kwd">'Last</span>); <span class="slc">-- J_Index := U'Last;</span>
         <span class="kwa">end if</span>;
         Au(I) := Sums(<span class="num">0</span>) + Sums(<span class="num">1</span>);
      <span class="kwa">end loop</span>;
   <span class="kwa">end</span> Eval_A_Times;

   overriding
   <span class="kwa">procedure</span> Eval_At_Times
     (Iron          : <span class="kwa">in</span>     Forced;
      U             : <span class="kwa">in</span>     Matrix;
      Start, Finish : <span class="kwa">in</span>     Matrix_Index;
      Au            :    <span class="kwa">out</span> Matrix)
   <span class="kwa">is</span>
      J_Index : Matrix_Index;
      Elements : <span class="kwa">array</span> (Matrix_Index <span class="kwa">range</span> <span class="num">0</span> .. Matrix_Size / <span class="num">2</span>) <span class="kwa">of</span> SSE_Vector;
      Sums : SSE_Vector;
   <span class="kwa">begin</span>
      <span class="kwa">for</span> I <span class="kwa">in</span> Start .. Finish <span class="kwa">loop</span>
         Sums := (<span class="num">0.0</span>, <span class="num">0.0</span>);
         <span class="kwa">for</span> J <span class="kwa">in</span> Matrix_Index <span class="kwa">range</span> <span class="num">0</span> .. Half_Matrix_Size - <span class="num">1</span> <span class="kwa">loop</span>
            J_Index     := U<span class="kwd">'First</span> + <span class="num">2</span>*J;
            Elements(J) := Eval_A_tr_Twice (I, J_Index);
         <span class="kwa">end loop</span>;
         <span class="kwa">for</span> J <span class="kwa">in</span> Matrix_Index <span class="kwa">range</span> <span class="num">0</span> .. Half_Matrix_Size - <span class="num">1</span> <span class="kwa">loop</span>
            J_Index     := U<span class="kwd">'First</span> + <span class="num">2</span>*J;
            Sums := Sums + Elements(J) * (U(J_Index), U(J_Index+<span class="num">1</span>));
         <span class="kwa">end loop</span>;
         <span class="kwa">if</span> Matrix_Size <span class="kwa">mod</span> <span class="num">2</span> = <span class="num">1</span> <span class="kwa">then</span>
            Sums(<span class="num">0</span>) := Sums(<span class="num">0</span>) + Eval_A (U<span class="kwd">'Last</span>, I) * U(U<span class="kwd">'Last</span>); <span class="slc">-- J_Index := U'Last;</span>
         <span class="kwa">end if</span>;
         Au(I) := Sums(<span class="num">0</span>) + Sums(<span class="num">1</span>);
      <span class="kwa">end loop</span>;
   <span class="kwa">end</span> Eval_At_Times;

<span class="kwa">end</span> Spectral_Utils.S;

<span class="kwa">generic</span>
   Number_Of_Tasks : <span class="kwb">Positive</span>;
<span class="kwa">package</span> Spectral_Utils.Dist <span class="kwa">is</span>

   <span class="slc">--  distribute the computation</span>

   <span class="kwa">pragma</span> Elaborate_Body (Dist);

   <span class="slc">--  Get   A_transpose_A_times_U = A_transpose * A * U.</span>

   <span class="kwa">procedure</span> Eval_Ata_Times_U
     (Iron                  : <span class="kwa">in</span>     Matrix_Computation<span class="kwd">'Class</span>;
      U                     : <span class="kwa">in</span>     Matrix;
      A_transpose_A_times_U :    <span class="kwa">out</span> Matrix);

<span class="kwa">private</span>
   No_of_Tasks : <span class="kwa">constant</span> Matrix_Index := Matrix_Index (Number_Of_Tasks);

   <span class="slc">-- Calculate A * U</span>

   <span class="kwa">task type</span> Matrix_A_times_U <span class="kwa">is</span>
      <span class="kwa">pragma</span> Storage_Size (<span class="num">2</span>**<span class="num">18</span>);
      <span class="kwa">entry</span> Multiply (U : <span class="kwa">in</span> Matrix; Start, Finish : <span class="kwa">in</span> Matrix_Index);
      <span class="kwa">entry</span> Result (Start, Finish : <span class="kwa">out</span> Matrix_Index; R : <span class="kwa">out</span> Matrix);
   <span class="kwa">end</span> Matrix_A_times_U;

   <span class="slc">-- Calculate A_transpose * V</span>

   <span class="kwa">task type</span> Matrix_A_tr_times_V <span class="kwa">is</span>
      <span class="kwa">pragma</span> Storage_Size (<span class="num">2</span>**<span class="num">18</span>);
      <span class="kwa">entry</span> Multiply (V : <span class="kwa">in</span> Matrix; Start, Finish : <span class="kwa">in</span> Matrix_Index);
      <span class="kwa">entry</span> Result (Start, Finish : <span class="kwa">out</span> Matrix_Index; R : <span class="kwa">out</span> Matrix);
   <span class="kwa">end</span> Matrix_A_tr_times_V;

<span class="kwa">end</span> Spectral_Utils.Dist;

<span class="kwa">package body</span> Spectral_Utils.Dist <span class="kwa">is</span>

   <span class="slc">-- Create (No_Of_Tasks-1) tasks. The final task is the environmental task,</span>
   <span class="slc">-- which does its fair share of the work in procedure Eval_Ata_Times_U.</span>

   <span class="kwa">subtype</span> Task_Range <span class="kwa">is</span> Matrix_Index <span class="kwa">range</span> <span class="num">1</span> .. No_Of_Tasks-<span class="num">1</span>;

   Partial_Matrix_A_times_U    : <span class="kwa">array</span> (Task_Range) <span class="kwa">of</span> Matrix_A_times_U;
   Partial_Matrix_A_tr_times_V : <span class="kwa">array</span> (Task_Range) <span class="kwa">of</span> Matrix_A_tr_times_V;

   <span class="kwa">procedure</span> Eval_Ata_Times_U
      (Iron                  : <span class="kwa">in</span>     Matrix_Computation<span class="kwd">'Class</span>;
       U                     : <span class="kwa">in</span>     Matrix;
       A_transpose_A_times_U :    <span class="kwa">out</span> Matrix)
   <span class="kwa">is</span>
      V, Partial_Product : Matrix;

      Segment_Length : <span class="kwa">constant</span> Matrix_Index := Matrix_Size / No_Of_Tasks;

      I1, I2, J1, J2 : Matrix_Index;
   <span class="kwa">begin</span>
      I1 := V<span class="kwd">'First</span>;
      I2 := V<span class="kwd">'First</span> + Segment_Length - <span class="num">1</span>;
      I2 := Matrix_Index<span class="kwd">'Min</span> (I2, V<span class="kwd">'Last</span>);

      <span class="slc">-- Start running the tasks in Task_Range:</span>

      <span class="kwa">for</span> k <span class="kwa">in</span> Task_Range <span class="kwa">loop</span>
         Partial_Matrix_A_times_U(k).Multiply (U, I1, I2);
         I1 := I2 + <span class="num">1</span>;
         I2 := I2 + Segment_Length;
         I2 := Matrix_Index<span class="kwd">'Min</span> (I2, V<span class="kwd">'Last</span>);
      <span class="kwa">end loop</span>;

      Iron.Eval_A_Times (U, I1, V<span class="kwd">'Last</span>, V); <span class="slc">-- Env task updates V(I1 .. V'Last).</span>

      <span class="slc">-- Rendezvous with tasks to get partial results. Write results to V:</span>

      <span class="kwa">for</span> k <span class="kwa">in</span> Task_Range <span class="kwa">loop</span>
         Partial_Matrix_A_times_U(k).Result (J1, J2, Partial_Product);
         V(J1 .. J2) := Partial_Product(J1 .. J2);
      <span class="kwa">end loop</span>;

      <span class="slc">-- The result, stored in V, is A*U. Next get A_transpose * (A*U).</span>

      I1 := V<span class="kwd">'First</span>;
      I2 := V<span class="kwd">'First</span> + Segment_Length - <span class="num">1</span>;
      I2 := Matrix_Index<span class="kwd">'Min</span> (I2, V<span class="kwd">'Last</span>);

      <span class="kwa">for</span> k <span class="kwa">in</span> Task_Range <span class="kwa">loop</span>
         Partial_Matrix_A_tr_times_V(k).Multiply (V, I1, I2);
         I1 := I2 + <span class="num">1</span>;
         I2 := I2 + Segment_Length;
         I2 := Matrix_Index<span class="kwd">'Min</span> (I2, V<span class="kwd">'Last</span>);
      <span class="kwa">end loop</span>;

      Iron.Eval_At_Times (V, I1, V<span class="kwd">'Last</span>, A_transpose_A_times_U);
      <span class="slc">-- Env. task updates A_transpose_A_times_U (I1 .. V'Last).</span>

      <span class="kwa">for</span> k <span class="kwa">in</span> Task_Range <span class="kwa">loop</span>
         Partial_Matrix_A_tr_times_V(k).Result (J1, J2, Partial_Product);
         A_transpose_A_times_U(J1 .. J2) := Partial_Product(J1 .. J2);
      <span class="kwa">end loop</span>;

   <span class="kwa">end</span> Eval_Ata_Times_U;

   <span class="kwa">task body</span> Matrix_A_times_U <span class="kwa">is</span>
      I1, I2 : Matrix_Index;
      AU, U_local : Matrix;
      Calculator : <span class="kwa">constant</span> Matrix_Computation<span class="kwd">'Class</span> := Make_Calculator;
   <span class="kwa">begin</span>
     <span class="kwa">loop</span>
     <span class="kwa">select</span>
        <span class="kwa">accept</span> Multiply (U : <span class="kwa">in</span> Matrix; Start, Finish : <span class="kwa">in</span> Matrix_Index) <span class="kwa">do</span>
           I1 := Start;
           I2 := Finish;
           U_local := U;
        <span class="kwa">end</span> Multiply;

        Calculator.Eval_A_Times (U_Local, I1, I2, AU); <span class="slc">-- updates AU(I1..I2)</span>

        <span class="kwa">accept</span> Result (Start, Finish : <span class="kwa">out</span> Matrix_Index; R : <span class="kwa">out</span> Matrix) <span class="kwa">do</span>
           Start  := I1;
           Finish := I2;
           R(Start .. Finish) := AU(Start .. Finish);
        <span class="kwa">end</span> Result;
     <span class="kwa">or</span>
        <span class="kwa">terminate</span>;
     <span class="kwa">end select</span>;
     <span class="kwa">end loop</span>;
   <span class="kwa">end</span> Matrix_A_times_U;

   <span class="kwa">task body</span> Matrix_A_tr_times_V <span class="kwa">is</span>
      I1, I2 : Matrix_Index;
      AV, V_local : Matrix;
      Calculator : <span class="kwa">constant</span> Matrix_Computation<span class="kwd">'Class</span> := Make_Calculator;
   <span class="kwa">begin</span>
     <span class="kwa">loop</span>
     <span class="kwa">select</span>
        <span class="kwa">accept</span> Multiply (V : <span class="kwa">in</span> Matrix; Start, Finish : <span class="kwa">in</span> Matrix_Index) <span class="kwa">do</span>
           I1 := Start;
           I2 := Finish;
           V_local := V;
        <span class="kwa">end</span> Multiply;

        Calculator.Eval_At_Times (V_Local, I1, I2, AV);
        <span class="slc">-- AV = A_transpose * V_local</span>

        <span class="kwa">accept</span> Result (Start, Finish : <span class="kwa">out</span> Matrix_Index; R : <span class="kwa">out</span> Matrix) <span class="kwa">do</span>
           Start  := I1;
           Finish := I2;
           R(Start .. Finish) := AV(Start .. Finish);
        <span class="kwa">end</span> Result;
     <span class="kwa">or</span>
        <span class="kwa">terminate</span>;
     <span class="kwa">end select</span>;
     <span class="kwa">end loop</span>;
   <span class="kwa">end</span> Matrix_A_tr_times_V;

<span class="kwa">end</span> Spectral_Utils.Dist;

<span class="kwa">package</span> Division <span class="kwa">is</span>

   <span class="kwa">pragma</span> Pure (Division);

   <span class="kwa">type</span> SSE_Real <span class="kwa">is new</span> <span class="kwb">Long_Float</span>;

<span class="kwa">private</span>
   <span class="kwa">pragma</span> Assert (SSE_Real<span class="kwd">'Size</span> = <span class="num">64</span> <span class="kwa">and</span> SSE_Real<span class="kwd">'digits</span> &gt; <span class="num">13</span>);
<span class="kwa">end</span> Division;


<span class="kwa">package</span> Division.S <span class="kwa">is</span>

   <span class="slc">--  force SSE operations</span>

   <span class="kwa">type</span> SSE_Vector <span class="kwa">is array</span> (<span class="num">0</span> .. <span class="num">1</span>) <span class="kwa">of</span> SSE_Real;
   <span class="kwa">for</span> SSE_Vector<span class="kwd">'Alignment</span> <span class="kwa">use</span> <span class="num">16</span>;
   <span class="kwa">pragma</span> Machine_Attribute (SSE_Vector, <span class="str">&quot;vector_type&quot;</span>);
   <span class="kwa">pragma</span> Machine_Attribute (SSE_Vector, <span class="str">&quot;may_alias&quot;</span>);

   <span class="kwa">function</span> <span class="str">&quot;+&quot;</span> (X, Y : SSE_Vector) <span class="kwa">return</span> SSE_Vector;
   <span class="kwa">function</span> <span class="str">&quot;*&quot;</span> (X, Y : SSE_Vector) <span class="kwa">return</span> SSE_Vector;
   <span class="kwa">function</span> <span class="str">&quot;/&quot;</span> (X, Y : SSE_Vector) <span class="kwa">return</span> SSE_Vector;

<span class="kwa">private</span>
   <span class="kwa">pragma</span> Import (Intrinsic, <span class="str">&quot;+&quot;</span>, <span class="str">&quot;__builtin_ia32_addpd&quot;</span>);
   <span class="kwa">pragma</span> Import (Intrinsic, <span class="str">&quot;*&quot;</span>, <span class="str">&quot;__builtin_ia32_mulpd&quot;</span>);
   <span class="kwa">pragma</span> Import (Intrinsic, <span class="str">&quot;/&quot;</span>, <span class="str">&quot;__builtin_ia32_divpd&quot;</span>);
<span class="kwa">end</span> Division.S;


<span class="kwa">package</span> Division.D <span class="kwa">is</span>

   <span class="kwa">type</span> SSE_Vector <span class="kwa">is array</span>(<span class="num">0</span> .. <span class="num">1</span>) <span class="kwa">of</span> SSE_Real;

   <span class="kwa">function</span> Ratios (x0, x1, y0, y1 : <span class="kwa">in</span> SSE_Real) <span class="kwa">return</span> SSE_Vector;

<span class="kwa">end</span> Division.D;

<span class="kwa">package body</span> Division.D <span class="kwa">is</span>

   <span class="kwa">type</span> m128d <span class="kwa">is array</span> (<span class="num">0</span> .. <span class="num">1</span>) <span class="kwa">of</span> SSE_Real;
   <span class="kwa">for</span> m128d<span class="kwd">'Alignment</span> <span class="kwa">use</span> <span class="num">16</span>;
   <span class="kwa">pragma</span> Machine_Attribute (m128d, <span class="str">&quot;vector_type&quot;</span>);
   <span class="kwa">pragma</span> Machine_Attribute (m128d, <span class="str">&quot;may_alias&quot;</span>);

   <span class="kwa">function</span> Div (X, Y : m128d) <span class="kwa">return</span> m128d;
   <span class="kwa">pragma</span> Import (Intrinsic, Div, <span class="str">&quot;__builtin_ia32_divpd&quot;</span>);

   <span class="kwa">function</span> Ratios (x0, x1, y0, y1 : <span class="kwa">in</span> SSE_Real) <span class="kwa">return</span> SSE_Vector <span class="kwa">is</span>
      z : <span class="kwa">constant</span> m128d := Div ((x0, x1), (y0, y1));
   <span class="kwa">begin</span>
      <span class="kwa">return</span> (z(<span class="num">0</span>), z(<span class="num">1</span>));
   <span class="kwa">end</span> Ratios;

<span class="kwa">end</span> Division.D;
