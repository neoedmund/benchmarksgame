<span class="slc">--  The Computer Language Benchmarks Game</span>
<span class="slc">--  http://benchmarksgame.alioth.debian.org</span>
<span class="slc">--  Calculate digits of pi using the</span>
<span class="slc">--  Unbounded Spigot Algorithms</span>
<span class="slc">--</span>
<span class="slc">--  From Pascal code by Vincent Snijders</span>
<span class="slc">--  gmp headers by Karl-Michael Schindler</span>
<span class="slc">--  Translated by (New) P2Ada v. 17-June-2006</span>

<span class="kwa">with</span> Ada.Text_IO;                       <span class="kwa">use</span> Ada.Text_IO;
<span class="kwa">with</span> Ada.Integer_Text_IO;               <span class="kwa">use</span> Ada.Integer_Text_IO;
<span class="kwa">with</span> Ada.Command_Line;                  <span class="kwa">use</span> Ada.Command_Line;
<span class="kwa">with</span> Ada.Calendar;                      <span class="kwa">use</span> Ada.Calendar;

<span class="kwa">with</span> Interfaces.C;

<span class="kwa">procedure</span> pidigits <span class="kwa">is</span>

  <span class="kwa">pragma</span> Suppress(All_Checks);

  <span class="kwa">package</span> GMP_mini <span class="kwa">is</span>
    <span class="kwa">type</span> mp_limb_t <span class="kwa">is new</span> Interfaces.C.unsigned;
    <span class="kwa">type</span> mp_ptr <span class="kwa">is access</span> mp_limb_t;

    <span class="kwa">type</span> mpz_t <span class="kwa">is record</span>
      mp_alloc, mp_size : Interfaces.C.int;
      mp_d    : mp_ptr;
    <span class="kwa">end record</span>;

    <span class="kwa">procedure</span> mpz_init (Dest: <span class="kwa">out</span> mpz_t);
    <span class="kwa">pragma</span> Import(C, mpz_init, <span class="str">&quot;__gmpz_init&quot;</span>);

    <span class="kwa">procedure</span> mpz_init_set_ui (Dest: <span class="kwa">out</span> mpz_t; Src: <span class="kwa">in</span> Interfaces.C.unsigned_long);
    <span class="kwa">pragma</span> Import(C, mpz_init_set_ui, <span class="str">&quot;__gmpz_init_set_ui&quot;</span>);

    <span class="kwa">procedure</span> mpz_mul_ui (Dest: <span class="kwa">out</span> mpz_t; Src1: <span class="kwa">in</span> mpz_t; Src2: <span class="kwa">in</span> Interfaces.C.unsigned_long);
    <span class="kwa">pragma</span> Import(C, mpz_mul_ui, <span class="str">&quot;__gmpz_mul_ui&quot;</span>);

    <span class="kwa">procedure</span> mpz_mul_si (Dest: <span class="kwa">out</span> mpz_t; Src1: <span class="kwa">in</span> mpz_t; Src2: <span class="kwa">in</span> Interfaces.C.int);
    <span class="kwa">pragma</span> Import(C, mpz_mul_si, <span class="str">&quot;__gmpz_mul_si&quot;</span>);

    <span class="kwa">procedure</span> mpz_add (Dest: <span class="kwa">out</span> mpz_t; Src1, Src2: <span class="kwa">in</span> mpz_t);
    <span class="kwa">pragma</span> Import(C, mpz_add, <span class="str">&quot;__gmpz_add&quot;</span>);

    <span class="kwa">procedure</span> mpz_tdiv_q (Dest: <span class="kwa">out</span> mpz_t; Src1, Src2: <span class="kwa">in</span> mpz_t);
    <span class="kwa">pragma</span> Import(C, mpz_tdiv_q, <span class="str">&quot;__gmpz_tdiv_q&quot;</span>);

    <span class="kwa">function</span>  mpz_get_ui (Src: <span class="kwa">in</span> mpz_t) <span class="kwa">return</span> Interfaces.C.unsigned_long;
    <span class="kwa">pragma</span> Import(C, mpz_get_ui, <span class="str">&quot;__gmpz_get_ui&quot;</span>);

    <span class="kwa">pragma</span> Linker_Options(<span class="str">&quot;-lgmp&quot;</span>);

  <span class="kwa">end</span> GMP_Mini;

  <span class="kwa">procedure</span> Print_pi_digits(num_digits: <span class="kwb">Integer</span>) <span class="kwa">is</span>
    <span class="kwa">use</span> GMP_mini;

    q,r,s,t: mpz_t; <span class="slc">--  Transformation matrix components</span>

    u,v,w: mpz_t;   <span class="slc">--  Temporary variables</span>

    k,digit: Interfaces.C.int;
    c,i: <span class="kwb">Integer</span>;
    line: <span class="kwb">String</span>(<span class="num">1</span> .<span class="num">.10</span>);

    <span class="kwa">function</span> Extract(x: Interfaces.C.Unsigned_long) <span class="kwa">return</span> Interfaces.C.int <span class="kwa">is</span>
    <span class="kwa">begin</span>
      mpz_mul_ui(u, q, x);
      mpz_add(u, u, r);
      mpz_mul_ui(v, s, x);
      mpz_add(v, v, t);
      mpz_tdiv_q(w, u, v);
      <span class="kwa">return</span> Interfaces.C.int(mpz_get_ui(w));
    <span class="kwa">end</span> Extract;

    <span class="kwa">use</span> Interfaces.C;

    <span class="kwa">function</span> IsSafe <span class="kwa">return</span> <span class="kwb">Boolean</span> <span class="kwa">is</span>
    <span class="kwa">begin</span>
      <span class="kwa">return</span> digit = Extract(<span class="num">4</span>);
    <span class="kwa">end</span> IsSafe;

    <span class="kwa">procedure</span> Produce <span class="kwa">is</span>
    <span class="kwa">begin</span>
      mpz_mul_si(r, r, <span class="num">10</span>);
      mpz_mul_si(v, t, -<span class="num">10</span> * digit);
      mpz_add(r, r, v);
      mpz_mul_si(q, q, <span class="num">10</span>);
    <span class="kwa">end</span> Produce;

    <span class="kwa">procedure</span> Consume <span class="kwa">is</span>
    <span class="kwa">begin</span>
      k:= k + <span class="num">1</span>;
      mpz_mul_si(r, r, <span class="num">2</span>*k+<span class="num">1</span>);
      mpz_mul_si(u, q, <span class="num">4</span>*k+<span class="num">2</span>);
      mpz_add(r, r, u);
      mpz_mul_si(t, t, <span class="num">2</span>*k+<span class="num">1</span>);
      mpz_mul_si(v, s, <span class="num">4</span>*k+<span class="num">2</span>);
      mpz_add(t, t, v);
      mpz_mul_si(s, s, k);
      mpz_mul_si(q, q, k);
    <span class="kwa">end</span> Consume;

  <span class="kwa">begin</span>
    k := <span class="num">0</span>;
    i := <span class="num">0</span>;
    c := <span class="num">0</span>;
    mpz_init_set_ui(q, <span class="num">1</span>);
    mpz_init_set_ui(r, <span class="num">0</span>);
    mpz_init_set_ui(s, <span class="num">0</span>);
    mpz_init_set_ui(t, <span class="num">1</span>);
    mpz_init(u);
    mpz_init(v);
    mpz_init(w);
    <span class="kwa">while</span> i &lt; num_digits <span class="kwa">loop</span>
      digit := Extract(<span class="num">3</span>);
      <span class="kwa">while not</span> IsSafe <span class="kwa">loop</span>
        Consume;
        digit:= Extract(<span class="num">3</span>);
      <span class="kwa">end loop</span>;
      Produce;
      c:= c + <span class="num">1</span>;
      line(c) := <span class="kwb">Character</span><span class="kwd">'Val</span>(<span class="kwb">Character</span><span class="kwd">'Pos</span>(<span class="str">'0'</span>)+digit);
      i:= i + <span class="num">1</span>;
      <span class="kwa">if</span> c = <span class="num">10</span> <span class="kwa">then</span>
        Put(line &amp; ASCII.HT &amp; <span class="str">':'</span>);
        Put(i,<span class="num">0</span>); New_Line;
        c := <span class="num">0</span>;
      <span class="kwa">end if</span>;
    <span class="kwa">end loop</span>;
    <span class="kwa">if</span>  c/=<span class="num">0</span> <span class="kwa">then</span>
      Put(line(<span class="num">1</span>..c));
      <span class="kwa">for</span> i <span class="kwa">in</span> c+<span class="num">1</span>.<span class="num">.10</span> <span class="kwa">loop</span>
        Put(<span class="str">' '</span>);
      <span class="kwa">end loop</span>;
      Put(ASCII.HT &amp; <span class="str">':'</span>);
      Put(i,<span class="num">0</span>);
      New_Line;
    <span class="kwa">end if</span>;
  <span class="kwa">end</span> Print_pi_digits;

  n: <span class="kwb">Integer</span>;

  t0,t1: Time;
  timing: <span class="kwa">constant</span> <span class="kwb">Boolean</span>:= <span class="kwd">False</span>;

<span class="kwa">begin</span>
  n:= <span class="num">2</span>_500;
  <span class="kwa">if</span> Argument_Count=<span class="num">1</span> <span class="kwa">then</span>
    n:= <span class="kwb">Integer</span><span class="kwd">'Value</span>(Argument(<span class="num">1</span>));
  <span class="kwa">end if</span>;
  <span class="kwa">if</span> timing <span class="kwa">then</span>
    t0:= Clock;
  <span class="kwa">end if</span>;
  Print_pi_digits(n);
  <span class="kwa">if</span> timing <span class="kwa">then</span>
    t1:= Clock;
    Put(<span class="str">&quot;Time in seconds: &quot;</span> &amp; <span class="kwb">Duration</span><span class="kwd">'Image</span>(t1-t0) &amp; <span class="str">&quot; [press return]&quot;</span>);
    Skip_Line;
  <span class="kwa">end if</span>;
<span class="kwa">end</span> pidigits;
