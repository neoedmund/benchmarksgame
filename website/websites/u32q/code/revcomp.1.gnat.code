<span class="slc">--</span>
<span class="slc">--  The Computer Language Benchmarks Game</span>
<span class="slc">--  http://benchmarksgame.alioth.debian.org/</span>
<span class="slc">--</span>
<span class="slc">-- Contributed by Pascal Obry on 2005/03/19</span>
<span class="slc">-- Optimized by Bill Findlay on 2005/04/04</span>

<span class="kwa">with</span> Ada.Text_IO;                <span class="kwa">use</span> Ada.Text_IO;
<span class="kwa">with</span> Ada.Unchecked_Deallocation;

<span class="kwa">procedure</span> Revcomp <span class="kwa">is</span>

   Complement : <span class="kwa">constant array</span> (<span class="kwb">Character</span>) <span class="kwa">of</span> <span class="kwb">Character</span> :=
                  (<span class="str">'A'</span> =&gt; <span class="str">'T'</span>, <span class="str">'C'</span> =&gt; <span class="str">'G'</span>, <span class="str">'G'</span> =&gt; <span class="str">'C'</span>, <span class="str">'T'</span> =&gt; <span class="str">'A'</span>, <span class="str">'U'</span> =&gt; <span class="str">'A'</span>,
                   <span class="str">'M'</span> =&gt; <span class="str">'K'</span>, <span class="str">'R'</span> =&gt; <span class="str">'Y'</span>, <span class="str">'W'</span> =&gt; <span class="str">'W'</span>, <span class="str">'S'</span> =&gt; <span class="str">'S'</span>, <span class="str">'Y'</span> =&gt; <span class="str">'R'</span>,
                   <span class="str">'K'</span> =&gt; <span class="str">'M'</span>, <span class="str">'V'</span> =&gt; <span class="str">'B'</span>, <span class="str">'H'</span> =&gt; <span class="str">'D'</span>, <span class="str">'D'</span> =&gt; <span class="str">'H'</span>, <span class="str">'B'</span> =&gt; <span class="str">'V'</span>,
                   <span class="str">'N'</span> =&gt; <span class="str">'N'</span>,
                   <span class="str">'a'</span> =&gt; <span class="str">'T'</span>, <span class="str">'c'</span> =&gt; <span class="str">'G'</span>, <span class="str">'g'</span> =&gt; <span class="str">'C'</span>, <span class="str">'t'</span> =&gt; <span class="str">'A'</span>, <span class="str">'u'</span> =&gt; <span class="str">'A'</span>,
                   <span class="str">'m'</span> =&gt; <span class="str">'K'</span>, <span class="str">'r'</span> =&gt; <span class="str">'Y'</span>, <span class="str">'w'</span> =&gt; <span class="str">'W'</span>, <span class="str">'s'</span> =&gt; <span class="str">'S'</span>, <span class="str">'y'</span> =&gt; <span class="str">'R'</span>,
                   <span class="str">'k'</span> =&gt; <span class="str">'M'</span>, <span class="str">'v'</span> =&gt; <span class="str">'B'</span>, <span class="str">'h'</span> =&gt; <span class="str">'D'</span>, <span class="str">'d'</span> =&gt; <span class="str">'H'</span>, <span class="str">'b'</span> =&gt; <span class="str">'V'</span>,
                   <span class="str">'n'</span> =&gt; <span class="str">'N'</span>,
                   <span class="kwa">others</span> =&gt; <span class="str">'?'</span>);

   Max_Length : <span class="kwa">constant</span> := <span class="num">60</span>;

   <span class="kwa">type</span> String_Access <span class="kwa">is access</span> <span class="kwb">String</span>;

   <span class="kwa">procedure</span> Free <span class="kwa">is new</span> Ada.Unchecked_Deallocation (<span class="kwb">String</span>, String_Access);

   <span class="kwa">procedure</span> Get_Fasta (Seq : <span class="kwa">in out</span> String_Access; Length : <span class="kwa">out</span> <span class="kwb">Natural</span>) <span class="kwa">is</span>
      Ptr  : String_Access;
      J, K : <span class="kwb">Natural</span> := <span class="num">0</span>;
      C    : <span class="kwb">Character</span>;
      EOL  : <span class="kwb">Boolean</span>;
   <span class="kwa">begin</span>
      Length := <span class="num">0</span>;

      <span class="kwa">loop</span>
         Look_Ahead (C, EOL);
         <span class="kwa">exit when</span> C /= <span class="str">'&gt;'</span> <span class="kwa">and</span> C /= <span class="str">';'</span> ;
         Get_Line (Seq (<span class="num">1</span> .. Seq<span class="kwd">'Length</span>), J);
         <span class="kwa">if</span> Seq (<span class="num">1</span>) = <span class="str">'&gt;'</span> <span class="kwa">then</span>
            Put_Line (Seq (<span class="num">1</span> .. J));
         <span class="kwa">end if</span>;
      <span class="kwa">end loop</span>;

      <span class="kwa">loop</span>
         <span class="kwa">if</span> Length + Max_Length &gt; Seq<span class="kwd">'Length</span> <span class="kwa">then</span>
            Ptr := Seq;
            Seq := <span class="kwa">new</span> <span class="kwb">String</span> (<span class="num">1</span> .. <span class="num">2</span> * Seq<span class="kwd">'Length</span>);
            Seq (<span class="num">1</span> .. Length) := Ptr (<span class="num">1</span> .. Length);
            Free (Ptr);
         <span class="kwa">end if</span>;

         Get_Line (Seq (Length + <span class="num">1</span> .. Length + Max_Length), J);
         K := J - Length;
         Length := J;

         <span class="kwa">if</span> K = Max_Length <span class="kwa">then</span>
            Skip_Line;
         <span class="kwa">end if</span>;

         Look_Ahead (C, EOL);

         <span class="kwa">if</span> K &lt; Max_Length <span class="kwa">or else</span> C = <span class="str">'&gt;'</span> <span class="kwa">or else</span> C = <span class="str">';'</span> <span class="kwa">then</span>
            <span class="kwa">return</span>;
         <span class="kwa">end if</span>;
      <span class="kwa">end loop</span>;
   <span class="kwa">exception</span>
      <span class="kwa">when</span> End_Error =&gt;
         <span class="kwa">return</span>;
   <span class="kwa">end</span> Get_Fasta;

   <span class="kwa">procedure</span> Reverse_Fasta (Fasta : <span class="kwa">in out</span> <span class="kwb">String</span>) <span class="kwa">is</span>
      C    : <span class="kwb">Character</span>;
      L, R : <span class="kwb">Natural</span>;
   <span class="kwa">begin</span>
      <span class="kwa">for</span> I <span class="kwa">in</span> <span class="num">0</span> .. Fasta<span class="kwd">'Length</span> <span class="kwa">loop</span>
         L := Fasta<span class="kwd">'First</span> + I;
         R := Fasta<span class="kwd">'Last</span> - I;
         <span class="kwa">exit when</span> L &gt; R;
         C := Fasta (L);
         Fasta (L) := Complement (Fasta (R));
         Fasta (R) := Complement (C);
      <span class="kwa">end loop</span>;
   <span class="kwa">end</span> Reverse_Fasta;

   <span class="kwa">procedure</span> Put_Reversed_Fasta (Fasta : <span class="kwa">in out</span> <span class="kwb">String</span>) <span class="kwa">is</span>
      L : <span class="kwb">Natural</span> := Fasta<span class="kwd">'Last</span>;
   <span class="kwa">begin</span>
      <span class="kwa">while</span> L &gt;= Max_Length <span class="kwa">loop</span>
         Reverse_Fasta (Fasta (L - Max_Length + <span class="num">1</span> .. L));
         Put_Line (Fasta (L - Max_Length + <span class="num">1</span> .. L));
         L := L - Max_Length;
      <span class="kwa">end loop</span>;
      <span class="kwa">if</span> L &gt; <span class="num">0</span> <span class="kwa">then</span>
         Reverse_Fasta (Fasta (<span class="num">1</span> .. L));
         Put_Line (Fasta (<span class="num">1</span> .. L));
      <span class="kwa">end if</span>;
   <span class="kwa">end</span> Put_Reversed_Fasta;

   Seq    : String_Access := <span class="kwa">new</span> <span class="kwb">String</span> (<span class="num">1</span> .. <span class="num">1</span>_024);
   Length : <span class="kwb">Natural</span>;

<span class="kwa">begin</span>
   <span class="kwa">loop</span>
      Get_Fasta (Seq, Length);
      <span class="kwa">exit when</span> Length = <span class="num">0</span>;
      Put_Reversed_Fasta (Seq (<span class="num">1</span> .. Length));
   <span class="kwa">end loop</span>;
<span class="kwa">end</span> Revcomp;
