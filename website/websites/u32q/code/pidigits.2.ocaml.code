<span class="com">(* The Computer Language Benchmarks Game</span>
<span class="com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * contributed by Christophe TROESTLER</span>
<span class="com"> * modified by Matías Giovannini</span>
<span class="com"> *)</span>
<span class="kwa">open</span> <span class="kwd">Printf</span>
<span class="kwa">open</span> <span class="kwd">Big_int</span>

<span class="kwa">let</span> ( +$ ) = add_big_int
<span class="kwa">let</span> ( *$ ) = mult_int_big_int
<span class="kwa">let</span> ( /$ ) = div_big_int

<span class="com">(* Entier part of the linear fractional transform qrst of x *)</span>
<span class="kwa">let</span> ext (q,r,s,t) x = int_of_big_int ((x *$ q +$ r) /$ (x *$ s +$ t))

<span class="com">(* Multiply small int matrix qrst by big int matrix qrst' (small on left) *)</span>
<span class="kwa">let</span> mml (q,r,s,t) (q',r',s',t') =
  q *$ q'  +$  r *$ s',  q *$ r'  +$  r *$ t',
  s *$ q'  +$  t *$ s',  s *$ r'  +$  t *$ t'

<span class="com">(* Multiply big int matrix qrst by small int matrix qrst' (small on right) *)</span>
<span class="kwa">let</span> mmr (q,r,s,t) (q',r',s',t') =
  q' *$ q  +$  s' *$ r,  r' *$ q  +$  t' *$ r,
  q' *$ s  +$  s' *$ t,  r' *$ s  +$  t' *$ t

<span class="kwa">let</span> <span class="kwb">unit</span> = (unit_big_int,zero_big_int,zero_big_int,unit_big_int)

<span class="kwa">let</span> next z   = ext z <span class="num">3</span>
<span class="kwa">and</span> safe z n = ext z <span class="num">4</span> == n
<span class="kwa">and</span> prod z n = mml (<span class="num">10</span>, -<span class="num">10</span>*n, <span class="num">0</span>, <span class="num">1</span>) z
<span class="kwa">and</span> cons z k =
  <span class="kwa">let</span> den = <span class="num">2</span>*k + <span class="num">1</span> <span class="kwa">in</span>
  mmr z (k, <span class="num">2</span>*den, <span class="num">0</span>, den)

<span class="kwa">let rec</span> digit k z n row col =
  <span class="kwa">if</span> n == <span class="num">0</span> <span class="kwa">then</span> printf <span class="str">&quot;%*s</span><span class="esc">\t</span><span class="str">:</span><span class="ipl">%i</span><span class="str"></span><span class="esc">\n</span><span class="str">&quot;</span> (<span class="num">10</span>-col) <span class="str">&quot;&quot;</span> (row+col) <span class="kwa">else</span>
  <span class="kwa">let</span> d = next z <span class="kwa">in</span>
  <span class="kwa">if</span> safe z d <span class="kwa">then</span>
    <span class="kwa">if</span> col = <span class="num">10</span> <span class="kwa">then begin</span>
      <span class="kwa">let</span> row = row + <span class="num">10</span> <span class="kwa">in</span>
      printf <span class="str">&quot;</span><span class="esc">\t</span><span class="str">:</span><span class="ipl">%i</span><span class="str"></span><span class="esc">\n</span><span class="str"></span><span class="ipl">%i</span><span class="str">&quot;</span> row d;
      digit k (prod z d) (n-<span class="num">1</span>) row <span class="num">1</span>
    <span class="kwa">end else begin</span>
      print_int d;
      digit k (prod z d) (n-<span class="num">1</span>) row (col+<span class="num">1</span>)
    <span class="kwa">end</span>
  <span class="kwa">else</span> digit (k+<span class="num">1</span>) (cons z k) n row col

<span class="kwa">let</span> digits n = digit <span class="num">1</span> <span class="kwb">unit</span> n <span class="num">0 0</span>

<span class="kwa">let</span> () = digits (<span class="kwa">try</span> int_of_string (<span class="kwc">Array</span>.get <span class="kwc">Sys</span>.argv <span class="num">1</span>) <span class="kwa">with</span> _ -&gt; <span class="num">27</span>)
