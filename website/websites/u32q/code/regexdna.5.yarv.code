<span class="slc"># The Computer Language Benchmarks Game</span>
<span class="slc"># http://benchmarksgame.alioth.debian.org</span>
<span class="slc">#</span>
<span class="slc"># contributed by jose fco. gonzalez</span>
<span class="slc"># optimized &amp; parallelized by Rick Branson</span>
<span class="slc"># optimized for ruby2 by Aaron Tavistock</span>
<span class="slc"># optimized more by Utkarsh Kukreti</span>

MATCHERS = [
  <span class="kwc">/agggtaaa|tttaccct/</span>,
  <span class="kwc">/[cgt]gggtaaa|tttaccc[acg]/</span>,
  <span class="kwc">/a[act]ggtaaa|tttacc[agt]t/</span>,
  <span class="kwc">/ag[act]gtaaa|tttac[agt]ct/</span>,
  <span class="kwc">/agg[act]taaa|ttta[agt]cct/</span>,
  <span class="kwc">/aggg[acg]aaa|ttt[cgt]ccct/</span>,
  <span class="kwc">/agggt[cgt]aa|tt[acg]accct/</span>,
  <span class="kwc">/agggta[cgt]a|t[acg]taccct/</span>,
  <span class="kwc">/agggtaa[cgt]|[acg]ttaccct/</span>
]

seq = <span class="kwc">STDIN</span>.read
ilen = seq.size

seq.gsub!(<span class="kwc">/&gt;.*\n|\n/</span>,<span class="str">&quot;&quot;</span><span class="opt">)</span>
clen = seq.length

MATCHERS.each <span class="kwa">do</span> |m|
  puts <span class="str">&quot;</span><span class="ipl">#{m.source}</span> <span class="str"></span><span class="ipl">#{seq.scan(m).size}</span><span class="str">&quot;</span>
<span class="kwa">end</span>

hash = {
  <span class="str">'B'</span> =&gt; <span class="str">'(c|g|t)</span><span class="str">', </span>
<span class="str">  '</span>D<span class="str">' =&gt; '</span>(a|g|t<span class="opt">)</span><span class="str">', </span>
<span class="str">  '</span>H<span class="str">' =&gt; '</span>(a|c|t<span class="opt">)</span><span class="str">', </span>
<span class="str">  '</span>K<span class="str">' =&gt; '</span>(g|t<span class="opt">)</span><span class="str">',</span>
<span class="str">  '</span>M<span class="str">' =&gt; '</span>(a|c<span class="opt">)</span><span class="str">', </span>
<span class="str">  '</span>N<span class="str">' =&gt; '</span>(a|c|g|t<span class="opt">)</span><span class="str">', </span>
<span class="str">  '</span>R<span class="str">' =&gt; '</span>(a|g<span class="opt">)</span><span class="str">', </span>
<span class="str">  '</span>S<span class="str">' =&gt; '</span>(c|t<span class="opt">)</span><span class="str">',</span>
<span class="str">  '</span>V<span class="str">' =&gt; '</span>(a|c|g<span class="opt">)</span><span class="str">', </span>
<span class="str">  '</span>W<span class="str">' =&gt; '</span>(a|t<span class="opt">)</span><span class="str">', </span>
<span class="str">  '</span>Y<span class="str">' =&gt; '</span>(c|t<span class="opt">)</span><span class="str">'</span>
<span class="str">}</span>
<span class="str"></span>
<span class="str">seq.gsub!(/B|D|H|K|M|N|R|S|V|W|Y/, hash)</span>

puts
puts ilen
puts clen

puts seq.length
