<span class="slc">// The Computer Language Benchmarks Game</span>
<span class="slc">// http://benchmarksgame.alioth.debian.org/</span>
<span class="slc">//</span>
<span class="slc">// Contributed by Jeremy Zerfas</span>

<span class="slc">// This controls the width of lines that are output by this program.</span>
<span class="ppc">#define MAXIMUM_LINE_WIDTH	60</span>

<span class="slc">// This program will generate the random nucleotide sequences in parallel which</span>
<span class="slc">// are worked on in blocks of lines. The number of lines in those blocks is</span>
<span class="slc">// controlled by this setting.</span>
<span class="ppc">#define LINES_PER_BLOCK 1024</span>

<span class="ppc">#define CHARACTERS_PER_BLOCK (MAXIMUM_LINE_WIDTH*LINES_PER_BLOCK)</span>

<span class="slc">// The numbers of blocks to use is controlled by this setting. This program</span>
<span class="slc">// limits itself to using at most three threads (see explanation further below)</span>
<span class="slc">// so similarly only three blocks are used.</span>
<span class="ppc">#define BLOCKS_TO_USE 3</span>

<span class="ppc">#include &lt;stdint.h&gt;</span>
<span class="ppc">#include &lt;string.h&gt;</span>
<span class="ppc">#include &lt;stdio.h&gt;</span>
<span class="ppc">#include &lt;stdlib.h&gt;</span>

<span class="ppc">#ifdef _OPENMP</span>
	<span class="ppc">#include &lt;omp.h&gt;</span>
<span class="ppc">#endif</span>

<span class="slc">// intptr_t should be the native integer type on most sane systems.</span>
<span class="kwc">typedef</span> <span class="kwb">intptr_t</span> intnative_t;

<span class="kwc">typedef</span> <span class="kwb">struct</span>{
	<span class="kwb">char</span> letter;
	<span class="kwb">float</span> probability;
} nucleotide_info;


<span class="slc">// Repeatedly print string_To_Repeat until it has printed</span>
<span class="slc">// number_Of_Characters_To_Create. The output is also wrapped to</span>
<span class="slc">// MAXIMUM_LINE_WIDTH columns.</span>
<span class="kwb">static void</span> <span class="kwd">repeat_And_Wrap_String</span>(<span class="kwb">const char</span> string_To_Repeat[],
  <span class="kwb">const</span> intnative_t number_Of_Characters_To_Create){
	<span class="kwb">const</span> intnative_t string_To_Repeat_Length=<span class="kwd">strlen</span>(string_To_Repeat);

	<span class="slc">// Create an extended_String_To_Repeat which is a copy of string_To_Repeat</span>
	<span class="slc">// but extended with another copy of the first MAXIMUM_LINE_WIDTH characters</span>
	<span class="slc">// of string_To_Repeat appended to the end. Later on this allows us to</span>
	<span class="slc">// generate a line of output just by doing simple memory copies using an</span>
	<span class="slc">// appropriate offset into extended_String_To_Repeat.</span>
	<span class="kwb">char</span> extended_String_To_Repeat[string_To_Repeat_Length+MAXIMUM_LINE_WIDTH];
	<span class="kwa">for</span>(intnative_t column=<span class="num">0</span>; column&lt;string_To_Repeat_Length+MAXIMUM_LINE_WIDTH;
	  column++)
		extended_String_To_Repeat[column]=
		  string_To_Repeat[column%string_To_Repeat_Length];
	intnative_t offset=<span class="num">0</span>;

	<span class="kwb">char</span> line[MAXIMUM_LINE_WIDTH+<span class="num">1</span>];
	line[MAXIMUM_LINE_WIDTH]=<span class="str">'</span><span class="esc">\n</span><span class="str">'</span>;

	<span class="kwa">for</span>(intnative_t current_Number_Of_Characters_To_Create=
	  number_Of_Characters_To_Create;
	  current_Number_Of_Characters_To_Create&gt;<span class="num">0</span>;){
		<span class="slc">// Figure out the length of the line we need to write. If it's less than</span>
		<span class="slc">// MAXIMUM_LINE_WIDTH then we also need to add a line feed in the right</span>
		<span class="slc">// spot too.</span>
		intnative_t line_Length=MAXIMUM_LINE_WIDTH;
		<span class="kwa">if</span>(current_Number_Of_Characters_To_Create&lt;MAXIMUM_LINE_WIDTH){
			line_Length=current_Number_Of_Characters_To_Create;
			line[line_Length]=<span class="str">'</span><span class="esc">\n</span><span class="str">'</span>;
		}

		<span class="kwd">memcpy</span>(line, extended_String_To_Repeat+offset, line_Length);

		<span class="slc">// Update the offset, reducing it by string_To_Repeat_Length if</span>
		<span class="slc">// necessary.</span>
		offset+=line_Length;
		<span class="kwa">if</span>(offset&gt;string_To_Repeat_Length)
			offset-=string_To_Repeat_Length;

		<span class="slc">// Output the line to stdout and update the</span>
		<span class="slc">// current_Number_Of_Characters_To_Create.</span>
		<span class="kwd">fwrite</span>(line, line_Length+<span class="num">1</span>, <span class="num">1</span>, stdout);
		current_Number_Of_Characters_To_Create-=line_Length;
	}
}


<span class="slc">// Generate a floating point pseudorandom number from 0.0 to max using a linear</span>
<span class="slc">// congruential generator.</span>
<span class="ppc">#define IM		139968</span>
<span class="ppc">#define IA		3877</span>
<span class="ppc">#define IC		29573</span>
<span class="kwb">uint32_t</span> seed=<span class="num">42</span>;
<span class="kwc">inline</span> <span class="kwb">float</span> <span class="kwd">get_LCG_Pseudorandom_Number</span>(<span class="kwb">const float</span> max){
	seed=(seed*IA + IC)%IM;
	<span class="kwa">return</span> max/IM*seed;
}


<span class="slc">// Output any blocks that are ready to be output. Checks the block_Statuses of</span>
<span class="slc">// up to number_Of_Blocks starting at next_Block_To_Output.</span>
<span class="kwb">void</span> <span class="kwd">output_Blocks</span>(<span class="kwb">char</span> (* <span class="kwb">const</span> blocks)[CHARACTERS_PER_BLOCK+LINES_PER_BLOCK],
  intnative_t * <span class="kwb">const</span> block_Statuses, intnative_t * <span class="kwb">const</span> next_Block_To_Output,
  <span class="kwb">const</span> intnative_t number_Of_Blocks){

	<span class="slc">// Iterate over all the blocks at the start of the circular queue which are</span>
	<span class="slc">// ready to be output.</span>
	<span class="kwa">for</span>(; block_Statuses[*next_Block_To_Output]&gt;<span class="num">0</span>;
	  *next_Block_To_Output=(*next_Block_To_Output+<span class="num">1</span>)%number_Of_Blocks){

		<span class="slc">// Iterate over each line in the next_Block_To_Output.</span>
		<span class="kwb">char</span> * line=blocks[*next_Block_To_Output];
		<span class="kwa">for</span>(intnative_t block_Characters_Left_To_Output=
		  block_Statuses[*next_Block_To_Output];
		  block_Characters_Left_To_Output&gt;<span class="num">0</span>;){
			<span class="slc">// Add a line feed to the end of the line.</span>
			line[MAXIMUM_LINE_WIDTH]=<span class="str">'</span><span class="esc">\n</span><span class="str">'</span>;

			<span class="slc">// Determine what the line_Length should be and if necessary add a</span>
			<span class="slc">// line feed at the end.</span>
			intnative_t line_Length=MAXIMUM_LINE_WIDTH;
			<span class="kwa">if</span>(block_Characters_Left_To_Output&lt;MAXIMUM_LINE_WIDTH){
				line_Length=block_Characters_Left_To_Output;
				line[line_Length]=<span class="str">'</span><span class="esc">\n</span><span class="str">'</span>;
			}

			<span class="slc">// Write one line of the block.</span>
			<span class="kwd">fwrite</span>(line, line_Length+<span class="num">1</span>, <span class="num">1</span>, stdout);

			<span class="slc">// Decrement block_Characters_Left_To_Output and advance to the next</span>
			<span class="slc">// line.</span>
			block_Characters_Left_To_Output-=line_Length;
			line+=line_Length+<span class="num">1</span>;
		}

		<span class="slc">// Mark the block as unused now.</span>
		block_Statuses[*next_Block_To_Output]=-<span class="num">1</span>;
	}
}


<span class="slc">// Print a pseudorandom DNA sequence that is number_Of_Characters_To_Create</span>
<span class="slc">// characters long and made up of the nucleotides specified in</span>
<span class="slc">// nucleotides_Information and occurring at the frequencies specified in</span>
<span class="slc">// nucleotides_Information. The output is also wrapped to MAXIMUM_LINE_WIDTH</span>
<span class="slc">// columns.</span>
<span class="kwb">static void</span> <span class="kwd">generate_And_Wrap_Pseudorandom_DNA_Sequence</span>(
  <span class="kwb">const</span> nucleotide_info nucleotides_Information[],
  <span class="kwb">const</span> intnative_t number_Of_Nucleotides,
  <span class="kwb">const</span> intnative_t number_Of_Characters_To_Create){

	<span class="slc">// Cumulate the probabilities. Note that the probability is being multiplied</span>
	<span class="slc">// by IM because later on we'll also be calling the random number generator</span>
	<span class="slc">// with a value that is multiplied by IM. Since the random number generator</span>
	<span class="slc">// does a division by IM this allows the compiler to cancel out the</span>
	<span class="slc">// multiplication and division by IM with each other without requiring any</span>
	<span class="slc">// changes to the random number generator code whose code was explicitly</span>
	<span class="slc">// defined in the rules.</span>
	<span class="kwb">float</span> cumulative_Probabilities[number_Of_Nucleotides],
	  cumulative_Probability=<span class="num">0.0</span>;
	<span class="kwa">for</span>(intnative_t i=<span class="num">0</span>; i&lt;number_Of_Nucleotides; i++){
		cumulative_Probability+=nucleotides_Information[i].probability;
		cumulative_Probabilities[i]=cumulative_Probability*IM;
	}

	<span class="slc">// blocks is a circular queue that stores the blocks while they are being</span>
	<span class="slc">// processed. next_Block_To_Output contains the index of the first block in</span>
	<span class="slc">// the queue which is also the next block that should be output once it is</span>
	<span class="slc">// ready.</span>
	<span class="kwb">char</span> blocks[BLOCKS_TO_USE][CHARACTERS_PER_BLOCK+LINES_PER_BLOCK];
	intnative_t next_Block_To_Output=<span class="num">0</span>;

	<span class="slc">// block_Statuses contains a status value for each block in the circular</span>
	<span class="slc">// queue.</span>
	<span class="slc">//  -A value of -1 means that block is not in use.</span>
	<span class="slc">//  -A value of 0 means that block is in use and being processed.</span>
	<span class="slc">//  -A positive value means that block is ready to be output and the value</span>
	<span class="slc">//   is its length.</span>
	intnative_t block_Statuses[BLOCKS_TO_USE];
	<span class="kwa">for</span>(intnative_t i=<span class="num">0</span>; i&lt;BLOCKS_TO_USE; block_Statuses[i++]=-<span class="num">1</span>);

	intnative_t current_Number_Of_Characters_To_Create=
	  number_Of_Characters_To_Create;

	<span class="slc">// Limit the number_Of_Threads_To_Use to three threads since the bottleneck</span>
	<span class="slc">// for this program is the speed at which the pseudorandom generator can be</span>
	<span class="slc">// ran at which is only fast enough to keep about two other threads busy.</span>
	<span class="slc">// Using more threads will start slowing down the program due to the</span>
	<span class="slc">// overhead from additional thread management and resource usage. Using more</span>
	<span class="slc">// threads will also use more CPU time too since normally waiting OpenMP</span>
	<span class="slc">// threads will use spinlocks.</span>
	<span class="ppc">#ifdef _OPENMP</span>
		intnative_t number_Of_Threads_To_Use=<span class="kwd">omp_get_num_procs</span>();
		<span class="kwa">if</span>(number_Of_Threads_To_Use&gt;<span class="num">3</span>) number_Of_Threads_To_Use=<span class="num">3</span>;
		<span class="kwd">omp_set_num_threads</span>(number_Of_Threads_To_Use);
	<span class="ppc">#endif</span>

	<span class="ppc">#pragma omp parallel for schedule(guided)</span>
	<span class="kwa">for</span>(intnative_t current_Block_Number=<span class="num">0</span>; current_Block_Number&lt;
	  (number_Of_Characters_To_Create+CHARACTERS_PER_BLOCK-<span class="num">1</span>)/
	  CHARACTERS_PER_BLOCK; current_Block_Number++){

		intnative_t block_To_Use, block_Length;
		<span class="kwb">float</span> pseudorandom_Numbers[CHARACTERS_PER_BLOCK];

		<span class="slc">// Only one thread can be outputting blocks or generating pseudorandom</span>
		<span class="slc">// numbers at a time in order to ensure they are done in the correct</span>
		<span class="slc">// order.</span>
		<span class="ppc">#pragma omp critical</span>
		{
			<span class="slc">// Find the first unused block (if any) and set that as the</span>
			<span class="slc">// block_To_Use for outputting the nucleotide sequence to.</span>
			block_To_Use=next_Block_To_Output;
			<span class="kwa">for</span>(intnative_t i=<span class="num">0</span>; i&lt;BLOCKS_TO_USE; i++,
			  block_To_Use=(block_To_Use+<span class="num">1</span>)%BLOCKS_TO_USE){
				<span class="kwa">if</span>(block_Statuses[block_To_Use]==-<span class="num">1</span>)
					<span class="kwa">break</span>;
			}

			<span class="slc">// If no unused block was found then block_To_Use will be restored</span>
			<span class="slc">// to next_Block_To_Output and we will have to wait for it to finish</span>
			<span class="slc">// processing, output that block, and then use that block.</span>
			<span class="kwa">while</span>(block_Statuses[block_To_Use]==<span class="num">0</span>){
				<span class="ppc">#pragma omp flush(block_Statuses)</span>
			}

			<span class="slc">// Output any blocks that are ready to be output.</span>
			<span class="kwd">output_Blocks</span>(blocks, block_Statuses, &amp;next_Block_To_Output,
			  BLOCKS_TO_USE);

			<span class="slc">// Update the status for block_To_Use to reflect that it is now</span>
			<span class="slc">// being processed.</span>
			block_Statuses[block_To_Use]++;

			<span class="slc">// Figure out what the block_Length should be and decrement</span>
			<span class="slc">// current_Number_Of_Characters_To_Create by that amount.</span>
			block_Length=CHARACTERS_PER_BLOCK;
			<span class="kwa">if</span>(current_Number_Of_Characters_To_Create&lt;CHARACTERS_PER_BLOCK)
				block_Length=current_Number_Of_Characters_To_Create;
			current_Number_Of_Characters_To_Create-=block_Length;

			<span class="slc">// Get the pseudorandom_Numbers to use for this block.</span>
			<span class="kwa">for</span>(intnative_t pseudorandom_Number_Index=<span class="num">0</span>;
			  pseudorandom_Number_Index&lt;block_Length;
			  pseudorandom_Numbers[pseudorandom_Number_Index++]=
			  <span class="kwd">get_LCG_Pseudorandom_Number</span>(IM));
		}


		<span class="slc">// Start processing the pseudorandom_Numbers and generate the</span>
		<span class="slc">// corresponding block of nucleotides that will be output later by</span>
		<span class="slc">// filling block_To_Use with characters from nucleotides_Information[]</span>
		<span class="slc">// that are selected by looking up the pseudorandom number.</span>
		<span class="kwb">char</span> * line=blocks[block_To_Use];
		<span class="kwa">for</span>(intnative_t column=<span class="num">0</span>, pseudorandom_Number_Index=<span class="num">0</span>;
		  pseudorandom_Number_Index&lt;block_Length; pseudorandom_Number_Index++){
			<span class="kwb">const float</span> r=pseudorandom_Numbers[pseudorandom_Number_Index];

			<span class="slc">// Count the number of nucleotides with a probability less than what</span>
			<span class="slc">// was selected by the random number generator and then use that</span>
			<span class="slc">// count as an index for the nucleotide to select. It's arguable</span>
			<span class="slc">// whether this qualifies as a linear search but I guess you can say</span>
			<span class="slc">// that you're doing a linear search for all the nucleotides with a</span>
			<span class="slc">// probability less than what was selected by the random number</span>
			<span class="slc">// generator and then just counting how many matches were found.</span>
			<span class="slc">// With a small number of nucleotides this can be faster than doing</span>
			<span class="slc">// a more normal linear search (although in some cases it may</span>
			<span class="slc">// generate different results) and a couple of the other programs</span>
			<span class="slc">// already do this as well so we will too.</span>
			intnative_t count=<span class="num">0</span>;
			<span class="kwa">for</span>(intnative_t i=<span class="num">0</span>; i&lt;number_Of_Nucleotides; i++)
				<span class="kwa">if</span>(cumulative_Probabilities[i]&lt;=r)
					count++;

			line[column]=nucleotides_Information[count].letter;

			<span class="slc">// If we reach the end of the line, reset the column counter and</span>
			<span class="slc">// advance to the next line.</span>
			<span class="kwa">if</span>(++column==MAXIMUM_LINE_WIDTH){
				column=<span class="num">0</span>;
				line+=MAXIMUM_LINE_WIDTH+<span class="num">1</span>;
			}
		}


		<span class="slc">// Update the block_Statuses so that this block_To_Use gets output</span>
		<span class="slc">// later.</span>
		block_Statuses[block_To_Use]=block_Length;
	}

	<span class="slc">// Output the remaining blocks.</span>
	<span class="kwd">output_Blocks</span>(blocks, block_Statuses, &amp;next_Block_To_Output, BLOCKS_TO_USE);
}


<span class="kwb">int</span> <span class="kwd">main</span>(<span class="kwb">int</span> argc, <span class="kwb">char</span> ** argv){
	<span class="kwb">const</span> intnative_t n=<span class="kwd">atoi</span>(argv[<span class="num">1</span>]);

	<span class="kwd">fputs</span>(<span class="str">&quot;&gt;ONE Homo sapiens alu</span><span class="esc">\n</span><span class="str">&quot;</span>, stdout);
	<span class="kwb">const char</span> homo_Sapiens_Alu[]=
	  <span class="str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGGGAGGCCGAGGCGGGCGGATCACCTGAGGTC&quot;</span>
	  <span class="str">&quot;AGGAGTTCGAGACCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAATACAAAAATTAGCCGGGCG&quot;</span>
	  <span class="str">&quot;TGGTGGCGCGCGCCTGTAATCCCAGCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGGAGGCGG&quot;</span>
	  <span class="str">&quot;AGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCCAGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span>;
	<span class="kwd">repeat_And_Wrap_String</span>(homo_Sapiens_Alu, <span class="num">2</span>*n);

	<span class="kwd">fputs</span>(<span class="str">&quot;&gt;TWO IUB ambiguity codes</span><span class="esc">\n</span><span class="str">&quot;</span>, stdout);
	nucleotide_info iub_Nucleotides_Information[]={
	  {<span class="str">'a'</span>, <span class="num">0.27</span>}, {<span class="str">'c'</span>, <span class="num">0.12</span>}, {<span class="str">'g'</span>, <span class="num">0.12</span>}, {<span class="str">'t'</span>, <span class="num">0.27</span>}, {<span class="str">'B'</span>, <span class="num">0.02</span>},
	  {<span class="str">'D'</span>, <span class="num">0.02</span>}, {<span class="str">'H'</span>, <span class="num">0.02</span>}, {<span class="str">'K'</span>, <span class="num">0.02</span>}, {<span class="str">'M'</span>, <span class="num">0.02</span>}, {<span class="str">'N'</span>, <span class="num">0.02</span>},
	  {<span class="str">'R'</span>, <span class="num">0.02</span>}, {<span class="str">'S'</span>, <span class="num">0.02</span>}, {<span class="str">'V'</span>, <span class="num">0.02</span>}, {<span class="str">'W'</span>, <span class="num">0.02</span>}, {<span class="str">'Y'</span>, <span class="num">0.02</span>}};
	<span class="kwd">generate_And_Wrap_Pseudorandom_DNA_Sequence</span>(iub_Nucleotides_Information,
	  <span class="kwa">sizeof</span>(iub_Nucleotides_Information)/<span class="kwa">sizeof</span>(nucleotide_info), <span class="num">3</span>*n);

	<span class="kwd">fputs</span>(<span class="str">&quot;&gt;THREE Homo sapiens frequency</span><span class="esc">\n</span><span class="str">&quot;</span>, stdout);
	nucleotide_info homo_Sapien_Nucleotides_Information[]={
	  {<span class="str">'a'</span>, <span class="num">0.3029549426680</span>}, {<span class="str">'c'</span>, <span class="num">0.1979883004921</span>},
	  {<span class="str">'g'</span>, <span class="num">0.1975473066391</span>}, {<span class="str">'t'</span>, <span class="num">0.3015094502008</span>}};
	<span class="kwd">generate_And_Wrap_Pseudorandom_DNA_Sequence</span>(
	  homo_Sapien_Nucleotides_Information,
	  <span class="kwa">sizeof</span>(homo_Sapien_Nucleotides_Information)/<span class="kwa">sizeof</span>(nucleotide_info), <span class="num">5</span>*n);

	<span class="kwa">return</span> <span class="num">0</span>;
}
