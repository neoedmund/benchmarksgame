<span class="slc">// The Computer Language Benchmarks Game</span>
<span class="slc">// http://benchmarksgame.alioth.debian.org/</span>
<span class="slc">//</span>
<span class="slc">// Modification by Don Syme &amp; Jomo Fisher to use null as representation</span>
<span class="slc">// of Empty node and to use a single Next element.</span>
<span class="slc">// Based on F# version by Robert Pickering</span>
<span class="slc">// Based on ocaml version by Troestler Christophe &amp; Isaac Gouy</span>

<span class="kwa">open</span> <span class="kwd">System</span>
<span class="kwa">open</span> <span class="kwd">Unchecked</span>

<span class="kwa">type</span> <span class="kwd">Next</span> = { <span class="kwd">Left</span>: <span class="kwd">Tree</span>; <span class="kwd">Right</span>: <span class="kwd">Tree</span> }
<span class="kwa">and</span> [&lt;<span class="kwd">Struct</span>&gt;] <span class="kwd">Tree</span>(next:<span class="kwd">Next</span>,item:<span class="kwb">int</span>) =
    <span class="kwa">member</span> t.<span class="kwd">Check</span>() =
        <span class="kwa">match</span> box next <span class="kwa">with</span> 
        | <span class="kwa">null</span> -&gt; item
        | _ -&gt; item + next.<span class="kwd">Left</span>.<span class="kwd">Check</span>() - next.<span class="kwd">Right</span>.<span class="kwd">Check</span>()

<span class="kwa">let rec</span> make item depth =
    <span class="kwa">if</span> depth &gt; <span class="num">0</span> <span class="kwa">then</span> <span class="kwd">Tree</span>({<span class="kwd">Left</span> = make (<span class="num">2</span>*item-<span class="num">1</span>) (depth-<span class="num">1</span>); <span class="kwd">Right</span>=make (<span class="num">2</span>*item) (depth-<span class="num">1</span>)}, item)
    <span class="kwa">else</span> <span class="kwd">Tree</span>(defaultof&lt;_&gt;,item)

<span class="kwa">let inline</span> check (tree:<span class="kwd">Tree</span>) = tree.<span class="kwd">Check</span>()

<span class="kwa">let rec</span> loopDepths maxDepth minDepth d =
    <span class="kwa">if</span> d &lt;= maxDepth <span class="kwa">then</span>
        <span class="kwa">let</span> niter = <span class="num">1</span> &lt;&lt;&lt; (maxDepth - d + minDepth)
        <span class="kwa">let mutable</span> c = <span class="num">0</span>
        <span class="kwa">for</span> i = <span class="num">1</span> <span class="kwa">to</span> niter <span class="kwa">do</span>
            c &lt;- c + check (make i d) + check (make (-i) d)
        <span class="kwd">Console</span>.<span class="kwd">WriteLine</span>(<span class="str">&quot;</span><span class="ipl">{0}</span><span class="str"></span><span class="esc">\t</span> <span class="str">trees of depth</span> <span class="ipl">{1}</span><span class="str"></span><span class="esc">\t</span> <span class="str">check:</span> <span class="ipl">{2}</span><span class="str">&quot;</span>,<span class="num">2</span> * niter,d,c)
        loopDepths maxDepth minDepth (d + <span class="num">2</span>)

[&lt;<span class="kwd">EntryPoint</span>&gt;]
<span class="kwa">let</span> main args =
    <span class="kwa">let</span> minDepth = <span class="num">4</span>
    <span class="kwa">let</span> maxDepth =
        <span class="kwa">let</span> n = <span class="kwa">if</span> args.<span class="kwd">Length</span> &gt; <span class="num">0</span> <span class="kwa">then</span> <span class="kwb">int</span> args.[<span class="num">0</span>] <span class="kwa">else</span> <span class="num">10</span>
        max (minDepth + <span class="num">2</span>) n
    <span class="kwa">let</span> stretchDepth = maxDepth + <span class="num">1</span>

    <span class="kwa">let</span> c = check (make <span class="num">0</span> stretchDepth)
    <span class="kwd">Console</span>.<span class="kwd">WriteLine</span>(<span class="str">&quot;stretch tree of depth</span> <span class="ipl">{0}</span><span class="str"></span><span class="esc">\t</span> <span class="str">check:</span> <span class="ipl">{1}</span><span class="str">&quot;</span>,stretchDepth,c)
    <span class="kwa">let</span> longLivedTree = make <span class="num">0</span> maxDepth
    loopDepths maxDepth minDepth minDepth
    <span class="kwd">Console</span>.<span class="kwd">WriteLine</span>(<span class="str">&quot;long lived tree of depth</span> <span class="ipl">{0}</span><span class="str"></span><span class="esc">\t</span> <span class="str">check:</span> <span class="ipl">{1}</span><span class="str">&quot;</span>,maxDepth,(check longLivedTree))
    exit <span class="num">0</span>
