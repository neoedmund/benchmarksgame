<span class="com">/* The Computer Language Benchmarks Game</span>
<span class="com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * Contributed by Martin Koistinen</span>
<span class="com"> * Based on mandelbrot.c contributed by Greg Buchholz and The Go Authors</span>
<span class="com"> * flag.Arg hack by Isaac Gouy</span>
<span class="com"> *</span>
<span class="com"> * Large changes by Bill Broadley, including:</span>
<span class="com"> * 1) Switching the one goroutine per line to one per CPU</span>
<span class="com"> * 2) Replacing gorouting calls with channels</span>
<span class="com"> * 3) Handling out of order results in the file writer.</span>
<span class="com"></span>
<span class="com"> * modified by Sean Lake</span>
<span class="com"> *</span>
<span class="com"> * modified by Rodrigo Corsi Oct 04/2014</span>
<span class="com"> * 1)two goroutines per cpu</span>
<span class="com"> * 2)each goroutine generate one line and increment counter (atomic int32)</span>
<span class="com"> */</span>

<span class="kwa">package</span> main

<span class="kwa">import</span> (
   <span class="str">&quot;bufio&quot;</span>
   <span class="str">&quot;flag&quot;</span>
   <span class="str">&quot;fmt&quot;</span>
   <span class="str">&quot;os&quot;</span>
   <span class="str">&quot;runtime&quot;</span>
   <span class="str">&quot;strconv&quot;</span>
   <span class="str">&quot;sync&quot;</span>
   <span class="str">&quot;sync/atomic&quot;</span>
)

<span class="kwa">const</span> LIMIT = <span class="num">4.0</span> <span class="slc">//2*2</span>
<span class="kwa">const</span> ITER = <span class="num">50</span> <span class="slc">// Benchmark parameter</span>

<span class="kwa">var</span> pool <span class="kwb">int</span>
<span class="kwa">var</span> yAt <span class="kwb">int32</span> = -<span class="num">1</span>
<span class="kwa">var</span> fields [][]<span class="kwb">byte</span>
<span class="kwa">var</span> size = <span class="num">4000</span>
<span class="kwa">var</span> bytesPerRow <span class="kwb">int</span>
<span class="kwa">var</span> initial_r []<span class="kwb">float64</span>
<span class="kwa">var</span> initial_i []<span class="kwb">float64</span>

<span class="slc">// This func is responsible for rendering a row of pixels</span>
<span class="kwa">func</span> <span class="kwd">renderRow</span>(y0 *<span class="kwb">int32</span>) []<span class="kwb">byte</span>{
   <span class="kwa">var</span> i, j, x, xb <span class="kwb">int</span>
   <span class="kwa">var</span> res, b <span class="kwb">byte</span>
   <span class="kwa">var</span> Zr1, Zr2, Zi1, Zi2, Tr1, Tr2, Ti1, Ti2 <span class="kwb">float64</span>

   field := <span class="kwb">make</span>([]<span class="kwb">byte</span>, bytesPerRow)

   <span class="kwa">for</span> x=<span class="num">0</span>; x&lt;bytesPerRow; x++{
      res=<span class="num">0</span>
      Ci := initial_i[*y0]
      <span class="kwa">for</span> i=<span class="num">0</span>; i&lt;<span class="num">8</span>; i+=<span class="num">2</span>{
         xb = x&lt;&lt;<span class="num">3</span>
         Cr1:=initial_r[xb+i]
         Cr2:=initial_r[xb+i+<span class="num">1</span>]

         Zr1=Cr1
         Zi1=Ci

         Zr2=Cr2
         Zi2=Ci

         b = <span class="num">0</span>

         <span class="kwa">for</span> j=<span class="num">0</span>; j&lt;ITER; j++{
            Tr1 = Zr1*Zr1
            Ti1 = Zi1*Zi1
            Zi1 = <span class="num">2</span>*Zr1*Zi1+Ci
            Zr1 = Tr1-Ti1+Cr1 

            <span class="kwa">if</span>(Tr1+Ti1&gt;LIMIT){
               b|=<span class="num">2</span>
               <span class="kwa">if</span>(b==<span class="num">3</span>){
                  <span class="kwa">break</span>
               }
            }

            Tr2 = Zr2*Zr2
            Ti2 = Zi2*Zi2
            Zi2 = <span class="num">2</span>*Zr2*Zi2+Ci
            Zr2 = Tr2-Ti2+Cr2 

            <span class="kwa">if</span>(Tr2+Ti2&gt;LIMIT){
               b|=<span class="num">1</span>
               <span class="kwa">if</span>(b==<span class="num">3</span>){
                  <span class="kwa">break</span>
               }
            }
         }
         res= (res&lt;&lt;<span class="num">2</span>) | b
      }
      field[x] = ^res 
   }
   <span class="kwa">return</span> field
}

<span class="kwa">func</span> <span class="kwd">renderRows</span>(wg *sync.WaitGroup, s32 <span class="kwb">int32</span>){
   <span class="kwa">var</span> y <span class="kwb">int32</span>
   <span class="kwa">for</span> y=atomic.<span class="kwd">AddInt32</span>(&amp;yAt, <span class="num">1</span>); y&lt;s32; y=atomic.<span class="kwd">AddInt32</span>(&amp;yAt, <span class="num">1</span>){
      fields[y] = <span class="kwd">renderRow</span>( &amp;y )
   }
   wg.<span class="kwd">Done</span>()
}

<span class="kwa">func</span> <span class="kwd">main</span>() {
   pool = runtime.<span class="kwd">NumCPU</span>() &lt;&lt; <span class="num">1</span>
   runtime.<span class="kwd">GOMAXPROCS</span>(pool)
   
   <span class="slc">// Get input, if any...</span>
   flag.<span class="kwd">Parse</span>()
   <span class="kwa">if</span> flag.<span class="kwd">NArg</span>() &gt; <span class="num">0</span> {
      size, _ = strconv.<span class="kwd">Atoi</span>(flag.<span class="kwd">Arg</span>(<span class="num">0</span>))
   }

   bytesPerRow = size &gt;&gt; <span class="num">3</span>

   <span class="slc">// Precompute the initial real and imaginary values for each x and y</span>
   <span class="slc">// coordinate in the image.</span>
   initial_r = <span class="kwb">make</span>([]<span class="kwb">float64</span>, size)
   initial_i = <span class="kwb">make</span>([]<span class="kwb">float64</span>, size)
   inv := <span class="num">2.0</span> / <span class="kwb">float64</span>(size)
   <span class="kwa">for</span> xy:=<span class="num">0</span>; xy&lt;size; xy++{
      i:=inv*<span class="kwb">float64</span>(xy)
      initial_r[xy]=i - <span class="num">1.5</span>
      initial_i[xy]=i - <span class="num">1.0</span>
   }

   fields = <span class="kwb">make</span>([][]<span class="kwb">byte</span>, size)

   <span class="com">/* Wait group for finish */</span>
   wg := <span class="kwb">new</span>(sync.WaitGroup)
   wg.<span class="kwd">Add</span>(pool)
      
   <span class="kwa">var</span> s32 <span class="kwb">int32</span> = <span class="kwb">int32</span>(size)<span class="slc">//to compare with y int32</span>
   <span class="slc">// start pool workers, and assign all work</span>
   <span class="kwa">for</span> i := <span class="num">0</span>; i &lt; pool; i++ {
      <span class="kwa">go</span> <span class="kwd">renderRows</span>(wg, s32)
   }

   <span class="com">/* wait for the file workers to finish, then write */</span>
   wg.<span class="kwd">Wait</span>()

   out := bufio.<span class="kwd">NewWriter</span>(os.Stdout)
   <span class="kwa">defer</span> out.<span class="kwd">Flush</span>()
   fmt.<span class="kwd">Fprintf</span>(out, <span class="str">&quot;P4</span><span class="esc">\n</span><span class="str"></span><span class="ipl">%d %d</span><span class="str"></span><span class="esc">\n</span><span class="str">&quot;</span>, size, size)

   <span class="kwa">for</span> y:=<span class="num">0</span> ; y&lt;size ; y++{
      out.<span class="kwd">Write</span>(fields[y])
   }
}
