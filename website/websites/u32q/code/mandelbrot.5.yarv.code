<span class="slc"># The Computer Language Benchmarks Game</span>
<span class="slc"># http://benchmarksgame.alioth.debian.org</span>
<span class="slc">#</span>
<span class="slc">#  contributed by Karl von Laudermann</span>
<span class="slc">#  modified by Jeremy Echols</span>
<span class="slc">#  modified by Detlef Reichl</span>
<span class="slc">#  modified by Joseph LaFata</span>
<span class="slc">#  modified by Peter Zotov</span>
<span class="slc">#  parallelised by Scott Leggett</span>

<span class="kwa">module</span> MiniParallel
    <span class="kwa">class</span> Worker
        <span class="kwa">def</span> <span class="kwd">initialize</span>(read, write<span class="opt">)</span>
            <span class="kwb">&#64;read</span>, <span class="kwb">&#64;write</span> = read, write
        <span class="kwa">end</span>

        <span class="kwa">def</span> close_pipes
            <span class="kwb">&#64;read</span>.close
            <span class="kwb">&#64;write</span>.close
        <span class="kwa">end</span>

        <span class="kwa">def</span> <span class="kwd">work</span>(index<span class="opt">)</span>
            Marshal.<span class="kwd">dump</span>(index, <span class="kwb">&#64;write</span><span class="opt">)</span>
            Marshal.<span class="kwd">load</span>(<span class="kwb">&#64;read</span><span class="opt">)</span>
        <span class="kwa">end</span>
    <span class="kwa">end</span>

    <span class="kwa">def self</span>.<span class="kwd">map</span>(array, &amp;block<span class="opt">)</span>
        <span class="kwd">work_in_processes</span>(
            array,
            [array.size, core_count].min,
            &amp;block
        <span class="opt">)</span>
    <span class="kwa">end</span>

    <span class="kwa">def self</span>.core_count
        &#64;<span class="kwb">&#64;core_count</span> ||= IO.<span class="kwd">read</span>(<span class="str">&quot;/proc/cpuinfo&quot;</span><span class="opt">)</span>.<span class="kwd">scan</span>(<span class="kwc">/^processor/</span><span class="opt">)</span>.size
    <span class="kwa">end</span>

    private

    <span class="kwa">def self</span>.<span class="kwd">work_in_processes</span>(array, count, &amp;block<span class="opt">)</span>
        index = -<span class="num">1</span>
        results, threads = [], []

        workers = <span class="kwd">create_workers</span>(array, count, &amp;block<span class="opt">)</span>

        workers.each <span class="kwa">do</span> |worker|
            threads &lt;&lt; Thread.new <span class="kwa">do</span>
              <span class="kwa">loop do</span>
                Thread.exclusive{ index += 1 }
                <span class="kwa">break if</span> index &gt;= array.size
                results[index] = worker.<span class="kwd">work</span>(index<span class="opt">)</span>
              <span class="kwa">end</span>
              worker.close_pipes
            <span class="kwa">end</span>
        <span class="kwa">end</span>

        threads.<span class="kwd">each</span>(&amp;<span class="kwc">:join</span><span class="opt">)</span>
        Process.waitall

        results
    <span class="kwa">end</span>

    <span class="kwa">def self</span>.<span class="kwd">create_workers</span>(array, count, &amp;block<span class="opt">)</span>
        workers = []
        count.times <span class="kwa">do</span>
            workers &lt;&lt; <span class="kwd">create_worker</span>(array, workers, &amp;block<span class="opt">)</span>
        <span class="kwa">end</span>
        workers
    <span class="kwa">end</span>

    <span class="kwa">def self</span>.<span class="kwd">create_worker</span>(array, started_workers, &amp;block<span class="opt">)</span>
        child_read, parent_write = IO.pipe
        parent_read, child_write = IO.pipe

        Process.fork <span class="kwa">do</span>
            started_workers.<span class="kwd">each</span>(&amp;<span class="kwc">:close_pipes</span><span class="opt">)</span>

            parent_write.close
            parent_read.close

            <span class="kwd">process_incoming_jobs</span>(child_read, child_write, array, &amp;block<span class="opt">)</span>

            child_read.close
            child_write.close
        <span class="kwa">end</span>

        child_read.close
        child_write.close

        Worker.<span class="kwd">new</span>(parent_read, parent_write<span class="opt">)</span>
    <span class="kwa">end</span>

    <span class="kwa">def self</span>.<span class="kwd">process_incoming_jobs</span>(read, write, array, &amp;block<span class="opt">)</span>
        <span class="kwa">until</span> read.eof?
            index = Marshal.<span class="kwd">load</span>(read<span class="opt">)</span>
            Marshal.<span class="kwd">dump</span>(block.<span class="kwd">call</span>(array[index]<span class="opt">)</span>, write<span class="opt">)</span>
        <span class="kwa">end</span>
    <span class="kwa">end</span>
<span class="kwa">end</span>

Size = <span class="kwc">ARGV</span>.shift.to_i

puts <span class="str">&quot;P4</span><span class="esc">\n</span><span class="str"></span><span class="ipl">#{Size}</span> <span class="str"></span><span class="ipl">#{Size}</span><span class="str">&quot;</span>

<span class="kwa">def</span> row y
    byte_acc = <span class="num">0</span>
    bit_num = <span class="num">0</span>
    res = []
    ci = (<span class="num">2.0</span>*y/Size<span class="opt">)</span>-<span class="num">1.0</span>
    x = <span class="num">0</span>
    <span class="kwa">while</span> x &lt; Size
        zrzr = zr = <span class="num">0.0</span>
        zizi = zi = <span class="num">0.0</span>
        cr = (<span class="num">2.0</span>*x/Size<span class="opt">)</span>-<span class="num">1.5</span>
        escape = <span class="num">0b1</span>

        z = <span class="num">0</span>
        <span class="kwa">while</span> z &lt; <span class="num">50</span>
            tr = zrzr - zizi + cr
            ti = <span class="num">2.0</span>*zr*zi + ci
            zr = tr
            zi = ti
            <span class="slc"># preserve recalculation</span>
            zrzr = zr*zr
            zizi = zi*zi
            <span class="kwa">if</span> zrzr+zizi &gt; <span class="num">4.0</span>
                escape = <span class="num">0b0</span>
                <span class="kwa">break</span>
            <span class="kwa">end</span>
            z += <span class="num">1</span>
        <span class="kwa">end</span>

        byte_acc = (byte_acc &lt;&lt; <span class="num">1</span><span class="opt">)</span> | escape
        bit_num += <span class="num">1</span>

        <span class="slc"># Code is very similar for these cases, but using separate blocks</span>
        <span class="slc"># ensures we skip the shifting when it's unnecessary, which is most</span>
        <span class="slc"># cases.</span>
        <span class="kwa">if</span> (bit_num == <span class="num">8</span><span class="opt">)</span>
            res &lt;&lt; byte_acc.chr
            byte_acc = <span class="num">0</span>
            bit_num = <span class="num">0</span>
        <span class="kwa">elsif</span> (x == Size - <span class="num">1</span><span class="opt">)</span>
            byte_acc &lt;&lt;= (<span class="num">8</span> - bit_num<span class="opt">)</span>
            res &lt;&lt; byte_acc.chr
            byte_acc = <span class="num">0</span>
            bit_num = <span class="num">0</span>
        <span class="kwa">end</span>
        x += <span class="num">1</span>
    <span class="kwa">end</span>
    res.join
<span class="kwa">end</span>

<span class="kwa">if</span> MiniParallel.core_count &gt; <span class="num">1</span>
    <span class="kwa">if</span> <span class="kwc">RUBY_PLATFORM</span> == <span class="str">'java'</span>
        threads = []
        out = []
        (<span class="num">0</span>...Size<span class="opt">)</span>.each <span class="kwa">do</span> |w|
            threads &lt;&lt; Thread.new <span class="kwa">do</span>
                out[w] = row w
            <span class="kwa">end</span>
        <span class="kwa">end</span>
        threads.all?(&amp;<span class="kwc">:join</span><span class="opt">)</span>
        print out.join
    <span class="kwa">else</span>
        print MiniParallel.<span class="kwd">map</span>((<span class="num">0</span>...Size<span class="opt">)</span>.to_a<span class="opt">)</span>{|y|row y}.join
    <span class="kwa">end</span>
<span class="kwa">else</span>
    (<span class="num">0</span>...Size<span class="opt">)</span>.each{|i|print row i}
<span class="kwa">end</span>
