<span class="com">/* The Computer Language Benchmarks Game</span>
<span class="com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * Contributed by Martin Koistinen</span>
<span class="com"> * Based on mandelbrot.c contributed by Greg Buchholz and The Go Authors</span>
<span class="com"> * flag.Arg hack by Isaac Gouy</span>
<span class="com"> *</span>
<span class="com"> * Large changes by Bill Broadley, including:</span>
<span class="com"> * 1) Switching the one goroutine per line to one per CPU</span>
<span class="com"> * 2) Replacing gorouting calls with channels</span>
<span class="com"> * 3) Handling out of order results in the file writer.</span>
<span class="com"> */</span>

<span class="kwa">package</span> main

<span class="kwa">import</span> (
   <span class="str">&quot;bufio&quot;</span>
   <span class="str">&quot;flag&quot;</span>
   <span class="str">&quot;fmt&quot;</span>
   <span class="str">&quot;os&quot;</span>
   <span class="str">&quot;strconv&quot;</span>
   <span class="str">&quot;runtime&quot;</span>
)

<span class="com">/* targeting a q6600 system, one cpu worker per core */</span>
<span class="kwa">const</span> pool = <span class="num">4</span>

<span class="kwa">const</span> ZERO <span class="kwb">float64</span> = <span class="num">0</span>
<span class="kwa">const</span> LIMIT = <span class="num">2.0</span>
<span class="kwa">const</span> ITER = <span class="num">50</span>   <span class="slc">// Benchmark parameter</span>
<span class="kwa">const</span> SIZE = <span class="num">16000</span>

<span class="kwa">var</span> rows []<span class="kwb">byte</span>
<span class="kwa">var</span> bytesPerRow <span class="kwb">int</span>

<span class="slc">// This func is responsible for rendering a row of pixels,</span>
<span class="slc">// and when complete writing it out to the file.</span>

<span class="kwa">func</span> <span class="kwd">renderRow</span>(w, h, bytes <span class="kwb">int</span>, workChan <span class="kwa">chan</span> <span class="kwb">int</span>,iter <span class="kwb">int</span>, finishChan <span class="kwa">chan</span> <span class="kwb">bool</span>) {

   <span class="kwa">var</span> Zr, Zi, Tr, Ti, Cr <span class="kwb">float64</span>
   <span class="kwa">var</span> x,i <span class="kwb">int</span>

   <span class="kwa">for</span> y := <span class="kwa">range</span> workChan {

      offset := bytesPerRow * y
      Ci := (<span class="num">2</span>*<span class="kwb">float64</span>(y)/<span class="kwb">float64</span>(h) - <span class="num">1.0</span>)

      <span class="kwa">for</span> x = <span class="num">0</span>; x &lt; w; x++ {
         Zr, Zi, Tr, Ti = ZERO, ZERO, ZERO, ZERO
         Cr = (<span class="num">2</span>*<span class="kwb">float64</span>(x)/<span class="kwb">float64</span>(w) - <span class="num">1.5</span>)

         <span class="kwa">for</span> i = <span class="num">0</span>; i &lt; iter &amp;&amp; Tr+Ti &lt;= LIMIT*LIMIT; i++ {
            Zi = <span class="num">2</span>*Zr*Zi + Ci
            Zr = Tr - Ti + Cr
            Tr = Zr * Zr
            Ti = Zi * Zi
         }

         <span class="slc">// Store the value in the array of ints</span>
         <span class="kwa">if</span> Tr+Ti &lt;= LIMIT*LIMIT {
            rows[offset+x/<span class="num">8</span>] |= (<span class="kwb">byte</span>(<span class="num">1</span>) &lt;&lt; <span class="kwb">uint</span>(<span class="num">7</span>-(x%8)))
         }
      }
   }
   <span class="com">/* tell master I'm finished */</span>
   finishChan &lt;- <span class="kwb">true</span>
}

<span class="kwa">func</span> <span class="kwd">main</span>() {
   runtime.<span class="kwd">GOMAXPROCS</span>(pool) 

   size := SIZE   <span class="slc">// Contest settings</span>
   iter := ITER

   <span class="slc">// Get input, if any...</span>
   flag.<span class="kwd">Parse</span>()
   <span class="kwa">if</span> flag.<span class="kwd">NArg</span>() &gt; <span class="num">0</span> {
      size, _ = strconv.<span class="kwd">Atoi</span>(flag.<span class="kwd">Arg</span>(<span class="num">0</span>))
   }
   w, h := size, size
   bytesPerRow =  w / <span class="num">8</span>

   out := bufio.<span class="kwd">NewWriter</span>(os.Stdout)
   <span class="kwa">defer</span> out.<span class="kwd">Flush</span>()
   fmt.<span class="kwd">Fprintf</span>(out, <span class="str">&quot;P4</span><span class="esc">\n</span><span class="str"></span><span class="ipl">%d %d</span><span class="str"></span><span class="esc">\n</span><span class="str">&quot;</span>, w, h)

   rows = <span class="kwb">make</span>([]<span class="kwb">byte</span>, bytesPerRow*h)

   <span class="com">/* global buffer of work for workers, ideally never runs dry */</span>
   workChan := <span class="kwb">make</span>(<span class="kwa">chan</span> <span class="kwb">int</span>, pool*<span class="num">2</span>+<span class="num">1</span>)
   <span class="com">/* global buffer of results for output, ideally never blocks */</span>
   finishChan := <span class="kwb">make</span>(<span class="kwa">chan</span> <span class="kwb">bool</span>)
   <span class="slc">// start pool workers, and assign all work</span>
   <span class="kwa">for</span> y := <span class="num">0</span>; y &lt; size; y++ {
      <span class="kwa">if</span> y &lt; pool {
         <span class="kwa">go</span> <span class="kwd">renderRow</span>(w, h, bytesPerRow, workChan, iter,finishChan)
      }
      workChan &lt;- y
   }
   <span class="com">/* tell the workers all done */</span>
   <span class="kwb">close</span>(workChan)
   <span class="com">/* write for the file workers to finish */</span>
   <span class="kwa">for</span> i:=<span class="num">0</span>;i&lt;pool;i++ {
      &lt;- finishChan
   }
   out.<span class="kwd">Write</span>(rows)
}
