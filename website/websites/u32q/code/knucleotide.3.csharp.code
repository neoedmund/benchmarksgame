<span class="com">/* The Computer Language Benchmarks Game</span>
<span class="com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * contributed by Isaac Gouy</span>
<span class="com"> * modified by Antti Lankila for generics</span>
<span class="com"> * modified by A.Nahr for performance and throwing unneccesary stuff out</span>
<span class="com"> * remove unsafe code &amp; add multithread by The Anh Tran</span>
<span class="com"> */</span>

<span class="kwa">using</span> System;
<span class="kwa">using</span> System.IO;
<span class="kwa">using</span> System.Collections.Generic;
<span class="kwa">using</span> System.Text;
<span class="kwa">using</span> System.Threading;

<span class="kwa">public class</span> knucleotide
{
    <span class="kwa">static private</span> <span class="kwb">string</span>   input;
    <span class="kwa">static private</span> <span class="kwb">int</span>      task_count = <span class="num">7</span>;
    <span class="kwa">static private</span> <span class="kwb">string</span>[] result = <span class="kwa">new</span> <span class="kwb">string</span>[<span class="num">7</span>];

   <span class="kwa">public static</span> <span class="kwb">void</span> <span class="kwd">Main</span>(<span class="com">/*string[] arg*/</span>)
   {
      StreamReader source = <span class="kwa">new</span> <span class="kwd">StreamReader</span>(Console.<span class="kwd">OpenStandardInput</span>());
        
        <span class="kwb">string</span> line;
      <span class="kwa">while</span> ((line = source.<span class="kwd">ReadLine</span>()) != <span class="kwa">null</span>)
      {
         <span class="kwa">if</span> (line.<span class="kwd">StartsWith</span>(<span class="str">&quot;&gt;THREE&quot;</span>, StringComparison.CurrentCultureIgnoreCase))
            <span class="kwa">break</span>;
      }

      StringBuilder buf = <span class="kwa">new</span> <span class="kwd">StringBuilder</span>(<span class="num">64</span> * <span class="num">1024</span> * <span class="num">1024</span>); <span class="slc">// 64mb</span>
      <span class="kwa">while</span> ((line = source.<span class="kwd">ReadLine</span>()) != <span class="kwa">null</span>)
         buf.<span class="kwd">Append</span>(line);

        input = buf.<span class="kwd">ToString</span>();
      buf = <span class="kwa">null</span>;

        Thread[] threads = <span class="kwa">new</span> Thread[Environment.ProcessorCount];
        <span class="kwa">for</span> (<span class="kwb">int</span> i = <span class="num">0</span>; i &lt; threads.Length; i++)
        {
            threads[i] = <span class="kwa">new</span> <span class="kwd">Thread</span>(worker);
            threads[i].<span class="kwd">Start</span>();
        }

        <span class="kwa">foreach</span> (Thread t <span class="kwa">in</span> threads)
            t.<span class="kwd">Join</span>();
        <span class="kwa">foreach</span> (<span class="kwb">string</span> s <span class="kwa">in</span> result)
            Console.Out.<span class="kwd">WriteLine</span>(s);
   }

    <span class="kwa">private static</span> <span class="kwb">void</span> <span class="kwd">worker</span>()
    {
        <span class="kwb">int</span> j;
        <span class="kwa">while</span> ((j = Interlocked.<span class="kwd">Decrement</span>(<span class="kwa">ref</span> task_count)) &gt;= <span class="num">0</span>)
        {
            <span class="kwa">switch</span> (j)
            {
                <span class="kwa">case</span> <span class="num">0</span>:
                    result[j] = <span class="kwd">WriteFrequencies</span>(<span class="num">1</span>);
                    <span class="kwa">break</span>;
                <span class="kwa">case</span> <span class="num">1</span>:
                    result[j] = <span class="kwd">WriteFrequencies</span>(<span class="num">2</span>);
                    <span class="kwa">break</span>;
                <span class="kwa">case</span> <span class="num">2</span>:
                    result[j] = <span class="kwd">WriteCount</span>(<span class="str">&quot;ggt&quot;</span>);
                    <span class="kwa">break</span>;
                <span class="kwa">case</span> <span class="num">3</span>:
                    result[j] = <span class="kwd">WriteCount</span>(<span class="str">&quot;ggta&quot;</span>);
                    <span class="kwa">break</span>;
                <span class="kwa">case</span> <span class="num">4</span>:
                    result[j] = <span class="kwd">WriteCount</span>(<span class="str">&quot;ggtatt&quot;</span>);
                    <span class="kwa">break</span>;
                <span class="kwa">case</span> <span class="num">5</span>:
                    result[j] = <span class="kwd">WriteCount</span>(<span class="str">&quot;ggtattttaatt&quot;</span>);
                    <span class="kwa">break</span>;
                <span class="kwa">case</span> <span class="num">6</span>:
                    result[j] = <span class="kwd">WriteCount</span>(<span class="str">&quot;ggtattttaatttatagt&quot;</span>);
                    <span class="kwa">break</span>;
            }
        }
    }

    <span class="kwa">private static</span> <span class="kwb">string</span> <span class="kwd">WriteFrequencies</span>(<span class="kwb">int</span> nucleotideLength)
   {
        Dictionary&lt;Key, Value&gt; frequencies = <span class="kwd">GenerateFrequencies</span>(nucleotideLength);

        List&lt;KeyValuePair&lt;Key, Value&gt;&gt; items = <span class="kwa">new</span> List&lt;KeyValuePair&lt;Key, Value&gt;&gt;(frequencies);
      items.<span class="kwd">Sort</span>(SortByFrequencyAndCode);

        StringBuilder buf = <span class="kwa">new</span> <span class="kwd">StringBuilder</span>();
      <span class="kwb">int</span> sum = input.Length - nucleotideLength + <span class="num">1</span>;

        <span class="kwa">foreach</span> (KeyValuePair&lt;Key, Value&gt; element <span class="kwa">in</span> items)
      {
         <span class="kwb">float</span> percent = element.Value.<span class="kwa">value</span> * <span class="num">100.0</span>f / sum;
            buf.<span class="kwd">AppendFormat</span>(<span class="str">&quot;</span><span class="ipl">{0}</span> <span class="str">{1:f3}</span><span class="esc">\n</span><span class="str">&quot;</span>, element.Key, percent);
      }

        <span class="kwa">return</span> buf.<span class="kwd">ToString</span>();
   }

   <span class="kwa">private static</span> <span class="kwb">string</span> <span class="kwd">WriteCount</span>(<span class="kwb">string</span> nucleotideFragment)
   {
        Dictionary&lt;Key, Value&gt; frequencies = <span class="kwd">GenerateFrequencies</span>(nucleotideFragment.Length);
        Key specific = <span class="kwa">new</span> <span class="kwd">Key</span>(nucleotideFragment);
      
        <span class="kwb">int</span> count = <span class="num">0</span>;
      <span class="kwa">if</span> (frequencies.<span class="kwd">ContainsKey</span>(specific))
         count = frequencies[specific].<span class="kwa">value</span>;
      
        <span class="kwa">return</span> <span class="kwb">string</span>.<span class="kwd">Format</span>(<span class="str">&quot;</span><span class="ipl">{0}</span><span class="str"></span><span class="esc">\t</span><span class="str"></span><span class="ipl">{1}</span><span class="str">&quot;</span>, count, nucleotideFragment.<span class="kwd">ToUpper</span>());
   }

    <span class="kwa">private static</span> Dictionary&lt;Key, Value&gt; <span class="kwd">GenerateFrequencies</span>(<span class="kwb">int</span> frame_size)
   {
        Dictionary&lt;Key, Value&gt; frequencies = <span class="kwa">new</span> Dictionary&lt;Key, Value&gt;();
        
        Key k = <span class="kwa">new</span> <span class="kwd">Key</span>(frame_size);
        Value val;

        <span class="kwb">int</span> end = input.Length - frame_size + <span class="num">1</span>;
        <span class="kwa">for</span> (<span class="kwb">int</span> index = <span class="num">0</span>; index &lt; end; index++)
        {
            k.<span class="kwd">ReHash</span>(input, index);

            frequencies.<span class="kwd">TryGetValue</span>(k, out val);
            <span class="kwa">if</span> (val != <span class="kwa">null</span>)   <span class="slc">// must use a class type in order to compare reference with null</span>
                val.<span class="kwa">value</span>++;   <span class="slc">// if we use 'int', this step require 1 more lookup</span>
            <span class="kwa">else</span>
                frequencies.<span class="kwd">Add</span>(<span class="kwa">new</span> <span class="kwd">Key</span>(k), <span class="kwa">new</span> <span class="kwd">Value</span>());
        }
        <span class="kwa">return</span> frequencies;
   }

   <span class="kwa">private static</span> <span class="kwb">int</span> <span class="kwd">SortByFrequencyAndCode</span>(KeyValuePair&lt;Key, Value&gt; item1, KeyValuePair&lt;Key, Value&gt; item2)
   {
      <span class="kwb">int</span> comparison = item2.Value.<span class="kwa">value</span> - item1.Value.<span class="kwa">value</span>;
      <span class="kwa">if</span> (comparison == <span class="num">0</span>) 
            <span class="kwa">return</span> item1.Key.key.<span class="kwd">ToString</span>().<span class="kwd">CompareTo</span>(item2.Key.key.<span class="kwd">ToString</span>());
      <span class="kwa">else</span> 
            <span class="kwa">return</span> comparison;
   }

    <span class="kwa">internal class</span> Key
    {
        <span class="kwa">internal</span> <span class="kwb">int</span>    hash;
        <span class="kwa">internal</span> <span class="kwb">char</span>[] key;

        <span class="kwa">public</span> <span class="kwd">Key</span>(<span class="kwb">int</span> frame)
        {
            key = <span class="kwa">new</span> <span class="kwb">char</span>[frame];
        }

        <span class="kwa">public</span> <span class="kwd">Key</span>(Key k)
        {
            hash = k.hash;
            <span class="kwa">this</span>.key = (<span class="kwb">char</span>[])k.key.<span class="kwd">Clone</span>();
        }
        
        <span class="kwa">public</span> <span class="kwd">Key</span>(<span class="kwb">string</span> s)
        {
            key = <span class="kwa">new</span> <span class="kwb">char</span>[s.Length];
            <span class="kwd">ReHash</span>(s, <span class="num">0</span>);
        }
        <span class="kwa">public</span> <span class="kwb">void</span> <span class="kwd">ReHash</span>(<span class="kwb">string</span> k, <span class="kwb">int</span> offset)
        {
            hash = <span class="num">0</span>;
            <span class="kwa">for</span> (<span class="kwb">int</span> i = <span class="num">0</span>; i &lt; key.Length; i++)
            {
                key[i] = k[offset + i];
                hash = hash * <span class="num">31</span> + key[i];
            }
        }

        <span class="kwa">public override</span> <span class="kwb">int</span> <span class="kwd">GetHashCode</span>()
        {
            <span class="kwa">return</span> hash;
        }

        <span class="kwa">public override</span> <span class="kwb">string</span> <span class="kwd">ToString</span>()
        {
            <span class="kwa">return new</span> <span class="kwb">string</span>(key).<span class="kwd">ToUpper</span>();
        }

        <span class="kwa">public override</span> <span class="kwb">bool</span> <span class="kwd">Equals</span>(<span class="kwb">object</span> k)
        {
            <span class="kwa">return this</span>.hash == ((Key)k).hash;
        }
        <span class="com">/*</span>
<span class="com">        public bool Equals (Key k)</span>
<span class="com">        {</span>
<span class="com">         return this.hash == k.hash;</span>
<span class="com">        }</span>
<span class="com">        */</span>
    }

    <span class="kwa">internal class</span> Value
    {
        <span class="kwa">internal</span> <span class="kwb">int</span> <span class="kwa">value</span>;

        <span class="kwa">public</span> <span class="kwd">Value</span>()
        {
            <span class="kwa">value</span> = <span class="num">1</span>;
        }
    }
}

