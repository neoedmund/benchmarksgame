<span class="slc">;;   The Computer Language Benchmarks Game</span>
<span class="slc">;;   http://benchmarksgame.alioth.debian.org/</span>

<span class="slc">;; contributed by Bill James</span>
<span class="slc">;; speed improvements by Andy Fingerhut</span>
<span class="slc">;; ported to Clojure 1.3 by Marko Kocic</span>
<span class="slc">;; updated for Clojure 1.5 by Alex Miller</span>
<span class="slc">;;  removed most casts and ints, add *unchecked-math*</span>

(ns fastaredux
  (:gen-class))

(set! *warn-on-reflection* true)
(set! *unchecked-math* true)

(<span class="kwa">def</span> ^:const IM <span class="num">139968</span>)
(<span class="kwa">def</span> ^:const IA <span class="num">3877</span>)
(<span class="kwa">def</span> ^:const IC <span class="num">29573</span>)

(<span class="kwa">def</span> ^:const LINE_LENGTH <span class="num">60</span>)
(<span class="kwa">def</span> ^:const LINES_IN_BUFFER <span class="num">2000</span>)
(<span class="kwa">def</span> ^:const LOOKUP_SIZE <span class="num">222000</span>)
(<span class="kwa">def</span> ^:const LOOKUP_SCALE (- LOOKUP_SIZE <span class="num">0.0001</span>))
(<span class="kwa">def</span> ^:const LCG_SCALE (double (/ LOOKUP_SIZE IM)))

(<span class="kwa">def</span> alu (str <span class="str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span>
              <span class="str">&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span>
              <span class="str">&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span>
              <span class="str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span>
              <span class="str">&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span>
              <span class="str">&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span>
              <span class="str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span>))

(<span class="kwa">def</span> codes <span class="str">&quot;acgtBDHKMNRSVWY&quot;</span>)

(<span class="kwa">def</span> iub [<span class="num">0.27 0.12 0.12 0.27 0.02 0.02 0.02 0.02</span>
          <span class="num">0.02 0.02 0.02 0.02 0.02 0.02 0.02</span>])

(<span class="kwa">def</span> homosapiens [<span class="num">0.3029549426680 0.1979883004921</span>
                  <span class="num">0.1975473066391 0.3015094502008</span>])

(<span class="kwa">defn</span> find-index ^long [^double t ^doubles coll]
  (<span class="kwb">loop</span> [i <span class="num">0</span>]
    (<span class="kwc">if</span> (&lt;= t (aget coll i))
      i
      (<span class="kwb">recur</span> (inc i)))))

(<span class="kwa">def</span> random-seed (long-array [<span class="num">42</span>]))
(<span class="kwa">defn</span> gen-random-fast []
  (<span class="kwc">let</span> [^longs random-seed random-seed
        new-seed (rem (+ (* (aget random-seed <span class="num">0</span>) IA) IC) IM)
        throwaway-val (aset random-seed <span class="num">0</span> new-seed)]
    (* new-seed LCG_SCALE)))

<span class="slc">;; Takes a vector of probabilities.</span>
(<span class="kwa">defn</span> make-cumulative
  ^doubles [v]
  (double-array (<span class="kwd">map</span> #(reduce + (subvec v <span class="num">0</span> %)) (<span class="kwd">range</span> <span class="num">1</span> (inc (count v))))))

<span class="slc">;; Takes a double array of cumulative probabilities.</span>
(<span class="kwa">defn</span> make-lookup-table [^doubles v]
  (<span class="kwc">let</span> [^longs a (long-array LOOKUP_SIZE)]
    (<span class="kwb">loop</span> [i <span class="num">0</span>]
      (<span class="kwc">if</span> (&lt; i LOOKUP_SIZE)
        (<span class="kwc">let</span> [t (/ i LOOKUP_SCALE)]
          (aset a i (find-index t v))
          (<span class="kwb">recur</span> (inc i)))
        a))))

(<span class="kwa">defn</span> fasta-repeat [^long n ^java.io.BufferedOutputStream ostream]
  (<span class="kwc">let</span> [^bytes source (.getBytes (str alu alu))
        source-size (count alu)
        width+<span class="num">1</span> (inc LINE_LENGTH)
        buffer-size (* width+<span class="num">1 4096</span>)
        buffer (byte-array buffer-size (byte <span class="num">10</span>))]
    (<span class="kwb">loop</span> [i <span class="num">0</span>
           j <span class="num">0</span>
           n n]
      (System/arraycopy source i buffer j LINE_LENGTH)
      (<span class="kwc">if</span> (&gt; n LINE_LENGTH)
        (<span class="kwb">recur</span> (long (rem (+ i LINE_LENGTH) source-size))
               (<span class="kwc">let</span> [j (+ j width+<span class="num">1</span>)]
                 (<span class="kwc">if</span> (= j buffer-size)
                   (do (.write ostream buffer)
                       <span class="num">0</span>)
                   j))
               (- n LINE_LENGTH))
        (do
          (aset buffer (+ j n) (byte <span class="num">10</span>))
          (.write ostream buffer <span class="num">0</span> (+ j n <span class="num">1</span>)))))))

(<span class="kwa">defn</span> fasta-random [probs ^long n ^java.io.BufferedOutputStream ostream]
  (<span class="kwc">let</span> [codes (.getBytes (str codes))
        lookup-table (longs (make-lookup-table
                             (make-cumulative probs)))
        width-1 (dec LINE_LENGTH)
        buf-size (* LINES_IN_BUFFER (inc LINE_LENGTH))
        buffer (byte-array buf-size)
        b10 (byte <span class="num">10</span>)]
    (<span class="kwb">loop</span> [n n        <span class="slc">;; The number of characters left to generate.</span>
           j LINE_LENGTH  <span class="slc">;; The number of characters left to</span>
                          <span class="slc">;; generate on the current line of output</span>
                          <span class="slc">;; before printing a newline.</span>
           i <span class="num">0</span>] <span class="slc">;; Number of characters put in buffer so far.</span>
      (<span class="kwc">if</span> (zero? n)
        (do
          (.write ostream buffer <span class="num">0</span> i)
          (<span class="kwc">when</span> (not= b10 (aget buffer (dec i)))
            (aset buffer <span class="num">0</span> b10)
            (.write ostream buffer <span class="num">0 1</span>)))
        <span class="slc">;; else</span>
        (<span class="kwc">let</span> [rand-byte (aget codes (aget lookup-table (gen-random-fast)))]
          (<span class="kwc">if</span> (= i buf-size)
            (do
              <span class="slc">;; buffer is full.  write it and start over.</span>
              (.write ostream buffer <span class="num">0</span> buf-size)
              (aset buffer <span class="num">0</span> rand-byte)
              (<span class="kwb">recur</span> (dec n) width-1 <span class="num">1</span>))
            (do
              (aset buffer i rand-byte)
              (<span class="kwc">if</span> (= j <span class="num">1</span>)
                <span class="slc">;; then</span>
                (do
                  (aset buffer (inc i) b10) <span class="slc">;; add newline</span>
                  (<span class="kwb">recur</span> (dec n) LINE_LENGTH (+ i <span class="num">2</span>)))
                <span class="slc">;; else</span>
                (<span class="kwb">recur</span> (dec n) (dec j) (inc i))))))))))

(<span class="kwa">defn</span> write-line [s ^java.io.BufferedOutputStream stream]
  (.write stream (.getBytes (str s <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span>))))

(<span class="kwa">defn</span> -main [&amp; args]
  (<span class="kwc">let</span> [n (read-string (<span class="kwd">first</span> args))
        ostream (java.io.BufferedOutputStream. System/out)]
    (write-line <span class="str">&quot;&gt;ONE Homo sapiens alu&quot;</span> ostream)
    (fasta-repeat (* n <span class="num">2</span>) ostream)
    (write-line <span class="str">&quot;&gt;TWO IUB ambiguity codes&quot;</span> ostream)
    (fasta-random iub (* n <span class="num">3</span>) ostream)
    (write-line <span class="str">&quot;&gt;THREE Homo sapiens frequency&quot;</span> ostream)
    (fasta-random homosapiens (* n <span class="num">5</span>) ostream)
    (.flush ostream)))
