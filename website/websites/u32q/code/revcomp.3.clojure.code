<span class="slc">;;   The Computer Language Benchmarks Game</span>
<span class="slc">;;   http://benchmarksgame.alioth.debian.org/</span>

<span class="slc">;; contributed by Andy Fingerhut</span>

(ns revcomp
  (:gen-class))

(set! *warn-on-reflection* true)


(<span class="kwa">def</span> complement-dna-char-map
     {\w \W, \W \W,
      \s \S, \S \S,
      <span class="esc">\a</span> \T, \A \T,
      <span class="esc">\t</span> \A, \T \A,
      \u \A, \U \A,
      \g \C, \G \C,
      \c \G, \C \G,
      \y \R, \Y \R,
      <span class="esc">\r</span> \Y, \R \Y,
      \k \M, \K \M,
      \m \K, \M \K,
      <span class="esc">\b</span> \V, \B \V,
      \d \H, \D \H,
      \h \D, \H \D,
      <span class="esc">\v</span> \B, \V \B,
      <span class="esc">\n</span> \N, \N \N })


(<span class="kwa">defn</span> ubyte [val]
  (<span class="kwc">if</span> (&gt;= val <span class="num">128</span>)
    (byte (- val <span class="num">256</span>))
    (byte val)))


(<span class="kwa">defn</span> make-array-char-mapper [cmap]
  (byte-array <span class="num">256</span> (<span class="kwd">map</span> (<span class="kwa">fn</span> [i]
                        (<span class="kwc">if</span> (contains? cmap (char i))
                          (ubyte (int (cmap (char i))))
                          (ubyte i)))
                       (<span class="kwd">range</span> <span class="num">256</span>))))


(<span class="kwa">defn</span> reverse-and-complement! [#^bytes buf begin end #^bytes map-char-array nl]
  (<span class="kwc">let</span> [nl (int nl)]
    (<span class="kwb">loop</span> [begin (int begin)
           end   (int end)]
      (<span class="kwc">let</span> [cb (int (aget buf begin))
            ce (int (aget buf end))
            begin (int (<span class="kwc">if</span> (== cb nl) (unchecked-inc begin) begin))
            end   (int (<span class="kwc">if</span> (== ce nl) (unchecked-dec end) end))
            cb2 (int (aget buf begin))
            ce2 (int (aget buf end))]
        (<span class="kwc">when</span> (&lt;= begin end)
          (aset buf begin (aget map-char-array ce2))
          (aset buf end   (aget map-char-array cb2))
          (<span class="kwb">recur</span> (unchecked-inc begin) (unchecked-dec end)))))))


(<span class="kwa">defn</span> find-next-nl-idx [idx #^bytes buf nl]
  (<span class="kwb">loop</span> [idx (int idx)]
    (<span class="kwc">if</span> (= (aget buf idx) nl)
      idx
      (<span class="kwb">recur</span> (unchecked-inc idx)))))


(<span class="kwa">defn</span> find-next-gt-idx [idx #^bytes buf gt len]
  (<span class="kwc">let</span> [gt (int gt)
        len (int len)]
    (<span class="kwb">loop</span> [idx (int idx)]
      (<span class="kwc">if</span> (or (== idx len)
              (== (int (aget buf idx)) gt))
        idx
        (<span class="kwb">recur</span> (unchecked-inc idx))))))


(<span class="kwa">defn</span> -main [&amp; args]
  (<span class="kwc">let</span> [in-size (int (.available System/in))
        buf (byte-array in-size)
        complement-dna-char-array (make-array-char-mapper
				   complement-dna-char-map)]
    (.read System/in buf)
    (<span class="kwc">let</span> [len (int (alength buf))
          nl (byte (int <span class="esc">\n</span>ewline))
          gt (byte (int \&gt;))]
      (<span class="kwb">loop</span> [i (int <span class="num">0</span>)]
        (<span class="kwc">when</span> (not= i len)
          (<span class="kwc">let</span> [next-nl-idx (int (find-next-nl-idx i buf nl))
                next-gt-idx (int (find-next-gt-idx next-nl-idx buf gt len))]
            (reverse-and-complement! buf next-nl-idx
                                     (unchecked-subtract next-gt-idx <span class="num">2</span>)
                                     complement-dna-char-array nl)
            (<span class="kwb">recur</span> next-gt-idx)))))
    (.write System/out buf)))
