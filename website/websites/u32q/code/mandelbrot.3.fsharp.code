<span class="com">(* The Computer Language Benchmarks Game</span>
<span class="com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   Adapted by Antti Lankila from the earlier Isaac Gouy's implementation</span>
<span class="com">   Add multithread &amp; tweaks from C++ by The Anh Tran</span>
<span class="com">   Translate to F# by Jomo Fisher</span>
<span class="com">*)</span>

<span class="kwa">open</span> <span class="kwd">System</span>
<span class="kwa">open</span> <span class="kwd">System</span>.<span class="kwd">Threading</span>
<span class="kwa">open</span> <span class="kwd">System</span>.<span class="kwd">IO</span>

<span class="kwa">let mutable</span> <span class="kwd">N</span> = <span class="num">200</span>;
<span class="kwa">let mutable</span> width_bytes = <span class="num">0</span>
<span class="kwa">let mutable</span> data : byte array array = <span class="kwa">null</span>
<span class="kwa">let mutable</span> nbyte_each_line : <span class="kwb">int</span> array = <span class="kwa">null</span>
<span class="kwa">let</span> current_line = <span class="kwb">ref</span> -<span class="num">1</span> 


<span class="kwa">let</span> <span class="kwd">Calculate</span>() = 
    <span class="kwa">let</span> inverse_n = <span class="num">2.0</span> / <span class="kwb">float</span> <span class="kwd">N</span>

    <span class="kwa">let mutable</span> y = <span class="kwd">Interlocked</span>.<span class="kwd">Increment</span>(&amp;current_line.contents)
    <span class="kwa">while</span> y &lt; <span class="kwd">N</span> <span class="kwa">do</span> <span class="slc">// fetch a line</span>
        <span class="kwa">let</span> pdata = data.[y]

        <span class="kwa">let mutable</span> byte_count = <span class="num">0</span>
        <span class="kwa">let mutable</span> bit_num = <span class="num">0</span>
        <span class="kwa">let mutable</span> byte_acc = <span class="num">0</span>

        <span class="kwa">let</span> <span class="kwd">Civ</span> = <span class="kwb">float</span> y * inverse_n - <span class="num">1.0</span>

        <span class="kwa">for</span> x <span class="kwa">in</span> <span class="num">0</span>..<span class="kwd">N</span>-<span class="num">1</span> <span class="kwa">do</span> 
            <span class="kwa">let</span> <span class="kwd">Crv</span> = <span class="kwb">float</span> x * inverse_n - <span class="num">1.5</span>

            <span class="kwa">let mutable</span> <span class="kwd">Zrv</span> = <span class="kwd">Crv</span>
            <span class="kwa">let mutable</span> <span class="kwd">Ziv</span> = <span class="kwd">Civ</span>
            <span class="kwa">let mutable</span> <span class="kwd">Trv</span> = <span class="kwd">Crv</span> * <span class="kwd">Crv</span>
            <span class="kwa">let mutable</span> <span class="kwd">Tiv</span> = <span class="kwd">Civ</span> * <span class="kwd">Civ</span>

            <span class="kwa">let mutable</span> i = <span class="num">49</span>;
            <span class="kwa">let mutable</span> more = <span class="kwa">true</span>
            <span class="kwa">while</span> more <span class="kwa">do</span>
                <span class="kwd">Ziv</span> &lt;- (<span class="kwd">Zrv</span> * <span class="kwd">Ziv</span>) + (<span class="kwd">Zrv</span> * <span class="kwd">Ziv</span>) + <span class="kwd">Civ</span>
                <span class="kwd">Zrv</span> &lt;- <span class="kwd">Trv</span> - <span class="kwd">Tiv</span> + <span class="kwd">Crv</span>

                <span class="kwd">Trv</span> &lt;- <span class="kwd">Zrv</span> * <span class="kwd">Zrv</span>
                <span class="kwd">Tiv</span> &lt;- <span class="kwd">Ziv</span> * <span class="kwd">Ziv</span>
                
                more &lt;- (<span class="kwd">Trv</span> + <span class="kwd">Tiv</span>) &lt;= <span class="num">4.0</span> 
                <span class="kwa">if</span> more <span class="kwa">then</span>
                    i &lt;- i - <span class="num">1</span>
                    more &lt;- i &gt; <span class="num">0</span>
                    
            byte_acc &lt;- byte_acc &lt;&lt;&lt; <span class="num">1</span>
            byte_acc &lt;- byte_acc ||| (<span class="kwa">if</span> i = <span class="num">0</span> <span class="kwa">then</span> <span class="num">1</span> <span class="kwa">else</span> <span class="num">0</span>)

            bit_num &lt;- bit_num + <span class="num">1</span>
            <span class="kwa">if</span> bit_num = <span class="num">8</span> <span class="kwa">then</span>
                pdata.[byte_count] &lt;- byte byte_acc
                byte_count &lt;- byte_count + <span class="num">1</span>
                bit_num &lt;- <span class="num">0</span>
                byte_acc &lt;- <span class="num">0</span>

        <span class="kwa">if</span> bit_num &lt;&gt; <span class="num">0</span> <span class="kwa">then</span>  <span class="slc">// write left over bits</span>
            byte_acc &lt;- byte_acc &lt;&lt;&lt; (<span class="num">8</span> - (<span class="kwd">N</span> &amp;&amp;&amp; <span class="num">7</span>))
            pdata.[byte_count] &lt;- byte byte_acc
            byte_count&lt;-byte_count + <span class="num">1</span>

        nbyte_each_line.[y] &lt;- byte_count
        y &lt;- <span class="kwd">Interlocked</span>.<span class="kwd">Increment</span>(&amp;current_line.contents)


[&lt;<span class="kwd">EntryPoint</span>&gt;]
<span class="kwa">let</span> main args = 
    <span class="kwa">if</span> args.<span class="kwd">Length</span> &gt; <span class="num">0</span> <span class="kwa">then</span>
        <span class="kwd">N</span> &lt;- <span class="kwb">int</span> args.[<span class="num">0</span>]
    <span class="kwd">Console</span>.<span class="kwd">Out</span>.<span class="kwd">WriteLine</span>(<span class="str">&quot;P4</span><span class="esc">\n</span><span class="str"></span><span class="ipl">{0} {0}</span><span class="str">&quot;</span>, <span class="kwd">N</span>);

    width_bytes &lt;- <span class="kwd">N</span> / <span class="num">8</span>
    <span class="kwa">if</span> width_bytes * <span class="num">8</span> &lt; <span class="kwd">N</span> <span class="kwa">then</span>
        width_bytes &lt;- width_bytes + <span class="num">1</span>

    nbyte_each_line &lt;- <span class="kwd">Array</span>.zeroCreate <span class="kwd">N</span>

    data &lt;- <span class="kwd">Array</span>.zeroCreate <span class="kwd">N</span> 
    <span class="kwa">for</span> i <span class="kwa">in</span> <span class="num">0</span>..<span class="kwd">N</span>-<span class="num">1</span> <span class="kwa">do</span> 
        data.[i] &lt;- <span class="kwd">Array</span>.zeroCreate width_bytes 

    <span class="kwa">let</span> threads = <span class="kwd">Array</span>.init (<span class="kwd">Environment</span>.<span class="kwd">ProcessorCount</span>-<span class="num">1</span>) (<span class="kwa">fun</span> i-&gt;<span class="kwa">new</span> <span class="kwd">Thread</span>(<span class="kwd">Calculate</span>))
    <span class="kwa">for</span> thread <span class="kwa">in</span> threads <span class="kwa">do</span> thread.<span class="kwd">Start</span>()
    <span class="kwd">Calculate</span>()
    <span class="kwa">for</span> thread <span class="kwa">in</span> threads <span class="kwa">do</span> thread.<span class="kwd">Join</span>()
            
    <span class="kwa">let</span> s = <span class="kwd">Console</span>.<span class="kwd">OpenStandardOutput</span>();
    <span class="kwa">for</span> y <span class="kwa">in</span> <span class="num">0</span>..<span class="kwd">N</span>-<span class="num">1</span> <span class="kwa">do</span> 
        s.<span class="kwd">Write</span>(data.[y], <span class="num">0</span>, nbyte_each_line.[y])
    <span class="num">0</span>
