<span class="com">/* The Computer Language Benchmarks Game</span>
<span class="com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * contributed by Benedikt Nordhoff</span>
<span class="com"> * direct translation from Java #2 by Stefan Krause et al.</span>
<span class="com"> */</span>

<span class="kwa">import</span> java.io._
<span class="kwa">import</span> java.util.concurrent.atomic._

<span class="kwa">object</span> mandelbrot {
  <span class="kwa">var</span> out:Array[Array[Byte]] = null
  <span class="kwa">var</span> yCt:AtomicInteger = null
  <span class="kwa">var</span> Crb:Array[Double] = null
  <span class="kwa">var</span> Cib:Array[Double] = null
  
  <span class="kwa">def</span> <span class="kwd">getByte</span>(x:Int, y:Int) : Int = {
    <span class="kwa">var</span> res=<span class="num">0</span>;
    <span class="kwa">for</span>(i &lt;- <span class="num">0</span> until <span class="num">8</span> by <span class="num">2</span>){
      <span class="kwa">var</span> Zr1=<span class="kwd">Crb</span>(x+i)
      <span class="kwa">var</span> Zi1=<span class="kwd">Cib</span>(y)
      
      <span class="kwa">var</span> Zr2=<span class="kwd">Crb</span>(x+i+<span class="num">1</span>)
      <span class="kwa">var</span> Zi2=<span class="kwd">Cib</span>(y)
      
      <span class="kwa">var</span> b=<span class="num">0</span>
      <span class="kwa">var</span> j=<span class="num">49</span>
      <span class="kwa">var</span> goOn = true
      <span class="kwa">do</span>{
        <span class="kwa">val</span> nZr1=Zr1*Zr1-Zi1*Zi1+<span class="kwd">Crb</span>(x+i)
        <span class="kwa">val</span> nZi1=Zr1*Zi1+Zr1*Zi1+<span class="kwd">Cib</span>(y)
        Zr1=nZr1;Zi1=nZi1
         
        <span class="kwa">val</span> nZr2=Zr2*Zr2-Zi2*Zi2+<span class="kwd">Crb</span>(x+i+<span class="num">1</span>);
        <span class="kwa">val</span> nZi2=Zr2*Zi2+Zr2*Zi2+<span class="kwd">Cib</span>(y);
        Zr2=nZr2;Zi2=nZi2;
         
        <span class="kwa">if</span>(Zr1*Zr1+Zi1*Zi1&gt;<span class="num">4</span>){b|=<span class="num">2</span>;goOn = b != <span class="num">3</span>}
        <span class="kwa">if</span>(Zr2*Zr2+Zi2*Zi2&gt;<span class="num">4</span>){b|=<span class="num">1</span>;goOn = b!=<span class="num">3</span>}
        j-=<span class="num">1</span>
      }<span class="kwa">while</span>(j&gt;<span class="num">0</span>&amp;&amp; goOn)
      res=(res&lt;&lt;<span class="num">2</span>)+b;
    }
    <span class="kwa">return</span> res^(-<span class="num">1</span>);
  }

  <span class="kwa">def</span> <span class="kwd">putLine</span>(y:Int, line:Array[Byte]){
    <span class="kwa">for</span> (xb &lt;- <span class="num">0</span> until line.length)
      <span class="kwd">line</span>(xb)=<span class="kwd">getByte</span>(xb*<span class="num">8</span>,y).toByte
  }

  <span class="kwa">def</span> <span class="kwd">main</span>(args:Array[String]) {
    <span class="kwa">var</span> N=<span class="num">6000</span>
    <span class="kwa">if</span> (args.length&gt;=<span class="num">1</span>) N = <span class="kwd">args</span>(<span class="num">0</span>).toInt
    
    Crb=<span class="kwa">new</span> Array[Double](N+<span class="num">7</span>); Cib=<span class="kwa">new</span> Array[Double](N+<span class="num">7</span>)
    <span class="kwa">val</span> invN=<span class="num">2.0</span>/N; <span class="kwa">for</span>(i &lt;- <span class="num">0</span> until N){ <span class="kwd">Cib</span>(i)=i*invN-<span class="num">1.0</span>; <span class="kwd">Crb</span>(i)=i*invN-<span class="num">1.5</span>; }
    yCt=<span class="kwa">new</span> <span class="kwd">AtomicInteger</span>()
    out=Array.<span class="kwd">ofDim</span>(N,(N+<span class="num">7</span>)/<span class="num">8</span>)
    
    <span class="kwa">val</span> pool=<span class="kwa">new</span> Array[Thread](<span class="num">2</span>*Runtime.<span class="kwd">getRuntime</span>().<span class="kwd">availableProcessors</span>())
    <span class="kwa">for</span> (i &lt;- <span class="num">0</span> until pool.length)
      <span class="kwd">pool</span>(i)=<span class="kwa">new</span> <span class="kwd">Thread</span>(){
        <span class="kwa">override def</span> <span class="kwd">run</span>() {
          <span class="kwa">var</span> y=<span class="num">0</span>; <span class="kwa">while</span>({y=yCt.<span class="kwd">getAndIncrement</span>();y}&lt;out.length) <span class="kwd">putLine</span>(y,<span class="kwd">out</span>(y))
        }
      }
    <span class="kwa">for</span> (t &lt;- pool) t.<span class="kwd">start</span>()
    <span class="kwa">for</span> (t &lt;- pool) t.<span class="kwd">join</span>()

    <span class="kwa">val</span> stream = <span class="kwa">new</span> <span class="kwd">BufferedOutputStream</span>(System.out)
    stream.<span class="kwd">write</span>((<span class="str">&quot;P4</span><span class="esc">\n</span><span class="str">&quot;</span>+N+<span class="str">&quot; &quot;</span>+N+<span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span>).<span class="kwd">getBytes</span>())
    <span class="kwa">for</span>(i&lt;- <span class="num">0</span> until N) stream.<span class="kwd">write</span>(<span class="kwd">out</span>(i))
    stream.<span class="kwd">close</span>()
   }
}
