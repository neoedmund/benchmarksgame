<span class="com">/* The Computer Language Benchmarks Game</span>
<span class="com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * contributed by Bob W </span>
<span class="com"> */</span>

<span class="ppc">#include &lt;stdio.h&gt;</span>
<span class="ppc">#include &lt;stdlib.h&gt;</span>

<span class="ppc">#define JBFSIZE 82</span>      <span class="slc">// line input buffer size</span>
<span class="ppc"></span><span class="ppc">#define QBFSIZE 5200</span>     <span class="slc">// output buffer initial size</span>
<span class="ppc"></span><span class="ppc">#define Z16</span>     <span class="pps">&quot;\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0&quot;</span><span class="ppc"></span>
<span class="ppc">#define V32</span>     <span class="pps">&quot;\0TVGH\0\0CD\0\0M\0KN\0\0\0YSA\0BW\0R\0\0\0\0\0\0&quot;</span><span class="ppc"></span>
<span class="ppc">#define VALL    Z16 Z16 Z16 Z16 V32 V32 Z16 Z16 Z16 Z16 Z16 Z16 Z16 Z16</span>

<span class="kwb">int</span> <span class="kwd">errex</span>(<span class="kwb">char</span> *s, <span class="kwb">int</span> n) {      <span class="slc">// error message+value, return 1</span>
  <span class="kwd">fprintf</span>(stderr,<span class="str">&quot;</span><span class="esc">\n</span><span class="str">*** Error: %s [%d]!</span><span class="esc">\n</span><span class="str">&quot;</span>, s, n);
  <span class="kwa">return</span> <span class="num">1</span>;
}

<span class="kwb">int</span> <span class="kwd">main</span> () {                    <span class="slc">// ***** main *****</span>
  <span class="kwb">char</span> *pj, *pq, *pr;            <span class="slc">// buffer pointers: inp,out,/out</span>
  <span class="kwb">char</span> *jjj = <span class="kwd">malloc</span>(JBFSIZE);   <span class="slc">// allocate input line buffer</span>
  <span class="kwb">char</span> *qqq = <span class="kwd">malloc</span>(QBFSIZE);   <span class="slc">// output buffer (dyn. size)</span>
  <span class="kwb">char</span> *pqstop = qqq+QBFSIZE;    <span class="slc">// end-of-buffer pointer</span>
  <span class="kwb">char</span> xtab[<span class="num">256</span>] = VALL;         <span class="slc">// char conversion table</span>

  <span class="kwa">if</span> (!jjj || !qqq)
    <span class="kwa">return</span> <span class="kwd">errex</span>(<span class="str">&quot;Buffer allocation&quot;</span>, !jjj + !qqq);
  pj = <span class="kwd">fgets</span>(jjj,JBFSIZE,stdin);         <span class="slc">// fetch 1st line</span>
  <span class="kwa">if</span> (!pj)
    <span class="kwa">return</span> <span class="kwd">errex</span>(<span class="str">&quot;No input data&quot;</span>,<span class="num">0</span>);
  <span class="kwa">if</span> (*jjj != <span class="str">'&gt;'</span>)
    <span class="kwa">return</span> <span class="kwd">errex</span>(<span class="str">&quot;1st char not '&gt;'&quot;</span>, <span class="num">0</span>);

  <span class="kwa">while</span> (pj) {                           <span class="slc">// MAIN LOOP: process data</span>
    <span class="kwd">fputs</span>(jjj, stdout);                  <span class="slc">// output ID line</span>

    <span class="kwa">for</span> (pq=qqq+<span class="num">1</span>, pr=pqstop; ; pq++) {  <span class="slc">// LOOP: fill output buffer</span>
      pj = <span class="kwd">fgets</span>(jjj, JBFSIZE, stdin);   <span class="slc">// get line from stdin</span>
      <span class="kwa">if</span> (!pj || (*jjj==<span class="str">'&gt;'</span>))  <span class="kwa">break</span>;    <span class="slc">// EOF or new ID line</span>
      <span class="kwa">if</span> (pr &lt;= (pq+<span class="num">61</span>)) {               <span class="slc">// need to resize buffer</span>
        <span class="kwb">char</span> *newstop = pqstop + <span class="num">12777888</span>;
        <span class="kwb">char</span> *newptr  = <span class="kwd">realloc</span>(qqq, newstop-qqq);
        <span class="kwa">if</span> (!newptr)
          <span class="kwa">return</span> <span class="kwd">errex</span>(<span class="str">&quot;Out of memory&quot;</span>, <span class="num">0</span>);
        <span class="kwa">if</span> (newptr != qqq) {             <span class="slc">// new base: adj. pointers</span>
          <span class="kwb">size_t</span> x = newptr-qqq;         <span class="slc">// offset for pointer update</span>
          pq+=x;  pr+=x;  qqq+=x;
          newstop+=x;  pqstop+=x;
        }
        pr = <span class="kwd">__builtin_memmove</span>(newstop-(pqstop-pr), pr, pqstop-pr);
        pqstop = newstop;                <span class="slc">// buffer resize complete</span>
      }
      <span class="kwa">while</span> (*pj) {                      <span class="slc">// LOOP: conv. &amp; revert line</span>
        <span class="kwb">char</span> c = xtab[(<span class="kwb">unsigned char</span>)(*pj++)];
        <span class="kwa">if</span> (c)                           <span class="slc">// conversion valid</span>
          *(--pr) = c;
      }
    }

    <span class="kwa">for</span> (pq = qqq; pr&lt;pqstop; ) {        <span class="slc">// LOOP: format output</span>
      <span class="kwb">size_t</span> x = (pqstop-pr)&lt;<span class="num">60</span> ? pqstop-pr : <span class="num">60</span>;
      <span class="kwd">__builtin_memmove</span>(pq,pr,x);        <span class="slc">// move line to free space</span>
      pr+=x;  pq+=x;  *(pq++) = <span class="num">0xA</span>;     <span class="slc">// adjust pointers, add LF</span>
    }
    <span class="kwd">fwrite</span>(qqq, <span class="num">1</span>, pq-qqq, stdout);      <span class="slc">// output converted data</span>
  }
  <span class="kwa">return</span> <span class="num">0</span>;
}
