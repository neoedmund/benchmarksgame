<span class="com">/* The Computer Language Benchmarks Game</span>
<span class="com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * contributed by The Go Authors.</span>
<span class="com"> * based on C program by Christoph Bauer</span>
<span class="com"> * flag.Arg hack by Isaac Gouy</span>
<span class="com"> */</span>

<span class="kwa">package</span> main

<span class="kwa">import</span> (
   <span class="str">&quot;flag&quot;</span>
   <span class="str">&quot;fmt&quot;</span>
   <span class="str">&quot;math&quot;</span>
   <span class="str">&quot;strconv&quot;</span>
)

<span class="kwa">var</span> n = <span class="num">0</span>

<span class="kwa">type</span> Body <span class="kwa">struct</span> {
   x, y, z, vx, vy, vz, mass <span class="kwb">float64</span>
}

<span class="kwa">const</span> (
   solarMass   = <span class="num">4</span> * math.Pi * math.Pi
   daysPerYear = <span class="num">365.24</span>
)

<span class="kwa">func</span> (b *Body) <span class="kwd">offsetMomentum</span>(px, py, pz <span class="kwb">float64</span>) {
   b.vx = -px / solarMass
   b.vy = -py / solarMass
   b.vz = -pz / solarMass
}

<span class="kwa">type</span> System []*Body

<span class="kwa">func</span> <span class="kwd">NewSystem</span>(body []Body) System {
   n := <span class="kwb">make</span>(System, <span class="kwb">len</span>(body))
   <span class="kwa">for</span> i := <span class="num">0</span>; i &lt; <span class="kwb">len</span>(body); i++ {
      n[i] = <span class="kwb">new</span>(Body) <span class="slc">// copy to avoid overwriting the inputs</span>
      *n[i] = body[i]
   }
   <span class="kwa">var</span> px, py, pz <span class="kwb">float64</span>
   <span class="kwa">for</span> _, body := <span class="kwa">range</span> n {
      px += body.vx * body.mass
      py += body.vy * body.mass
      pz += body.vz * body.mass
   }
   n[<span class="num">0</span>].<span class="kwd">offsetMomentum</span>(px, py, pz)
   <span class="kwa">return</span> n
}

<span class="kwa">func</span> (sys System) <span class="kwd">energy</span>() <span class="kwb">float64</span> {
   <span class="kwa">var</span> e <span class="kwb">float64</span>
   <span class="kwa">for</span> i, body := <span class="kwa">range</span> sys {
      e += <span class="num">0.5</span> * body.mass *
         (body.vx*body.vx + body.vy*body.vy + body.vz*body.vz)
      <span class="kwa">for</span> j := i + <span class="num">1</span>; j &lt; <span class="kwb">len</span>(sys); j++ {
         body2 := sys[j]
         dx := body.x - body2.x
         dy := body.y - body2.y
         dz := body.z - body2.z
         distance := math.<span class="kwd">Sqrt</span>(dx*dx + dy*dy + dz*dz)
         e -= (body.mass * body2.mass) / distance
      }
   }
   <span class="kwa">return</span> e
}

<span class="kwa">func</span> (sys System) <span class="kwd">advance</span>(dt <span class="kwb">float64</span>) {
   <span class="kwa">for</span> i, body := <span class="kwa">range</span> sys {
      <span class="kwa">for</span> j := i + <span class="num">1</span>; j &lt; <span class="kwb">len</span>(sys); j++ {
         body2 := sys[j]
         dx := body.x - body2.x
         dy := body.y - body2.y
         dz := body.z - body2.z

         dSquared := dx*dx + dy*dy + dz*dz
         distance := math.<span class="kwd">Sqrt</span>(dSquared)
         mag := dt / (dSquared * distance)

         body.vx -= dx * body2.mass * mag
         body.vy -= dy * body2.mass * mag
         body.vz -= dz * body2.mass * mag

         body2.vx += dx * body.mass * mag
         body2.vy += dy * body.mass * mag
         body2.vz += dz * body.mass * mag
      }
   }

   <span class="kwa">for</span> _, body := <span class="kwa">range</span> sys {
      body.x += dt * body.vx
      body.y += dt * body.vy
      body.z += dt * body.vz
   }
}

<span class="kwa">var</span> (
   jupiter = Body{
      x: <span class="num">4.84143144246472090e+00</span>,
      y: -<span class="num">1.16032004402742839e+00</span>,
      z: -<span class="num">1.03622044471123109e-01</span>,
      vx: <span class="num">1.66007664274403694e-03</span> * daysPerYear,
      vy: <span class="num">7.69901118419740425e-03</span> * daysPerYear,
      vz: -<span class="num">6.90460016972063023e-05</span> * daysPerYear,
      mass: <span class="num">9.54791938424326609e-04</span> * solarMass,
   }
   saturn = Body{
      x: <span class="num">8.34336671824457987e+00</span>,
      y: <span class="num">4.12479856412430479e+00</span>,
      z: -<span class="num">4.03523417114321381e-01</span>,
      vx: -<span class="num">2.76742510726862411e-03</span> * daysPerYear,
      vy: <span class="num">4.99852801234917238e-03</span> * daysPerYear,
      vz: <span class="num">2.30417297573763929e-05</span> * daysPerYear,
      mass: <span class="num">2.85885980666130812e-04</span> * solarMass,
   }
   uranus = Body{
      x: <span class="num">1.28943695621391310e+01</span>,
      y: -<span class="num">1.51111514016986312e+01</span>,
      z: -<span class="num">2.23307578892655734e-01</span>,
      vx: <span class="num">2.96460137564761618e-03</span> * daysPerYear,
      vy: <span class="num">2.37847173959480950e-03</span> * daysPerYear,
      vz: -<span class="num">2.96589568540237556e-05</span> * daysPerYear,
      mass: <span class="num">4.36624404335156298e-05</span> * solarMass,
   }
   neptune = Body{
      x: <span class="num">1.53796971148509165e+01</span>,
      y: -<span class="num">2.59193146099879641e+01</span>,
      z: <span class="num">1.79258772950371181e-01</span>,
      vx: <span class="num">2.68067772490389322e-03</span> * daysPerYear,
      vy: <span class="num">1.62824170038242295e-03</span> * daysPerYear,
      vz: -<span class="num">9.51592254519715870e-05</span> * daysPerYear,
      mass: <span class="num">5.15138902046611451e-05</span> * solarMass,
   }
   sun = Body{
      mass: solarMass,
   }
)

<span class="kwa">func</span> <span class="kwd">main</span>() {
   flag.<span class="kwd">Parse</span>()
   <span class="kwa">if</span> flag.<span class="kwd">NArg</span>() &gt; <span class="num">0</span> { n,_ = strconv.<span class="kwd">Atoi</span>( flag.<span class="kwd">Arg</span>(<span class="num">0</span>) ) }

   system := <span class="kwd">NewSystem</span>([]Body{sun, jupiter, saturn, uranus, neptune})
   fmt.<span class="kwd">Printf</span>(<span class="str">&quot;%.9f</span><span class="esc">\n</span><span class="str">&quot;</span>, system.<span class="kwd">energy</span>())
   <span class="kwa">for</span> i := <span class="num">0</span>; i &lt; n; i++ {
      system.<span class="kwd">advance</span>(<span class="num">0.01</span>)
   }
   fmt.<span class="kwd">Printf</span>(<span class="str">&quot;%.9f</span><span class="esc">\n</span><span class="str">&quot;</span>, system.<span class="kwd">energy</span>())
}
