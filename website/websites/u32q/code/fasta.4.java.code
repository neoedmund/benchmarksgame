<span class="com">/*</span>
<span class="com"> * The Computer Language Benchmarks Game</span>
<span class="com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * modified by Mehmet D. AKIN</span>
<span class="com"> * modified by Rikard Mustaj√§rvi</span>
<span class="com"> */</span>

<span class="kwa">import</span> java.io.IOException;
<span class="kwa">import</span> java.io.OutputStream;

<span class="kwa">class</span> fasta {
   <span class="kwa">static final</span> <span class="kwb">int</span> IM = <span class="num">139968</span>;
   <span class="kwa">static final</span> <span class="kwb">int</span> IA = <span class="num">3877</span>;
   <span class="kwa">static final</span> <span class="kwb">int</span> IC = <span class="num">29573</span>;

   <span class="kwa">static final</span> <span class="kwb">int</span> LINE_LENGTH = <span class="num">60</span>;
   <span class="kwa">static final</span> <span class="kwb">int</span> BUFFER_SIZE = (LINE_LENGTH + <span class="num">1</span>)*<span class="num">1024</span>; <span class="slc">// add 1 for '\n'</span>

    <span class="slc">// Weighted selection from alphabet</span>
    <span class="kwa">public static</span> String ALU =
              <span class="str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span>
            + <span class="str">&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span>
            + <span class="str">&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span>
            + <span class="str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span>
            + <span class="str">&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span>
            + <span class="str">&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span>
            + <span class="str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span>;

    <span class="kwa">private static final</span> FloatProbFreq IUB = <span class="kwa">new</span> <span class="kwd">FloatProbFreq</span>(
          <span class="kwa">new</span> <span class="kwb">byte</span>[]{
                <span class="str">'a'</span>,  <span class="str">'c'</span>,  <span class="str">'g'</span>,  <span class="str">'t'</span>,
                <span class="str">'B'</span>,  <span class="str">'D'</span>,  <span class="str">'H'</span>,  <span class="str">'K'</span>,
                <span class="str">'M'</span>,  <span class="str">'N'</span>,  <span class="str">'R'</span>,  <span class="str">'S'</span>,
                <span class="str">'V'</span>,  <span class="str">'W'</span>,  <span class="str">'Y'</span>},
          <span class="kwa">new</span> <span class="kwb">double</span>[]{
                <span class="num">0.27</span>, <span class="num">0.12</span>, <span class="num">0.12</span>, <span class="num">0.27</span>,
                <span class="num">0.02</span>, <span class="num">0.02</span>, <span class="num">0.02</span>, <span class="num">0.02</span>,
                <span class="num">0.02</span>, <span class="num">0.02</span>, <span class="num">0.02</span>, <span class="num">0.02</span>,
                <span class="num">0.02</span>, <span class="num">0.02</span>, <span class="num">0.02</span>,
                }
          );

    <span class="kwa">private static final</span> FloatProbFreq HOMO_SAPIENS = <span class="kwa">new</span> <span class="kwd">FloatProbFreq</span>(
          <span class="kwa">new</span> <span class="kwb">byte</span>[]{
                <span class="str">'a'</span>,
                <span class="str">'c'</span>,
                <span class="str">'g'</span>,
                <span class="str">'t'</span>},
          <span class="kwa">new</span> <span class="kwb">double</span>[]{
                <span class="num">0.3029549426680</span>d,
                <span class="num">0.1979883004921</span>d,
                <span class="num">0.1975473066391</span>d,
                <span class="num">0.3015094502008</span>d}
          );

   <span class="kwa">static final</span> <span class="kwb">void</span> <span class="kwd">makeRandomFasta</span>(String id, String desc,
         FloatProbFreq fpf, <span class="kwb">int</span> nChars, OutputStream writer)
         <span class="kwa">throws</span> IOException
   {
      <span class="kwa">final</span> <span class="kwb">int</span> LINE_LENGTH = fasta.LINE_LENGTH;
      <span class="kwa">final</span> <span class="kwb">int</span> BUFFER_SIZE = fasta.BUFFER_SIZE;
      <span class="kwb">byte</span>[] buffer = <span class="kwa">new</span> <span class="kwb">byte</span>[BUFFER_SIZE];

      <span class="kwa">if</span> (buffer.length % (LINE_LENGTH + <span class="num">1</span>) != <span class="num">0</span>) {
         <span class="kwa">throw new</span> <span class="kwd">IllegalStateException</span>(
            <span class="str">&quot;buffer size must be a multiple of &quot;</span> +
            <span class="str">&quot;line length (including line break)&quot;</span>);
      }

      String descStr = <span class="str">&quot;&gt;&quot;</span> + id + <span class="str">&quot; &quot;</span> + desc + <span class="str">'</span><span class="esc">\n</span><span class="str">'</span>;
      writer.<span class="kwd">write</span>(descStr.<span class="kwd">getBytes</span>());

      <span class="kwb">int</span> bufferIndex = <span class="num">0</span>;
      <span class="kwa">while</span> (nChars &gt; <span class="num">0</span>) {
         <span class="kwb">int</span> chunkSize;
         <span class="kwa">if</span> (nChars &gt;= LINE_LENGTH) {
            chunkSize = LINE_LENGTH;
         } <span class="kwa">else</span> {
            chunkSize = nChars;
         }

         <span class="kwa">if</span> (bufferIndex == BUFFER_SIZE) {
            writer.<span class="kwd">write</span>(buffer, <span class="num">0</span>, bufferIndex);
            bufferIndex = <span class="num">0</span>;
         }

         bufferIndex = fpf
            .<span class="kwd">selectRandomIntoBuffer</span>(buffer, bufferIndex, chunkSize);
         buffer[bufferIndex++] = <span class="str">'</span><span class="esc">\n</span><span class="str">'</span>;

         nChars -= chunkSize;
      }

      writer.<span class="kwd">write</span>(buffer, <span class="num">0</span>, bufferIndex);
   }

    <span class="kwa">static final</span> <span class="kwb">void</span> <span class="kwd">makeRepeatFasta</span>(
          String id, String desc, String alu,
          <span class="kwb">int</span> nChars, OutputStream writer) <span class="kwa">throws</span> IOException
    {
       <span class="kwa">final</span> <span class="kwb">byte</span>[] aluBytes = alu.<span class="kwd">getBytes</span>();
       <span class="kwb">int</span> aluIndex = <span class="num">0</span>;

       <span class="kwa">final</span> <span class="kwb">int</span> LINE_LENGTH = fasta.LINE_LENGTH;
       <span class="kwa">final</span> <span class="kwb">int</span> BUFFER_SIZE = fasta.BUFFER_SIZE;
       <span class="kwb">byte</span>[] buffer = <span class="kwa">new</span> <span class="kwb">byte</span>[BUFFER_SIZE];

       <span class="kwa">if</span> (buffer.length % (LINE_LENGTH + <span class="num">1</span>) != <span class="num">0</span>) {
          <span class="kwa">throw new</span> <span class="kwd">IllegalStateException</span>(
                <span class="str">&quot;buffer size must be a multiple &quot;</span> +
                <span class="str">&quot;of line length (including line break)&quot;</span>);
       }

        String descStr = <span class="str">&quot;&gt;&quot;</span> + id + <span class="str">&quot; &quot;</span> + desc + <span class="str">'</span><span class="esc">\n</span><span class="str">'</span>;
        writer.<span class="kwd">write</span>(descStr.<span class="kwd">getBytes</span>());

        <span class="kwb">int</span> bufferIndex = <span class="num">0</span>;
        <span class="kwa">while</span> (nChars &gt; <span class="num">0</span>) {
           <span class="kwa">final</span> <span class="kwb">int</span> chunkSize;
           <span class="kwa">if</span> (nChars &gt;= LINE_LENGTH) {
              chunkSize = LINE_LENGTH;
         } <span class="kwa">else</span> {
            chunkSize = nChars;
         }

           <span class="kwa">if</span> (bufferIndex == BUFFER_SIZE) {
                writer.<span class="kwd">write</span>(buffer, <span class="num">0</span>, bufferIndex);
                bufferIndex = <span class="num">0</span>;
           }

           <span class="kwa">for</span> (<span class="kwb">int</span> i = <span class="num">0</span>; i &lt; chunkSize; i++) {
              <span class="kwa">if</span> (aluIndex == aluBytes.length) {
                 aluIndex = <span class="num">0</span>;
              }

              buffer[bufferIndex++] = aluBytes[aluIndex++];
           }
           buffer[bufferIndex++] = <span class="str">'</span><span class="esc">\n</span><span class="str">'</span>;

           nChars -= chunkSize;
        }

       writer.<span class="kwd">write</span>(buffer, <span class="num">0</span>, bufferIndex);
    }

    <span class="kwa">public static</span> <span class="kwb">void</span> <span class="kwd">main</span>(String[] args) <span class="kwa">throws</span> IOException
    {
        <span class="kwb">int</span> n = <span class="num">1000</span>;
<span class="slc">//        int n = 25000000;</span>
        <span class="kwa">if</span> (args.length &gt; <span class="num">0</span>) {
         n = Integer.<span class="kwd">parseInt</span>(args[<span class="num">0</span>]);
      }

        OutputStream out = System.out;
        <span class="kwd">makeRepeatFasta</span>(<span class="str">&quot;ONE&quot;</span>, <span class="str">&quot;Homo sapiens alu&quot;</span>, ALU, n * <span class="num">2</span>, out);
        <span class="kwd">makeRandomFasta</span>(<span class="str">&quot;TWO&quot;</span>, <span class="str">&quot;IUB ambiguity codes&quot;</span>, IUB, n * <span class="num">3</span>, out);
        <span class="kwd">makeRandomFasta</span>(<span class="str">&quot;THREE&quot;</span>, <span class="str">&quot;Homo sapiens frequency&quot;</span>, HOMO_SAPIENS, n * <span class="num">5</span>, out);
        out.<span class="kwd">close</span>();
    }

    <span class="kwa">public static final class</span> FloatProbFreq {
       <span class="kwa">static</span> <span class="kwb">int</span> last = <span class="num">42</span>;
       <span class="kwa">final</span> <span class="kwb">byte</span>[] chars;
       <span class="kwa">final</span> <span class="kwb">float</span>[] probs;

       <span class="kwa">public</span> <span class="kwd">FloatProbFreq</span>(<span class="kwb">byte</span>[] chars, <span class="kwb">double</span>[] probs) {
          <span class="kwa">this</span>.chars = chars;
          <span class="kwa">this</span>.probs = <span class="kwa">new</span> <span class="kwb">float</span>[probs.length];
          <span class="kwa">for</span> (<span class="kwb">int</span> i = <span class="num">0</span>; i &lt; probs.length; i++) {
             <span class="kwa">this</span>.probs[i] = (<span class="kwb">float</span>)probs[i];
          }
          <span class="kwd">makeCumulative</span>();
       }

       <span class="kwa">private final</span> <span class="kwb">void</span> <span class="kwd">makeCumulative</span>() {
            <span class="kwb">double</span> cp = <span class="num">0.0</span>;
            <span class="kwa">for</span> (<span class="kwb">int</span> i = <span class="num">0</span>; i &lt; probs.length; i++) {
                cp += probs[i];
                probs[i] = (<span class="kwb">float</span>)cp;
            }
        }

       <span class="kwa">public final</span> <span class="kwb">int</span> <span class="kwd">selectRandomIntoBuffer</span>(
             <span class="kwb">byte</span>[] buffer, <span class="kwb">int</span> bufferIndex, <span class="kwa">final</span> <span class="kwb">int</span> nRandom) {
          <span class="kwa">final</span> <span class="kwb">byte</span>[] chars = <span class="kwa">this</span>.chars;
          <span class="kwa">final</span> <span class="kwb">float</span>[] probs = <span class="kwa">this</span>.probs;
          <span class="kwa">final</span> <span class="kwb">int</span> len = probs.length;

          outer:
          <span class="kwa">for</span> (<span class="kwb">int</span> rIndex = <span class="num">0</span>; rIndex &lt; nRandom; rIndex++) {
             <span class="kwa">final</span> <span class="kwb">float</span> r = <span class="kwd">random</span>(<span class="num">1.0</span>f);
                <span class="kwa">for</span> (<span class="kwb">int</span> i = <span class="num">0</span>; i &lt; len; i++) {
                 <span class="kwa">if</span> (r &lt; probs[i]) {
                    buffer[bufferIndex++] = chars[i];
                    <span class="kwa">continue</span> outer;
                 }
              }

                buffer[bufferIndex++] = chars[len-<span class="num">1</span>];
          }

            <span class="kwa">return</span> bufferIndex;
       }

        <span class="slc">// pseudo-random number generator</span>
        <span class="kwa">public static final</span> <span class="kwb">float</span> <span class="kwd">random</span>(<span class="kwa">final</span> <span class="kwb">float</span> max) {
           <span class="kwa">final</span> <span class="kwb">float</span> oneOverIM = (<span class="num">1.0</span>f/ IM);
            last = (last * IA + IC) % IM;
            <span class="kwa">return</span> max * last * oneOverIM;
        }
    }
}
