<span class="slc">--</span>
<span class="slc">-- The Computer Language Benchmarks Game</span>
<span class="slc">-- http://benchmarksgame.alioth.debian.org/</span>
<span class="slc">--</span>
<span class="slc">-- Contributed by Don Stewart</span>
<span class="slc">-- A lazy bytestring solution.</span>
<span class="slc">-- Unnecessary strictness annotations removed by Sterling Clover 2/08</span>
<span class="slc">--</span>
<span class="slc">-- Adding cached version of the list, where the first 4 entries are</span>
<span class="slc">-- lifted into the data constructor by Scott West 03/10</span>
<span class="slc">--</span>
<span class="slc">-- Add:</span>
<span class="slc">-- -optc-mfpmath=sse -optc-msse2</span>
<span class="slc">--</span>
<span class="kwd">module</span> Main <span class="kwd">where</span>

<span class="kwd">import</span> System.Environment
<span class="kwd">import</span> Data.Word
<span class="kwd">import</span> Control.Arrow

<span class="kwd">import</span> Data.List

<span class="kwd">import qualified</span> Data.ByteString.Lazy <span class="kwd">as</span> L
<span class="kwd">import qualified</span> Data.ByteString.Lazy.Char8 <span class="kwd">as</span> C (pack)
<span class="kwd">import qualified</span> Data.ByteString <span class="kwd">as</span> S
<span class="kwd">import</span> Data.ByteString.Internal

main = <span class="kwd">do</span>
    n &lt;- <span class="kwc">getArgs</span> &gt;&gt;= <span class="kwc">readIO</span> . <span class="kwc">head</span>
    writeFasta  <span class="str">&quot;ONE&quot;</span>   <span class="str">&quot;Homo sapiens alu&quot;</span>       (n*<span class="num">2</span>) (L.<span class="kwc">cycle</span> alu)
    g &lt;- unfold <span class="str">&quot;TWO&quot;</span>   <span class="str">&quot;IUB ambiguity codes&quot;</span>    (n*<span class="num">3</span>) (mkCacher $ cdfize iubs) <span class="num">42</span>
    unfold      <span class="str">&quot;THREE&quot;</span> <span class="str">&quot;Homo sapiens frequency&quot;</span> (n*<span class="num">5</span>) (mkCacher $ cdfize homs) g

<span class="slc">------------------------------------------------------------------------</span>
<span class="slc">--</span>
<span class="slc">-- lazily unfold the randomised dna sequences</span>
<span class="slc">--</span>

unfold lab ttl n probs gen =
    <span class="kwc">putStrLn</span> (<span class="str">&quot;&gt;&quot;</span> ++ lab ++ <span class="str">&quot; &quot;</span> ++ ttl) &gt;&gt; unroll probs gen n

unroll :: Cacher -&gt; <span class="kwb">Int</span> -&gt; <span class="kwb">Int</span> -&gt; <span class="kwb">IO Int</span>
unroll probs = loop
    <span class="kwd">where</span>
        loop r <span class="num">0</span>   = <span class="kwc">return</span> r
        loop !r i = <span class="kwd">case</span> S.unfoldrN m (Just . look probs) r <span class="kwd">of</span>
                        (!s, Just r') -&gt; <span class="kwd">do</span>
                            S.<span class="kwc">putStrLn</span> s
                            loop r' (i-m)
          <span class="kwd">where</span> m = <span class="kwc">min</span> i <span class="num">60</span>

look cr k = (choose cr d, j)
  <span class="kwd">where</span> R d j = rand k

<span class="slc">-- Chunk the list into parts, still can represent any list of the</span>
<span class="slc">-- symbol/probability pairs.</span>
<span class="kwd">data</span> PPair = PPair !Word8 !<span class="kwb">Float</span>
<span class="kwd">data</span> Cacher = Cacher !PPair !PPair !PPair !PPair [PPair]
            | CacheList ![PPair]

mkCacher (p1:p2:p3:p4:ds) = Cacher p1 p2 p3 p4 ds
mkCacher ds = CacheList ds

cdfize :: [(Word8,<span class="kwb">Float</span>)] -&gt; [PPair]
cdfize ds = <span class="kwc">init</span> cdf' ++ [PPair s <span class="num">1.0</span>]
    <span class="kwd">where</span>
      PPair s _ = <span class="kwc">last</span> cdf'
      cdf' = (<span class="kwc">map</span> (<span class="kwc">uncurry</span> PPair) . <span class="kwc">snd</span> . <span class="kwc">mapAccumL</span> go <span class="num">0</span>) ds
      go c (sym, prob) = (c + prob, (sym, c+prob))

<span class="slc">-- We still query the list in order, but we don't have to continually</span>
<span class="slc">-- ``uncons'' everything, we can do the first 4 at a time.</span>
choose :: Cacher -&gt; <span class="kwb">Float</span> -&gt; Word8
choose (Cacher (PPair s1 c1) (PPair s2 c2) (PPair s3 c3) (PPair s4 c4) ds) p
    | p &lt;= c1 = s1
    | p &lt;= c2 = s2
    | p &lt;= c3 = s3
    | p &lt;= c4 = s4
    | <span class="kwc">otherwise</span> = chooseCdf ds p
                  <span class="com">{- case ds of</span>
<span class="com">                    CacheList [] -&gt; s4</span>
<span class="com">                    _ -&gt; choose ds p -}</span>
choose (CacheList ds) p = chooseCdf ds p

chooseCdf :: [PPair] -&gt; <span class="kwb">Float</span> -&gt; Word8
chooseCdf ((PPair b f):xs) p = <span class="kwd">if</span> p &lt; f <span class="kwd">then</span> b <span class="kwd">else</span> chooseCdf xs p

<span class="slc">------------------------------------------------------------------------</span>
<span class="slc">--</span>
<span class="slc">-- only demand as much of the infinite sequence as we require</span>

writeFasta label title n s = <span class="kwd">do</span>
     <span class="kwc">putStrLn</span> $ <span class="str">&quot;&gt;&quot;</span> ++ label ++ <span class="str">&quot; &quot;</span> ++ title
     <span class="kwd">let</span> (t:ts) = L.toChunks s
     go ts t n
  <span class="kwd">where</span>
     go ss s n
        | l60 &amp;&amp; n60 = S.<span class="kwc">putStrLn</span> l               &gt;&gt; go ss        r (n-<span class="num">60</span>)
        |        n60 = S.<span class="kwc">putStr</span> s &gt;&gt; S.<span class="kwc">putStrLn</span> a &gt;&gt; go (<span class="kwc">tail</span> ss) b (n-<span class="num">60</span>)
        | n &lt;= ln    = S.<span class="kwc">putStrLn</span> (S.<span class="kwc">take</span> n s)
        | <span class="kwc">otherwise</span>  = S.<span class="kwc">putStr</span> s &gt;&gt; S.<span class="kwc">putStrLn</span> (S.<span class="kwc">take</span> (n-ln) (<span class="kwc">head</span> ss))
        <span class="kwd">where</span>
            ln   = S.<span class="kwa">length</span> s
            l60  = ln &gt;= <span class="num">60</span>
            n60  = n  &gt;= <span class="num">60</span>
            (l,r) = S.<span class="kwc">splitAt</span> <span class="num">60</span> s
            (a,b) = S.<span class="kwc">splitAt</span> (<span class="num">60</span>-ln) (<span class="kwc">head</span> ss)

<span class="slc">------------------------------------------------------------------------</span>
im, ia, ic :: <span class="kwb">Int</span>
im  = <span class="num">139968</span>
ia  = <span class="num">3877</span>
ic  = <span class="num">29573</span>

<span class="kwd">data</span> R = R !<span class="kwb">Float</span> !<span class="kwb">Int</span> <span class="kwd">deriving</span> <span class="kwb">Show</span>

rand :: <span class="kwb">Int</span> -&gt; R
rand seed = R newran newseed
    <span class="kwd">where</span>
        newseed = (seed * ia + ic) `<span class="kwc">rem</span>` im
        newran  =  <span class="num">1.0</span> * <span class="kwc">fromIntegral</span> newseed / imd
        imd      = <span class="kwc">fromIntegral</span> im

<span class="slc">------------------------------------------------------------------------</span>

alu = C.pack
        <span class="str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG\</span>
<span class="str">        \GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA\</span>
<span class="str">        \CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT\</span>
<span class="str">        \ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA\</span>
<span class="str">        \GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG\</span>
<span class="str">        \AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC\</span>
<span class="str">        \AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span>

iubs, homs :: [(Word8, <span class="kwb">Float</span>)]
iubs = <span class="kwc">map</span> (c2w *** <span class="kwc">id</span>)
        [('a',<span class="num">0.27</span>),('c',<span class="num">0.12</span>),('g',<span class="num">0.12</span>),('t',<span class="num">0.27</span>),('B',<span class="num">0.02</span>)
        ,('D',<span class="num">0.02</span>),('H',<span class="num">0.02</span>),('K',<span class="num">0.02</span>),('M',<span class="num">0.02</span>),('N',<span class="num">0.02</span>)
        ,('R',<span class="num">0.02</span>),('S',<span class="num">0.02</span>),('V',<span class="num">0.02</span>),('W',<span class="num">0.02</span>),('Y',<span class="num">0.02</span>)]

homs = <span class="kwc">map</span> (c2w *** <span class="kwc">id</span>)
        [('a',<span class="num">0.3029549426680</span>),('c',<span class="num">0.1979883004921</span>)
        ,('g',<span class="num">0.1975473066391</span>),('t',<span class="num">0.3015094502008</span>)]
