<span class="slc">! -*- mode: f90 -*-</span>
<span class="slc">!</span>
<span class="slc">! $Id: binarytrees.1.ifc.code,v 1.6 2015/10/07 20:40:35 igouy-guest Exp $ ; $Name:  $</span>
<span class="slc">!</span>
<span class="slc">! The Computer Language Shootout Benchmarks</span>
<span class="slc">! http://benchmarksgame.alioth.debian.org/</span>

<span class="slc">! contributed by Steve Decker</span>
<span class="slc">! based on the C version by Kevin Carson</span>
<span class="slc">! compilation:</span>
<span class="slc">!    gfortran -O3 -fomit-frame-pointer -funroll-loops binarytrees.f90</span>
<span class="slc">!</span>
<span class="slc">! This implementation does not need TR15581</span>
<span class="slc">!</span>
<span class="kwa">module</span> b_tree
  <span class="kwa">implicit none</span>
  <span class="kwa">save</span>

  <span class="kwa">integer</span>, <span class="kwa">parameter</span> :: short = <span class="kwd">selected_int_kind</span>(<span class="num">1</span>)

  <span class="kwa">type</span> treeNode
     <span class="kwa">integer</span> :: item
     <span class="kwa">type</span>(treeNode), <span class="kwa">pointer</span> :: left
     <span class="kwa">type</span>(treeNode), <span class="kwa">pointer</span> :: right
  <span class="kwa">end type</span> treeNode

<span class="kwa">contains</span>

  <span class="kwa">subroutine</span> <span class="kwd">NewTreeNode</span>(left, right, item, node)
    <span class="kwa">type</span>(treeNode), target, <span class="kwd">intent</span>(in) :: left, right
    <span class="kwa">integer</span>, <span class="kwd">intent</span>(in) :: item
    <span class="kwa">type</span>(treeNode), <span class="kwa">pointer</span> :: node

    <span class="kwd">allocate</span>(node)
    node = <span class="kwd">treeNode</span>(item, left, right)
  <span class="kwa">end subroutine</span> NewTreeNode

  <span class="kwa">recursive function</span> <span class="kwd">ItemCheck</span>(tree) <span class="kwd">result</span> (check)
    <span class="kwa">type</span>(treeNode), <span class="kwa">pointer</span> :: tree
    <span class="kwa">integer</span> :: check

    <span class="kwa">if</span> (.not. <span class="kwd">associated</span>(tree%left)) <span class="kwa">then</span>
       check = tree%item
    <span class="kwa">else</span>
       check = tree%item + <span class="kwd">ItemCheck</span>(tree%left) - <span class="kwd">ItemCheck</span>(tree%right)
    <span class="kwa">end if</span>
    <span class="kwd">deallocate</span>(tree)
  <span class="kwa">end function</span> ItemCheck

  <span class="kwa">recursive subroutine</span> <span class="kwd">BottomUpTree</span>(item, depth, node)
    <span class="kwa">integer</span>, <span class="kwd">intent</span>(in) :: item
    <span class="kwa">integer</span>(kind=short), <span class="kwd">intent</span>(in) :: depth
    <span class="kwa">type</span>(treeNode), <span class="kwa">pointer</span> :: node

    <span class="kwa">type</span>(treeNode), <span class="kwa">pointer</span> :: left, right

    <span class="kwd">nullify</span>(left, right)

    <span class="kwa">if</span> (depth &gt; <span class="num">0</span>) <span class="kwa">then</span>
       <span class="kwa">call</span> <span class="kwd">BottomUpTree</span>(<span class="num">2</span> * item - <span class="num">1</span>, depth - <span class="num">1</span>_short, left)
       <span class="kwa">call</span> <span class="kwd">BottomUpTree</span>(<span class="num">2</span> * item, depth - <span class="num">1</span>_short, right)
    <span class="kwa">end if</span>
    <span class="kwa">call</span> <span class="kwd">NewTreeNode</span>(left, right, item, node)
  <span class="kwa">end subroutine</span> BottomUpTree
<span class="kwa">end module</span> b_tree

<span class="kwa">program</span> binarytrees
  <span class="kwa">use</span> b_tree
  <span class="kwa">implicit none</span>

  <span class="kwa">integer</span>(kind=short), <span class="kwa">parameter</span> :: minDepth = <span class="num">4</span>_short
  <span class="kwa">character</span>,           <span class="kwa">parameter</span> :: tab = <span class="kwd">achar</span>(<span class="num">9</span>)

  <span class="kwa">integer</span> :: i, iterations, check
  <span class="kwa">integer</span>(kind=short) :: N, depth, maxDepth, stretchDepth
  <span class="kwa">character</span>(len=<span class="num">2</span>) :: argv
  <span class="kwa">type</span>(treeNode), <span class="kwa">pointer</span> :: stretchTree =&gt; <span class="kwd">null</span>(), longLivedTree =&gt; <span class="kwd">null</span>(),  &amp;
                             tempTree =&gt; <span class="kwd">null</span>()

  <span class="kwa">call</span> <span class="kwd">get_command_argument</span>(<span class="num">1</span>, argv)
  <span class="kwa">read</span> (argv, <span class="str">&quot;(i2)&quot;</span>) N

  maxDepth = <span class="kwd">max</span>(minDepth + <span class="num">2</span>_short, N)

  stretchDepth = maxDepth + <span class="num">1</span>_short
  <span class="kwa">call</span> <span class="kwd">BottomUpTree</span>(<span class="num">0</span>, stretchDepth, stretchTree)
  <span class="kwa">write</span>(*,<span class="str">&quot;(2(a,i0))&quot;</span>) <span class="str">&quot;stretch tree of depth &quot;</span>, stretchDepth,  &amp;
       tab//<span class="str">&quot; check: &quot;</span>, <span class="kwd">ItemCheck</span>(stretchTree)

  <span class="kwa">call</span> <span class="kwd">BottomUpTree</span>(<span class="num">0</span>, maxDepth, longLivedTree)
  
  <span class="kwa">do</span> depth = minDepth, maxDepth, <span class="num">2</span>
     iterations = <span class="num">2</span>**(maxDepth - depth + minDepth)
     check = <span class="num">0</span>
     <span class="kwa">do</span> i = <span class="num">1</span>, iterations
        <span class="kwa">call</span> <span class="kwd">BottomUpTree</span>(i, depth, tempTree)
        check = check + <span class="kwd">ItemCheck</span>(tempTree)
        
        <span class="kwa">call</span> <span class="kwd">BottomUpTree</span>(-i, depth, tempTree)
        check = check + <span class="kwd">ItemCheck</span>(tempTree)
     <span class="kwa">end do</span>
     <span class="kwa">write</span>(*,<span class="str">&quot;(2(i0,a),i0)&quot;</span>) iterations*<span class="num">2</span>, tab//<span class="str">&quot; trees of depth &quot;</span>, depth,  &amp;
          tab//<span class="str">&quot; check: &quot;</span>, check
  <span class="kwa">end do</span>

  <span class="kwa">write</span>(*,<span class="str">&quot;(2(a,i0))&quot;</span>) <span class="str">&quot;long lived tree of depth &quot;</span>, maxDepth,  &amp;
       tab//<span class="str">&quot; check: &quot;</span>, <span class="kwd">ItemCheck</span>(longLivedTree)
<span class="kwa">end program</span> binarytrees
