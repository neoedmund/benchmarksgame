<span class="com">/* ------------------------------------------------------------------ */</span>
<span class="com">/* The Computer Language Benchmarks Game                              */</span>
<span class="com">/* http://benchmarksgame.alioth.debian.org                                 */</span>
<span class="com">/*                                                                    */</span>
<span class="com">/* Contributed by Anthony Borla                                       */</span>
<span class="com">/* Modified by Vaclav Haisman                                         */</span>
<span class="com">/* Changed to match style of Perl example: Greg Buchholz              */</span>
<span class="com">/* ------------------------------------------------------------------ */</span>

<span class="ppc">#include &lt;cctype&gt;</span>
<span class="ppc">#include &lt;string&gt;</span>
<span class="ppc">#include &lt;algorithm&gt;</span>
<span class="ppc">#include &lt;iterator&gt;</span>
<span class="ppc">#include &lt;iostream&gt;</span>
<span class="kwa">using namespace</span> std;

<span class="kwb">const int</span> LINELENGTH = <span class="num">60</span>;

<span class="kwc">typedef</span> string Header;
<span class="kwc">typedef</span> string Segment;

<span class="kwc">inline</span> <span class="kwb">char</span> <span class="kwd">complement</span>(<span class="kwb">char</span> element)
{
  <span class="kwb">static const char</span> charMap[] =
    {
      <span class="str">'T'</span>, <span class="str">'V'</span>, <span class="str">'G'</span>, <span class="str">'H'</span>, <span class="str">'\0'</span>, <span class="str">'\0'</span>, <span class="str">'C'</span>, <span class="str">'D'</span>, <span class="str">'\0'</span>, <span class="str">'\0'</span>, <span class="str">'M'</span>, <span class="str">'\0'</span>, <span class="str">'K'</span>,
      <span class="str">'N'</span>, <span class="str">'\0'</span>, <span class="str">'\0'</span>, <span class="str">'\0'</span>, <span class="str">'Y'</span>, <span class="str">'S'</span>, <span class="str">'A'</span>, <span class="str">'A'</span>, <span class="str">'B'</span>, <span class="str">'W'</span>, <span class="str">'\0'</span>, <span class="str">'R'</span>, <span class="str">'\0'</span>
    };

  <span class="kwa">return</span> charMap[<span class="kwd">toupper</span>(element) - <span class="str">'A'</span>];
}

<span class="kwb">void</span> <span class="kwd">print_revcomp</span>(Header <span class="kwb">const</span>&amp; header, Segment <span class="kwb">const</span>&amp; seg, ostream&amp; out = std::cout)
{
    out &lt;&lt; header &lt;&lt; <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span>;
    
    Segment <span class="kwd">comp</span>(seg.<span class="kwd">rbegin</span>(),seg.<span class="kwd">rend</span>());
    <span class="kwd">transform</span>(comp.<span class="kwd">begin</span>(),comp.<span class="kwd">end</span>(), comp.<span class="kwd">begin</span>(), complement);
   
    <span class="kwb">size_t</span> i = <span class="num">0</span>;
    <span class="kwb">size_t</span> stop = comp.<span class="kwd">length</span>()/LINELENGTH + ((comp.<span class="kwd">length</span>()%LINELENGTH)?<span class="num">1</span>:<span class="num">0</span>);
    
    <span class="kwa">while</span>(i &lt; stop)
        out &lt;&lt; comp.<span class="kwd">substr</span>(i++*LINELENGTH,LINELENGTH) &lt;&lt; <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span>;
}

<span class="kwb">int</span> <span class="kwd">main</span> ()
{
  ios_base::<span class="kwd">sync_with_stdio</span>(<span class="kwa">false</span>);

  Segment line, segment; 
  Header header;

  <span class="kwa">while</span> (<span class="kwd">getline</span>(cin, line))
  {
      <span class="kwa">if</span> (line[<span class="num">0</span>] == <span class="str">'&gt;'</span>)
      {
          <span class="kwa">if</span> (! segment.<span class="kwd">empty</span>())
            <span class="kwd">print_revcomp</span>(header, segment);
          header = line;
          segment.<span class="kwd">clear</span>();
      }
      <span class="kwa">else</span>
          segment += line;
  }
  <span class="kwd">print_revcomp</span>(header, segment);

  <span class="kwa">return</span> <span class="num">0</span>;
}

