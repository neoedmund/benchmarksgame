<span class="com">(* The Computer Language Benchmarks Game</span>
<span class="com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * contributed by Troestler Christophe</span>
<span class="com"> * modified by Mauricio Fernandez</span>
<span class="com"> *)</span>

<span class="kwa">module</span> <span class="kwd">C</span>(<span class="kwd">S</span> : <span class="kwa">sig</span>
           <span class="kwa">val</span> k : <span class="kwb">int</span>
           <span class="kwa">val</span> dna : <span class="kwb">string</span>
         <span class="kwa">end</span>) =
<span class="kwa">struct</span>
  <span class="kwa">let</span> dna, k = <span class="kwc">S</span>.dna, <span class="kwc">S</span>.k

  <span class="kwa">module</span> <span class="kwd">K</span> = <span class="kwa">struct</span>
    <span class="kwa">type</span> t = <span class="kwb">int</span>
    <span class="kwa">let</span> equal k1 k2 =
      <span class="kwa">let rec</span> cmp n ka kb =
        <span class="kwa">if</span> n = <span class="num">0</span> <span class="kwa">then true</span>
        <span class="kwa">else if</span> dna.[ka] = dna.[kb] <span class="kwa">then</span> cmp (n - <span class="num">1</span>) (ka + <span class="num">1</span>) (kb + <span class="num">1</span>)
        <span class="kwa">else false</span>
      <span class="kwa">in</span> cmp k k1 k2

    <span class="kwa">let</span> hash n =
      <span class="kwa">let</span> h = <span class="kwb">ref</span> <span class="num">0</span> <span class="kwa">in</span>
        <span class="kwa">for</span> i = n <span class="kwa">to</span> n + k - <span class="num">1</span> <span class="kwa">do</span> h := !h * <span class="num">5</span> + <span class="kwc">Char</span>.code dna.[i] <span class="kwa">done</span>;
        !h
  <span class="kwa">end</span>

  <span class="kwa">let</span> c = <span class="num">0x40000</span>
  <span class="kwa">include</span> <span class="kwc">Hashtbl</span>.<span class="kwd">Make</span>(<span class="kwd">K</span>)
  <span class="kwa">let</span> h = create c

  <span class="kwa">let</span> count () = 
    <span class="kwa">for</span> i = <span class="num">0</span> <span class="kwa">to</span> <span class="kwc">String</span>.length dna - k - <span class="num">1</span> <span class="kwa">do</span>
      <span class="kwa">try</span> incr (find h i) <span class="kwa">with</span> <span class="kwd">Not_found</span> -&gt; add h i (<span class="kwb">ref</span> <span class="num">1</span>)
    <span class="kwa">done</span>

  <span class="kwa">let</span> compare_freq ((k1:<span class="kwb">string</span>),(f1:<span class="kwb">float</span>)) (k2, f2) =
    <span class="kwa">if</span> f1 &gt; f2 <span class="kwa">then</span> -<span class="num">1</span> <span class="kwa">else if</span> f1 &lt; f2 <span class="kwa">then</span> <span class="num">1</span> <span class="kwa">else</span> <span class="kwc">String</span>.compare k1 k2

  <span class="kwa">let</span> write_frequencies () =
    count ();
    <span class="kwa">let</span> tot = <span class="kwb">float</span>(fold (<span class="kwa">fun</span> _ n t -&gt; !n + t) h <span class="num">0</span>) <span class="kwa">in</span>
    <span class="kwa">let</span> frq =
      fold (<span class="kwa">fun</span> off n l -&gt; 
              (<span class="kwc">String</span>.sub dna off k, <span class="num">100</span>. *. <span class="kwb">float</span> !n /. tot) :: l) h [] <span class="kwa">in</span>
    <span class="kwa">let</span> frq = <span class="kwc">List</span>.sort compare_freq frq <span class="kwa">in</span>
      <span class="kwc">String</span>.concat <span class="str">&quot;&quot;</span> 
        (<span class="kwc">List</span>.map (<span class="kwa">fun</span> (k,f) -&gt; <span class="kwc">Printf</span>.sprintf <span class="str">&quot;</span><span class="ipl">%s</span> <span class="str">%.3f</span><span class="esc">\n</span><span class="str">&quot;</span> k f) frq)

  <span class="kwa">let</span> write_count seq =
    <span class="kwa">assert</span> (<span class="kwc">String</span>.length seq = k);
    count ();
    <span class="kwc">String</span>.blit seq <span class="num">0</span> dna <span class="num">0</span> k;
    <span class="kwc">Printf</span>.sprintf <span class="str">&quot;</span><span class="ipl">%d</span><span class="str"></span><span class="esc">\t</span><span class="str"></span><span class="ipl">%s</span><span class="str">&quot;</span> (<span class="kwa">try</span> !(find h <span class="num">0</span>) <span class="kwa">with</span> <span class="kwd">Not_found</span> -&gt; <span class="num">0</span>) seq
<span class="kwa">end</span>

<span class="com">(* Extract DNA sequence &quot;THREE&quot; from stdin *)</span>
<span class="kwa">let</span> dna_three =
  <span class="kwa">let</span> is_not_three s = <span class="kwa">try</span> <span class="kwc">String</span>.sub s <span class="num">0 6</span> &lt;&gt; <span class="str">&quot;&gt;THREE&quot;</span> <span class="kwa">with</span> _ -&gt; <span class="kwa">true in</span>
  <span class="kwa">while</span> is_not_three(input_line stdin) <span class="kwa">do</span> () <span class="kwa">done</span>;
  <span class="kwa">let</span> buf = <span class="kwc">Buffer</span>.create <span class="num">1000</span> <span class="kwa">in</span>
  <span class="com">(* Skip possible comment *)</span>
  (<span class="kwa">try while true do</span>
     <span class="kwa">let</span> line = input_line stdin <span class="kwa">in</span>
     <span class="kwa">if</span> line.[<span class="num">0</span>] &lt;&gt; ';' <span class="kwa">then</span>
       (<span class="kwc">Buffer</span>.add_string buf (<span class="kwc">String</span>.uppercase line); raise <span class="kwd">Exit</span>)
   <span class="kwa">done with</span> _ -&gt; ());
  <span class="com">(* Read the DNA sequence *)</span>
  (<span class="kwa">try while true do</span>
       <span class="kwa">let</span> line = input_line stdin <span class="kwa">in</span>
       <span class="kwa">if</span> line.[<span class="num">0</span>] = '&gt;' <span class="kwa">then</span> raise <span class="kwd">End_of_file</span>;
       <span class="kwc">Buffer</span>.add_string buf (<span class="kwc">String</span>.uppercase line)
   <span class="kwa">done with</span> <span class="kwd">End_of_file</span> -&gt; ());
  <span class="kwc">Buffer</span>.contents buf

<span class="kwa">let</span> invoke (f : 'a -&gt; 'b) x : <span class="kwb">unit</span> -&gt; 'b =
  <span class="kwa">let</span> input, output = <span class="kwc">Unix</span>.pipe() <span class="kwa">in</span>
  <span class="kwa">match</span> <span class="kwc">Unix</span>.fork() <span class="kwa">with</span>
  | -<span class="num">1</span> -&gt; <span class="kwc">Unix</span>.close input; <span class="kwc">Unix</span>.close output; (<span class="kwa">let</span> v = f x <span class="kwa">in fun</span> () -&gt; v)
  | <span class="num">0</span> -&gt;
      <span class="kwc">Unix</span>.close input;
      <span class="kwa">let</span> output = <span class="kwc">Unix</span>.out_channel_of_descr output <span class="kwa">in</span>
        <span class="kwc">Marshal</span>.to_channel output (<span class="kwa">try</span> `<span class="kwd">Res</span>(f x) <span class="kwa">with</span> e -&gt; `<span class="kwd">Exn</span> e) [];
        close_out output;
        exit <span class="num">0</span>
  | pid -&gt;
      <span class="kwc">Unix</span>.close output;
      <span class="kwa">let</span> input = <span class="kwc">Unix</span>.in_channel_of_descr input <span class="kwa">in fun</span> () -&gt;
        <span class="kwa">let</span> v = <span class="kwc">Marshal</span>.from_channel input <span class="kwa">in</span>
        ignore (<span class="kwc">Unix</span>.waitpid [] pid);
        close_in input;
        <span class="kwa">match</span> v <span class="kwa">with</span> `<span class="kwd">Res</span> x -&gt; x | `<span class="kwd">Exn</span> e -&gt; raise e

<span class="kwa">let</span> parallelize f l =
  <span class="kwc">List</span>.iter (<span class="kwa">fun</span> g -&gt; print_endline (g ())) (<span class="kwc">List</span>.map (invoke f) l)

<span class="kwa">let</span> () =
  parallelize
    (<span class="kwa">fun</span> i -&gt; 
       <span class="kwa">let module</span> <span class="kwd">M</span> = <span class="kwd">C</span>(<span class="kwa">struct let</span> k = i <span class="kwa">let</span> dna = dna_three <span class="kwa">end</span>) <span class="kwa">in</span>
         <span class="kwc">M</span>.write_frequencies ()) [<span class="num">1</span>; <span class="num">2</span>];
  parallelize
    (<span class="kwa">fun</span> k -&gt; 
       <span class="kwa">let module</span> <span class="kwd">M</span> = <span class="kwd">C</span>(<span class="kwa">struct let</span> k = <span class="kwc">String</span>.length k <span class="kwa">let</span> dna = dna_three <span class="kwa">end</span>) <span class="kwa">in</span>
         <span class="kwc">M</span>.write_count k)
    [<span class="str">&quot;GGT&quot;</span>; <span class="str">&quot;GGTA&quot;</span>; <span class="str">&quot;GGTATT&quot;</span>; <span class="str">&quot;GGTATTTTAATT&quot;</span>; <span class="str">&quot;GGTATTTTAATTTATAGT&quot;</span>]
