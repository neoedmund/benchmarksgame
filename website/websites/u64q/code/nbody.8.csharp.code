<span class="kwa">namespace</span> nbody
{
    <span class="com">/*  The Computer Language Benchmarks Game</span>
<span class="com">        http://benchmarksgame.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">        contributed by Isaac Gouy</span>
<span class="com">        modified by Robert F. Tobler</span>
<span class="com">        modified by Eric P. Nusbaum</span>
<span class="com">    */</span>

    <span class="kwa">using</span> System;

    <span class="kwa">public class</span> NBody
    {
        <span class="kwa">public static</span> <span class="kwb">void</span> <span class="kwd">Main</span>(String[] args)
        {
                <span class="kwb">int</span> n = args.Length &gt; <span class="num">0</span> ? Int32.<span class="kwd">Parse</span>(args[<span class="num">0</span>]) : <span class="num">10000</span>;
                NBodySystem bodies = <span class="kwa">new</span> <span class="kwd">NBodySystem</span>();
                Console.<span class="kwd">WriteLine</span>(<span class="str">&quot;{0:f9}&quot;</span>, bodies.<span class="kwd">Energy</span>());
                <span class="kwa">for</span> (<span class="kwb">int</span> i = <span class="num">0</span>; i &lt; n; i++) bodies.<span class="kwd">Advance</span>(<span class="num">0.01</span>);
                Console.<span class="kwd">WriteLine</span>(<span class="str">&quot;{0:f9}&quot;</span>, bodies.<span class="kwd">Energy</span>());
        }
    }

    <span class="kwa">public class</span> Body { <span class="kwa">public</span> <span class="kwb">double</span> x, y, z, vx, vy, vz, mass; }
    

    <span class="kwa">public class</span> NBodySystem
    {
        <span class="kwa">private</span> Body[] _bodies;
        <span class="kwa">private</span> Body[] _pairL;
        <span class="kwa">private</span> Body[] _pairR;
        <span class="kwa">private</span> <span class="kwb">byte</span> bodyCount = <span class="num">5</span>;

        <span class="kwb">const double</span> Pi = <span class="num">3.141592653589793</span>;
        <span class="kwb">const double</span> Solarmass = <span class="num">4</span> * Pi * Pi;
        <span class="kwb">const double</span> DaysPeryear = <span class="num">365.24</span>;

        <span class="kwa">public</span> <span class="kwd">NBodySystem</span>()
        {
            _bodies = <span class="kwa">new</span>[]
            {
                <span class="kwa">new</span> <span class="kwd">Body</span>()
                {
                    <span class="slc">// Sun</span>
                    mass = Solarmass,
                },
                <span class="kwa">new</span> <span class="kwd">Body</span>()
                {
                    <span class="slc">// Jupiter</span>
                    x = <span class="num">4.84143144246472090e+00</span>,
                    y = -<span class="num">1.16032004402742839e+00</span>,
                    z = -<span class="num">1.03622044471123109e-01</span>,
                    vx = <span class="num">1.66007664274403694e-03</span>*DaysPeryear,
                    vy = <span class="num">7.69901118419740425e-03</span>*DaysPeryear,
                    vz = -<span class="num">6.90460016972063023e-05</span>*DaysPeryear,
                    mass = <span class="num">9.54791938424326609e-04</span>*Solarmass,
                },
                <span class="kwa">new</span> <span class="kwd">Body</span>()
                {
                    <span class="slc">// Saturn</span>
                    x = <span class="num">8.34336671824457987e+00</span>,
                    y = <span class="num">4.12479856412430479e+00</span>,
                    z = -<span class="num">4.03523417114321381e-01</span>,
                    vx = -<span class="num">2.76742510726862411e-03</span>*DaysPeryear,
                    vy = <span class="num">4.99852801234917238e-03</span>*DaysPeryear,
                    vz = <span class="num">2.30417297573763929e-05</span>*DaysPeryear,
                    mass = <span class="num">2.85885980666130812e-04</span>*Solarmass,
                },
                <span class="kwa">new</span> <span class="kwd">Body</span>()
                {
                    <span class="slc">// Uranus</span>
                    x = <span class="num">1.28943695621391310e+01</span>,
                    y = -<span class="num">1.51111514016986312e+01</span>,
                    z = -<span class="num">2.23307578892655734e-01</span>,
                    vx = <span class="num">2.96460137564761618e-03</span>*DaysPeryear,
                    vy = <span class="num">2.37847173959480950e-03</span>*DaysPeryear,
                    vz = -<span class="num">2.96589568540237556e-05</span>*DaysPeryear,
                    mass = <span class="num">4.36624404335156298e-05</span>*Solarmass,
                },
                <span class="kwa">new</span> <span class="kwd">Body</span>()
                {
                    <span class="slc">// Neptune</span>
                    x = <span class="num">1.53796971148509165e+01</span>,
                    y = -<span class="num">2.59193146099879641e+01</span>,
                    z = <span class="num">1.79258772950371181e-01</span>,
                    vx = <span class="num">2.68067772490389322e-03</span>*DaysPeryear,
                    vy = <span class="num">1.62824170038242295e-03</span>*DaysPeryear,
                    vz = -<span class="num">9.51592254519715870e-05</span>*DaysPeryear,
                    mass = <span class="num">5.15138902046611451e-05</span>*Solarmass,
                },
            };

            _pairL = <span class="kwa">new</span> Body[(bodyCount * (bodyCount - <span class="num">1</span>) / <span class="num">2</span>)];
            _pairR = <span class="kwa">new</span> Body[(bodyCount * (bodyCount - <span class="num">1</span>) / <span class="num">2</span>)];
            var pi = <span class="num">0</span>;
            <span class="kwa">for</span> (var i = <span class="num">0</span>; i &lt; bodyCount - <span class="num">1</span>; i++)
                <span class="kwa">for</span> (var j = i + <span class="num">1</span>; j &lt; bodyCount; j++)
                {
                    _pairL[pi] = _bodies[i];
                    _pairR[pi] = _bodies[j];
                    pi++;
                }

        <span class="kwb">double</span> px = <span class="num">0.0</span>, py = <span class="num">0.0</span>, pz = <span class="num">0.0</span>;
            <span class="kwa">foreach</span> (var b <span class="kwa">in</span> _bodies)
            {
                px += b.vx * b.mass; py += b.vy * b.mass; pz += b.vz * b.mass;
            }
            var sol = _bodies[<span class="num">0</span>];
            sol.vx = -px / Solarmass; sol.vy = -py / Solarmass; sol.vz = -pz / Solarmass;
        }

        <span class="kwa">public</span> <span class="kwb">void</span> <span class="kwd">Advance</span>(<span class="kwb">double</span> dt)
        {
            var length = _pairL.Length;
            <span class="kwa">for</span> (<span class="kwb">int</span> i = <span class="num">0</span>; i &lt; length; i++)
            {
                Body bi =  _pairL[i], bj = _pairR[i];
                <span class="kwb">double</span> dx = bi.x - bj.x, dy = bi.y - bj.y, dz = bi.z - bj.z;
                <span class="kwb">double</span> d2 = dx * dx + dy * dy + dz * dz;
                <span class="kwb">double</span> mag = dt / (d2 * Math.<span class="kwd">Sqrt</span>(d2));
                bi.vx -= dx * bj.mass * mag; bj.vx += dx * bi.mass * mag;
                bi.vy -= dy * bj.mass * mag; bj.vy += dy * bi.mass * mag;
                bi.vz -= dz * bj.mass * mag; bj.vz += dz * bi.mass * mag;
            }
            <span class="kwa">foreach</span> (var b <span class="kwa">in</span> _bodies)
            {
                b.x += dt * b.vx; b.y += dt * b.vy; b.z += dt * b.vz;
            }
        }

        <span class="kwa">public</span> <span class="kwb">double</span> <span class="kwd">Energy</span>()
        {
            <span class="kwb">double</span> e = <span class="num">0.0</span>;
            <span class="kwa">for</span> (<span class="kwb">int</span> i = <span class="num">0</span>; i &lt; bodyCount; i++)
            {
                var bi = _bodies[i];
                e += <span class="num">0.5</span> * bi.mass * (bi.vx * bi.vx + bi.vy * bi.vy + bi.vz * bi.vz);
                <span class="kwa">for</span> (<span class="kwb">int</span> j = i + <span class="num">1</span>; j &lt; bodyCount; j++)
                {
                    var bj = _bodies[j];
                    <span class="kwb">double</span> dx = bi.x - bj.x, dy = bi.y - bj.y, dz = bi.z - bj.z;
                    e -= (bi.mass * bj.mass) / Math.<span class="kwd">Sqrt</span>(dx * dx + dy * dy + dz * dz);
                }
            }
            <span class="kwa">return</span> e;
        }
    }
}
