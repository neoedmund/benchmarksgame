<span class="com">/* The Computer Language Benchmarks Game</span>
<span class="com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="com">   contributed by Stefan Krause</span>
<span class="com">   slightly modified by Chad Whipkey</span>
<span class="com">*/</span>

<span class="kwa">import</span> java.io.IOException;
<span class="kwa">import</span> java.io.PrintStream;

<span class="kwa">class</span> mandelbrot {

   <span class="kwa">public static</span> <span class="kwb">void</span> <span class="kwd">main</span>(String[] args) <span class="kwa">throws</span> Exception {
       <span class="kwa">new</span> <span class="kwd">Mandelbrot</span>(Integer.<span class="kwd">parseInt</span>(args[<span class="num">0</span>])).<span class="kwd">compute</span>();
   }

   <span class="kwa">public static class</span> Mandelbrot {
       <span class="kwa">private static final</span> <span class="kwb">int</span> BUFFER_SIZE = <span class="num">8192</span>;

       <span class="kwa">public</span> <span class="kwd">Mandelbrot</span>(<span class="kwb">int</span> size) {
         <span class="kwa">this</span>.size = size;
         fac = <span class="num">2.0</span> / size;
         out = System.out;
         shift = size % <span class="num">8</span> == <span class="num">0</span> ? <span class="num">0</span> : (<span class="num">8</span>- size % <span class="num">8</span>);
      }
      <span class="kwa">final</span> <span class="kwb">int</span> size;
      <span class="kwa">final</span> PrintStream out;
      <span class="kwa">final</span> <span class="kwb">byte</span> [] buf = <span class="kwa">new</span> <span class="kwb">byte</span>[BUFFER_SIZE];
      <span class="kwb">int</span> bufLen = <span class="num">0</span>;
      <span class="kwa">final</span> <span class="kwb">double</span> fac;
      <span class="kwa">final</span> <span class="kwb">int</span> shift;

      <span class="kwa">public</span> <span class="kwb">void</span> <span class="kwd">compute</span>() <span class="kwa">throws</span> IOException
      {
         out.<span class="kwd">format</span>(<span class="str">&quot;P4</span><span class="esc">\n</span><span class="str">%d %d</span><span class="esc">\n</span><span class="str">&quot;</span>,size,size);
         <span class="kwa">for</span> (<span class="kwb">int</span> y = <span class="num">0</span>; y&lt;size; y++)
            <span class="kwd">computeRow</span>(y);
         out.<span class="kwd">write</span>( buf, <span class="num">0</span>, bufLen);
         out.<span class="kwd">close</span>();
      }

      <span class="kwa">private</span> <span class="kwb">void</span> <span class="kwd">computeRow</span>(<span class="kwb">int</span> y) <span class="kwa">throws</span> IOException
      {
         <span class="kwb">int</span> bits = <span class="num">0</span>;

         <span class="kwa">final</span> <span class="kwb">double</span> Ci = (y*fac - <span class="num">1.0</span>);
          <span class="kwa">final</span> <span class="kwb">byte</span>[] bufLocal = buf;
          <span class="kwa">for</span> (<span class="kwb">int</span> x = <span class="num">0</span>; x&lt;size;x++) {
            <span class="kwb">double</span> Zr = <span class="num">0.0</span>;
            <span class="kwb">double</span> Zi = <span class="num">0.0</span>;
            <span class="kwb">double</span> Cr = (x*fac - <span class="num">1.5</span>);
            <span class="kwb">int</span> i = <span class="num">50</span>;
            <span class="kwb">double</span> ZrN = <span class="num">0</span>;
            <span class="kwb">double</span> ZiN = <span class="num">0</span>;
            <span class="kwa">do</span> {
               Zi = <span class="num">2.0</span> * Zr * Zi + Ci;
               Zr = ZrN - ZiN + Cr;
               ZiN = Zi * Zi;
               ZrN = Zr * Zr;
            } <span class="kwa">while</span> (!(ZiN + ZrN &gt; <span class="num">4.0</span>) &amp;&amp; --i &gt; <span class="num">0</span>);

            bits = bits &lt;&lt; <span class="num">1</span>;
            <span class="kwa">if</span> (i == <span class="num">0</span>) bits++;

            <span class="kwa">if</span> (x%<span class="num">8</span> == <span class="num">7</span>) {
                bufLocal[bufLen++] = (<span class="kwb">byte</span>) bits;
                <span class="kwa">if</span> ( bufLen == BUFFER_SIZE) {
                    out.<span class="kwd">write</span>(bufLocal, <span class="num">0</span>, BUFFER_SIZE);
                    bufLen = <span class="num">0</span>;
                }
               bits = <span class="num">0</span>;
            }
         }
         <span class="kwa">if</span> (shift!=<span class="num">0</span>) {
            bits = bits &lt;&lt; shift;
            bufLocal[bufLen++] = (<span class="kwb">byte</span>) bits;
            <span class="kwa">if</span> ( bufLen == BUFFER_SIZE) {
                out.<span class="kwd">write</span>(bufLocal, <span class="num">0</span>, BUFFER_SIZE);
                bufLen = <span class="num">0</span>;
            }
         }
      }
   }
}
