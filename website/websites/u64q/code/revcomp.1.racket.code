#lang racket/base

<span class="slc">;; The Computer Language Benchmarks Game</span>
<span class="slc">;; http://benchmarksgame.alioth.debian.org/</span>

<span class="slc">;;; contributed by Matthew Flatt</span>

(<span class="kwa">require</span> racket/cmdline)

(<span class="kwa">define</span> translation (<span class="kwa">make-vector</span> <span class="num">128</span>))

(<span class="kwa">for</span> ([from-to '([a t]
                 [c g]
                 [g c]
                 [t a]
                 [u a]
                 [m k]
                 [r y]
                 [w w]
                 [s s]
                 [y R]
                 [k M]
                 [v b]
                 [h d]
                 [d h]
                 [b v]
                 [n n])])
  (<span class="kwa">let</span> ([char (<span class="kwa">lambda</span> (<span class="kwa">sym</span>)
                (<span class="kwa">string-ref</span> (<span class="kwa">symbol-</span>&gt;string sym) <span class="num">0</span>))])
    (<span class="kwa">let</span> ([from (<span class="kwa">char</span> (<span class="kwa">car</span> from-to))]
          [to (<span class="kwa">char-</span>&gt;integer (<span class="kwa">char-upcase</span> (<span class="kwa">char</span> (<span class="kwa">cadr</span> from-to))))])
      (<span class="kwa">vector-set</span>! translation (<span class="kwa">char-</span>&gt;integer from) to)
      (<span class="kwa">vector-set</span>! translation (<span class="kwa">char-</span>&gt;integer (<span class="kwa">char-upcase</span> from)) to))))

(<span class="kwa">define</span> (<span class="kwa">output</span> lines)
  (<span class="kwa">let</span>* ([str (<span class="kwa">apply</span> bytes-append lines)]
         [o (<span class="kwa">current-output-port</span>)]
         [len (<span class="kwa">bytes-length</span> str)])
    (<span class="kwa">for</span> ([offset (<span class="kwa">in-range</span> <span class="num">0</span> len <span class="num">60</span>)])
      (<span class="kwa">write-bytes</span> str o offset (<span class="kwa">min</span> len (+ offset <span class="num">60</span>)))
      (<span class="kwa">newline</span> o))))

(<span class="kwa">let</span> ([in (<span class="kwa">current-input-port</span>)])
  (<span class="kwa">let</span> loop ([accum null])
    (<span class="kwa">let</span> ([l (<span class="kwa">read-bytes-line</span> in)])
      (<span class="kwa">if</span> (<span class="kwa">eof-object</span>? l)
          (<span class="kwa">output</span> accum)
          (<span class="kwa">cond</span>
           [(<span class="kwa">regexp-match</span>? #rx#<span class="str">&quot;^&gt;&quot;</span> l)
            (<span class="kwa">output</span> accum)
            (<span class="kwa">printf</span> <span class="str">&quot;~a</span><span class="esc">\n</span><span class="str">&quot;</span> l)
            (<span class="kwa">loop</span> null)]
           [else
            (<span class="kwa">let</span>* ([len (<span class="kwa">bytes-length</span> l)]
                   [dest (<span class="kwa">make-bytes</span> len)])
              (<span class="kwa">for</span> ([i (<span class="kwa">in-range</span> len)])
                (<span class="kwa">bytes-set</span>! dest
                            (<span class="kwa">-</span> (<span class="kwa">-</span> len i) <span class="num">1</span>)
                            (<span class="kwa">vector-ref</span> translation (<span class="kwa">bytes-ref</span> l i))))
              (<span class="kwa">loop</span> (<span class="kwa">cons</span> dest accum)))])))))
