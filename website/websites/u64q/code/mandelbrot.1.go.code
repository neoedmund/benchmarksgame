<span class="slc">// The Computer Language Benchmarks Game</span>
<span class="slc">// http://benchmarksgame.alioth.debian.org/</span>
<span class="slc">//</span>
<span class="slc">// Contributed by Kristian Meyer</span>
<span class="slc">// Translated Jeremy Zerfas's C gcc #9 program to use goroutines instead of openmp.</span>

<span class="kwa">package</span> main

<span class="kwa">import</span> (
   <span class="str">&quot;flag&quot;</span>
   <span class="str">&quot;fmt&quot;</span>
   <span class="str">&quot;log&quot;</span>
   <span class="str">&quot;os&quot;</span>
   <span class="str">&quot;runtime&quot;</span>
   <span class="str">&quot;strconv&quot;</span>
   <span class="str">&quot;sync&quot;</span>
)

<span class="slc">// This is the square of the limit that pixels will need to exceed in order to</span>
<span class="slc">// escape from the Mandelbrot set.</span>
<span class="kwa">const</span> LIMIT_SQUARED = <span class="num">4.0</span>

<span class="slc">// This controls the maximum amount of iterations that are done for each pixel.</span>
<span class="kwa">const</span> MAXIMUM_ITERATIONS = <span class="num">50</span>

<span class="slc">// targeting a q6600 system, 1 cpu worker per core.</span>
<span class="kwa">const</span> POOL = <span class="num">4</span>

<span class="kwa">var</span> image_Width_And_Height <span class="kwb">int</span>
<span class="kwa">var</span> initial_r []<span class="kwb">float64</span>
<span class="kwa">var</span> initial_i []<span class="kwb">float64</span>
<span class="kwa">var</span> pixels []<span class="kwb">byte</span>

<span class="kwa">func</span> <span class="kwd">calc</span>(wg *sync.WaitGroup, band <span class="kwb">int</span>) {
   <span class="kwa">for</span> y := band; y &lt; image_Width_And_Height; y += POOL {

      prefetched_Initial_i := initial_i[y]
      <span class="kwa">for</span> x_Major := <span class="num">0</span>; x_Major &lt; image_Width_And_Height; x_Major += <span class="num">8</span> {

         <span class="slc">// pixel_Group_r and pixel_Group_i will store real and imaginary</span>
         <span class="slc">// values for each pixel in the current pixel group as we perform</span>
         <span class="slc">// iterations. Set their initial values here.</span>
         <span class="kwa">var</span> pixel_Group_r [<span class="num">8</span>]<span class="kwb">float64</span>
         <span class="kwa">var</span> pixel_Group_i [<span class="num">8</span>]<span class="kwb">float64</span>
         <span class="kwa">for</span> x_Minor := <span class="num">0</span>; x_Minor &lt; <span class="num">8</span>; x_Minor++ {
            pixel_Group_r[x_Minor] = initial_r[x_Major+x_Minor]
            pixel_Group_i[x_Minor] = prefetched_Initial_i
         }

         <span class="slc">// Assume all pixels are in the Mandelbrot set initially.</span>
         <span class="kwa">var</span> eight_Pixels <span class="kwb">byte</span> = <span class="num">0xff</span>

         iteration := MAXIMUM_ITERATIONS
         <span class="kwa">for</span> {
            <span class="kwa">var</span> current_Pixel_Bitmask <span class="kwb">byte</span> = <span class="num">0x80</span>
            <span class="kwa">for</span> x_Minor := <span class="num">0</span>; x_Minor &lt; <span class="num">8</span>; x_Minor++ {
               r := pixel_Group_r[x_Minor]
               i := pixel_Group_i[x_Minor]

               pixel_Group_r[x_Minor] = r*r - i*i +
                  initial_r[x_Major+x_Minor]
               pixel_Group_i[x_Minor] = <span class="num">2.0</span>*r*i + prefetched_Initial_i

               <span class="slc">// Clear the bit for the pixel if it escapes from the</span>
               <span class="slc">// Mandelbrot set.</span>
               <span class="kwa">if</span> r*r+i*i &gt; LIMIT_SQUARED {
                  eight_Pixels &amp;= ^current_Pixel_Bitmask
               }

               current_Pixel_Bitmask &gt;&gt;= <span class="num">1</span>
            }
            iteration--
            <span class="kwa">if</span> eight_Pixels == <span class="num">0</span> || iteration == <span class="num">0</span> {
               <span class="kwa">break</span>
            }
         }

         pixels[y*image_Width_And_Height/<span class="num">8</span>+x_Major/<span class="num">8</span>] = eight_Pixels
      }
   }
   wg.<span class="kwd">Done</span>()
}

<span class="kwa">func</span> <span class="kwd">main</span>() {
   runtime.<span class="kwd">GOMAXPROCS</span>(POOL)
   <span class="kwa">var</span> size <span class="kwb">int</span>
   flag.<span class="kwd">Parse</span>()
   <span class="kwa">if</span> flag.<span class="kwd">NArg</span>() &gt; <span class="num">0</span> {
      <span class="kwa">var</span> err error
      size, err = strconv.<span class="kwd">Atoi</span>(flag.<span class="kwd">Arg</span>(<span class="num">0</span>))
      <span class="kwa">if</span> err != <span class="kwb">nil</span> {
         log.<span class="kwd">Fatal</span>(err)
      }
   }

   <span class="slc">// Ensure image_Width_And_Height are multiples of 8.</span>
   image_Width_And_Height = (size + <span class="num">7</span>) / <span class="num">8</span> * <span class="num">8</span>
   <span class="slc">// The image will be black and white with one bit for each pixel. Bits with</span>
   <span class="slc">// a value of zero are white pixels which are the ones that &quot;escape&quot; from</span>
   <span class="slc">// the Mandelbrot set. We'll be working on one line at a time and each line</span>
   <span class="slc">// will be made up of pixel groups that are eight pixels in size so each</span>
   <span class="slc">// pixel group will be one byte. This allows for some more optimizations to</span>
   <span class="slc">// be done.</span>
   pixels = <span class="kwb">make</span>([]<span class="kwb">byte</span>, image_Width_And_Height*image_Width_And_Height/<span class="num">8</span>)

   <span class="slc">// Precompute the initial real and imaginary values for each x and y</span>
   <span class="slc">// coordinate in the image.</span>
   initial_r = <span class="kwb">make</span>([]<span class="kwb">float64</span>, image_Width_And_Height)
   initial_i = <span class="kwb">make</span>([]<span class="kwb">float64</span>, image_Width_And_Height)

   <span class="slc">// todo: multi-thread this part too</span>
   <span class="kwa">for</span> xy := <span class="num">0</span>; xy &lt; image_Width_And_Height; xy++ {
      initial_r[xy] = <span class="num">2.0</span>/<span class="kwb">float64</span>(image_Width_And_Height)*<span class="kwb">float64</span>(xy) - <span class="num">1.5</span>
      initial_i[xy] = <span class="num">2.0</span>/<span class="kwb">float64</span>(image_Width_And_Height)*<span class="kwb">float64</span>(xy) - <span class="num">1.0</span>
   }

   <span class="kwa">var</span> wg sync.WaitGroup
   <span class="kwa">for</span> i := <span class="num">0</span>; i &lt; POOL; i++ {
      wg.<span class="kwd">Add</span>(<span class="num">1</span>)
      <span class="kwa">go</span> <span class="kwd">calc</span>(&amp;wg, i)
   }
   wg.<span class="kwd">Wait</span>()

   <span class="slc">// Output the image to stdout.</span>
   fmt.<span class="kwd">Printf</span>(<span class="str">&quot;P4</span><span class="esc">\n</span><span class="str"></span><span class="ipl">%d %d</span><span class="str"></span><span class="esc">\n</span><span class="str">&quot;</span>, image_Width_And_Height, image_Width_And_Height)
   os.Stdout.<span class="kwd">Write</span>(pixels)
}
