<span class="slc">// The Computer Language Benchmarks Game</span>
<span class="slc">// http://benchmarksgame.alioth.debian.org/</span>
<span class="slc">//</span>
<span class="slc">// Based on C version by Ledrug and F# version by Don Syme</span>
<span class="slc">// Contributed by Simon Dickson</span>

<span class="kwa">open</span> <span class="kwd">System</span>
<span class="kwa">open</span> <span class="kwd">System</span>.<span class="kwd">Threading</span>

<span class="kwa">let</span> nthread = <span class="kwd">Environment</span>.<span class="kwd">ProcessorCount</span>

<span class="kwa">let inline</span> <span class="kwd">A</span> i j = <span class="num">1</span>. / <span class="kwb">float</span>((i + j) * (i + j + <span class="num">1</span>) / <span class="num">2</span> + i + <span class="num">1</span>)

<span class="kwa">let inline</span> dot (v : <span class="kwb">float</span> array) (u : <span class="kwb">float</span> array) n =
   <span class="kwa">let mutable</span> sum = <span class="num">0</span>.
   <span class="kwa">for</span> i = <span class="num">0</span> <span class="kwa">to</span> n - <span class="num">1</span> <span class="kwa">do</span>
      sum &lt;- sum + v.[i] * u.[i]
   sum

<span class="kwa">let inline</span> multiplyAv (v : double[]) (<span class="kwd">Av</span> : double[]) r1 r2 =
    <span class="kwa">for</span> i = r1 <span class="kwa">to</span> r2 - <span class="num">1</span> <span class="kwa">do</span> 
        <span class="kwa">let mutable</span> sum = <span class="num">0</span>.
        <span class="kwa">for</span> j = <span class="num">0</span> <span class="kwa">to</span> v.<span class="kwd">Length</span> - <span class="num">1</span> <span class="kwa">do</span> 
            sum &lt;- sum + <span class="kwd">A</span> i j * v.[j]
        <span class="kwd">Av</span>.[i] &lt;- sum

<span class="kwa">let inline</span> multiplyAtv (v : double[]) (atv : double[]) r1 r2 =
    <span class="kwa">for</span> i = r1 <span class="kwa">to</span> r2 - <span class="num">1</span> <span class="kwa">do</span>
        <span class="kwa">let mutable</span> sum = <span class="num">0</span>.
        <span class="kwa">for</span> j = <span class="num">0</span> <span class="kwa">to</span> v.<span class="kwd">Length</span> - <span class="num">1</span> <span class="kwa">do</span> 
            sum &lt;- sum + <span class="kwd">A</span> j i * v.[j]
        atv.[i] &lt;- sum

<span class="kwa">let</span> current = <span class="kwb">ref</span> nthread
<span class="kwa">let mutable</span> handle = <span class="kwa">new</span> <span class="kwd">ManualResetEvent</span> (<span class="kwa">false</span>)
<span class="kwa">let inline</span> barrierHandle () =
    <span class="kwa">let</span> h = handle
    <span class="kwa">if</span> <span class="kwd">Interlocked</span>.<span class="kwd">Decrement</span> current &gt; <span class="num">0</span> <span class="kwa">then</span>
        h.<span class="kwd">WaitOne</span>() |&gt; ignore
    <span class="kwa">else</span>
        handle &lt;- <span class="kwa">new</span> <span class="kwd">ManualResetEvent</span> (<span class="kwa">false</span>)
        <span class="kwd">Interlocked</span>.<span class="kwd">Exchange</span> (current, nthread) |&gt; ignore
        h.<span class="kwd">Set</span> () |&gt; ignore
        h.<span class="kwd">Close</span> ()

<span class="kwa">let mutable</span> tmp = <span class="kwa">null</span>
<span class="kwa">let inline</span> multiplyAtAv (v : double[]) (out : double[]) r1 r2 =
    multiplyAv v tmp r1 r2
    barrierHandle ()
    multiplyAtv tmp out r1 r2
    barrierHandle ()

[&lt;<span class="kwd">EntryPoint</span>&gt;]
<span class="kwa">let</span> main args =
    <span class="kwa">let</span> n = <span class="kwa">if</span> args.<span class="kwd">Length</span> &gt;= <span class="num">1</span> <span class="kwa">then</span> <span class="kwb">int</span> args.[<span class="num">0</span>] <span class="kwa">else</span> <span class="num">5500</span>
    <span class="kwa">let</span> u = <span class="kwd">Array</span>.create n <span class="num">1.0</span>
    tmp &lt;- <span class="kwd">Array</span>.zeroCreate n 
    <span class="kwa">let</span> v = <span class="kwd">Array</span>.zeroCreate n
    <span class="kwa">let</span> chunk = n / nthread

    [<span class="kwa">for</span> i <span class="kwa">in</span> <span class="num">0</span> .. nthread - <span class="num">1</span> <span class="kwa">do</span>
        <span class="kwa">let</span> r1 = i * chunk
        <span class="kwa">let</span> r2 = <span class="kwa">if</span> (i &lt; (nthread - <span class="num">1</span>)) <span class="kwa">then</span> r1 + chunk <span class="kwa">else</span> n
        yield async {
            <span class="kwa">for</span> i = <span class="num">0</span> <span class="kwa">to</span> <span class="num">10</span> <span class="kwa">do</span>
                multiplyAtAv u v r1 r2
                multiplyAtAv v u r1 r2
        }]
    |&gt; <span class="kwd">Async</span>.<span class="kwd">Parallel</span>
    |&gt; <span class="kwd">Async</span>.<span class="kwd">Ignore</span>
    |&gt; <span class="kwd">Async</span>.<span class="kwd">RunSynchronously</span>

    <span class="kwa">let</span> result = <span class="kwd">Math</span>.<span class="kwd">Sqrt</span>(dot u v n / dot v v n)

    <span class="kwd">Console</span>.<span class="kwd">WriteLine</span>(<span class="str">&quot;{0:f9}&quot;</span>, result);
    <span class="num">0</span>
