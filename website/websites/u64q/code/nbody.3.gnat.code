<span class="slc">-- The Computer Language Benchmarks Game</span>
<span class="slc">-- http://benchmarksgame.alioth.debian.org</span>
<span class="slc">--</span>
<span class="slc">-- Contributed by Pascal Obry on 2005/03/21</span>
<span class="slc">-- Modified by Brian Drummond on 2011/03/24</span>

<span class="kwa">with</span> Ada.Command_Line; <span class="kwa">use</span> Ada.Command_Line;
<span class="kwa">with</span> Ada.Text_IO;      <span class="kwa">use</span> Ada.Text_IO;
<span class="kwa">with</span> Nbody_Pck;        <span class="kwa">use</span> Nbody_Pck;

<span class="kwa">procedure</span> Nbody <span class="kwa">is</span>

   <span class="kwa">package</span> RIO <span class="kwa">is new</span> Float_Io (Real);

   <span class="kwa">procedure</span> Put
     (Item : Real; Fore : Field := <span class="num">0</span>; Aft : Field := <span class="num">9</span>;
      Exp  : Field := <span class="num">0</span>) <span class="kwa">renames</span> RIO.Put;

   N : <span class="kwa">constant</span> <span class="kwb">Integer</span> := <span class="kwb">Integer</span><span class="kwd">'Value</span> (Argument (<span class="num">1</span>));

   Px, Py, Pz : Real := <span class="num">0.0</span>;

<span class="kwa">begin</span>
   <span class="kwa">for</span> I <span class="kwa">in</span> Body_Name<span class="kwd">'Range</span> <span class="kwa">loop</span>
      Add_Momentum (I, Px, Py, Pz);
   <span class="kwa">end loop</span>;

   Offset_Momentum (Sun, Px, Py, Pz);

   Put (Energy);
   New_Line;

   <span class="kwa">for</span> K <span class="kwa">in</span> <span class="num">1</span> .. N <span class="kwa">loop</span>
      Advance(<span class="num">0.01</span>);
   <span class="kwa">end loop</span>;

   Put (Energy);
   New_Line;
<span class="kwa">end</span> Nbody;

<span class="slc">-- The Great Computer Language Shootout</span>
<span class="slc">-- http://shootout.alioth.debian.org</span>
<span class="slc">--</span>
<span class="slc">-- Contributed by Pascal Obry on 2005/03/21</span>
<span class="slc">-- Modified by Brian Drummond on 2011/03/24</span>

<span class="kwa">with</span> Ada.Numerics; <span class="kwa">use</span> Ada.Numerics;
<span class="kwa">with</span> Ada.Numerics.Generic_Elementary_Functions;

<span class="kwa">package</span> Nbody_Pck <span class="kwa">is</span>

   <span class="kwa">type</span> Real <span class="kwa">is Digits</span> <span class="num">15</span>;

   <span class="kwa">package</span> Math <span class="kwa">is new</span> Ada.Numerics.Generic_Elementary_Functions (Real);

   Solar_Mass    : <span class="kwa">constant</span> Real := <span class="num">4.0</span> * Pi * Pi;
   Days_Per_Year : <span class="kwa">constant</span> Real := <span class="num">365.24</span>;

   <span class="kwa">type</span> Body_Name <span class="kwa">is</span> (Sun, Jupiter, Saturn, Uranus, Neptune);
   <span class="kwa">type</span> Axes      <span class="kwa">is</span> (X, Y, Z);

   <span class="kwa">procedure</span> Offset_Momentum
     (Planet     : <span class="kwa">in</span> Body_Name;
      Px, Py, Pz : <span class="kwa">in</span> Real);

   <span class="kwa">procedure</span> Add_Momentum
     (Planet     : <span class="kwa">in</span> Body_Name;
      Px, Py, Pz : <span class="kwa">in out</span> Real);

   <span class="kwa">function</span> Energy <span class="kwa">return</span> Real;

   <span class="kwa">procedure</span> Advance(Dt : <span class="kwa">in</span> Real);

<span class="kwa">private</span>

   Position : <span class="kwa">array</span> (Body_Name,Axes) <span class="kwa">of</span> Real :=
              (Jupiter =&gt; (X    =&gt; <span class="num">4.84143144246472090e+00</span>,
                           Y    =&gt; -<span class="num">1.16032004402742839e+00</span>,
                           Z    =&gt; -<span class="num">1.03622044471123109e-01</span>),
               Saturn  =&gt; (X    =&gt; <span class="num">8.34336671824457987e+00</span>,
                           Y    =&gt; <span class="num">4.12479856412430479e+00</span>,
                           Z    =&gt; -<span class="num">4.03523417114321381e-01</span>),
               Uranus  =&gt; (X    =&gt; <span class="num">1.28943695621391310e+01</span>,
                           y    =&gt; -<span class="num">1.51111514016986312e+01</span>,
                           Z    =&gt; -<span class="num">2.23307578892655734e-01</span>),
               Neptune =&gt; (X    =&gt; <span class="num">1.53796971148509165e+01</span>,
                           Y    =&gt; -<span class="num">2.59193146099879641e+01</span>,
                           Z    =&gt; <span class="num">1.79258772950371181e-01</span>),
               Sun     =&gt; (X    =&gt; <span class="num">0.0</span>,
                           Y    =&gt; <span class="num">0.0</span>,
                           Z    =&gt; <span class="num">0.0</span>));

   Velocity : <span class="kwa">array</span> (Body_Name,Axes) <span class="kwa">of</span> Real :=
              (Jupiter =&gt; (X    =&gt; <span class="num">1.66007664274403694e-03</span> * Days_Per_Year,
                           Y    =&gt; <span class="num">7.69901118419740425e-03</span> * Days_Per_Year,
                           Z    =&gt; -<span class="num">6.90460016972063023e-05</span> * Days_Per_Year),
               Saturn  =&gt; (X    =&gt; -<span class="num">2.76742510726862411e-03</span> * Days_Per_Year,
                           Y    =&gt; <span class="num">4.99852801234917238e-03</span> * Days_Per_Year,
                           Z    =&gt; <span class="num">2.30417297573763929e-05</span> * Days_Per_Year),
               Uranus  =&gt; (X    =&gt; <span class="num">2.96460137564761618e-03</span> * Days_Per_Year,
                           Y    =&gt; <span class="num">2.37847173959480950e-03</span> * Days_Per_Year,
                           Z    =&gt; -<span class="num">2.96589568540237556e-05</span> * Days_Per_Year),
               Neptune =&gt; (X    =&gt; <span class="num">2.68067772490389322e-03</span> * Days_Per_Year,
                           Y    =&gt; <span class="num">1.62824170038242295e-03</span> * Days_Per_Year,
                           Z    =&gt; -<span class="num">9.51592254519715870e-05</span> * Days_Per_Year),
               Sun     =&gt; (X    =&gt; <span class="num">0.0</span>,
                           Y    =&gt; <span class="num">0.0</span>,
                           Z    =&gt; <span class="num">0.0</span>));

   Mass: <span class="kwa">constant array</span> (Body_Name) <span class="kwa">of</span> Real :=
              (Jupiter =&gt; <span class="num">9.54791938424326609e-04</span> * Solar_Mass,
               Saturn  =&gt; <span class="num">2.85885980666130812e-04</span> * Solar_Mass,
               Uranus  =&gt; <span class="num">4.36624404335156298e-05</span> * Solar_Mass,
               Neptune =&gt; <span class="num">5.15138902046611451e-05</span> * Solar_Mass,
               Sun     =&gt; Solar_Mass);

<span class="kwa">end</span> Nbody_Pck;

<span class="slc">-- The Great Computer Language Shootout</span>
<span class="slc">-- http://shootout.alioth.debian.org</span>
<span class="slc">--</span>
<span class="slc">-- Contributed by Pascal Obry on 2005/03/21</span>
<span class="slc">-- Modified by Brian Drummond on 2011/03/24</span>

<span class="kwa">package body</span> Nbody_Pck <span class="kwa">is</span>

   <span class="kwa">procedure</span> Offset_Momentum
     (Planet     : <span class="kwa">in</span> Body_Name;
      Px, Py, Pz : <span class="kwa">in</span> Real) <span class="kwa">is</span>
   <span class="kwa">begin</span>
      Velocity (Planet, X) := -Px / Solar_Mass;
      Velocity (Planet, Y) := -Py / Solar_Mass;
      Velocity (Planet, Z) := -Pz / Solar_Mass;
   <span class="kwa">end</span> Offset_Momentum;

   <span class="kwa">procedure</span> Add_Momentum
     (Planet     : <span class="kwa">in</span> Body_Name;
      Px, Py, Pz : <span class="kwa">in out</span> Real) <span class="kwa">is</span>
   <span class="kwa">begin</span>
      Px := Px + Velocity (Planet, X) * Mass (Planet);
      Py := Py + Velocity (Planet, Y) * Mass (Planet);
      Pz := Pz + Velocity (Planet, Z) * Mass (Planet);
   <span class="kwa">end</span> Add_Momentum;

   <span class="kwa">function</span> Energy <span class="kwa">return</span> Real <span class="kwa">is</span>
      Dx, Dy, Dz, Distance : Real;
      E                    : Real := <span class="num">0.0</span>;
   <span class="kwa">begin</span>
      <span class="kwa">for</span> I <span class="kwa">in</span> Body_Name <span class="kwa">loop</span>
        E := E + <span class="num">0.5</span> * Mass (I)
              * (Velocity (I, X) * Velocity (I, X)
               + Velocity (I, Y) * Velocity (I, Y)
               + Velocity (I, Z) * Velocity (I, Z));

        <span class="kwa">if</span> I /= Body_Name<span class="kwd">'Last</span> <span class="kwa">then</span>
           <span class="kwa">for</span> J <span class="kwa">in</span> Body_Name<span class="kwd">'Succ</span> (I) .. Body_Name<span class="kwd">'Last</span> <span class="kwa">loop</span>
              Dx := Position (I, X) - Position (J, X);
              Dy := Position (I, Y) - Position (J, Y);
              Dz := Position (I, Z) - Position (J, Z);

              Distance := Math.Sqrt (Dx * Dx + Dy * Dy + Dz * Dz);
              E := E - (Mass (I) * Mass (J)) / Distance;
           <span class="kwa">end loop</span>;
        <span class="kwa">end if</span>;
      <span class="kwa">end loop</span>;
      <span class="kwa">return</span> E;
   <span class="kwa">end</span> Energy;

   <span class="kwa">procedure</span> Advance(Dt : <span class="kwa">in</span> Real) <span class="kwa">is</span>
      Dx, Dy, Dz, Dist_Sq, Mag : Real;
      Mass_I: Real;
      <span class="kwa">subtype</span> I_Name <span class="kwa">is</span> Body_Name <span class="kwa">range</span> Body_Name<span class="kwd">'first</span> .. Body_Name<span class="kwd">'pred</span>(Body_Name<span class="kwd">'last</span>);

   <span class="kwa">begin</span>
      <span class="kwa">for</span> I <span class="kwa">in</span> I_Name <span class="kwa">loop</span>
         Mass_I := Mass (I);   
         <span class="kwa">for</span> J <span class="kwa">in</span> Body_Name <span class="kwa">loop</span>
            <span class="kwa">if</span> J &gt; I <span class="kwa">then</span>
               Dx := Position (I, X) - Position (J, X);
               Dy := Position (I, Y) - Position (J, Y);
               Dz := Position (I, Z) - Position (J, Z);

               Dist_sq := Dx*Dx + Dy*Dy + Dz*Dz;
               Mag     := Dt / (Dist_sq * Math.Sqrt (Dist_sq));

               Velocity (I, X) := Velocity (I, X) - Dx * Mass (J) * Mag;
               Velocity (I, Y) := Velocity (I, Y) - Dy * Mass (J) * Mag;
               Velocity (I, Z) := Velocity (I, Z) - Dz * Mass (J) * Mag;

               Velocity (J, X) := Velocity (J, X) + Dx * Mass_I * Mag;
               Velocity (J, Y) := Velocity (J, Y) + Dy * Mass_I * Mag;
               Velocity (J, Z) := Velocity (J, Z) + Dz * Mass_I * Mag;

            <span class="kwa">end if</span>;
         <span class="kwa">end loop</span>;
      <span class="kwa">end loop</span>;

      <span class="kwa">for</span> I <span class="kwa">in</span> Body_Name <span class="kwa">loop</span>
         Position (I, X) := Position (I, X) + Dt * Velocity (I, X);
         Position (I, Y) := Position (I, Y) + Dt * Velocity (I, Y);
         Position (I, Z) := Position (I, Z) + Dt * Velocity (I, Z);
      <span class="kwa">end loop</span>;
   <span class="kwa">end</span> Advance;

<span class="kwa">end</span> Nbody_Pck;
