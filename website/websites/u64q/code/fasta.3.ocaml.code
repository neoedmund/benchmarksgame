<span class="com">(* The Computer Language Benchmarks Game</span>
<span class="com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * contributed by Troestler Christophe</span>
<span class="com"> * modified by Mauricio Fernandez</span>
<span class="com"> *)</span>

<span class="com">(* Random number generator *)</span>
<span class="kwa">let</span> im = <span class="num">139968</span>
<span class="kwa">and</span> ia = <span class="num">3877</span>
<span class="kwa">and</span> ic = <span class="num">29573</span>

<span class="kwa">let</span> last = <span class="kwb">ref</span> <span class="num">42</span> <span class="kwa">and</span> im_f = <span class="kwb">float</span> im
<span class="kwa">let</span> gen_random  max =
  <span class="kwa">let</span> n = (!last * ia + ic) <span class="kwa">mod</span> im <span class="kwa">in</span>
    last := n;
    max *. <span class="kwb">float</span> n /. im_f

<span class="kwa">module</span> <span class="kwd">Cumul_tbl</span> =
<span class="kwa">struct</span>
  <span class="kwa">type</span> t = { probs : <span class="kwb">float</span> array; chars : char array }

  <span class="kwa">let</span> make a = <span class="kwa">let</span> p = <span class="kwb">ref</span> <span class="num">0.0</span> <span class="kwa">in</span>
    {
      probs = <span class="kwc">Array</span>.map (<span class="kwa">fun</span> (_, p1) -&gt; p := !p +. p1; !p) a;
      chars = <span class="kwc">Array</span>.map fst a;
    }

  <span class="kwa">let</span> rand_char t =
    <span class="kwa">let</span> p = gen_random <span class="num">1.0</span> <span class="kwa">in</span>
    <span class="kwa">let</span> i = <span class="kwb">ref</span> <span class="num">0</span> <span class="kwa">and</span> ps = t.probs <span class="kwa">in</span>
      <span class="kwa">while</span> p &gt;= ps.(!i) <span class="kwa">do</span> incr i <span class="kwa">done</span>;
      t.chars.(!i)
<span class="kwa">end</span>

<span class="kwa">let</span> width = <span class="num">60</span>

<span class="kwa">let</span> make_random_fasta id desc table n =
  <span class="kwc">Printf</span>.printf <span class="str">&quot;&gt;</span><span class="ipl">%s %s</span><span class="str"></span><span class="esc">\n</span><span class="str">&quot;</span> id desc;
  <span class="kwa">let</span> table = <span class="kwc">Cumul_tbl</span>.make table <span class="kwa">in</span>
  <span class="kwa">let</span> line = <span class="kwc">String</span>.make (width+<span class="num">1</span>) '<span class="esc">\n</span>' <span class="kwa">in</span>
  <span class="kwa">for</span> i = <span class="num">1</span> <span class="kwa">to</span> n / width <span class="kwa">do</span>
    <span class="kwa">for</span> j = <span class="num">0</span> <span class="kwa">to</span> width - <span class="num">1</span> <span class="kwa">do</span> line.[j] &lt;- <span class="kwc">Cumul_tbl</span>.rand_char table <span class="kwa">done</span>;
    print_string line;
  <span class="kwa">done</span>;
  <span class="kwa">let</span> w = n <span class="kwa">mod</span> width <span class="kwa">in</span>
  <span class="kwa">if</span> w &gt; <span class="num">0</span> <span class="kwa">then</span> (
    <span class="kwa">for</span> j = <span class="num">1</span> <span class="kwa">to</span> w <span class="kwa">do</span> print_char(<span class="kwc">Cumul_tbl</span>.rand_char table); <span class="kwa">done</span>;
    print_char '<span class="esc">\n</span>'
  )

<span class="com">(* [write s i0 l w] outputs [w] chars of [s.[0 .. l]], followed by a</span>
<span class="com">   newline, starting with [s.[i0]] and considering the substring [s.[0</span>
<span class="com">   .. l]] as a &quot;circle&quot;.</span>
<span class="com">   One assumes [0 &lt;= i0 &lt;= l &lt;= String.length s].</span>
<span class="com">   &#64;return [i0] needed for subsequent writes.  *)</span>
<span class="kwa">let rec</span> write s i0 l w =
  <span class="kwa">let</span> len = l - i0 <span class="kwa">in</span>
  <span class="kwa">if</span> w &lt;= len <span class="kwa">then</span> (output stdout s i0 w; print_char '<span class="esc">\n</span>'; i0 + w)
  <span class="kwa">else</span> (output stdout s i0 len; write s <span class="num">0</span> l (w - len))

<span class="kwa">let</span> make_repeat_fasta id desc src n =
  <span class="kwc">Printf</span>.printf <span class="str">&quot;&gt;</span><span class="ipl">%s %s</span><span class="str"></span><span class="esc">\n</span><span class="str">&quot;</span> id desc;
  <span class="kwa">let</span> l = <span class="kwc">String</span>.length src
  <span class="kwa">and</span> i0 = <span class="kwb">ref</span> <span class="num">0</span> <span class="kwa">in</span>
  <span class="kwa">for</span> i = <span class="num">1</span> <span class="kwa">to</span> n / width <span class="kwa">do</span>
    i0 := write src !i0 l width;
  <span class="kwa">done</span>;
  <span class="kwa">let</span> w = n <span class="kwa">mod</span> width <span class="kwa">in</span>
  <span class="kwa">if</span> w &gt; <span class="num">0</span> <span class="kwa">then</span> ignore(write src !i0 l w)


<span class="kwa">let</span> alu = <span class="str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG\</span>
<span class="str">GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA\</span>
<span class="str">CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT\</span>
<span class="str">ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA\</span>
<span class="str">GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG\</span>
<span class="str">AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC\</span>
<span class="str">AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span>

<span class="kwa">let</span> iub = [| ('a', <span class="num">0.27</span>);  ('c', <span class="num">0.12</span>);  ('g', <span class="num">0.12</span>);  ('t', <span class="num">0.27</span>);
	     ('<span class="kwd">B</span>', <span class="num">0.02</span>);  ('<span class="kwd">D</span>', <span class="num">0.02</span>);  ('<span class="kwd">H</span>', <span class="num">0.02</span>);  ('<span class="kwd">K</span>', <span class="num">0.02</span>);
	     ('<span class="kwd">M</span>', <span class="num">0.02</span>);  ('<span class="kwd">N</span>', <span class="num">0.02</span>);  ('<span class="kwd">R</span>', <span class="num">0.02</span>);  ('<span class="kwd">S</span>', <span class="num">0.02</span>);
	     ('<span class="kwd">V</span>', <span class="num">0.02</span>);  ('<span class="kwd">W</span>', <span class="num">0.02</span>);  ('<span class="kwd">Y</span>', <span class="num">0.02</span>);  |]

<span class="kwa">let</span> homosapiens = [| ('a', <span class="num">0.3029549426680</span>);    ('c', <span class="num">0.1979883004921</span>);
		     ('g', <span class="num">0.1975473066391</span>);    ('t', <span class="num">0.3015094502008</span>);  |]

<span class="kwa">let</span> () =
  <span class="kwa">let</span> n = <span class="kwa">try</span> int_of_string(<span class="kwc">Array</span>.get <span class="kwc">Sys</span>.argv <span class="num">1</span>) <span class="kwa">with</span> _ -&gt; <span class="num">1000</span> <span class="kwa">in</span>
  make_repeat_fasta <span class="str">&quot;ONE&quot;</span> <span class="str">&quot;Homo sapiens alu&quot;</span> alu (n*<span class="num">2</span>);
  make_random_fasta <span class="str">&quot;TWO&quot;</span> <span class="str">&quot;IUB ambiguity codes&quot;</span> iub (n*<span class="num">3</span>);
  make_random_fasta <span class="str">&quot;THREE&quot;</span> <span class="str">&quot;Homo sapiens frequency&quot;</span> homosapiens (n*<span class="num">5</span>)
