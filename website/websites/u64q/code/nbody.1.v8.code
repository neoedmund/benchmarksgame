<span class="com">/* The Computer Language Benchmarks Game</span>
<span class="com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="com">   contributed by Isaac Gouy */</span>

<span class="kwa">var</span> PI = <span class="num">3.141592653589793</span>;
<span class="kwa">var</span> SOLAR_MASS = <span class="num">4</span> * PI * PI;
<span class="kwa">var</span> DAYS_PER_YEAR = <span class="num">365.24</span>;

<span class="kwa">function</span> <span class="kwd">Body</span>(x,y,z,vx,vy,vz,mass){
   <span class="kwa">this</span>.x = x;
   <span class="kwa">this</span>.y = y;
   <span class="kwa">this</span>.z = z;
   <span class="kwa">this</span>.vx = vx;
   <span class="kwa">this</span>.vy = vy;
   <span class="kwa">this</span>.vz = vz;
   <span class="kwa">this</span>.mass = mass;
}

Body.<span class="kwa">prototype</span>.offsetMomentum = <span class="kwa">function</span>(px,py,pz) {
   <span class="kwa">this</span>.vx = -px / SOLAR_MASS;
   <span class="kwa">this</span>.vy = -py / SOLAR_MASS;
   <span class="kwa">this</span>.vz = -pz / SOLAR_MASS;
   <span class="kwa">return this</span>;
}

<span class="kwa">function</span> <span class="kwd">Jupiter</span>(){
   <span class="kwa">return new</span> <span class="kwd">Body</span>(
      <span class="num">4.84143144246472090e+00</span>,
      -<span class="num">1.16032004402742839e+00</span>,
      -<span class="num">1.03622044471123109e-01</span>,
      <span class="num">1.66007664274403694e-03</span> * DAYS_PER_YEAR,
      <span class="num">7.69901118419740425e-03</span> * DAYS_PER_YEAR,
      -<span class="num">6.90460016972063023e-05</span> * DAYS_PER_YEAR,
      <span class="num">9.54791938424326609e-04</span> * SOLAR_MASS
   );
}

<span class="kwa">function</span> <span class="kwd">Saturn</span>(){
   <span class="kwa">return new</span> <span class="kwd">Body</span>(
      <span class="num">8.34336671824457987e+00</span>,
      <span class="num">4.12479856412430479e+00</span>,
      -<span class="num">4.03523417114321381e-01</span>,
      -<span class="num">2.76742510726862411e-03</span> * DAYS_PER_YEAR,
      <span class="num">4.99852801234917238e-03</span> * DAYS_PER_YEAR,
      <span class="num">2.30417297573763929e-05</span> * DAYS_PER_YEAR,
      <span class="num">2.85885980666130812e-04</span> * SOLAR_MASS
   );
}

<span class="kwa">function</span> <span class="kwd">Uranus</span>(){
   <span class="kwa">return new</span> <span class="kwd">Body</span>(
      <span class="num">1.28943695621391310e+01</span>,
      -<span class="num">1.51111514016986312e+01</span>,
      -<span class="num">2.23307578892655734e-01</span>,
      <span class="num">2.96460137564761618e-03</span> * DAYS_PER_YEAR,
      <span class="num">2.37847173959480950e-03</span> * DAYS_PER_YEAR,
      -<span class="num">2.96589568540237556e-05</span> * DAYS_PER_YEAR,
      <span class="num">4.36624404335156298e-05</span> * SOLAR_MASS
   );
}

<span class="kwa">function</span> <span class="kwd">Neptune</span>(){
   <span class="kwa">return new</span> <span class="kwd">Body</span>(
      <span class="num">1.53796971148509165e+01</span>,
      -<span class="num">2.59193146099879641e+01</span>,
      <span class="num">1.79258772950371181e-01</span>,
      <span class="num">2.68067772490389322e-03</span> * DAYS_PER_YEAR,
      <span class="num">1.62824170038242295e-03</span> * DAYS_PER_YEAR,
      -<span class="num">9.51592254519715870e-05</span> * DAYS_PER_YEAR,
      <span class="num">5.15138902046611451e-05</span> * SOLAR_MASS
   );
}

<span class="kwa">function</span> <span class="kwd">Sun</span>(){
   <span class="kwa">return new</span> <span class="kwd">Body</span>(<span class="num">0.0</span>, <span class="num">0.0</span>, <span class="num">0.0</span>, <span class="num">0.0</span>, <span class="num">0.0</span>, <span class="num">0.0</span>, SOLAR_MASS);
}


<span class="kwa">function</span> <span class="kwd">NBodySystem</span>(bodies){
   <span class="kwa">this</span>.bodies = bodies;
   <span class="kwa">var</span> px = <span class="num">0.0</span>;
   <span class="kwa">var</span> py = <span class="num">0.0</span>;
   <span class="kwa">var</span> pz = <span class="num">0.0</span>;
   <span class="kwa">var</span> size = <span class="kwa">this</span>.bodies.length;
   <span class="kwa">for</span> (<span class="kwa">var</span> i=<span class="num">0</span>; i&lt;size; i++){
      <span class="kwa">var</span> b = <span class="kwa">this</span>.bodies[i];
      <span class="kwa">var</span> m = b.mass;
      px += b.vx * m;
      py += b.vy * m;
      pz += b.vz * m;
   }
   <span class="kwa">this</span>.bodies[<span class="num">0</span>].<span class="kwd">offsetMomentum</span>(px,py,pz);
}

NBodySystem.<span class="kwa">prototype</span>.advance = <span class="kwa">function</span>(dt){
   <span class="kwa">var</span> dx, dy, dz, distance, mag;
   <span class="kwa">var</span> size = <span class="kwa">this</span>.bodies.length;

   <span class="kwa">for</span> (<span class="kwa">var</span> i=<span class="num">0</span>; i&lt;size; i++) {
      <span class="kwa">var</span> bodyi = <span class="kwa">this</span>.bodies[i];
      <span class="kwa">for</span> (<span class="kwa">var</span> j=i+<span class="num">1</span>; j&lt;size; j++) {
         <span class="kwa">var</span> bodyj = <span class="kwa">this</span>.bodies[j];
         dx = bodyi.x - bodyj.x;
         dy = bodyi.y - bodyj.y;
         dz = bodyi.z - bodyj.z;

         distance = Math.<span class="kwd">sqrt</span>(dx*dx + dy*dy + dz*dz);
         mag = dt / (distance * distance * distance);

         bodyi.vx -= dx * bodyj.mass * mag;
         bodyi.vy -= dy * bodyj.mass * mag;
         bodyi.vz -= dz * bodyj.mass * mag;

         bodyj.vx += dx * bodyi.mass * mag;
         bodyj.vy += dy * bodyi.mass * mag;
         bodyj.vz += dz * bodyi.mass * mag;
      }
   }

   <span class="kwa">for</span> (<span class="kwa">var</span> i=<span class="num">0</span>; i&lt;size; i++) {
      <span class="kwa">var</span> body = <span class="kwa">this</span>.bodies[i];
      body.x += dt * body.vx;
      body.y += dt * body.vy;
      body.z += dt * body.vz;
   }
}

NBodySystem.<span class="kwa">prototype</span>.energy = <span class="kwa">function</span>(){
   <span class="kwa">var</span> dx, dy, dz, distance;
   <span class="kwa">var</span> e = <span class="num">0.0</span>;
   <span class="kwa">var</span> size = <span class="kwa">this</span>.bodies.length;

   <span class="kwa">for</span> (<span class="kwa">var</span> i=<span class="num">0</span>; i&lt;size; i++) {
      <span class="kwa">var</span> bodyi = <span class="kwa">this</span>.bodies[i];

      e += <span class="num">0.5</span> * bodyi.mass *
         ( bodyi.vx * bodyi.vx
         + bodyi.vy * bodyi.vy
         + bodyi.vz * bodyi.vz );

      <span class="kwa">for</span> (<span class="kwa">var</span> j=i+<span class="num">1</span>; j&lt;size; j++) {
         <span class="kwa">var</span> bodyj = <span class="kwa">this</span>.bodies[j];
         dx = bodyi.x - bodyj.x;
         dy = bodyi.y - bodyj.y;
         dz = bodyi.z - bodyj.z;

         distance = Math.<span class="kwd">sqrt</span>(dx*dx + dy*dy + dz*dz);
         e -= (bodyi.mass * bodyj.mass) / distance;
      }
   }
   <span class="kwa">return</span> e;
}


<span class="kwa">var</span> n = arguments[<span class="num">0</span>];
<span class="kwa">var</span> bodies = <span class="kwa">new</span> <span class="kwd">NBodySystem</span>( <span class="kwd">Array</span>( 
   <span class="kwd">Sun</span>(),<span class="kwd">Jupiter</span>(),<span class="kwd">Saturn</span>(),<span class="kwd">Uranus</span>(),<span class="kwd">Neptune</span>() 
));

<span class="kwd">print</span>(bodies.<span class="kwd">energy</span>().<span class="kwd">toFixed</span>(<span class="num">9</span>));
<span class="kwa">for</span> (<span class="kwa">var</span> i=<span class="num">0</span>; i&lt;n; i++){ bodies.<span class="kwd">advance</span>(<span class="num">0.01</span>); }
<span class="kwd">print</span>(bodies.<span class="kwd">energy</span>().<span class="kwd">toFixed</span>(<span class="num">9</span>));
