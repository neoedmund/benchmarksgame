<span class="com">{-  The Computer Language Benchmarks Game</span>
<span class="com"></span>
<span class="com">    http://benchmarksgame.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">    contributed by Miha Vučkovič</span>
<span class="com"></span>
<span class="com">-}</span>

<span class="kwd">import</span> System.Environment
<span class="kwd">import qualified</span> Data.Vector.Unboxed <span class="kwd">as</span> V
<span class="kwd">import qualified</span> Data.Vector.Unboxed.Mutable <span class="kwd">as</span> MV
<span class="kwd">import qualified</span> Data.Vector.Generic.Mutable <span class="kwd">as</span> GMV
<span class="kwd">import</span> Control.Monad (<span class="kwc">unless</span>, void, forM_)
<span class="kwd">import</span> Control.Monad.ST
<span class="kwd">import</span> Control.Parallel
<span class="kwd">import</span> Control.Parallel.Strategies
<span class="kwd">import</span> Data.STRef

flopST v flopCount = <span class="kwd">do</span>
    h &lt;- MV.unsafeRead v <span class="num">0</span>
    <span class="kwd">if</span> h == <span class="num">1</span> <span class="kwd">then</span> <span class="kwc">return</span> flopCount
    <span class="kwd">else do</span>
        GMV.<span class="kwc">reverse</span> $ MV.unsafeSlice <span class="num">0</span> h v
        flopST v (flopCount + <span class="num">1</span>)

countFlops :: V.Vector <span class="kwb">Int</span> -&gt; <span class="kwb">Int</span>
countFlops v = runST $ <span class="kwd">do</span>
    mv &lt;- V.thaw v
    flopST mv <span class="num">0</span>

permut n = <span class="kwc">foldr</span> permConcat [V.fromList [<span class="num">1</span>..n]] [<span class="num">5</span>..n]

permConcat x lst = <span class="kwc">concat</span> [<span class="kwc">take</span> x $ <span class="kwc">iterate</span> (rotate x) l | l &lt;- lst]

perm :: <span class="kwb">Int</span> -&gt; V.Vector <span class="kwb">Int</span> -&gt; [V.Vector <span class="kwb">Int</span>]
perm x l = <span class="kwc">take</span> x $ <span class="kwc">iterate</span> (rotate x) l

rotate :: <span class="kwb">Int</span> -&gt; V.Vector <span class="kwb">Int</span> -&gt; V.Vector <span class="kwb">Int</span>
rotate <span class="num">1</span> xs = xs
rotate n v = runST $ <span class="kwd">do</span>
    mv &lt;- V.thaw v
    veryUnsafeV &lt;- V.unsafeThaw v
    h &lt;- MV.unsafeRead mv <span class="num">0</span>
    MV.unsafeCopy (MV.unsafeSlice <span class="num">0</span> (n-<span class="num">1</span>) mv) (MV.unsafeSlice <span class="num">1</span> (n-<span class="num">1</span>) veryUnsafeV)
    MV.unsafeWrite mv (n-<span class="num">1</span>) h
    V.unsafeFreeze mv

calculateMaxAndChecksum :: [<span class="kwb">Int</span>] -&gt; (<span class="kwb">Int</span>, <span class="kwb">Int</span>)
calculateMaxAndChecksum = go <span class="num">0 0</span>
    <span class="kwd">where</span> go !m !c [] = (m, c)
          go !m !c [x] = (<span class="kwc">max</span> m x, c + x)
          go !m !c (x0:x1:xs) = go (max3 m x0 x1) (c + x0 - x1) xs
          max3 !a !b !c = <span class="kwc">max</span> c (<span class="kwc">max</span> a b)

niceParallelMap :: NFData b =&gt; <span class="kwb">Int</span> -&gt; (a -&gt; b) -&gt; [a] -&gt; [b]
niceParallelMap bufferSize f xs = runEval $ parBuffer bufferSize rdeepseq $ <span class="kwc">map</span> f xs

main :: <span class="kwb">IO</span> ()
main = <span class="kwd">do</span>
   n &lt;- <span class="kwc">fmap</span> (<span class="kwc">read</span> . <span class="kwc">head</span>) <span class="kwc">getArgs</span>
   <span class="kwd">let</span> permutations = permut n
       flopCounts = <span class="kwc">concat</span> $ niceParallelMap <span class="num">50</span>
            (<span class="kwc">map</span> countFlops . <span class="kwc">concatMap</span> (perm <span class="num">2</span>) . <span class="kwc">concatMap</span> (perm <span class="num">3</span>) . perm <span class="num">4</span>) permutations
       (mflops, checksum) = calculateMaxAndChecksum flopCounts
   <span class="kwc">putStrLn</span> $ <span class="kwc">show</span> checksum ++ <span class="str">&quot;</span><span class="esc">\n</span><span class="str">Pfannkuchen(&quot;</span> ++ <span class="kwc">show</span> n ++ <span class="str">&quot;) = &quot;</span> ++ <span class="kwc">show</span> mflops
