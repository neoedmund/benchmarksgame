<span class="slc"># The Computer Language Benchmarks Game</span>
<span class="slc"># http://benchmarksgame.alioth.debian.org/</span>
<span class="slc">#</span>
<span class="slc"># contributed by Olof Kraigher</span>
<span class="slc"># modified by Tupteq</span>
<span class="slc"># 2to3</span>

<span class="kwa">import</span> sys

width = <span class="num">5</span>
height = <span class="num">10</span>

rotate = <span class="kwb">dict</span>(E=<span class="str">'NE'</span>, NE=<span class="str">'NW'</span>, NW=<span class="str">'W'</span>, W=<span class="str">'SW'</span>, SW=<span class="str">'SE'</span>, SE=<span class="str">'E'</span>)
flip = <span class="kwb">dict</span>(E=<span class="str">'W'</span>, NE=<span class="str">'NW'</span>, NW=<span class="str">'NE'</span>, W=<span class="str">'E'</span>, SW=<span class="str">'SE'</span>, SE=<span class="str">'SW'</span>)
move = <span class="kwb">dict</span>(E=<span class="kwa">lambda</span> x, y: (x+<span class="num">1</span>, y),
            W=<span class="kwa">lambda</span> x, y: (x-<span class="num">1</span>, y),
            NE=<span class="kwa">lambda</span> x, y: (x + (y%<span class="num">2</span>), y-<span class="num">1</span>),
            NW=<span class="kwa">lambda</span> x, y: (x + (y%<span class="num">2</span>) - <span class="num">1</span>, y-<span class="num">1</span>),
            SE=<span class="kwa">lambda</span> x, y: (x + (y%<span class="num">2</span>), y+<span class="num">1</span>),
            SW=<span class="kwa">lambda</span> x, y: (x + (y%<span class="num">2</span>) - <span class="num">1</span>, y+<span class="num">1</span>))

solutions = []
masks = <span class="num">10</span> * [<span class="num">0</span>]

valid = <span class="kwa">lambda</span> x, y: <span class="num">0</span> &lt;= x &lt; width <span class="kwa">and</span> <span class="num">0</span> &lt;= y &lt; height
zerocount = <span class="kwa">lambda</span> mask: <span class="kwb">sum</span>([(<span class="num">1</span>&lt;&lt;x) &amp; mask == <span class="num">0</span> <span class="kwa">for</span> x <span class="kwa">in</span> <span class="kwb">range</span>(<span class="num">50</span>)])


<span class="kwa">def</span> <span class="kwd">findFreeCell</span>(board):
    <span class="kwa">for</span> y <span class="kwa">in</span> <span class="kwb">range</span>(height):
        <span class="kwa">for</span> x <span class="kwa">in</span> <span class="kwb">range</span>(width):
            <span class="kwa">if</span> board &amp; (<span class="num">1</span> &lt;&lt; (x + width*y)) == <span class="num">0</span>:
                <span class="kwa">return</span> x, y


<span class="kwa">def</span> <span class="kwd">floodFill</span>(board, xxx_todo_changeme):
    (x, y) = xxx_todo_changeme
    <span class="kwa">if</span> <span class="kwd">valid</span>(x, y) <span class="kwa">and</span> board &amp; (<span class="num">1</span> &lt;&lt; (x + width*y)) == <span class="num">0</span>:
        board |= <span class="num">1</span> &lt;&lt; (x + width*y)

        <span class="kwa">for</span> f <span class="kwa">in</span> <span class="kwb">list</span>(move.<span class="kwd">values</span>()):
            board |= <span class="kwd">floodFill</span>(board, <span class="kwd">f</span>(x, y))

    <span class="kwa">return</span> board


<span class="kwa">def</span> <span class="kwd">noIslands</span>(mask):
    zeroes = <span class="kwd">zerocount</span>(mask)

    <span class="kwa">if</span> zeroes &lt; <span class="num">5</span>:
        <span class="kwa">return False</span>

    <span class="kwa">while</span> mask != <span class="num">0x3FFFFFFFFFFFF</span>:
        mask = <span class="kwd">floodFill</span>(mask, <span class="kwd">findFreeCell</span>(mask))
        new_zeroes = <span class="kwd">zerocount</span>(mask)

        <span class="kwa">if</span> zeroes - new_zeroes &lt; <span class="num">5</span>:
            <span class="kwa">return False</span>

        zeroes = new_zeroes

    <span class="kwa">return True</span>


<span class="kwa">def</span> <span class="kwd">getBitmask</span>(x, y, piece):
    mask = <span class="num">1</span> &lt;&lt; (x + width*y)

    <span class="kwa">for</span> cell <span class="kwa">in</span> piece:
        x, y = move[cell](x, y)
        <span class="kwa">if</span> <span class="kwd">valid</span>(x, y):
            mask = mask | (<span class="num">1</span> &lt;&lt; (x + width*y))
        <span class="kwa">else</span>:
            <span class="kwa">return False</span>, <span class="num">0</span>

    <span class="kwa">return True</span>, mask

<span class="kwa">def</span> <span class="kwd">allBitmasks</span>(piece, color):
    bitmasks = []
    <span class="kwa">for</span> orientations <span class="kwa">in</span> <span class="kwb">range</span>(<span class="num">2</span>):
        <span class="kwa">for</span> rotations <span class="kwa">in</span> <span class="kwb">range</span>(<span class="num">6</span> - <span class="num">3</span>*(color == <span class="num">4</span>)):
            <span class="kwa">for</span> y <span class="kwa">in</span> <span class="kwb">range</span>(height):
                <span class="kwa">for</span> x <span class="kwa">in</span> <span class="kwb">range</span>(width):
                    isValid, mask = <span class="kwd">getBitmask</span>(x, y, piece)
                    <span class="kwa">if</span> isValid <span class="kwa">and</span> <span class="kwd">noIslands</span>(mask):
                        bitmasks.<span class="kwd">append</span>(mask)

            piece = [rotate[cell] <span class="kwa">for</span> cell <span class="kwa">in</span> piece]
        piece = [flip[cell] <span class="kwa">for</span> cell <span class="kwa">in</span> piece]

    <span class="kwa">return</span> bitmasks


<span class="kwa">def</span> <span class="kwd">generateBitmasks</span>():
    <span class="kwa">global</span> masksAtCell

    pieces = [[<span class="str">&quot;E&quot;</span>, <span class="str">&quot;E&quot;</span>, <span class="str">&quot;E&quot;</span>, <span class="str">&quot;SE&quot;</span>], [<span class="str">&quot;SE&quot;</span>, <span class="str">&quot;SW&quot;</span>, <span class="str">&quot;W&quot;</span>, <span class="str">&quot;SW&quot;</span>],
        [<span class="str">&quot;W&quot;</span>, <span class="str">&quot;W&quot;</span>, <span class="str">&quot;SW&quot;</span>, <span class="str">&quot;SE&quot;</span>], [<span class="str">&quot;E&quot;</span>,  <span class="str">&quot;E&quot;</span>, <span class="str">&quot;SW&quot;</span>, <span class="str">&quot;SE&quot;</span>],
        [<span class="str">&quot;NW&quot;</span>, <span class="str">&quot;W&quot;</span>, <span class="str">&quot;NW&quot;</span>, <span class="str">&quot;SE&quot;</span>, <span class="str">&quot;SW&quot;</span>], [<span class="str">&quot;E&quot;</span>,  <span class="str">&quot;E&quot;</span>, <span class="str">&quot;NE&quot;</span>, <span class="str">&quot;W&quot;</span>],
        [<span class="str">&quot;NW&quot;</span>, <span class="str">&quot;NE&quot;</span>, <span class="str">&quot;NE&quot;</span>, <span class="str">&quot;W&quot;</span>], [<span class="str">&quot;NE&quot;</span>, <span class="str">&quot;SE&quot;</span>, <span class="str">&quot;E&quot;</span>, <span class="str">&quot;NE&quot;</span>],
        [<span class="str">&quot;SE&quot;</span>, <span class="str">&quot;SE&quot;</span>, <span class="str">&quot;E&quot;</span>, <span class="str">&quot;SE&quot;</span>], [<span class="str">&quot;E&quot;</span>, <span class="str">&quot;NW&quot;</span>, <span class="str">&quot;NW&quot;</span>, <span class="str">&quot;NW&quot;</span>]]

    masksAtCell = [[[] <span class="kwa">for</span> j <span class="kwa">in</span> <span class="kwb">range</span>(<span class="num">10</span>)] <span class="kwa">for</span> i <span class="kwa">in</span> <span class="kwb">range</span>(width*height)]

    color = <span class="num">0</span>
    <span class="kwa">for</span> piece <span class="kwa">in</span> pieces:
        masks = <span class="kwd">allBitmasks</span>(piece, color)
        masks.<span class="kwd">sort</span>()
        cellMask = <span class="num">1</span> &lt;&lt; (width*height - <span class="num">1</span>)
        cellCounter = width*height - <span class="num">1</span>
        j = <span class="kwb">len</span>(masks) - <span class="num">1</span>

        <span class="kwa">while</span> (j &gt;= <span class="num">0</span>):
            <span class="kwa">if</span> (masks[j] &amp; cellMask) == cellMask:
                masksAtCell[cellCounter][color].<span class="kwd">append</span>(masks[j])
                j = j-<span class="num">1</span>
            <span class="kwa">else</span>:
                cellMask = cellMask &gt;&gt; <span class="num">1</span>
                cellCounter -= <span class="num">1</span>
        color += <span class="num">1</span>


<span class="kwa">def</span> <span class="kwd">solveCell</span>(cell, board):
    <span class="kwa">if</span> to_go &lt;= <span class="num">0</span>:
        <span class="slc"># Got enough solutions</span>
        <span class="kwa">pass</span>
    <span class="kwa">elif</span> board == <span class="num">0x3FFFFFFFFFFFF</span>:
        <span class="slc"># Solved</span>
        <span class="kwd">addSolutions</span>()
    <span class="kwa">elif</span> board &amp; (<span class="num">1</span> &lt;&lt; cell) != <span class="num">0</span>:
        <span class="slc"># Cell full</span>
        <span class="kwd">solveCell</span>(cell-<span class="num">1</span>, board)
    <span class="kwa">elif</span> cell &lt; <span class="num">0</span>:
        <span class="slc"># Out of board</span>
        <span class="kwa">pass</span>
    <span class="kwa">else</span>:
        <span class="kwa">for</span> color <span class="kwa">in</span> <span class="kwb">range</span>(<span class="num">10</span>):
            <span class="kwa">if</span> masks[color] == <span class="num">0</span>:
                <span class="kwa">for</span> mask <span class="kwa">in</span> masksAtCell[cell][color]:
                    <span class="kwa">if</span> mask &amp; board == <span class="num">0</span>:
                        masks[color] = mask
                        <span class="kwd">solveCell</span>(cell-<span class="num">1</span>, board | mask)
                        masks[color] = <span class="num">0</span>


<span class="kwa">def</span> <span class="kwd">addSolutions</span>():
    <span class="kwa">global</span> to_go
    s = <span class="str">''</span>
    mask = <span class="num">1</span>
    <span class="kwa">for</span> y <span class="kwa">in</span> <span class="kwb">range</span>(height):
        <span class="kwa">for</span> x <span class="kwa">in</span> <span class="kwb">range</span>(width):
            <span class="kwa">for</span> color <span class="kwa">in</span> <span class="kwb">range</span>(<span class="num">10</span>):
                <span class="kwa">if</span> masks[color] &amp; mask != <span class="num">0</span>:
                    s += <span class="kwb">str</span>(color)
                    <span class="kwa">break</span>
                <span class="kwa">elif</span> color == <span class="num">9</span>:
                    s += <span class="str">'.'</span>
            mask &lt;&lt;= <span class="num">1</span>

    <span class="slc"># Inverse</span>
    ns = <span class="str">''</span>
    <span class="kwa">for</span> y <span class="kwa">in</span> <span class="kwb">range</span>(height):
        <span class="kwa">for</span> x <span class="kwa">in</span> <span class="kwb">range</span>(width):
            ns += s[width - x - <span class="num">1</span> + (width - y - <span class="num">1</span>) * width]

    <span class="slc"># Finally append</span>
    solutions.<span class="kwd">append</span>(s)
    solutions.<span class="kwd">append</span>(ns)
    to_go -= <span class="num">2</span>


<span class="kwa">def</span> <span class="kwd">printSolution</span>(solution):
    <span class="kwa">for</span> y <span class="kwa">in</span> <span class="kwb">range</span>(height):
        <span class="kwa">for</span> x <span class="kwa">in</span> <span class="kwb">range</span>(width):
            <span class="kwa">print</span>(solution[x + y*width], end=<span class="str">' '</span>)

        <span class="kwa">print</span>(<span class="str">&quot;&quot;</span>)
        <span class="kwa">if</span> y % <span class="num">2</span> == <span class="num">0</span>:
            <span class="kwa">print</span>(<span class="str">&quot;&quot;</span>, end=<span class="str">' '</span>)
    <span class="kwa">print</span>()


<span class="kwa">def</span> <span class="kwd">solve</span>(n):
    <span class="kwa">global</span> to_go
    to_go = n
    <span class="kwd">generateBitmasks</span>()
    <span class="kwd">solveCell</span>(width*height - <span class="num">1</span>, <span class="num">0</span>)


<span class="kwa">if</span> __name__ == <span class="str">&quot;__main__&quot;</span>:
    <span class="kwd">solve</span>(<span class="kwb">int</span>(sys.argv[<span class="num">1</span>]))

    <span class="kwa">print</span>(<span class="str">&quot;</span><span class="ipl">%d so</span><span class="str">lutions found</span><span class="esc">\n</span><span class="str">&quot;</span> % <span class="kwb">len</span>(solutions))
    <span class="kwd">printSolution</span>(<span class="kwb">min</span>(solutions))
    <span class="kwd">printSolution</span>(<span class="kwb">max</span>(solutions))
