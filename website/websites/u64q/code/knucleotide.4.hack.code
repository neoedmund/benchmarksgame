&lt;?hh
<span class="com">/* </span>
<span class="com">   The Computer Language Benchmarks Game</span>
<span class="com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Damien Bonvillain</span>
<span class="com">   fixed by Isaac Gouy</span>
<span class="com">   improved by Levi Cameron</span>
<span class="com">   PHP as HHVM/Hack by Isaac Gouy</span>
<span class="com">*/</span>

$sequence = <span class="kwd">read_sequence</span>(<span class="str">'THREE'</span>);

<span class="kwd">fclose</span>(STDIN);

$jobs = <span class="kwa">array</span>(
   <span class="kwa">array</span>(<span class="str">'write_freq'</span>, <span class="num">1</span>),
   <span class="kwa">array</span>(<span class="str">'write_freq'</span>, <span class="num">2</span>),
   <span class="kwa">array</span>(<span class="str">'write_count'</span>, <span class="str">'GGT'</span>),
   <span class="kwa">array</span>(<span class="str">'write_count'</span>, <span class="str">'GGTA'</span>),
   <span class="kwa">array</span>(<span class="str">'write_count'</span>, <span class="str">'GGTATT'</span>),
   <span class="kwa">array</span>(<span class="str">'write_count'</span>, <span class="str">'GGTATTTTAATT'</span>),
   <span class="kwa">array</span>(<span class="str">'write_count'</span>, <span class="str">'GGTATTTTAATTTATAGT'</span>),
);

$tok = <span class="kwd">ftok</span>(__FILE__, <span class="kwd">chr</span>(<span class="kwd">time</span>() &amp; <span class="num">255</span>));
$queue = <span class="kwd">msg_get_queue</span>($tok);

$parent = TRUE;
$count = <span class="kwd">count</span>($jobs);
<span class="kwa">for</span> ($i = <span class="num">1</span>; $i &lt; $count; ++$i) {
   $pid = <span class="kwd">pcntl_fork</span>();
   <span class="kwa">if</span> ($pid === -<span class="num">1</span>) {
      <span class="kwa">die</span>(<span class="str">'could not fork'</span>);
   } <span class="kwa">else if</span> ($pid) {
      <span class="kwa">continue</span>;
   }
   $parent = FALSE;
   <span class="kwa">break</span>;
}
<span class="kwa">if</span> ($parent) {
   $i = <span class="num">0</span>;
}

$func = $jobs[$i][<span class="num">0</span>];
$arg =  $jobs[$i][<span class="num">1</span>];

<span class="kwd">ob_start</span>();

$func($sequence, $arg);

$result = <span class="kwa">array</span>($i, <span class="kwd">ob_get_clean</span>());

<span class="kwa">if</span> (!<span class="kwd">msg_send</span>($queue, <span class="num">2</span>, $result, TRUE, FALSE, $errno)) {
   <span class="kwd">var_dump</span>(<span class="str">&quot;</span><span class="ipl">$errno</span><span class="str">&quot;</span>);
   <span class="kwd">var_dump</span>(<span class="kwd">msg_stat_queue</span>($queue));
}

<span class="kwa">if</span> (!$parent) {
   <span class="kwa">exit</span>(<span class="num">0</span>);
}

$results = <span class="kwa">array</span>();
<span class="kwa">foreach</span>($jobs <span class="kwa">as</span> $job) {
    <span class="kwd">msg_receive</span>($queue, <span class="num">2</span>, $msgtype, <span class="num">4096</span>, $result, TRUE);
   $results[$result[<span class="num">0</span>]] = $result[<span class="num">1</span>];
   <span class="kwd">pcntl_wait</span>($s);
}

<span class="kwd">ksort</span>($results);
<span class="kwa">foreach</span> ($results <span class="kwa">as</span> $result) {
   <span class="kwa">echo</span> $result;
}

<span class="kwd">msg_remove_queue</span>($queue);


<span class="com">/* functions definitions follow */</span>
<span class="kwa">function</span> <span class="kwd">read_sequence</span>($id) {
   $id = <span class="str">'&gt;'</span> . $id;
   $ln_id = <span class="kwd">strlen</span>($id);
   $fd = STDIN;

   <span class="slc">// reach sequence three</span>
   <span class="kwa">do</span> {
      $line = <span class="kwd">stream_get_line</span>($fd, <span class="num">250</span>, <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span>);
	  <span class="slc">// if EOF then we couldn't find the sequence</span>
	  <span class="kwa">if</span> (<span class="kwd">feof</span>($fd)) <span class="kwa">exit</span>(-<span class="num">1</span>);
   } <span class="kwa">while</span> (<span class="kwd">strncmp</span>($line, $id, $ln_id) !== <span class="num">0</span>);

   <span class="kwd">ob_start</span>();	<span class="slc">// for repeated string concatenations, output buffering is fastest</span>
   <span class="slc">// next, read the content of the sequence</span>
   <span class="kwa">while</span> (!<span class="kwd">feof</span>($fd)) {
      $line = <span class="kwd">stream_get_line</span>($fd, <span class="num">250</span>, <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span>);
      <span class="kwa">if</span> (!<span class="kwa">isset</span>($line[<span class="num">0</span>])) <span class="kwa">continue</span>;
      $c = $line[<span class="num">0</span>];
      <span class="kwa">if</span> ($c === <span class="str">';'</span>) <span class="kwa">continue</span>;
      <span class="kwa">if</span> ($c === <span class="str">'&gt;'</span>) <span class="kwa">break</span>;
      <span class="slc">// append the uppercase sequence fragment,</span>
      <span class="slc">// must get rid of the CR/LF or whatever if present</span>
      <span class="kwa">echo</span> $line;
   }
   <span class="kwa">return</span> <span class="kwd">strtoupper</span>(<span class="kwd">ob_get_clean</span>());
}

<span class="kwa">function</span> <span class="kwd">write_freq</span>($sequence, $key_length) {
   $map = <span class="kwd">generate_frequencies</span>($sequence, $key_length);
   <span class="kwd">uasort</span>($map, <span class="str">'freq_name_comparator'</span>);
   <span class="kwa">foreach</span>($map <span class="kwa">as</span> $key =&gt; $val) {
      <span class="kwd">printf</span> (<span class="str">&quot;</span><span class="ipl">%s</span> <span class="str">%.3f</span><span class="esc">\n</span><span class="str">&quot;</span>, $key, $val);
   }
   <span class="kwa">echo</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span>;
}

<span class="kwa">function</span> <span class="kwd">write_count</span>($sequence, $key) {
   $map = <span class="kwd">generate_frequencies</span>($sequence, <span class="kwd">strlen</span>($key), false);
   <span class="kwa">if</span> (<span class="kwa">isset</span>($map[$key])) $value = $map[$key];
   <span class="kwa">else</span> $value = <span class="num">0</span>;
   <span class="kwd">printf</span> (<span class="str">&quot;</span><span class="ipl">%d</span><span class="str"></span><span class="esc">\t</span><span class="str"></span><span class="ipl">%s</span><span class="str"></span><span class="esc">\n</span><span class="str">&quot;</span>, $value, $key);
}

<span class="com">/**</span>
<span class="com"> * Returns a map (key, count or freq(default))</span>
<span class="com"> */</span>
<span class="kwa">function</span> <span class="kwd">generate_frequencies</span>($sequence, $key_length, $compute_freq = true) {
   $result = <span class="kwa">array</span>();
   $total = <span class="kwd">strlen</span>($sequence) - $key_length;
   $i = $total;
   <span class="kwa">if</span> ($key_length === <span class="num">1</span>) { 
      <span class="kwa">do</span> {
         $x = &amp;$result[$sequence[$i--]];
         $x++;
      } <span class="kwa">while</span> ($i);
   } <span class="kwa">else</span> {
      <span class="kwa">do</span> {
         $x = &amp;$result[<span class="kwd">substr</span>($sequence, $i--, $key_length)];
         $x++;
      } <span class="kwa">while</span> ($i);
   }
   <span class="kwa">if</span>($compute_freq) {
      <span class="kwa">foreach</span>($result <span class="kwa">as</span> $k =&gt; $v) {
         $result[$k] = $v * <span class="num">100</span> / $total;
      }
   }
   <span class="kwa">return</span> $result;
}

<span class="kwa">function</span> <span class="kwd">freq_name_comparator</span>($a, $b) {
   <span class="kwa">if</span> ($a == $b) <span class="kwa">return</span> <span class="num">0</span>;
   <span class="kwa">return</span>  ($a &lt; $b) ? <span class="num">1</span> : -<span class="num">1</span>;
}
