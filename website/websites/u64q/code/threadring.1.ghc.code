<span class="slc">-- The Computer Language Benchmarks Game</span>
<span class="slc">-- http://benchmarksgame.alioth.debian.org/</span>
<span class="slc">-- Contributed by Jed Brown with improvements by Spencer Janssen, Don Stewart and Alex Mason</span>
<span class="slc">--</span>
<span class="slc">-- Compile with: &lt;ghc&gt; --make -O2 -threaded threadring.ghc-4.hs -o threadring.ghc-4.ghc_run</span>

<span class="kwd">import</span> Control.Monad
<span class="kwd">import</span> Control.Concurrent
<span class="kwd">import</span> System.Environment
<span class="kwd">import</span> GHC.Conc

ring = <span class="num">503</span>

new ret l i = <span class="kwd">do</span>
  r &lt;- newEmptyMVar
  forkOn numCapabilities (thread ret i l r)
  <span class="kwc">return</span> r


thread :: MVar () -&gt; <span class="kwb">Int</span> -&gt; MVar <span class="kwb">Int</span> -&gt; MVar <span class="kwb">Int</span> -&gt; <span class="kwb">IO</span> ()
thread ret i l r = go
  <span class="kwd">where</span> go = <span class="kwd">do</span>
          m &lt;- takeMVar l
          <span class="kwd">if</span> m &gt; <span class="num">1</span>
              <span class="kwd">then</span> (putMVar r $! m - <span class="num">1</span>) &gt;&gt; go
              <span class="kwd">else</span> <span class="kwc">print</span> i &gt;&gt; putMVar ret ()

main = <span class="kwd">do</span>
  a &lt;- newMVar . <span class="kwc">read</span> . <span class="kwc">head</span> =&lt;&lt; <span class="kwc">getArgs</span>
  ret &lt;- newEmptyMVar
  z &lt;- <span class="kwc">foldM</span> (new ret) a [<span class="num">2</span>..ring]
  forkOn numCapabilities (thread ret <span class="num">1</span> z a)
  takeMVar ret
