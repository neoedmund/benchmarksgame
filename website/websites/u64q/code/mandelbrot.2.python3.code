<span class="slc"># The Computer Language Benchmarks Game</span>
<span class="slc"># http://benchmarksgame.alioth.debian.org/</span>
<span class="slc">#</span>
<span class="slc"># contributed by Tupteq</span>
<span class="slc"># modified by Simon Descarpentries</span>
<span class="slc"># modified for multi-core by Ahmad Syukri</span>

<span class="kwa">import</span> multiprocessing <span class="kwa">as</span> mp
<span class="kwa">import</span> sys

<span class="kwa">def</span> <span class="kwd">writer</span>(buff_queue,size):  <span class="slc">#i/o is slow, so leave it to only one worker</span>
    <span class="kwa">from</span> array <span class="kwa">import</span> array
    buff_pos = <span class="num">0</span>
    buff = []
    cout = sys.stdout.<span class="kwb">buffer</span>.write
    <span class="kwa">while</span> <span class="num">1</span>:
        <span class="kwa">try</span>:
            buff.<span class="kwd">append</span>(buff_queue.<span class="kwd">get_nowait</span>())
        <span class="kwa">except</span>:
            <span class="kwa">if</span> <span class="kwb">len</span>(buff):
                buff.<span class="kwd">sort</span>() 
                pos = <span class="kwb">len</span>(buff) - <span class="num">1</span> 
                <span class="kwa">while</span> pos&gt;<span class="num">0</span>:
                    <span class="kwa">if</span> buff[pos][<span class="num">0</span>] == buff[pos-<span class="num">1</span>][<span class="num">1</span>]:  <span class="slc">#connect contiguous segment</span>
                        buff[pos-<span class="num">1</span>] = (buff[pos-<span class="num">1</span>][<span class="num">0</span>],buff[pos][<span class="num">1</span>],buff[pos-<span class="num">1</span>][<span class="num">2</span>]+buff[pos][<span class="num">2</span>])
                        <span class="kwa">del</span>(buff[pos])
                    pos-=<span class="num">1</span>
                <span class="kwa">if</span> buff[<span class="num">0</span>][<span class="num">0</span>]==buff_pos:  <span class="slc"># write if segment is the next needed one</span>
                    <span class="kwd">cout</span>(<span class="kwd">array</span>(<span class="str">'B'</span>, buff[<span class="num">0</span>][<span class="num">2</span>]).<span class="kwd">tostring</span>())
                    buff_pos = buff[<span class="num">0</span>][<span class="num">1</span>]
                    <span class="kwa">del</span>(buff[<span class="num">0</span>])

            <span class="kwa">if</span> buff_pos&gt;=size:
                <span class="kwa">break</span>

<span class="kwa">def</span> <span class="kwd">worker</span>(size, task_queue, buff_queue):
    cout = sys.stdout.<span class="kwb">buffer</span>.write
    fsize = <span class="kwb">float</span>(size)
    r_size = <span class="kwb">range</span>(size)
    r_iter = <span class="kwb">range</span>(<span class="num">50</span>)
    local_abs = <span class="kwb">abs</span>
    result = []
    y=size  <span class="slc">#only to ensure task_head is initialized. not so pretty code</span>
    <span class="kwa">while</span> <span class="num">1</span>:
        task = task_queue.<span class="kwd">get</span>()
        <span class="kwa">if</span> task <span class="kwa">is None</span>:
            <span class="kwa">if</span> <span class="kwb">len</span>(result):  <span class="slc"># push remaining segments</span>
                buff_queue.<span class="kwd">put</span>((task_head,y+<span class="num">1</span>,result))
            <span class="kwa">break</span>
        <span class="kwa">elif</span> task-y-<span class="num">1</span>:
            <span class="kwa">if</span> <span class="kwb">len</span>(result):      <span class="slc"># try to resume from previous segment unless broken</span>
                buff_queue.<span class="kwd">put</span>((task_head,y+<span class="num">1</span>,result))
            task_head = task
            result = []
        <span class="slc">#got new job</span>
        y = task
        bit_num = <span class="num">7</span>
        byte_acc = <span class="num">0</span>
        fy = <span class="num">2</span>j * y / fsize - <span class="num">1</span>j
        <span class="kwa">for</span> x <span class="kwa">in</span> r_size:
            z = <span class="num">0</span>j
            c = <span class="num">2</span>. * x / fsize - <span class="num">1.5</span> + fy
     
            <span class="kwa">for</span> i <span class="kwa">in</span> r_iter:
                z = z * z + c
                <span class="kwa">if</span> <span class="kwd">local_abs</span>(z) &gt;= <span class="num">2</span>.: <span class="kwa">break</span>
            <span class="kwa">else</span>:
                byte_acc += <span class="num">1</span> &lt;&lt; bit_num
     
            <span class="kwa">if</span> bit_num == <span class="num">0</span>:
                result.<span class="kwd">append</span>(byte_acc)
                bit_num = <span class="num">7</span>
                byte_acc = <span class="num">0</span>
            <span class="kwa">else</span>:
                bit_num -= <span class="num">1</span>
        <span class="kwa">if</span> bit_num != <span class="num">7</span>:
            result.<span class="kwd">append</span>(byte_acc)

<span class="kwa">def</span> <span class="kwd">main</span>():
    size = <span class="kwb">int</span>(sys.argv[<span class="num">1</span>])
    task_queue = mp.<span class="kwd">Queue</span>()
    <span class="kwa">for</span> i <span class="kwa">in</span> <span class="kwb">range</span>(size):
        task_queue.<span class="kwd">put</span>(i)
    buff_queue = mp.<span class="kwd">Queue</span>()
    num_proc = <span class="num">64</span> 
    proc = []
    <span class="kwa">for</span> i <span class="kwa">in</span> <span class="kwb">range</span>(num_proc):
        task_queue.<span class="kwd">put</span>(<span class="kwa">None</span>)

    worker_args = (size, task_queue, buff_queue)

    <span class="kwa">for</span> a <span class="kwa">in</span> <span class="kwb">range</span>(num_proc):
        p = mp.<span class="kwd">Process</span>(target=worker, args=worker_args)
        p.<span class="kwd">start</span>()
        proc.<span class="kwd">append</span>(p)
    sys.stdout.<span class="kwd">write</span>(<span class="str">&quot;P4</span><span class="esc">\n</span><span class="str"></span><span class="ipl">%d %d</span><span class="str"></span><span class="esc">\n</span><span class="str">&quot;</span> % (size, size))
    w = mp.<span class="kwd">Process</span>(target=writer, args=(buff_queue,size))
    w.<span class="kwd">start</span>()
    proc.<span class="kwd">append</span>(w)

    <span class="kwa">for</span> p <span class="kwa">in</span> proc:
        p.<span class="kwd">join</span>()

<span class="kwa">if</span> __name__==<span class="str">'__main__'</span>:
    <span class="kwd">main</span>()

