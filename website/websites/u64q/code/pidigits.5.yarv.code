<span class="slc"># The Computer Language Benchmarks Game</span>
<span class="slc"># http://benchmarksgame.alioth.debian.org</span>

<span class="slc"># contributed by Aaron Tavistock</span>

<span class="slc"># Leverage GMP like all the other languages </span>
<span class="kwa">require</span> <span class="str">'gmp'</span>

<span class="slc"># Helpers that improve readability</span>
<span class="kwa">class</span> GMP:<span class="kwc">:Z</span>
  <span class="kwa">def</span> mul!(a,b<span class="opt">)</span>
    GMP:<span class="kwc">:Z</span>.<span class="kwd">mul</span>(<span class="kwa">self</span>, a, b<span class="opt">)</span>
  <span class="kwa">end</span>

  <span class="kwa">def</span> times!(a<span class="opt">)</span>
    GMP:<span class="kwc">:Z</span>.<span class="kwd">mul</span>(<span class="kwa">self</span>, <span class="kwa">self</span>, a<span class="opt">)</span>
  <span class="kwa">end</span>
<span class="kwa">end</span>

<span class="slc"># Constants to reduce object instantiation and casting</span>
ZERO = GMP:<span class="kwc">:Z</span>(<span class="num">0</span><span class="opt">)</span>
ONE = GMP:<span class="kwc">:Z</span>(<span class="num">1</span><span class="opt">)</span>
TWO = GMP:<span class="kwc">:Z</span>(<span class="num">2</span><span class="opt">)</span>
THREE = GMP:<span class="kwc">:Z</span>(<span class="num">3</span><span class="opt">)</span>
TEN = GMP:<span class="kwc">:Z</span>(<span class="num">10</span><span class="opt">)</span>

<span class="slc"># Allocate these expensive objects once</span>
<span class="kwb">&#64;display_chunk</span> = GMP:<span class="kwc">:Z</span>(<span class="num">0</span><span class="opt">)</span>
<span class="kwb">&#64;k</span> = GMP:<span class="kwc">:Z</span>(<span class="num">0</span><span class="opt">)</span>
<span class="kwb">&#64;a</span> = GMP:<span class="kwc">:Z</span>(<span class="num">0</span><span class="opt">)</span>
<span class="kwb">&#64;t</span> = GMP:<span class="kwc">:Z</span>(<span class="num">0</span><span class="opt">)</span>
<span class="kwb">&#64;u</span> = GMP:<span class="kwc">:Z</span>(<span class="num">0</span><span class="opt">)</span>
<span class="kwb">&#64;k1</span> = GMP:<span class="kwc">:Z</span>(<span class="num">1</span><span class="opt">)</span>
<span class="kwb">&#64;n</span> = GMP:<span class="kwc">:Z</span>(<span class="num">1</span><span class="opt">)</span>
<span class="kwb">&#64;d</span> = GMP:<span class="kwc">:Z</span>(<span class="num">1</span><span class="opt">)</span>
<span class="kwb">&#64;tmp</span> = GMP:<span class="kwc">:Z</span>(<span class="num">0</span><span class="opt">)</span>

<span class="kwa">def</span> next_chunk
  <span class="kwb">&#64;tmp</span>.mul!(<span class="kwb">&#64;d</span>, <span class="kwb">&#64;t</span><span class="opt">)</span>
  <span class="kwb">&#64;a</span>.sub!(<span class="kwb">&#64;tmp</span><span class="opt">)</span>
  <span class="kwb">&#64;a</span>.times!(TEN<span class="opt">)</span>
  <span class="kwb">&#64;n</span>.times!(TEN<span class="opt">)</span>
<span class="kwa">end</span>

<span class="kwa">def</span> produce_chunk
  <span class="kwb">&#64;k</span>.add!(ONE<span class="opt">)</span>
  <span class="kwb">&#64;t</span>.mul!(<span class="kwb">&#64;n</span>, TWO<span class="opt">)</span>
  <span class="kwb">&#64;n</span>.times!(<span class="kwb">&#64;k</span><span class="opt">)</span>

  <span class="kwb">&#64;a</span>.add!(<span class="kwb">&#64;t</span><span class="opt">)</span>
  <span class="kwb">&#64;k1</span>.add!(TWO<span class="opt">)</span>
  <span class="kwb">&#64;a</span>.times!(<span class="kwb">&#64;k1</span><span class="opt">)</span>
  <span class="kwb">&#64;d</span>.times!(<span class="kwb">&#64;k1</span><span class="opt">)</span>
  
  <span class="kwa">if</span> <span class="kwb">&#64;a</span> &gt;= <span class="kwb">&#64;n</span>
    <span class="kwb">&#64;tmp</span>.mul!(<span class="kwb">&#64;n</span>, THREE<span class="opt">)</span>
    <span class="kwb">&#64;tmp</span>.add!(<span class="kwb">&#64;a</span><span class="opt">)</span>
    <span class="kwb">&#64;t</span> = <span class="kwb">&#64;tmp</span>.<span class="kwd">fdiv</span>(<span class="kwb">&#64;d</span><span class="opt">)</span>
    <span class="kwb">&#64;u</span> = <span class="kwb">&#64;tmp</span>.<span class="kwd">fmod</span>(<span class="kwb">&#64;d</span><span class="opt">)</span>
    <span class="kwb">&#64;u</span>.add!(<span class="kwb">&#64;n</span><span class="opt">)</span>
    <span class="kwa">if</span> <span class="kwb">&#64;d</span> &gt; <span class="kwb">&#64;u</span>
      <span class="kwb">&#64;display_chunk</span>.times!(TEN<span class="opt">)</span>
      <span class="kwb">&#64;display_chunk</span>.add!(<span class="kwb">&#64;t</span><span class="opt">)</span>
      <span class="kwa">return true</span>
    <span class="kwa">end</span>
  <span class="kwa">end</span>
  
  <span class="kwa">false</span>
<span class="kwa">end</span>  

N = (<span class="kwc">ARGV</span>[<span class="num">0</span>] || <span class="num">100</span><span class="opt">)</span>.to_i
count = <span class="num">0</span>
<span class="kwa">while</span>(count &lt; N<span class="opt">)</span> <span class="kwa">do</span>
  <span class="kwa">if</span> produce_chunk
    count += <span class="num">1</span>
    <span class="kwa">if</span> count % <span class="num">10</span> == <span class="num">0</span>
      <span class="kwc">STDOUT</span>.write <span class="str">&quot;%010d</span><span class="esc">\t</span><span class="str">:%d</span><span class="esc">\n</span><span class="str">&quot;</span> % [<span class="kwb">&#64;display_chunk</span>.to_i, count]
      <span class="kwb">&#64;display_chunk</span>.times!(ZERO<span class="opt">)</span>
    <span class="kwa">end</span> 
    next_chunk
  <span class="kwa">end</span>
<span class="kwa">end</span>

<span class="kwa">if</span> <span class="kwb">&#64;display_chunk</span>.to_i &gt; <span class="num">0</span>
  <span class="kwc">STDOUT</span>.write <span class="str">&quot;%s</span><span class="esc">\t</span><span class="str">:%d</span><span class="esc">\n</span><span class="str">&quot;</span> % [<span class="kwb">&#64;display_chunk</span>.to_s.<span class="kwd">ljust</span>(<span class="num">10</span><span class="opt">)</span>, count]
<span class="kwa">end</span>
