<span class="com">/* The Computer Language Benchmarks Game</span>
<span class="com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   direct transliteration of Greg Buchholz's C program</span>
<span class="com">   contributed by Isaac Gouy</span>
<span class="com">*/</span>


<span class="slc">/// &lt;reference path=&quot;/usr/local/src/typescript/node.d.ts&quot; /&gt;</span>


<span class="kwa">const</span> w = +process.argv[<span class="num">2</span>]
<span class="kwa">const</span> h = w

<span class="kwa">let</span> bit_num = <span class="num">0</span>, i = <span class="num">0</span>, byte_acc = <span class="num">0</span>
<span class="kwa">const</span> iter = <span class="num">50</span>, limit = <span class="num">2.0</span>
<span class="kwa">let</span> Zr, Zi, Cr, Ci, Tr, Ti

process.stdout.<span class="kwd">write</span>( <span class="str">&quot;P4</span><span class="esc">\n</span><span class="str">&quot;</span> + w + <span class="str">&quot; &quot;</span> + h + <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span> )

<span class="kwa">for</span> (<span class="kwa">let</span> y = <span class="num">0</span>; y &lt; h; ++y) {
   <span class="kwa">for</span> (<span class="kwa">let</span> x = <span class="num">0</span>; x &lt; w; ++x) {

      Zr = <span class="num">0.0</span>; Zi = <span class="num">0.0</span>; Tr = <span class="num">0.0</span>; Ti = <span class="num">0.0</span>
      Cr = <span class="num">2.0</span>*x/w - <span class="num">1.5</span>; Ci = <span class="num">2.0</span>*y/h - <span class="num">1.0</span>

      <span class="kwa">for</span> (<span class="kwa">let</span> i = <span class="num">0</span>; i &lt; iter &amp;&amp; (Tr+Ti &lt;= limit*limit); ++i) {
         Zi = <span class="num">2.0</span>*Zr*Zi + Ci
         Zr = Tr - Ti + Cr
         Tr = Zr * Zr
         Ti = Zi * Zi
      }

      byte_acc &lt;&lt;= <span class="num">1</span>
      <span class="kwa">if</span> (Tr+Ti &lt;= limit*limit) { byte_acc |= <span class="num">0x01</span> }

      ++bit_num

      <span class="kwa">if</span> (bit_num == <span class="num">8</span>) {
         process.stdout.<span class="kwd">write</span>( String.<span class="kwd">fromCharCode</span>(byte_acc),<span class="str">'ascii'</span> )
         byte_acc = <span class="num">0</span>
         bit_num = <span class="num">0</span>
      }
      <span class="kwa">else if</span> (x == w-<span class="num">1</span>) {
         byte_acc &lt;&lt;= (<span class="num">8</span>-w%<span class="num">8</span>)
         process.stdout.<span class="kwd">write</span>( String.<span class="kwd">fromCharCode</span>(byte_acc),<span class="str">'ascii'</span> )
         byte_acc = <span class="num">0</span>
         bit_num = <span class="num">0</span>
      }
   }
}
