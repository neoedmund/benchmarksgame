<span class="slc">! The Computer Language Benchmarks Game</span>
<span class="slc">! http://benchmarksgame.alioth.debian.org/</span>
<span class="slc">!</span>
<span class="slc">! converted to fortran by Gilbert Brietzke on 31. Januar 2011</span>
<span class="slc">! from C-code by Joseph Pich√© as a conversion</span>
<span class="slc">! from Java version by Oleg Mazurov and Isaac Gouy</span>

<span class="kwa">program</span> fannkuch

  <span class="kwa">implicit none</span>

  <span class="kwa">integer</span> :: n,checksum,maxFlipsCount
  <span class="kwa">character</span>(len=<span class="num">2</span>) :: arg
  <span class="kwa">character</span>(len=<span class="num">10</span>) :: out
  <span class="kwa">call</span> <span class="kwd">get_command_argument</span>(<span class="num">1</span>,arg);<span class="kwa">read</span>(arg,<span class="str">'(I2)'</span>)n
  <span class="kwa">call</span> <span class="kwd">fannkuchredux</span>(n,checksum,maxFlipsCount)
  <span class="kwa">write</span>(out,<span class="str">'(I10)'</span>) checksum;
  <span class="kwa">write</span>(*,<span class="str">'(A)'</span>) <span class="kwd">trim</span>(<span class="kwd">adjustl</span>(out))
  <span class="kwa">write</span>(out,<span class="str">'(I10)'</span>) maxFlipsCount;
  <span class="kwa">write</span>(*,<span class="str">'(A)'</span>) <span class="str">'Pfannkuchen('</span>//<span class="kwd">trim</span>(<span class="kwd">adjustl</span>(arg))//<span class="str">') = '</span>//<span class="kwd">trim</span>(<span class="kwd">adjustl</span>(out))

<span class="kwa">contains</span>

  <span class="kwa">subroutine</span> <span class="kwd">fannkuchredux</span>(n,checksum,maxFlipsCount)
    <span class="kwa">implicit none</span>
    <span class="kwa">integer</span>, <span class="kwd">intent</span>(in) :: n
    <span class="kwa">integer</span>, <span class="kwd">intent</span>(out) :: maxFlipsCount,checksum
    <span class="kwa">integer</span> :: <span class="kwd">perm</span>(<span class="num">0</span>:n-<span class="num">1</span>),<span class="kwd">perm1</span>(<span class="num">0</span>:n-<span class="num">1</span>),<span class="kwd">icount</span>(<span class="num">0</span>:n-<span class="num">1</span>);
    <span class="kwa">integer</span> :: i,r,temp,k,perm0,permCount = <span class="num">0</span>,flipsCount = <span class="num">0</span>;
    checksum = <span class="num">0</span>;  maxFlipsCount = <span class="num">0</span>;
    <span class="kwa">do</span> i = <span class="num">0</span>,n-<span class="num">1</span>
       <span class="kwd">perm1</span>(i)= i;
    <span class="kwa">enddo</span>
    r=n
    <span class="kwa">do while</span> (.true.)
       <span class="kwa">do while</span> (r /= <span class="num">1</span>)
          <span class="kwd">icount</span>(r-<span class="num">1</span>)=r; r=r-<span class="num">1</span>;
       <span class="kwa">end do</span>
       perm = perm1; flipsCount = <span class="num">0</span>;
       <span class="kwa">do while</span> (<span class="kwd">perm</span>(<span class="num">0</span>)/=<span class="num">0</span>) 
          k = <span class="kwd">perm</span>(<span class="num">0</span>)
          <span class="kwa">do</span>  i=<span class="num">0</span>,<span class="kwd">ishft</span>(k+<span class="num">1</span>,-<span class="num">1</span>)-<span class="num">1</span>
             temp = <span class="kwd">perm</span>(i); <span class="kwd">perm</span>(i) = <span class="kwd">perm</span>(k-i); <span class="kwd">perm</span>(k-i) = temp;
          <span class="kwa">enddo</span>
          flipsCount = flipsCount + <span class="num">1</span>;
       <span class="kwa">end do</span>
       maxFlipsCount = <span class="kwd">max</span>(maxFlipsCount,flipsCount);
       <span class="kwa">if</span> (<span class="kwd">modulo</span>(permCount,<span class="num">2</span>) == <span class="num">0</span>)<span class="kwa">then</span>
          checksum = checksum + flipsCount
       <span class="kwa">else</span>
          checksum = checksum - flipsCount
       <span class="kwa">end if</span>
       <span class="kwa">do while</span> (.true.)
          <span class="kwa">if</span> (r==n) <span class="kwa">return</span>
          perm0 = <span class="kwd">perm1</span>(<span class="num">0</span>); i = <span class="num">0</span>;
          <span class="kwa">do while</span> (i &lt; r) 
             <span class="kwd">perm1</span>(i) = <span class="kwd">perm1</span>(i + <span class="num">1</span>); i = i + <span class="num">1</span>;
          <span class="kwa">end do</span>
          <span class="kwd">perm1</span>(r) = perm0;
          <span class="kwd">icount</span>(r) = <span class="kwd">icount</span>(r) - <span class="num">1</span>;
          <span class="kwa">if</span> (<span class="kwd">icount</span>(r) &gt; <span class="num">0</span>) exit;
          r = r + <span class="num">1</span>;
       <span class="kwa">end do</span>
       permCount = permCount + <span class="num">1</span>;
    <span class="kwa">end do</span>
  <span class="kwa">end subroutine</span> fannkuchredux
  
<span class="kwa">end program</span> fannkuch
