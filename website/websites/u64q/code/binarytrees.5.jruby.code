<span class="slc"># The Computer Language Benchmarks Game</span>
<span class="slc"># http://benchmarksgame.alioth.debian.org</span>
<span class="slc">#</span>
<span class="slc"># contributed by Jesse Millikan</span>
<span class="slc"># Modified by Wesley Moxam</span>
<span class="slc"># Modified &amp;&amp; Parallelised by Scott Leggett</span>

<span class="kwa">module</span> MiniParallel
    <span class="kwa">class</span> Worker
        <span class="kwa">def</span> <span class="kwd">initialize</span>(read, write<span class="opt">)</span>
            <span class="kwb">&#64;read</span>, <span class="kwb">&#64;write</span> = read, write
        <span class="kwa">end</span>

        <span class="kwa">def</span> close_pipes
            <span class="kwb">&#64;read</span>.close
            <span class="kwb">&#64;write</span>.close
        <span class="kwa">end</span>

        <span class="kwa">def</span> <span class="kwd">work</span>(index<span class="opt">)</span>
            Marshal.<span class="kwd">dump</span>(index, <span class="kwb">&#64;write</span><span class="opt">)</span>
            Marshal.<span class="kwd">load</span>(<span class="kwb">&#64;read</span><span class="opt">)</span>
        <span class="kwa">end</span>
    <span class="kwa">end</span>

    <span class="kwa">def self</span>.<span class="kwd">map</span>(array, &amp;block<span class="opt">)</span>
        <span class="kwd">work_in_processes</span>(
            array,
            [array.size, core_count].min,
            &amp;block
        <span class="opt">)</span>
    <span class="kwa">end</span>

    <span class="kwa">def self</span>.core_count
        &#64;<span class="kwb">&#64;core_count</span> ||= IO.<span class="kwd">read</span>(<span class="str">&quot;/proc/cpuinfo&quot;</span><span class="opt">)</span>.<span class="kwd">scan</span>(<span class="kwc">/^processor/</span><span class="opt">)</span>.size
    <span class="kwa">end</span>

    private

    <span class="kwa">def self</span>.<span class="kwd">work_in_processes</span>(array, count, &amp;block<span class="opt">)</span>
        index = -<span class="num">1</span>
        results, threads = [], []

        workers = <span class="kwd">create_workers</span>(array, count, &amp;block<span class="opt">)</span>

        workers.each <span class="kwa">do</span> |worker|
            threads &lt;&lt; Thread.new <span class="kwa">do</span>
              <span class="kwa">loop do</span>
                Thread.exclusive{ index += 1 }
                <span class="kwa">break if</span> index &gt;= array.size
                results[index] = worker.<span class="kwd">work</span>(index<span class="opt">)</span>
              <span class="kwa">end</span>
              worker.close_pipes
            <span class="kwa">end</span>
        <span class="kwa">end</span>

        threads.<span class="kwd">each</span>(&amp;<span class="kwc">:join</span><span class="opt">)</span>
        Process.waitall

        results
    <span class="kwa">end</span>

    <span class="kwa">def self</span>.<span class="kwd">create_workers</span>(array, count, &amp;block<span class="opt">)</span>
        workers = []
        count.times <span class="kwa">do</span>
            workers &lt;&lt; <span class="kwd">create_worker</span>(array, workers, &amp;block<span class="opt">)</span>
        <span class="kwa">end</span>
        workers
    <span class="kwa">end</span>

    <span class="kwa">def self</span>.<span class="kwd">create_worker</span>(array, started_workers, &amp;block<span class="opt">)</span>
        child_read, parent_write = IO.pipe
        parent_read, child_write = IO.pipe

        Process.fork <span class="kwa">do</span>
            started_workers.<span class="kwd">each</span>(&amp;<span class="kwc">:close_pipes</span><span class="opt">)</span>

            parent_write.close
            parent_read.close

            <span class="kwd">process_incoming_jobs</span>(child_read, child_write, array, &amp;block<span class="opt">)</span>

            child_read.close
            child_write.close
        <span class="kwa">end</span>

        child_read.close
        child_write.close

        Worker.<span class="kwd">new</span>(parent_read, parent_write<span class="opt">)</span>
    <span class="kwa">end</span>

    <span class="kwa">def self</span>.<span class="kwd">process_incoming_jobs</span>(read, write, array, &amp;block<span class="opt">)</span>
        <span class="kwa">until</span> read.eof?
            index = Marshal.<span class="kwd">load</span>(read<span class="opt">)</span>
            Marshal.<span class="kwd">dump</span>(block.<span class="kwd">call</span>(array[index]<span class="opt">)</span>, write<span class="opt">)</span>
        <span class="kwa">end</span>
    <span class="kwa">end</span>
<span class="kwa">end</span>

<span class="kwa">def</span> <span class="kwd">item_check</span>(left, item, right<span class="opt">)</span>
    <span class="kwa">if</span> left
        item + <span class="kwd">item_check</span>(*left<span class="opt">)</span> - <span class="kwd">item_check</span>(*right<span class="opt">)</span>
    <span class="kwa">else</span>
        item
    <span class="kwa">end</span>
<span class="kwa">end</span>

<span class="kwa">def</span> <span class="kwd">bottom_up_tree</span>(item, depth<span class="opt">)</span>
    <span class="kwa">if</span> depth &gt; <span class="num">0</span>
        item_item = <span class="num">2</span> * item
        depth -= <span class="num">1</span>
        [<span class="kwd">bottom_up_tree</span>(item_item - <span class="num">1</span>, depth<span class="opt">)</span>, item, <span class="kwd">bottom_up_tree</span>(item_item, depth<span class="opt">)</span>]
    <span class="kwa">else</span>
        [<span class="kwa">nil</span>, item, <span class="kwa">nil</span>]
    <span class="kwa">end</span>
<span class="kwa">end</span>

max_depth = <span class="kwc">ARGV</span>[<span class="num">0</span>].to_i
min_depth = <span class="num">4</span>

max_depth = [min_depth + <span class="num">2</span>, max_depth].max

stretch_depth = max_depth + <span class="num">1</span>
stretch_tree = <span class="kwd">bottom_up_tree</span>(<span class="num">0</span>, stretch_depth<span class="opt">)</span>

puts <span class="str">&quot;stretch tree of depth</span> <span class="ipl">#{stretch_depth}</span><span class="str"></span><span class="esc">\t</span> <span class="str">check:</span> <span class="ipl">#{item_check(*stretch_tree)}</span><span class="str">&quot;</span>
stretch_tree = <span class="kwa">nil</span>

long_lived_tree = <span class="kwd">bottom_up_tree</span>(<span class="num">0</span>, max_depth<span class="opt">)</span>

<span class="kwa">if</span> MiniParallel.core_count &gt; <span class="num">1</span>
    <span class="kwa">if</span> <span class="kwc">RUBY_PLATFORM</span> == <span class="str">'java'</span>
        output = []
        threads = []
        min_depth.<span class="kwd">step</span>(max_depth + <span class="num">1</span>, <span class="num">2</span><span class="opt">)</span>.to_a.each.with_index <span class="kwa">do</span> |depth,j|
            threads &lt;&lt; Thread.new <span class="kwa">do</span>
                iterations = <span class="num">2</span>**(max_depth - depth + min_depth<span class="opt">)</span>

                check = <span class="num">0</span>

                (<span class="num">1</span>..iterations<span class="opt">)</span>.each <span class="kwa">do</span> |i|
                    check += <span class="kwd">item_check</span>(*<span class="kwd">bottom_up_tree</span>(i, depth<span class="opt">))</span> +
                        <span class="kwd">item_check</span>(*<span class="kwd">bottom_up_tree</span>(-i, depth<span class="opt">))</span>
                <span class="kwa">end</span>

                output[j] = <span class="str">&quot;</span><span class="ipl">#{iterations * 2}</span><span class="str"></span><span class="esc">\t</span> <span class="str">trees of depth</span> <span class="ipl">#{depth}</span><span class="str"></span><span class="esc">\t</span> <span class="str">check:</span> <span class="ipl">#{check}</span><span class="str">&quot;</span>
            <span class="kwa">end</span>
        <span class="kwa">end</span>
        threads.all?(&amp;<span class="kwc">:join</span><span class="opt">)</span>
        output.each{|l| puts l}
    <span class="kwa">else</span>
        MiniParallel.<span class="kwd">map</span>(min_depth.<span class="kwd">step</span>(max_depth + <span class="num">1</span>, <span class="num">2</span><span class="opt">)</span>.to_a<span class="opt">)</span> <span class="kwa">do</span> |depth|
            iterations = <span class="num">2</span>**(max_depth - depth + min_depth<span class="opt">)</span>

            check = <span class="num">0</span>

            (<span class="num">1</span>..iterations<span class="opt">)</span>.each <span class="kwa">do</span> |i|
                check += <span class="kwd">item_check</span>(*<span class="kwd">bottom_up_tree</span>(i, depth<span class="opt">))</span> +
                    <span class="kwd">item_check</span>(*<span class="kwd">bottom_up_tree</span>(-i, depth<span class="opt">))</span>
            <span class="kwa">end</span>

            <span class="str">&quot;</span><span class="ipl">#{iterations * 2}</span><span class="str"></span><span class="esc">\t</span> <span class="str">trees of depth</span> <span class="ipl">#{depth}</span><span class="str"></span><span class="esc">\t</span> <span class="str">check:</span> <span class="ipl">#{check}</span><span class="str">&quot;</span>
        <span class="kwa">end</span>.each{|l| puts l}
    <span class="kwa">end</span>
<span class="kwa">else</span>
    min_depth.<span class="kwd">step</span>(max_depth + <span class="num">1</span>, <span class="num">2</span><span class="opt">)</span>.each <span class="kwa">do</span> |depth|
        iterations = <span class="num">2</span>**(max_depth - depth + min_depth<span class="opt">)</span>

        check = <span class="num">0</span>

        (<span class="num">1</span>..iterations<span class="opt">)</span>.each <span class="kwa">do</span> |i|
            check += <span class="kwd">item_check</span>(*<span class="kwd">bottom_up_tree</span>(i, depth<span class="opt">))</span> +
                <span class="kwd">item_check</span>(*<span class="kwd">bottom_up_tree</span>(-i, depth<span class="opt">))</span>
        <span class="kwa">end</span>

        puts <span class="str">&quot;</span><span class="ipl">#{iterations * 2}</span><span class="str"></span><span class="esc">\t</span> <span class="str">trees of depth</span> <span class="ipl">#{depth}</span><span class="str"></span><span class="esc">\t</span> <span class="str">check:</span> <span class="ipl">#{check}</span><span class="str">&quot;</span>
    <span class="kwa">end</span>
<span class="kwa">end</span>

puts <span class="str">&quot;long lived tree of depth</span> <span class="ipl">#{max_depth}</span><span class="str"></span><span class="esc">\t</span> <span class="str">check:</span> <span class="ipl">#{item_check(*long_lived_tree)}</span><span class="str">&quot;</span>
