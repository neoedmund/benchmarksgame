<span class="com">/* The Computer Language Benchmarks Game</span>
<span class="com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   Contributed by The Anh Tran</span>
<span class="com">   Updated for 2.8 by Rex Kerr</span>
<span class="com">   Modified by Michael Peng for 2.10</span>
<span class="com">*/</span>

<span class="kwa">import</span> scala.concurrent.duration.Duration
<span class="kwa">import</span> java.util.regex.Pattern
<span class="kwa">import</span> scala.concurrent._
<span class="kwa">import</span> ExecutionContext.Implicits.global
<span class="kwa">import</span> scala.io.Source

<span class="kwa">object</span> regexdna {
  <span class="kwa">def</span> <span class="kwd">main</span>(args : Array[String]) {
    <span class="slc">// load data from stdin</span>
    <span class="kwa">var</span> initInput = Source.stdin.mkString
    <span class="kwa">val</span> init_len = initInput length

    <span class="slc">// strip header &amp; newline</span>
    <span class="kwa">val</span> input = <span class="str">&quot;&gt;.*</span><span class="esc">\n</span><span class="str">|</span><span class="esc">\n</span><span class="str">&quot;</span>.r <span class="kwd">replaceAllIn</span>(initInput, <span class="str">&quot;&quot;</span>)
    <span class="kwa">val</span> strip_len = input length

    <span class="slc">// counting patterns</span>
    <span class="kwa">val</span> patterns  = <span class="kwd">Seq</span>(
      <span class="str">&quot;agggtaaa|tttaccct&quot;</span> ,
      <span class="str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span>,
      <span class="str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span>,
      <span class="str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span>,
      <span class="str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span>,
      <span class="str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span>,
      <span class="str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span>,
      <span class="str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span>,
      <span class="str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span>)

    <span class="slc">// queue tasks, each task is handled in a separate thread</span>
    <span class="kwa">val</span> count_results  = patterns <span class="kwd">map</span>( pt =&gt;
      <span class="kwd">future</span>(
        (pt, pt.r.<span class="kwd">findAllIn</span>(input).length)
      )
    )

    <span class="slc">// replace IUB</span>
    <span class="kwa">val</span> iub = <span class="kwd">Map</span>(
      <span class="str">&quot;B&quot;</span> -&gt; <span class="str">&quot;(c|g|t)&quot;</span>,
      <span class="str">&quot;D&quot;</span> -&gt; <span class="str">&quot;(a|g|t)&quot;</span>,
      <span class="str">&quot;H&quot;</span> -&gt; <span class="str">&quot;(a|c|t)&quot;</span>,
      <span class="str">&quot;K&quot;</span> -&gt; <span class="str">&quot;(g|t)&quot;</span>,
      <span class="str">&quot;M&quot;</span> -&gt; <span class="str">&quot;(a|c)&quot;</span>,
      <span class="str">&quot;N&quot;</span> -&gt; <span class="str">&quot;(a|c|g|t)&quot;</span>,
      <span class="str">&quot;R&quot;</span> -&gt; <span class="str">&quot;(a|g)&quot;</span>,
      <span class="str">&quot;S&quot;</span> -&gt; <span class="str">&quot;(c|g)&quot;</span>,
      <span class="str">&quot;V&quot;</span> -&gt; <span class="str">&quot;(a|c|g)&quot;</span>,
      <span class="str">&quot;W&quot;</span> -&gt; <span class="str">&quot;(a|t)&quot;</span>,
      <span class="str">&quot;Y&quot;</span> -&gt; <span class="str">&quot;(c|t)&quot;</span>)

    <span class="kwa">val</span> replace_result  = {
      <span class="kwa">val</span> buffer  = <span class="kwa">new</span> <span class="kwd">StringBuffer</span>((input.length * <span class="num">3</span>) / <span class="num">2</span>)
      <span class="kwa">val</span> matcher  = Pattern compile <span class="str">&quot;[BDHKMNRSVWY]&quot;</span> matcher input

      <span class="kwa">while</span> ( matcher find )
        matcher <span class="kwd">appendReplacement</span>( buffer, <span class="kwd">iub</span>(matcher group))

      matcher appendTail buffer
      buffer length
    }

    <span class="slc">// print results</span>
    Await.<span class="kwd">result</span>(Future.<span class="kwd">sequence</span>(count_results), Duration.Inf) <span class="kwd">foreach</span> (v =&gt; <span class="kwd">printf</span>(<span class="str">&quot;%s %d</span><span class="esc">\n</span><span class="str">&quot;</span>, v._1, v._2))
    <span class="kwd">printf</span>( <span class="str">&quot;</span><span class="esc">\n</span><span class="str">%d</span><span class="esc">\n</span><span class="str">%d</span><span class="esc">\n</span><span class="str">%d</span><span class="esc">\n</span><span class="str">&quot;</span>, init_len, strip_len, replace_result )
  }
}
