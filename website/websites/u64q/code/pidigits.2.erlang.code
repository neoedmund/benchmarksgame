<span class="slc">% The Computer Language Benchmarks Game</span>
<span class="slc">% http://benchmarksgame.alioth.debian.org/</span>
<span class="slc">%%</span>
<span class="slc">%% Contributed by : Alkis Gotovos 10 Oct 2010</span>

<span class="opt">-</span><span class="kwd">module</span><span class="opt">(</span>pidigits<span class="opt">).</span>

<span class="opt">-</span><span class="kwd">compile</span><span class="opt">([</span>native<span class="opt">, {</span>hipe<span class="opt">, [</span>o3<span class="opt">]}]).</span>

<span class="opt">-</span><span class="kwd">export</span><span class="opt">([</span>main<span class="opt">/</span><span class="num">1</span><span class="opt">]).</span>

<span class="kwd">main</span><span class="opt">(</span>N<span class="opt">)</span> <span class="kwa">when</span> <span class="kwd">is_integer</span><span class="opt">(</span>N<span class="opt">) -&gt;</span>
    Pid <span class="opt">=</span> <span class="kwb">spawn_link</span><span class="opt">(</span><span class="kwa">fun</span><span class="opt">() -&gt;</span> <span class="kwd">io_worker</span><span class="opt">()</span> <span class="kwa">end</span><span class="opt">),</span>
    <span class="kwb">register</span><span class="opt">(</span>io_worker<span class="opt">,</span> Pid<span class="opt">),</span>
    <span class="kwd">stream</span><span class="opt">({</span><span class="num">1</span><span class="opt">,</span> <span class="num">0</span><span class="opt">,</span> <span class="num">1</span><span class="opt">},</span> <span class="num">1</span><span class="opt">,</span> <span class="num">0</span><span class="opt">,</span> N<span class="opt">);</span>
<span class="kwd">main</span><span class="opt">([</span>N<span class="opt">]) -&gt;</span> <span class="kwd">main</span><span class="opt">(</span><span class="kwb">list_to_integer</span><span class="opt">(</span>N<span class="opt">)).</span>
    
<span class="kwd">comp</span><span class="opt">({</span>Q<span class="opt">,</span> R<span class="opt">,</span> T<span class="opt">}, {</span>U<span class="opt">,</span> V<span class="opt">,</span> X<span class="opt">}) -&gt; {</span>Q<span class="opt">*</span>U<span class="opt">,</span> Q<span class="opt">*</span>V <span class="opt">+</span> R<span class="opt">*</span>X<span class="opt">,</span> T<span class="opt">*</span>X<span class="opt">}.</span>

<span class="kwd">next</span><span class="opt">({</span>Q<span class="opt">,</span> R<span class="opt">,</span> T<span class="opt">}) -&gt; (</span>Q<span class="opt">*</span><span class="num">3</span> <span class="opt">+</span> R<span class="opt">)</span> div T<span class="opt">.</span>

<span class="kwd">safe</span><span class="opt">({</span>Q<span class="opt">,</span> R<span class="opt">,</span> T<span class="opt">},</span> N<span class="opt">) -&gt;</span> N <span class="opt">== (</span>Q<span class="opt">*</span><span class="num">4</span> <span class="opt">+</span> R<span class="opt">)</span> div T<span class="opt">.</span>

<span class="kwd">prod</span><span class="opt">({</span>Z11<span class="opt">,</span> Z12<span class="opt">,</span> Z22<span class="opt">},</span> N<span class="opt">) -&gt; {</span><span class="num">10</span><span class="opt">*</span>Z11<span class="opt">,</span> <span class="num">10</span><span class="opt">*(</span>Z12 <span class="opt">-</span> N<span class="opt">*</span>Z22<span class="opt">),</span> Z22<span class="opt">}.</span>

<span class="kwd">stream</span><span class="opt">(</span>Z<span class="opt">,</span> K<span class="opt">,</span> P<span class="opt">,</span> N<span class="opt">) -&gt;</span>
    Y <span class="opt">=</span> <span class="kwd">next</span><span class="opt">(</span>Z<span class="opt">),</span>
    <span class="kwa">case</span> <span class="kwd">safe</span><span class="opt">(</span>Z<span class="opt">,</span> Y<span class="opt">)</span> <span class="kwa">of</span>
	true <span class="opt">-&gt;</span>
	    io_worker <span class="opt">! {</span>Y<span class="opt">,</span> P <span class="opt">+</span> <span class="num">1</span><span class="opt">,</span> N<span class="opt">},</span>
	    <span class="kwd">stream</span><span class="opt">(</span><span class="kwd">prod</span><span class="opt">(</span>Z<span class="opt">,</span> Y<span class="opt">),</span> K<span class="opt">,</span> P <span class="opt">+</span> <span class="num">1</span><span class="opt">,</span> N<span class="opt">);</span>
	false <span class="opt">-&gt;</span> <span class="kwd">stream</span><span class="opt">(</span><span class="kwd">comp</span><span class="opt">(</span>Z<span class="opt">, {</span>K<span class="opt">,</span> <span class="num">4</span><span class="opt">*</span>K <span class="opt">+</span> <span class="num">2</span><span class="opt">,</span> <span class="num">2</span><span class="opt">*</span>K <span class="opt">+</span> <span class="num">1</span><span class="opt">}),</span> K <span class="opt">+</span> <span class="num">1</span><span class="opt">,</span> P<span class="opt">,</span> N<span class="opt">)</span>
    <span class="kwa">end</span><span class="opt">.</span>

<span class="kwd">io_worker</span><span class="opt">() -&gt;</span>
    <span class="kwa">receive</span>
	<span class="opt">{</span>Y<span class="opt">,</span> N<span class="opt">,</span> N<span class="opt">} -&gt;</span>
	    Spaces <span class="opt">= (</span><span class="num">10</span> <span class="opt">-</span> N rem <span class="num">10</span><span class="opt">)</span> rem <span class="num">10</span><span class="opt">,</span>
	    <span class="kwc">io</span><span class="opt">:</span><span class="kwd">fwrite</span><span class="opt">(</span><span class="str">&quot;~w~.*c</span><span class="esc">\t</span><span class="str">:~w~n&quot;</span><span class="opt">, [</span>Y<span class="opt">,</span> Spaces<span class="opt">,</span> $ <span class="opt">,</span> N<span class="opt">]),</span>
	    <span class="kwc">erlang</span><span class="opt">:</span><span class="kwb">halt</span><span class="opt">(</span><span class="num">0</span><span class="opt">);</span>
	<span class="opt">{</span>Y<span class="opt">,</span> P<span class="opt">,</span> _N<span class="opt">}</span> <span class="kwa">when</span> P rem <span class="num">10</span> <span class="opt">==</span> <span class="num">0</span> <span class="opt">-&gt;</span>
	    <span class="kwc">io</span><span class="opt">:</span><span class="kwd">fwrite</span><span class="opt">(</span><span class="str">&quot;~w</span><span class="esc">\t</span><span class="str">:~w~n&quot;</span><span class="opt">, [</span>Y<span class="opt">,</span> P<span class="opt">]),</span>
	    <span class="kwd">io_worker</span><span class="opt">();</span>
	<span class="opt">{</span>Y<span class="opt">,</span> _P<span class="opt">,</span> _N<span class="opt">} -&gt;</span>
	    <span class="kwc">io</span><span class="opt">:</span><span class="kwd">fwrite</span><span class="opt">(</span><span class="str">&quot;~w&quot;</span><span class="opt">, [</span>Y<span class="opt">]),</span>
	    <span class="kwd">io_worker</span><span class="opt">()</span>
    <span class="kwa">end</span><span class="opt">.</span>
