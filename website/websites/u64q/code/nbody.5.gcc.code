<span class="com">/* The Computer Language Benchmarks Game</span>
<span class="com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * contributed by Christoph Bauer</span>
<span class="com"> * slightly improved by Mark Hinds</span>
<span class="com"> * SIMDified by Stefan Krause</span>
<span class="com"> * translated in ANSI C by Francesco Massei</span>
<span class="com"> */</span>

<span class="ppc">#include &lt;math.h&gt;</span>
<span class="ppc">#include &lt;stdio.h&gt;</span>
<span class="ppc">#include &lt;stdlib.h&gt;</span>

<span class="ppc">#define pi 3.141592653589793</span>
<span class="ppc">#define solar_mass (4 * pi * pi)</span>
<span class="ppc">#define days_per_year 365.24</span>

<span class="kwc">typedef</span> <span class="kwb">double</span> v2df <span class="kwd">__attribute__</span> (( <span class="kwd">vector_size</span>(<span class="num">2</span>*<span class="kwa">sizeof</span>(<span class="kwb">double</span>)) ));

<span class="ppc">#define lower(_V) (((double*)&amp;_V)[0])</span>

<span class="kwb">struct</span> planet {
    v2df xy;
    v2df z0; <span class="com">/* z and zero */</span>
    v2df vxvy;
    v2df vz00;	<span class="com">/* vz and zero */</span>
    v2df massmass; <span class="com">/* the mass in both components */</span>
};

<span class="ppc">#define NBODIES 5</span>
<span class="kwb">static struct</span> planet bodies[NBODIES] = {
  {                               <span class="com">/* sun */</span>
      {<span class="num">0</span>, <span class="num">0</span>}, {<span class="num">0</span>,<span class="num">0</span>}, {<span class="num">0</span>, <span class="num">0</span>}, {<span class="num">0</span>,<span class="num">0</span>}, {solar_mass,solar_mass}
  },
  {                               <span class="com">/* jupiter */</span>
      {<span class="num">4.84143144246472090e+00</span>,
    -<span class="num">1.16032004402742839e+00</span>},
    {-<span class="num">1.03622044471123109e-01</span>, <span class="num">0</span>},
    {<span class="num">1.66007664274403694e-03</span> * days_per_year,
    <span class="num">7.69901118419740425e-03</span> * days_per_year},
    {-<span class="num">6.90460016972063023e-05</span> * days_per_year,<span class="num">0</span>},
    {<span class="num">9.54791938424326609e-04</span> * solar_mass,<span class="num">9.54791938424326609e-04</span> * solar_mass}
  },
  {                               <span class="com">/* saturn */</span>
      {<span class="num">8.34336671824457987e+00</span>,
    <span class="num">4.12479856412430479e+00</span>},
    {-<span class="num">4.03523417114321381e-01</span>, <span class="num">0</span>},
    {-<span class="num">2.76742510726862411e-03</span> * days_per_year,
    <span class="num">4.99852801234917238e-03</span> * days_per_year},
    {<span class="num">2.30417297573763929e-05</span> * days_per_year,<span class="num">0</span>},
    {<span class="num">2.85885980666130812e-04</span> * solar_mass,<span class="num">2.85885980666130812e-04</span> * solar_mass}
  },
  {                               <span class="com">/* uranus */</span>
      {<span class="num">1.28943695621391310e+01</span>,
    -<span class="num">1.51111514016986312e+01</span>},
    {-<span class="num">2.23307578892655734e-01</span>,<span class="num">0</span>},
    {<span class="num">2.96460137564761618e-03</span> * days_per_year,
    <span class="num">2.37847173959480950e-03</span> * days_per_year},
    {-<span class="num">2.96589568540237556e-05</span> * days_per_year,<span class="num">0</span>},
    {<span class="num">4.36624404335156298e-05</span> * solar_mass,<span class="num">4.36624404335156298e-05</span> * solar_mass}
  },
  {                               <span class="com">/* neptune */</span>
      {<span class="num">1.53796971148509165e+01</span>,
    -<span class="num">2.59193146099879641e+01</span>},
    {<span class="num">1.79258772950371181e-01</span>,<span class="num">0</span>},
    {<span class="num">2.68067772490389322e-03</span> * days_per_year,
    <span class="num">1.62824170038242295e-03</span> * days_per_year},
    {-<span class="num">9.51592254519715870e-05</span> * days_per_year,<span class="num">0</span>},
    {<span class="num">5.15138902046611451e-05</span> * solar_mass,<span class="num">5.15138902046611451e-05</span> * solar_mass}
  }
};

<span class="kwb">static</span> v2df dtdt = {<span class="num">0.01</span>, <span class="num">0.01</span>};

<span class="kwb">static void</span> <span class="kwd">advance</span>(<span class="kwb">int</span> q)
{
  <span class="kwb">struct</span> planet *b, *b2;
  v2df dxdy, dz00, tsquare, distance2, magmag;
  <span class="kwb">int</span> i, j, k;
  <span class="kwa">for</span> (k=<span class="num">1</span>; k&lt;=q; ++k) {
      <span class="kwa">for</span> (i = <span class="num">0</span>; i &lt; NBODIES; ++i) {
        b = &amp;(bodies[i]);
        <span class="kwa">for</span> (j = i + <span class="num">1</span>; j &lt; NBODIES; j++) {
          b2 = &amp;(bodies[j]);
          dxdy = b-&gt;xy - b2-&gt;xy;
          dz00 = b-&gt;z0 - b2-&gt;z0;
          <span class="com">/* dx*dx+dy*dy | dz*dz */</span>
          tsquare = <span class="kwd">__builtin_ia32_haddpd</span>(dxdy*dxdy,dz00*dz00);
          <span class="com">/* dx*dx+dy*dy+dz*dz | dx*dx+dy*dy+dz*dz */</span>
          distance2 = <span class="kwd">__builtin_ia32_haddpd</span>(tsquare,tsquare);
          magmag = dtdt / (<span class="kwd">__builtin_ia32_sqrtpd</span>(distance2)*distance2);
          dxdy *= magmag;
          dz00 *= magmag;
          b-&gt;vxvy -= dxdy * b2-&gt;massmass;
          b-&gt;vz00 -= dz00 * b2-&gt;massmass;
          b2-&gt;vxvy += dxdy * b-&gt;massmass;
          b2-&gt;vz00 += dz00 * b-&gt;massmass;
        }
      }
      <span class="kwa">for</span> (i = <span class="num">0</span>; i &lt; NBODIES; i++) {
        bodies[i].xy += dtdt * bodies[i].vxvy;
        bodies[i].z0 += dtdt * bodies[i].vz00;
      }
    }
}

<span class="kwb">static double</span> <span class="kwd">energy</span>()
{
  v2df e = {<span class="num">0.0</span>, <span class="num">0.0</span>};
  v2df half = {<span class="num">0.5</span>, <span class="num">0.5</span>};
  v2df sq, dxdy, dz00, distance;
  <span class="kwb">struct</span> planet *b, *b2;
  <span class="kwb">int</span> i, j;

  <span class="kwa">for</span> (i = <span class="num">0</span>; i &lt; NBODIES; i++) {
    b = &amp;(bodies[i]);
    <span class="com">/* b-&gt;mass*(vx*vx + vy*vy) | b-&gt;mass*(vz*vz + 0*0) */</span>
    sq = b-&gt;massmass * <span class="kwd">__builtin_ia32_haddpd</span>(b-&gt;vxvy*b-&gt;vxvy, b-&gt;vz00*b-&gt;vz00);
    sq = <span class="kwd">__builtin_ia32_haddpd</span>(sq, sq);
    e += half * sq;
    <span class="kwa">for</span> (j = i + <span class="num">1</span>; j &lt; NBODIES; j++) {
      b2 = &amp;(bodies[j]);
      dxdy = b-&gt;xy - b2-&gt;xy;
      dz00 = b-&gt;z0 - b2-&gt;z0;
      <span class="com">/* b-&gt;mass*(vx*vx + vy*vy) | b-&gt;mass*(vz*vz + 0*0) */</span>
      distance = <span class="kwd">__builtin_ia32_haddpd</span>(dxdy*dxdy, dz00*dz00);
      distance = <span class="kwd">__builtin_ia32_sqrtpd</span>(<span class="kwd">__builtin_ia32_haddpd</span>(distance,distance));
      e -= (b-&gt;massmass * b2-&gt;massmass) / distance;
    }
  }
  <span class="kwa">return</span> <span class="kwd">lower</span>(e);
}

<span class="kwb">static void</span> <span class="kwd">offset_momentum</span>()
{
  v2df pxpy = {<span class="num">0.0</span>, <span class="num">0.0</span>};
  v2df pz00 = {<span class="num">0.0</span>, <span class="num">0.0</span>};
  v2df solar_mass_inv = { <span class="num">1.0</span> / solar_mass, <span class="num">1.0</span> / solar_mass};
  <span class="kwb">int</span> i;
  <span class="kwa">for</span> (i = <span class="num">0</span>; i &lt; NBODIES; i++) {
    pxpy += bodies[i].vxvy * bodies[i].massmass;
    pz00 += bodies[i].vz00 * bodies[i].massmass;
  }
  bodies[<span class="num">0</span>].vxvy = - pxpy * solar_mass_inv;
  bodies[<span class="num">0</span>].vz00 = - pz00 * solar_mass_inv;
}

<span class="kwb">int</span> <span class="kwd">main</span>(<span class="kwb">int</span> argc, <span class="kwb">char</span> ** argv)
{
  <span class="kwd">offset_momentum</span>();
  <span class="kwd">printf</span> (<span class="str">&quot;%.9f</span><span class="esc">\n</span><span class="str">&quot;</span>, <span class="kwd">energy</span>());
  <span class="kwd">advance</span>(<span class="kwd">atoi</span>(argv[<span class="num">1</span>]));
  <span class="kwd">printf</span> (<span class="str">&quot;%.9f</span><span class="esc">\n</span><span class="str">&quot;</span>, <span class="kwd">energy</span>());
  <span class="kwa">return</span> <span class="num">0</span>;
}

