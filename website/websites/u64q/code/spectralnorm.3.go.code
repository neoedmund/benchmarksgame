<span class="com">/* The Computer Language Benchmarks Game</span>
<span class="com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * contributed by K P anonymous</span>
<span class="com"> */</span>

<span class="kwa">package</span> main

<span class="kwa">import</span> (
   <span class="str">&quot;flag&quot;</span>
   <span class="str">&quot;fmt&quot;</span>
   <span class="str">&quot;math&quot;</span>
   <span class="str">&quot;runtime&quot;</span>
   <span class="str">&quot;strconv&quot;</span>
)

<span class="kwa">var</span> n = <span class="num">0</span>    <span class="slc">// var n = flag.Int(&quot;n&quot;, 2000, &quot;count&quot;)</span>
<span class="kwa">var</span> nCPU = <span class="num">4</span> <span class="slc">// var nCPU = flag.Int(&quot;ncpu&quot;, 4, &quot;number of cpus&quot;)</span>

<span class="kwa">type</span> Vec []<span class="kwb">float64</span>

<span class="kwa">func</span> (v Vec) <span class="kwd">Times</span>(ii, n <span class="kwb">int</span>, u Vec, c <span class="kwa">chan</span> <span class="kwb">int</span>) {
   ul := <span class="kwb">len</span>(u)
   <span class="kwa">for</span> i := ii; i &lt; n; i++ {
      <span class="kwa">var</span> vi <span class="kwb">float64</span>
      <span class="kwa">for</span> j := <span class="num">0</span>; j &lt; ul; j++ {
         vi += u[j] / <span class="kwb">float64</span>(((i+j)*(i+j+<span class="num">1</span>)/<span class="num">2</span> + i + <span class="num">1</span>))
      }
      v[i] = vi
   }
   c &lt;- <span class="num">1</span>
}

<span class="kwa">func</span> (v Vec) <span class="kwd">TimesTransp</span>(ii, n <span class="kwb">int</span>, u Vec, c <span class="kwa">chan</span> <span class="kwb">int</span>) {
   ul := <span class="kwb">len</span>(u)
   <span class="kwa">for</span> i := ii; i &lt; n; i++ {
      <span class="kwa">var</span> vi <span class="kwb">float64</span>
      <span class="kwa">for</span> j := <span class="num">0</span>; j &lt; ul; j++ {
         vi += u[j] / <span class="kwb">float64</span>(((j+i)*(j+i+<span class="num">1</span>)/<span class="num">2</span> + j + <span class="num">1</span>))
      }
      v[i] = vi
   }
   c &lt;- <span class="num">1</span>
}

<span class="kwa">func</span> <span class="kwd">wait</span>(c <span class="kwa">chan</span> <span class="kwb">int</span>) {
   <span class="kwa">for</span> i := <span class="num">0</span>; i &lt; nCPU; i++ {
      &lt;-c
   }
}

<span class="kwa">func</span> (v Vec) <span class="kwd">ATimesTransp</span>(u Vec) {
   x := <span class="kwb">make</span>(Vec, <span class="kwb">len</span>(u))
   c := <span class="kwb">make</span>(<span class="kwa">chan</span> <span class="kwb">int</span>, nCPU)
   <span class="kwa">for</span> i := <span class="num">0</span>; i &lt; nCPU; i++ {
      <span class="kwa">go</span> x.<span class="kwd">Times</span>(i*<span class="kwb">len</span>(v)/nCPU, (i+<span class="num">1</span>)*<span class="kwb">len</span>(v)/nCPU, u, c)
   }
   <span class="kwd">wait</span>(c)
   <span class="kwa">for</span> i := <span class="num">0</span>; i &lt; nCPU; i++ {
      <span class="kwa">go</span> v.<span class="kwd">TimesTransp</span>(i*<span class="kwb">len</span>(v)/nCPU, (i+<span class="num">1</span>)*<span class="kwb">len</span>(v)/nCPU, x, c)
   }
   <span class="kwd">wait</span>(c)
}


<span class="kwa">func</span> <span class="kwd">main</span>() {
   flag.<span class="kwd">Parse</span>()
   <span class="kwa">if</span> flag.<span class="kwd">NArg</span>() &gt; <span class="num">0</span> {
      n, _ = strconv.<span class="kwd">Atoi</span>(flag.<span class="kwd">Arg</span>(<span class="num">0</span>))
   }
   runtime.<span class="kwd">GOMAXPROCS</span>(nCPU)

   u := <span class="kwb">make</span>(Vec, n)
   <span class="kwa">for</span> i := <span class="kwa">range</span> u {
      u[i] = <span class="num">1</span>
   }
   v := <span class="kwb">make</span>(Vec, n)
   <span class="kwa">for</span> i := <span class="num">0</span>; i &lt; <span class="num">10</span>; i++ {
      v.<span class="kwd">ATimesTransp</span>(u)
      u.<span class="kwd">ATimesTransp</span>(v)
   }
   <span class="kwa">var</span> vBv, vv <span class="kwb">float64</span>
   <span class="kwa">for</span> i, vi := <span class="kwa">range</span> v {
      vBv += u[i] * vi
      vv += vi * vi
   }
   fmt.<span class="kwd">Printf</span>(<span class="str">&quot;</span><span class="ipl">%0</span><span class="str">.9f</span><span class="esc">\n</span><span class="str">&quot;</span>, math.<span class="kwd">Sqrt</span>(vBv/vv))
}
