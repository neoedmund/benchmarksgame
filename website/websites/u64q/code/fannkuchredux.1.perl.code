<span class="slc"># The Computer Language Benchmarks Game</span>
<span class="slc"># http://benchmarksgame.alioth.debian.org/</span>
<span class="slc"># initial fannkuch port from C by Steve Clark</span>
<span class="slc">#   rewrite by Kalev Soikonen</span>
<span class="slc">#   modified by Kuang-che Wu</span>
<span class="slc">#   modified by David Golden</span>
<span class="slc"># updated for fannkuch-redux by Jonathan DePeri</span>
<span class="slc">#   permutations generated using Mike Pall's approach</span>

<span class="kwa">use</span> integer;

<span class="kwa">sub</span> fannkuchredux {
    <span class="kwc">my</span> (<span class="kwb">$n</span>) = <span class="kwc">shift</span>;
    <span class="kwc">my</span> (<span class="kwb">$m</span>, <span class="kwb">$checksum</span>, <span class="kwb">$maxflips</span>, <span class="kwb">$flips</span>, <span class="kwb">$sign</span>) = (<span class="kwb">$n</span>-<span class="num">1</span>, <span class="num">0</span>, <span class="num">0</span>, <span class="num">0</span>, <span class="num">1</span>);
    <span class="kwc">my</span> (<span class="kwb">$p</span>, <span class="kwb">$q</span>, <span class="kwb">$f</span>, <span class="kwb">$i</span>, <span class="kwb">&#64;count</span>);
    
    <span class="kwb">&#64;count</span> = (<span class="num">0</span>..<span class="kwb">$m</span>); 
    <span class="kwb">$p</span> = <span class="kwc">pack</span> <span class="str">&quot;c*&quot;</span>, <span class="kwb">&#64;count</span>;

    <span class="kwa">do</span> {
        <span class="kwa">if</span> (<span class="kwc">ord</span>(<span class="kwc">substr</span>(<span class="kwb">$p</span>,<span class="num">0</span>))) {
            <span class="kwb">$q</span> = <span class="kwb">$p</span>;
            <span class="kwb">$flips</span> = <span class="num">0</span>;
            <span class="kwa">while</span> (<span class="kwb">$f</span> = <span class="kwc">ord</span>(<span class="kwc">substr</span>(<span class="kwb">$q</span>,<span class="num">0</span>))) {
                <span class="kwb">$flips</span>++;
                <span class="kwc">substr</span>(<span class="kwb">$q</span>, <span class="num">0</span>, <span class="kwb">$f</span>+<span class="num">1</span>, <span class="kwc">reverse</span>(<span class="kwc">substr</span>(<span class="kwb">$q</span>,<span class="num">0</span>,<span class="kwb">$f</span>+<span class="num">1</span>)));
            }
            <span class="kwb">$maxflips</span> = <span class="kwb">$flips</span> <span class="kwa">if</span> (<span class="kwb">$flips</span> &gt; <span class="kwb">$maxflips</span>);
            <span class="kwb">$checksum</span> += (<span class="kwb">$sign</span> * <span class="kwb">$flips</span>);
        }
        
        <span class="kwa">return if</span> (<span class="kwb">$n</span> &lt;= <span class="num">1</span>);
        <span class="kwa">if</span> (<span class="kwb">$sign</span> == <span class="num">1</span>) {
            <span class="kwb">$sign</span> = -<span class="num">1</span>;
            <span class="kwc">substr</span> <span class="kwb">$p</span>, <span class="num">1</span>, <span class="num">0</span>, (<span class="kwc">substr</span>(<span class="kwb">$p</span>,<span class="num">0</span>,<span class="num">1</span>,<span class="str">&quot;&quot;</span>));
        } <span class="kwa">else</span> {
            <span class="kwa">return if</span> (<span class="kwb">$n</span> &lt;= <span class="num">2</span>);
            <span class="kwb">$sign</span> = <span class="num">1</span>;
            <span class="kwc">substr</span> <span class="kwb">$p</span>, <span class="num">1</span>, <span class="num">0</span>, (<span class="kwc">substr</span>(<span class="kwb">$p</span>,<span class="num">2</span>,<span class="num">1</span>,<span class="str">&quot;&quot;</span>));
            <span class="kwa">for</span> <span class="kwb">$i</span> (<span class="num">2</span>..<span class="kwb">$m</span>) {
	            <span class="kwa">if</span> (<span class="kwb">$count</span>[<span class="kwb">$i</span>]) { <span class="kwb">$count</span>[<span class="kwb">$i</span>]--; <span class="kwa">last</span>; }
	            <span class="kwa">return</span> (<span class="kwb">$checksum</span>, <span class="kwb">$maxflips</span>) <span class="kwa">if</span> (<span class="kwb">$i</span> == <span class="kwb">$m</span>);
	            <span class="kwb">$count</span>[<span class="kwb">$i</span>] = <span class="kwb">$i</span>;
	            <span class="kwc">substr</span> <span class="kwb">$p</span>, <span class="kwb">$i</span>+<span class="num">1</span>, <span class="num">0</span>, (<span class="kwc">substr</span>(<span class="kwb">$p</span>,<span class="num">0</span>,<span class="num">1</span>,<span class="str">&quot;&quot;</span>));
            }
        }
    } <span class="kwa">while</span> (<span class="num">1</span>);
}

<span class="kwa">for</span> (<span class="kwc">shift</span>) {
    <span class="kwa">exit</span> -<span class="num">1</span> <span class="kwa">if</span> ((<span class="kwc">not defined</span> <span class="kwb">$_</span>) || <span class="kwb">$_</span> &lt; <span class="num">1</span>);
    <span class="kwc">my</span> (<span class="kwb">$checksum</span>, <span class="kwb">$maxflips</span>) = fannkuchredux(<span class="kwb">$_</span>);
    <span class="kwc">print</span> <span class="str">&quot;</span><span class="ipl">$checksum</span><span class="str"></span><span class="esc">\n</span><span class="str">&quot;</span>;
    <span class="kwc">print</span> <span class="str">&quot;Pfannkuchen(</span><span class="ipl">$_</span><span class="str">) =</span> <span class="ipl">$maxflips</span><span class="str"></span><span class="esc">\n</span><span class="str">&quot;</span>;
}

