<span class="com">/* The Computer Language Benchmarks Game</span>
<span class="com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Isaac Gouy</span>
<span class="com">   transliterated from Rex Kerr's Scala program </span>
<span class="com">*/</span>

<span class="kwa">import</span> CoreFoundation


<span class="kwa">func</span> <span class="kwd">fannkuch</span>(n: <span class="kwb">Int</span>) -&gt; <span class="kwb">Int</span> {
   <span class="kwa">var</span> perm = <span class="kwb">Array</span>(count: n, repeatedValue: <span class="num">0</span>),
      count = <span class="kwb">Array</span>(count: n, repeatedValue: <span class="num">0</span>)

   <span class="kwa">var</span> perm1 = <span class="kwb">Array</span>(count: n, repeatedValue: <span class="num">0</span>)
   <span class="kwa">for</span> j <span class="kwa">in</span> <span class="num">0</span>...n-<span class="num">1</span> { perm1[j] = j }

   <span class="kwa">var</span> f = <span class="num">0</span>, i = <span class="num">0</span>, k = <span class="num">0</span>, r = <span class="num">0</span>, flips = <span class="num">0</span>, nperm = <span class="num">0</span>, checksum = <span class="num">0</span>

   r = n
   <span class="kwa">while</span> r &gt; <span class="num">0</span> {
      i = <span class="num">0</span>
      <span class="kwa">while</span> r != <span class="num">1</span> { count[r-<span class="num">1</span>] = r; r -= <span class="num">1</span> }
      <span class="kwa">while</span> i &lt; n { perm[i] = perm1[i]; i += <span class="num">1</span> }

      <span class="slc">// Count flips and update max  and checksum</span>
      f = <span class="num">0</span>
      k = perm[<span class="num">0</span>]
      <span class="kwa">while</span> k != <span class="num">0</span> {
         i = <span class="num">0</span>
         <span class="kwa">while</span> <span class="num">2</span>*i &lt; k {
            <span class="kwa">let</span> t = perm[i]; perm[i] = perm[k-i]; perm[k-i] = t
            i += <span class="num">1</span>
         }
         k = perm[<span class="num">0</span>]
         f += <span class="num">1</span>
      }
      <span class="kwa">if</span> f&gt;flips { flips = f }
      <span class="kwa">if</span> (nperm&amp;<span class="num">0x1</span>)==<span class="num">0</span> { checksum += f } <span class="kwa">else</span> { checksum -= f }

      <span class="slc">// Use incremental change to generate another permutation</span>
      <span class="kwa">var</span> go = <span class="kwa">true</span>
      <span class="kwa">while</span> go {
         <span class="kwa">if</span> r == n {
            <span class="kwd">print</span>(checksum)
            <span class="kwa">return</span> flips
         }
         <span class="kwa">let</span> p0 = perm1[<span class="num">0</span>]
         i = <span class="num">0</span>
         <span class="kwa">while</span> i &lt; r {
            <span class="kwa">let</span> j = i+<span class="num">1</span>
            perm1[i] = perm1[j]
            i = j
         }
         perm1[r] = p0

         count[r] -= <span class="num">1</span>
         <span class="kwa">if</span> count[r] &gt; <span class="num">0</span> { go = <span class="kwa">false</span> } <span class="kwa">else</span> { r += <span class="num">1</span> }
      }
      nperm += <span class="num">1</span>
   }
   <span class="kwa">return</span> flips
}


<span class="kwa">let</span> n: <span class="kwb">Int</span> = <span class="kwb">Int</span>(Process.arguments[<span class="num">1</span>])!
<span class="kwd">print</span>(<span class="str">&quot;Pfannkuchen(\(n)) = \(fannkuch(n))&quot;</span>)


