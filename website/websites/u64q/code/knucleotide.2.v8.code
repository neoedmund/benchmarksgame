<span class="com">/* The Computer Language Benchmarks Game</span>
<span class="com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   Contributed by Jesse Millikan</span>
<span class="com">   Modified by Matt Baker</span>
<span class="com">*/</span>

<span class="str">'use strict'</span>;

<span class="kwa">function</span> <span class="kwd">frequency</span>(seq, length){
  <span class="kwa">var</span> freq = {},
      n = seq.length - length + <span class="num">1</span>,
      sub, i;

  <span class="kwa">for</span>(i = <span class="num">0</span>; i &lt; n; i++){
    sub = seq.<span class="kwd">substr</span>(i, length);
    freq[sub] = (freq[sub] || <span class="num">0</span>) + <span class="num">1</span>;
  }

  <span class="kwa">return</span> freq;
}


<span class="kwa">function</span> <span class="kwd">sort</span>(seq, length){
  <span class="kwa">var</span> f = <span class="kwd">frequency</span>(seq, length),
      keys = Object.<span class="kwd">keys</span>(f), 
      n = seq.length - length + <span class="num">1</span>,
      i;

  keys.<span class="kwd">sort</span>(<span class="kwa">function</span>(a, b){ <span class="kwa">return</span> f[b] - f[a]; });

  <span class="kwa">for</span>(i <span class="kwa">in</span> keys) {
    <span class="kwd">print</span>(keys[i], (f[keys[i]] * <span class="num">100</span> / n).<span class="kwd">toFixed</span>(<span class="num">3</span>));
  }
  
  <span class="kwd">print</span>();
}


<span class="kwa">function</span> <span class="kwd">find</span>(seq, s){
  <span class="kwa">var</span> f = <span class="kwd">frequency</span>(seq, s.length);
  <span class="kwd">print</span>((f[s] || <span class="num">0</span>) + <span class="str">&quot;</span><span class="esc">\t</span><span class="str">&quot;</span> + s);
}


<span class="kwa">function</span> <span class="kwd">readSequence</span>() {
  <span class="kwa">var</span> lines = [],
      l;

  <span class="kwa">while</span>(<span class="kwd">readline</span>().<span class="kwd">substr</span>(<span class="num">0</span>, <span class="num">6</span>) !== <span class="str">'&gt;THREE'</span>); <span class="slc">// no body</span>

  <span class="kwa">while</span>((l = <span class="kwd">readline</span>()) &amp;&amp; l[<span class="num">0</span>] !== <span class="str">'&gt;'</span>) {
    lines.<span class="kwd">push</span>(l);
  }

  <span class="kwa">return</span> lines.<span class="kwd">join</span>(<span class="str">''</span>).<span class="kwd">toUpperCase</span>();
}


<span class="kwa">var</span> seq = <span class="kwd">readSequence</span>();

<span class="kwd">sort</span>(seq, <span class="num">1</span>);
<span class="kwd">sort</span>(seq, <span class="num">2</span>);

<span class="kwd">find</span>(seq, <span class="str">&quot;GGT&quot;</span>);
<span class="kwd">find</span>(seq, <span class="str">&quot;GGTA&quot;</span>);
<span class="kwd">find</span>(seq, <span class="str">&quot;GGTATT&quot;</span>);
<span class="kwd">find</span>(seq, <span class="str">&quot;GGTATTTTAATT&quot;</span>);
<span class="kwd">find</span>(seq, <span class="str">&quot;GGTATTTTAATTTATAGT&quot;</span>);
