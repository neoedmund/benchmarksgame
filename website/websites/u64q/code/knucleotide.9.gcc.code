<span class="slc">// The Computer Language Benchmarks Game</span>
<span class="slc">// http://benchmarksgame.alioth.debian.org/</span>
<span class="slc">//</span>
<span class="slc">// Contributed by Jeremy Zerfas</span>

<span class="slc">// This controls the initial size used for the hash tables.</span>
<span class="ppc">#define INITIAL_HASH_TABLE_SIZE 64</span>
<span class="slc">// This controls the maximum length for each set of nucleotide sequence</span>
<span class="slc">// frequencies and each nucleotide sequence count output by this program.</span>
<span class="ppc">#define MAXIMUM_OUTPUT_LENGTH 4096</span>

<span class="ppc">#include &lt;stdint.h&gt;</span>
<span class="ppc">#include &lt;stdlib.h&gt;</span>
<span class="ppc">#include &lt;stdio.h&gt;</span>
<span class="ppc">#include &lt;string.h&gt;</span>

<span class="kwc">typedef</span> <span class="kwb">struct</span> ht_ht ht_ht;
<span class="kwc">typedef</span> <span class="kwb">struct</span> ht_node ht_node;

<span class="slc">// intptr_t should be the native integer type on most sane systems.</span>
<span class="kwc">typedef</span> <span class="kwb">intptr_t</span> intnative_t;


<span class="slc">// The hash table implementation provided by simple_hash3.h doesn't</span>
<span class="slc">// automatically grow hash tables (although the chained linked lists can grow</span>
<span class="slc">// infinitely long) and it also doesn't provide any function for growing a hash</span>
<span class="slc">// table so we create our own function for checking the hash table density and</span>
<span class="slc">// growing the hash table if necessary.</span>
<span class="kwb">static void</span> <span class="kwd">check_Hash_Table_Density_And_Grow_If_Necessary</span>(
  ht_ht ** <span class="kwb">const</span> hash_Table_To_Check){
   <span class="kwa">if</span>(<span class="kwd">ht_count</span>(*hash_Table_To_Check) &gt; (*hash_Table_To_Check)-&gt;size){
      <span class="slc">// Create a new grown_Hash_Table which is at least four times the size</span>
      <span class="slc">// of the current hash_Table_To_Check.</span>
      ht_ht * grown_Hash_Table=<span class="kwd">ht_create</span>(<span class="num">4</span> * (*hash_Table_To_Check)-&gt;size);

      <span class="slc">// Copy all the ht_nodes from the current hash_Table_To_Check to the new</span>
      <span class="slc">// grown_Hash_Table.</span>
      ht_node *HT_Node_Pointer=<span class="kwd">ht_first</span>(*hash_Table_To_Check);
      <span class="kwa">for</span>(intnative_t i=<span class="num">0</span>; i&lt;<span class="kwd">ht_count</span>(*hash_Table_To_Check); i++){
         <span class="kwd">ht_find_new</span>(grown_Hash_Table, HT_Node_Pointer-&gt;key)-&gt;val=
           HT_Node_Pointer-&gt;val;
         HT_Node_Pointer=<span class="kwd">ht_next</span>(*hash_Table_To_Check);
      }

      <span class="slc">// Destroy the old hash_Table_To_Check and update its pointer to point</span>
      <span class="slc">// to the new grown_Hash_Table.</span>
      <span class="kwd">ht_destroy</span>(*hash_Table_To_Check);
      *hash_Table_To_Check=grown_Hash_Table;
   }
}


<span class="slc">// Function to use when sorting ht_nodes with qsort() later. ht_nodes with</span>
<span class="slc">// larger values will come first and in cases of identical values then ht_nodes</span>
<span class="slc">// with smaller keys will come first.</span>
<span class="kwb">static int</span> <span class="kwd">HT_Node_Compare</span>(<span class="kwb">const void</span> * <span class="kwb">const</span> uncasted_Left_HT_Node,
  <span class="kwb">const void</span> * <span class="kwb">const</span> uncasted_Right_HT_Node){
   <span class="kwb">const</span> ht_node * left_HT_Node=uncasted_Left_HT_Node,
     * right_HT_Node=uncasted_Right_HT_Node;

   <span class="slc">// Sort based on ht_node values.</span>
   <span class="kwa">if</span>(left_HT_Node-&gt;val &lt; right_HT_Node-&gt;val) <span class="kwa">return</span> <span class="num">1</span>;
   <span class="kwa">if</span>(left_HT_Node-&gt;val &gt; right_HT_Node-&gt;val) <span class="kwa">return</span> -<span class="num">1</span>;

   <span class="slc">// If we got here then both items have the same value so then sort based on</span>
   <span class="slc">// key.</span>
   <span class="kwa">if</span>(left_HT_Node-&gt;key &gt; right_HT_Node-&gt;key)
      <span class="kwa">return</span> <span class="num">1</span>;
   <span class="kwa">else</span>
      <span class="kwa">return</span> -<span class="num">1</span>;
}


<span class="slc">// Macro to convert a nucleotide character to a code. Note that upper and lower</span>
<span class="slc">// case ASCII letters only differ in the fifth bit from the right and we only</span>
<span class="slc">// need the three least significant bits to differentiate the letters 'A', 'C',</span>
<span class="slc">// 'G', and 'T'. Spaces in this array/string will never be used as long as</span>
<span class="slc">// characters other than 'A', 'C', 'G', and 'T' aren't used.</span>
<span class="ppc">#define code_For_Nucleotide(nucleotide) (</span><span class="pps">&quot; \0 \1\3  \2&quot;</span><span class="ppc">[nucleotide &amp; 0x7])</span>


<span class="slc">// And one more macro to convert the codes back to nucleotide characters.</span>
<span class="ppc">#define nucleotide_For_Code(code) (</span><span class="pps">&quot;ACGT&quot;</span><span class="ppc">[code &amp; 0x3])</span>


<span class="slc">// Generate frequences for all nucleotide sequences in sequences that are of</span>
<span class="slc">// length sequence_Length and then save it to output.</span>
<span class="kwb">static void</span> <span class="kwd">generate_Frequencies_For_Sequences</span>(<span class="kwb">const char</span> * <span class="kwb">const</span> sequences,
  <span class="kwb">const</span> intnative_t sequences_Length, intnative_t sequence_Length,
  <span class="kwb">char</span> * <span class="kwb">const</span> output){
   ht_ht * hash_Table=<span class="kwd">ht_create</span>(INITIAL_HASH_TABLE_SIZE);

   <span class="slc">// Add all the sequences of sequence_Length to hash_Table.</span>
   <span class="kwb">uint64_t</span> key=<span class="num">0</span>;
   <span class="kwa">for</span>(intnative_t i=<span class="num">0</span>; i&lt;sequences_Length; i++){
      <span class="kwb">const uint64_t</span> mask=((<span class="kwb">uint64_t</span>)<span class="num">1</span>&lt;&lt;<span class="num">2</span>*sequence_Length)-<span class="num">1</span>;
      key=(key&lt;&lt;<span class="num">2</span> &amp; mask) | sequences[i];
      <span class="kwa">if</span>(i&gt;=sequence_Length-<span class="num">1</span>){
         <span class="kwd">ht_find_new</span>(hash_Table, key)-&gt;val++;
         <span class="kwd">check_Hash_Table_Density_And_Grow_If_Necessary</span>(&amp;hash_Table);
      }
   }

   <span class="slc">// Create an array of ht_nodes from hash_Table.</span>
   intnative_t HT_Nodes_Array_Size=hash_Table-&gt;items;
   ht_node * HT_Nodes_Array=<span class="kwd">malloc</span>(HT_Nodes_Array_Size*<span class="kwa">sizeof</span>(ht_node));
   ht_node * HT_Node_Pointer=<span class="kwd">ht_first</span>(hash_Table);
   <span class="kwa">for</span>(intnative_t i=<span class="num">0</span>; i&lt;HT_Nodes_Array_Size; i++){
      HT_Nodes_Array[i]=*HT_Node_Pointer;
      HT_Node_Pointer=<span class="kwd">ht_next</span>(hash_Table);
   }

   <span class="kwd">ht_destroy</span>(hash_Table);

   <span class="slc">// Sort HT_Nodes_Array.</span>
   <span class="kwd">qsort</span>(HT_Nodes_Array, HT_Nodes_Array_Size, <span class="kwa">sizeof</span>(ht_node),
     &amp;HT_Node_Compare);

   <span class="slc">// Print the frequencies for each nucleotide sequence.</span>
   <span class="kwa">for</span>(intnative_t output_Position=<span class="num">0</span>, i=<span class="num">0</span>; i&lt;HT_Nodes_Array_Size; i++){
      <span class="kwb">char</span> nucleotide_Sequence[sequence_Length+<span class="num">1</span>];
      <span class="kwa">for</span>(intnative_t j=sequence_Length-<span class="num">1</span>; j&gt;-<span class="num">1</span>; j--){
         nucleotide_Sequence[j]=<span class="kwd">nucleotide_For_Code</span>(HT_Nodes_Array[i].key);
         HT_Nodes_Array[i].key&gt;&gt;=<span class="num">2</span>;
      }
      nucleotide_Sequence[sequence_Length]=<span class="str">'\0'</span>;

      <span class="slc">// Output the frequency for nucleotide_Sequence to output.</span>
      output_Position+=<span class="kwd">snprintf</span>(output+output_Position,
        MAXIMUM_OUTPUT_LENGTH-output_Position, <span class="str">&quot;%s %.3f</span><span class="esc">\n</span><span class="str">&quot;</span>,
        nucleotide_Sequence, <span class="num">100.0</span>f*HT_Nodes_Array[i].val/sequences_Length);
   }

   <span class="kwd">free</span>(HT_Nodes_Array);
}


<span class="slc">// Generate a count for the number of times nucleotide_Sequence appears in</span>
<span class="slc">// sequences and then save it to output.</span>
<span class="kwb">static void</span> <span class="kwd">generate_Count_For_Sequence</span>(<span class="kwb">const char</span> * <span class="kwb">const</span> sequences,
  <span class="kwb">const</span> intnative_t sequences_Length, <span class="kwb">const char</span> * <span class="kwb">const</span> nucleotide_Sequence,
  <span class="kwb">char</span> * <span class="kwb">const</span> output){
   <span class="kwb">const</span> intnative_t nucleotide_Sequence_Length=<span class="kwd">strlen</span>(nucleotide_Sequence);

   ht_ht * hash_Table=<span class="kwd">ht_create</span>(INITIAL_HASH_TABLE_SIZE);

   <span class="kwb">uint64_t</span> key=<span class="num">0</span>;
   <span class="kwa">for</span>(intnative_t i=<span class="num">0</span>; i&lt;sequences_Length; i++){
      <span class="kwb">const uint64_t</span> mask=((<span class="kwb">uint64_t</span>)<span class="num">1</span>&lt;&lt;<span class="num">2</span>*nucleotide_Sequence_Length)-<span class="num">1</span>;
      key=(key&lt;&lt;<span class="num">2</span> &amp; mask) | sequences[i];
      <span class="kwa">if</span>(i&gt;=nucleotide_Sequence_Length){
         <span class="kwd">ht_find_new</span>(hash_Table, key)-&gt;val++;
         <span class="kwd">check_Hash_Table_Density_And_Grow_If_Necessary</span>(&amp;hash_Table);
      }
   }

   <span class="slc">// Generate key for the sequence.</span>
   key=<span class="num">0</span>;
   <span class="kwa">for</span>(intnative_t i=<span class="num">0</span>; i&lt;nucleotide_Sequence_Length; i++)
      key=(key&lt;&lt;<span class="num">2</span>) | <span class="kwd">code_For_Nucleotide</span>(nucleotide_Sequence[i]);

   <span class="slc">// Output the count for nucleotide_Sequence to output.</span>
   intnative_t count=<span class="kwd">ht_find</span>(hash_Table, key)-&gt;val;
   <span class="kwd">snprintf</span>(output, MAXIMUM_OUTPUT_LENGTH, <span class="str">&quot;%jd</span><span class="esc">\t</span><span class="str">%s&quot;</span>, (<span class="kwb">intmax_t</span>)count,
     nucleotide_Sequence);

   <span class="kwd">ht_destroy</span>(hash_Table);
}


<span class="kwb">int</span> <span class="kwd">main</span>(){
   <span class="kwb">char</span> buffer[<span class="num">4096</span>];

   <span class="slc">// Find the start of the third nucleotide sequence.</span>
   <span class="kwa">while</span>(<span class="kwd">fgets</span>(buffer, <span class="kwa">sizeof</span>(buffer), stdin) &amp;&amp; <span class="kwd">memcmp</span>(<span class="str">&quot;&gt;THREE&quot;</span>, buffer,
     <span class="kwa">sizeof</span>(<span class="str">&quot;&gt;THREE&quot;</span>)-<span class="num">1</span>));

   <span class="slc">// Start with 1 MB of storage for reading in the nucleotide sequence and</span>
   <span class="slc">// grow exponentially.</span>
   intnative_t nucleotide_Sequence_Capacity=<span class="num">1048576</span>;
   intnative_t nucleotide_Sequence_Size=<span class="num">0</span>;
   <span class="kwb">char</span> * nucleotide_Sequence=<span class="kwd">malloc</span>(nucleotide_Sequence_Capacity);

   <span class="slc">// Start reading and encoding the third nucleotide sequence.</span>
   <span class="kwa">while</span>(<span class="kwd">fgets</span>(buffer, <span class="kwa">sizeof</span>(buffer), stdin) &amp;&amp; buffer[<span class="num">0</span>]!=<span class="str">'&gt;'</span>){
      <span class="kwa">for</span>(intnative_t i=<span class="num">0</span>; buffer[i]!=<span class="str">'\0'</span>; i++){
         <span class="kwa">if</span>(buffer[i]!=<span class="str">'</span><span class="esc">\n</span><span class="str">'</span>)
            nucleotide_Sequence[nucleotide_Sequence_Size++]=
              <span class="kwd">code_For_Nucleotide</span>(buffer[i]);
      }

      <span class="slc">// Make sure we still have enough memory allocated for any potential</span>
      <span class="slc">// nucleotides in the next line.</span>
      <span class="kwa">if</span>(nucleotide_Sequence_Capacity-nucleotide_Sequence_Size &lt;
        <span class="kwa">sizeof</span>(buffer)){
         nucleotide_Sequence_Capacity*=<span class="num">2</span>;
         nucleotide_Sequence=<span class="kwd">realloc</span>(nucleotide_Sequence,
           nucleotide_Sequence_Capacity);
      }
   }

   <span class="slc">// Free up any leftover memory.</span>
   nucleotide_Sequence=<span class="kwd">realloc</span>(nucleotide_Sequence, nucleotide_Sequence_Size);

   <span class="kwb">char</span> output_Buffer[<span class="num">7</span>][MAXIMUM_OUTPUT_LENGTH];

   <span class="slc">// Do the following functions in parallel.</span>
   <span class="ppc">#pragma omp parallel sections</span>
   {
      <span class="ppc">#pragma omp section</span>
      { <span class="kwd">generate_Frequencies_For_Sequences</span>(nucleotide_Sequence,
        nucleotide_Sequence_Size, <span class="num">1</span>, output_Buffer[<span class="num">0</span>]); }
      <span class="ppc">#pragma omp section</span>
      { <span class="kwd">generate_Frequencies_For_Sequences</span>(nucleotide_Sequence,
        nucleotide_Sequence_Size, <span class="num">2</span>, output_Buffer[<span class="num">1</span>]); }

      <span class="ppc">#pragma omp section</span>
      { <span class="kwd">generate_Count_For_Sequence</span>(nucleotide_Sequence,
        nucleotide_Sequence_Size, <span class="str">&quot;GGT&quot;</span>, output_Buffer[<span class="num">2</span>]); }
      <span class="ppc">#pragma omp section</span>
      { <span class="kwd">generate_Count_For_Sequence</span>(nucleotide_Sequence,
        nucleotide_Sequence_Size, <span class="str">&quot;GGTA&quot;</span>, output_Buffer[<span class="num">3</span>]); }
      <span class="ppc">#pragma omp section</span>
      { <span class="kwd">generate_Count_For_Sequence</span>(nucleotide_Sequence,
        nucleotide_Sequence_Size, <span class="str">&quot;GGTATT&quot;</span>, output_Buffer[<span class="num">4</span>]); }
      <span class="ppc">#pragma omp section</span>
      { <span class="kwd">generate_Count_For_Sequence</span>(nucleotide_Sequence,
        nucleotide_Sequence_Size, <span class="str">&quot;GGTATTTTAATT&quot;</span>, output_Buffer[<span class="num">5</span>]); }
      <span class="ppc">#pragma omp section</span>
      { <span class="kwd">generate_Count_For_Sequence</span>(nucleotide_Sequence,
        nucleotide_Sequence_Size, <span class="str">&quot;GGTATTTTAATTTATAGT&quot;</span>, output_Buffer[<span class="num">6</span>]); }
   }

   <span class="kwa">for</span>(intnative_t i=<span class="num">0</span>; i&lt;<span class="num">7</span>; <span class="kwd">printf</span>(<span class="str">&quot;%s</span><span class="esc">\n</span><span class="str">&quot;</span>, output_Buffer[i++]));

   <span class="kwd">free</span>(nucleotide_Sequence);

   <span class="kwa">return</span> <span class="num">0</span>;
}
