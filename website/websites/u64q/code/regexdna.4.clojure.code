<span class="slc">;;   The Computer Language Benchmarks Game</span>
<span class="slc">;;   http://benchmarksgame.alioth.debian.org/</span>
<span class="slc">;;</span>
<span class="slc">;; Contributed by: Alex Miller</span>

(ns regexdna
  (:import [java.io FileInputStream FileDescriptor]
           [java.nio ByteBuffer]
           [java.util.regex Pattern])
  (:gen-class))

(set! *warn-on-reflection* true)
(set! *unchecked-math* true)

(<span class="kwa">defn</span> -main [&amp; args]
  (<span class="kwc">let</span> [cin (-&gt; FileDescriptor/in FileInputStream. .getChannel)
        bb (-&gt; cin .size int ByteBuffer/allocate)]
    (.read cin bb)
    (<span class="kwc">let</span> [input (String. (.array bb) <span class="str">&quot;US-ASCII&quot;</span>)
          sequence (.replaceAll input <span class="str">&quot;&gt;.*</span><span class="esc">\n</span><span class="str">|</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="str">&quot;&quot;</span>)
          replacements (array-map <span class="str">&quot;B&quot;</span> <span class="str">&quot;(c|g|t)&quot;</span>
                                  <span class="str">&quot;D&quot;</span> <span class="str">&quot;(a|g|t)&quot;</span>
                                  <span class="str">&quot;H&quot;</span> <span class="str">&quot;(a|c|t)&quot;</span>
                                  <span class="str">&quot;K&quot;</span> <span class="str">&quot;(g|t)&quot;</span>
                                  <span class="str">&quot;M&quot;</span> <span class="str">&quot;(a|c)&quot;</span>
                                  <span class="str">&quot;N&quot;</span> <span class="str">&quot;(a|c|g|t)&quot;</span>
                                  <span class="str">&quot;R&quot;</span> <span class="str">&quot;(a|g)&quot;</span>
                                  <span class="str">&quot;S&quot;</span>, <span class="str">&quot;(c|g)&quot;</span>
                                  <span class="str">&quot;V&quot;</span>, <span class="str">&quot;(a|c|g)&quot;</span>
                                  <span class="str">&quot;W&quot;</span>, <span class="str">&quot;(a|t)&quot;</span>
                                  <span class="str">&quot;Y&quot;</span>, <span class="str">&quot;(c|t)&quot;</span>)
          buflen (future-call #(<span class="kwc">let</span> [buf (StringBuffer.)
                                     m (.matcher (Pattern/compile <span class="str">&quot;[WYKMSRBDVHN]&quot;</span>) sequence)]
                                 (<span class="kwb">loop</span> []
                                   (<span class="kwc">when</span> (.find m)
                                     (.appendReplacement m buf <span class="str">&quot;&quot;</span>)
                                     (.append buf (get replacements (.group m)))
                                     (<span class="kwb">recur</span>)))
                                 (.appendTail m buf)
                                 (.length buf)))
          variants [<span class="str">&quot;agggtaaa|tttaccct&quot;</span>, <span class="str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span>,
                    <span class="str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span>, <span class="str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span>,
                    <span class="str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span>, <span class="str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span>,
                    <span class="str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span>, <span class="str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span>,
                    <span class="str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span>]
          match-fn (<span class="kwa">fn</span> [^String v]
                     (<span class="kwc">let</span> [m (.matcher (Pattern/compile v) sequence)]
                       (<span class="kwb">loop</span> [c <span class="num">0</span>]
                         (<span class="kwc">if</span> (.find m)
                           (<span class="kwb">recur</span> (inc c))
                           [v c]))))
          results (pmap match-fn variants)]
      (doall (<span class="kwb">for</span> [[variant c] results] (println variant c)))
      (println)
      (println (.length input))
      (println (.length sequence))
      (println &#64;buflen)
      (shutdown-agents))))
