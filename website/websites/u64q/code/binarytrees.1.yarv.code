<span class="slc"># The Computer Language Benchmarks Game</span>
<span class="slc"># http://benchmarksgame.alioth.debian.org</span>
<span class="slc">#</span>
<span class="slc"># contributed by Jesse Millikan</span>
<span class="slc"># Modified by Wesley Moxam</span>


<span class="kwa">def</span> <span class="kwd">item_check</span>(left, item, right<span class="opt">)</span>
  <span class="kwa">return</span> item <span class="kwa">if</span> left.<span class="kwa">nil</span>?
  item + <span class="kwd">item_check</span>(*left<span class="opt">)</span> - <span class="kwd">item_check</span>(*right<span class="opt">)</span>
<span class="kwa">end</span>

<span class="kwa">def</span> <span class="kwd">bottom_up_tree</span>(item, depth<span class="opt">)</span>
  <span class="kwa">return</span> [<span class="kwa">nil</span>, item, <span class="kwa">nil</span>] <span class="kwa">unless</span> depth &gt; <span class="num">0</span>
  item_item = <span class="num">2</span> * item
  depth -= <span class="num">1</span>
  [<span class="kwd">bottom_up_tree</span>(item_item - <span class="num">1</span>, depth<span class="opt">)</span>, item, <span class="kwd">bottom_up_tree</span>(item_item, depth<span class="opt">)</span>]
<span class="kwa">end</span>

max_depth = <span class="kwc">ARGV</span>[<span class="num">0</span>].to_i
min_depth = <span class="num">4</span>

max_depth = min_depth + <span class="num">2</span> <span class="kwa">if</span> min_depth + <span class="num">2</span> &gt; max_depth

stretch_depth = max_depth + <span class="num">1</span>
stretch_tree = <span class="kwd">bottom_up_tree</span>(<span class="num">0</span>, stretch_depth<span class="opt">)</span>

puts <span class="str">&quot;stretch tree of depth</span> <span class="ipl">#{stretch_depth}</span><span class="str"></span><span class="esc">\t</span> <span class="str">check:</span> <span class="ipl">#{item_check(*stretch_tree)}</span><span class="str">&quot;</span>
stretch_tree = <span class="kwa">nil</span>

long_lived_tree = <span class="kwd">bottom_up_tree</span>(<span class="num">0</span>, max_depth<span class="opt">)</span>

min_depth.<span class="kwd">step</span>(max_depth + <span class="num">1</span>, <span class="num">2</span><span class="opt">)</span> <span class="kwa">do</span> |depth|
  iterations = <span class="num">2</span>**(max_depth - depth + min_depth<span class="opt">)</span>

  check = <span class="num">0</span>

  <span class="kwa">for</span> i <span class="kwa">in</span> <span class="num">1</span>..iterations
    temp_tree = <span class="kwd">bottom_up_tree</span>(i, depth<span class="opt">)</span>
    check += <span class="kwd">item_check</span>(*temp_tree<span class="opt">)</span>

    temp_tree = <span class="kwd">bottom_up_tree</span>(-i, depth<span class="opt">)</span>
    check += <span class="kwd">item_check</span>(*temp_tree<span class="opt">)</span>
  <span class="kwa">end</span>

  puts <span class="str">&quot;</span><span class="ipl">#{iterations * 2}</span><span class="str"></span><span class="esc">\t</span> <span class="str">trees of depth</span> <span class="ipl">#{depth}</span><span class="str"></span><span class="esc">\t</span> <span class="str">check:</span> <span class="ipl">#{check}</span><span class="str">&quot;</span>
<span class="kwa">end</span>

puts <span class="str">&quot;long lived tree of depth</span> <span class="ipl">#{max_depth}</span><span class="str"></span><span class="esc">\t</span> <span class="str">check:</span> <span class="ipl">#{item_check(*long_lived_tree)}</span><span class="str">&quot;</span>

