<span class="slc">% The Computer Language Benchmarks Game</span>
<span class="slc">% http://benchmarksgame.alioth.debian.org/</span>

<span class="slc">%%% contributed by Tom Plick</span>
<span class="slc">%%% based on Python entry by Dominique Wahli</span>

<span class="opt">-</span><span class="kwd">module</span><span class="opt">(</span>regexdna<span class="opt">).</span>

<span class="opt">-</span><span class="kwd">compile</span><span class="opt">(</span>inline<span class="opt">).</span>
<span class="opt">-</span><span class="kwd">compile</span><span class="opt">({</span>inline_size<span class="opt">,</span> <span class="num">10000</span><span class="opt">}).</span>

<span class="opt">-</span><span class="kwd">export</span><span class="opt">([</span>main<span class="opt">/</span><span class="num">1</span><span class="opt">]).</span>


<span class="slc">% readall() reads all data from standard input.</span>

<span class="kwd">readall</span><span class="opt">() -&gt;</span>
    <span class="kwd">readall</span><span class="opt">([]).</span>
<span class="kwd">readall</span><span class="opt">(</span>Acc<span class="opt">) -&gt;</span>
    In <span class="opt">=</span> <span class="kwc">io</span><span class="opt">:</span><span class="kwd">get_chars</span><span class="opt">(</span><span class="str">''</span><span class="opt">,</span> <span class="num">10000</span><span class="opt">),</span>
    <span class="kwa">case</span> In <span class="kwa">of</span> 
        <span class="str">'eof'</span>  <span class="opt">-&gt;</span>  <span class="kwc">lists</span><span class="opt">:</span><span class="kwd">append</span><span class="opt">(</span><span class="kwc">lists</span><span class="opt">:</span><span class="kwd">reverse</span><span class="opt">(</span>Acc<span class="opt">)) ;</span>
        _  <span class="opt">-&gt;</span>  <span class="kwd">readall</span><span class="opt">([</span>In <span class="opt">|</span> Acc<span class="opt">])</span>
    <span class="kwa">end</span><span class="opt">.</span>



<span class="kwd">exprs</span><span class="opt">() -&gt;</span>
   <span class="opt">[</span><span class="str">&quot;agggtaaa|tttaccct&quot;</span><span class="opt">,</span>
    <span class="str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span><span class="opt">,</span>
    <span class="str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span><span class="opt">,</span>
    <span class="str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span><span class="opt">,</span>
    <span class="str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span><span class="opt">,</span>
    <span class="str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span><span class="opt">,</span>
    <span class="str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span><span class="opt">,</span>
    <span class="str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span><span class="opt">,</span>
    <span class="str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span><span class="opt">].</span>

<span class="kwd">substExprs</span><span class="opt">() -&gt;</span>
    <span class="opt">[{</span><span class="str">&quot;B&quot;</span><span class="opt">,</span> <span class="str">&quot;(c|g|t)&quot;</span><span class="opt">}, {</span><span class="str">&quot;D&quot;</span><span class="opt">,</span> <span class="str">&quot;(a|g|t)&quot;</span><span class="opt">},   {</span><span class="str">&quot;H&quot;</span><span class="opt">,</span> <span class="str">&quot;(a|c|t)&quot;</span><span class="opt">}, {</span><span class="str">&quot;K&quot;</span><span class="opt">,</span> <span class="str">&quot;(g|t)&quot;</span><span class="opt">},</span>
     <span class="opt">{</span><span class="str">&quot;M&quot;</span><span class="opt">,</span> <span class="str">&quot;(a|c)&quot;</span><span class="opt">},   {</span><span class="str">&quot;N&quot;</span><span class="opt">,</span> <span class="str">&quot;(a|c|g|t)&quot;</span><span class="opt">}, {</span><span class="str">&quot;R&quot;</span><span class="opt">,</span> <span class="str">&quot;(a|g)&quot;</span><span class="opt">},   {</span><span class="str">&quot;S&quot;</span><span class="opt">,</span> <span class="str">&quot;(c|g)&quot;</span><span class="opt">},</span>
     <span class="opt">{</span><span class="str">&quot;V&quot;</span><span class="opt">,</span> <span class="str">&quot;(a|c|g)&quot;</span><span class="opt">}, {</span><span class="str">&quot;W&quot;</span><span class="opt">,</span> <span class="str">&quot;(a|t)&quot;</span><span class="opt">},     {</span><span class="str">&quot;Y&quot;</span><span class="opt">,</span> <span class="str">&quot;(c|t)&quot;</span><span class="opt">}].</span>



<span class="kwd">numberOfMatches</span><span class="opt">(</span>String<span class="opt">,</span> Regex<span class="opt">) -&gt;</span>
    <span class="opt">{</span>match<span class="opt">,</span> Matches<span class="opt">} =</span> <span class="kwc">regexp</span><span class="opt">:</span><span class="kwd">matches</span><span class="opt">(</span>String<span class="opt">,</span> Regex<span class="opt">),</span>
    <span class="kwb">length</span><span class="opt">(</span>Matches<span class="opt">).</span>

<span class="kwd">printNumberOfMatches</span><span class="opt">(</span>String<span class="opt">,</span> Regex<span class="opt">) -&gt;</span>
    N <span class="opt">=</span> <span class="kwd">numberOfMatches</span><span class="opt">(</span>String<span class="opt">,</span> Regex<span class="opt">),</span>
    <span class="kwc">io</span><span class="opt">:</span><span class="kwd">format</span><span class="opt">(</span><span class="str">&quot;~s ~w~n&quot;</span><span class="opt">, [</span>Regex<span class="opt">,</span> N<span class="opt">]).</span>


<span class="slc">% subst(String, ListOfRegexes) returns String after each substitution in </span>
<span class="slc">%     ListOfRegexes is performed</span>

<span class="kwd">subst</span><span class="opt">(</span>String<span class="opt">, []) -&gt;</span>
    String<span class="opt">;</span>
<span class="kwd">subst</span><span class="opt">(</span>String<span class="opt">, [{</span>Exp<span class="opt">,</span> Replacement<span class="opt">} |</span> Tail<span class="opt">]) -&gt;</span>
    <span class="opt">{</span>ok<span class="opt">,</span> String2<span class="opt">,</span> _<span class="opt">} =</span> <span class="kwc">regexp</span><span class="opt">:</span><span class="kwd">gsub</span><span class="opt">(</span>String<span class="opt">,</span> Exp<span class="opt">,</span> Replacement<span class="opt">),</span>
    <span class="kwd">subst</span><span class="opt">(</span>String2<span class="opt">,</span> Tail<span class="opt">).</span>



<span class="kwd">main</span><span class="opt">(</span>_Arg<span class="opt">) -&gt;</span>
    Sequence1 <span class="opt">=</span> <span class="kwd">readall</span><span class="opt">(),</span>

    <span class="opt">{</span>ok<span class="opt">,</span> Sequence2<span class="opt">,</span> _<span class="opt">} =</span> <span class="kwc">regexp</span><span class="opt">:</span><span class="kwd">gsub</span><span class="opt">(</span>Sequence1<span class="opt">,</span> <span class="str">&quot;(&gt;[^</span><span class="esc">\n</span><span class="str">]*</span><span class="esc">\n</span><span class="str">)|</span><span class="esc">\n</span><span class="str">|</span><span class="esc">\r</span><span class="str">&quot;</span><span class="opt">,</span> <span class="str">&quot;&quot;</span><span class="opt">),</span>
    <span class="kwc">lists</span><span class="opt">:</span><span class="kwd">foreach</span><span class="opt">(</span><span class="kwa">fun</span><span class="opt">(</span>Regex<span class="opt">) -&gt;</span> <span class="kwd">printNumberOfMatches</span><span class="opt">(</span>Sequence2<span class="opt">,</span> Regex<span class="opt">)</span> <span class="kwa">end</span><span class="opt">,</span> <span class="kwd">exprs</span><span class="opt">()),</span>

    Sequence3 <span class="opt">=</span> <span class="kwd">subst</span><span class="opt">(</span>Sequence2<span class="opt">,</span> <span class="kwd">substExprs</span><span class="opt">()),</span>
    <span class="kwc">io</span><span class="opt">:</span><span class="kwd">format</span><span class="opt">(</span><span class="str">&quot;~n~w~n~w~n~w~n&quot;</span><span class="opt">, [</span><span class="kwb">length</span><span class="opt">(</span>Sequence1<span class="opt">),</span> <span class="kwb">length</span><span class="opt">(</span>Sequence2<span class="opt">),</span> <span class="kwb">length</span><span class="opt">(</span>Sequence3<span class="opt">)]),</span>
    <span class="kwb">halt</span><span class="opt">(</span><span class="num">0</span><span class="opt">).</span>
