&lt;?hh <span class="slc">// strict</span>
<span class="com">/* The Computer Language Benchmarks Game</span>
<span class="com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="com">   </span>
<span class="com">   contributed by Isaac Gouy, transliterated from Mike Pall's Lua program </span>
<span class="com">*/</span>

<span class="kwa">function</span> <span class="kwd">initialized_vector</span>(<span class="kwb">int</span> $n): Vector&lt;<span class="kwb">int</span>&gt; {
   $v = Vector {};
   <span class="kwa">for</span> ($i=<span class="num">0</span>; $i&lt;$n; $i++){ $v[] = $i; }
   <span class="kwa">return</span> $v;
}

<span class="kwa">function</span> <span class="kwd">Fannkuch</span>(<span class="kwb">int</span> $n) {
   $p = <span class="kwd">initialized_vector</span>($n); 
   $q = <span class="kwd">initialized_vector</span>($n); 
   $s = <span class="kwd">initialized_vector</span>($n); 

   $sign = <span class="num">1</span>; $maxflips = $sum = <span class="num">0</span>; $m = $n-<span class="num">1</span>;  
   <span class="kwa">do</span> {
      <span class="slc">// Copy and flip.</span>
      $q0 = $p[<span class="num">0</span>];                                          <span class="slc">// Cache 0th element.</span>
      <span class="kwa">if</span> ($q0 != <span class="num">0</span>){
         <span class="kwa">for</span>($i=<span class="num">1</span>; $i&lt;$n; $i++) $q[$i] = $p[$i];            <span class="slc">// Work on a copy.</span>
         $flips = <span class="num">1</span>;
         <span class="kwa">do</span> { 
            $qq = $q[$q0]; 
            <span class="kwa">if</span> ($qq == <span class="num">0</span>){                                  <span class="slc">// ... until 0th element is 0.</span>
               $sum += $sign*$flips;
	       <span class="kwa">if</span> ($flips &gt; $maxflips) $maxflips = $flips;  <span class="slc">// New maximum?</span>
               <span class="kwa">break</span>; 
            } 
 	    $q[$q0] = $q0; 
	    <span class="kwa">if</span> ($q0 &gt;= <span class="num">3</span>){
	       $i = <span class="num">1</span>; $j = $q0 - <span class="num">1</span>;
               <span class="kwa">do</span> { $t = $q[$i]; $q[$i] = $q[$j]; $q[$j] = $t; $i++; $j--; } <span class="kwa">while</span> ($i &lt; $j); 
            }
	    $q0 = $qq; $flips++;
         } <span class="kwa">while</span> (true); 
      }
      <span class="slc">// Permute.</span>
      <span class="kwa">if</span> ($sign == <span class="num">1</span>){
         $t = $p[<span class="num">1</span>]; $p[<span class="num">1</span>] = $p[<span class="num">0</span>]; $p[<span class="num">0</span>] = $t; $sign = -<span class="num">1</span>; <span class="slc">// Rotate 0&lt;-1.</span>
      } <span class="kwa">else</span> { 
         $t = $p[<span class="num">1</span>]; $p[<span class="num">1</span>] = $p[<span class="num">2</span>]; $p[<span class="num">2</span>] = $t; $sign = <span class="num">1</span>;  <span class="slc">// Rotate 0&lt;-1 and 0&lt;-1&lt;-2.</span>
         <span class="kwa">for</span>($i=<span class="num">2</span>; $i&lt;$n; $i++){ 
	    $sx = $s[$i];
	    <span class="kwa">if</span> ($sx != <span class="num">0</span>){ $s[$i] = $sx-<span class="num">1</span>; <span class="kwa">break</span>; }
	    <span class="kwa">if</span> ($i == $m) <span class="kwa">return array</span>($sum,$maxflips);     <span class="slc">// Out of permutations.</span>
	    $s[$i] = $i;
	    <span class="slc">// Rotate 0&lt;-...&lt;-i+1.</span>
	    $t = $p[<span class="num">0</span>]; <span class="kwa">for</span>($j=<span class="num">0</span>; $j&lt;=$i; $j++){ $p[$j] = $p[$j+<span class="num">1</span>]; } $p[$i+<span class="num">1</span>] = $t;
         }
      }
   } <span class="kwa">while</span> (true);
}

$n = (<span class="kwb">int</span>)$argv[<span class="num">1</span>];
<span class="kwa">list</span>($checksum,$pf) = <span class="kwd">Fannkuch</span>($n);
<span class="kwd">printf</span>(<span class="str">&quot;</span><span class="ipl">%d</span><span class="str"></span><span class="esc">\n</span><span class="str">Pfannkuchen(</span><span class="ipl">%d</span><span class="str">) =</span> <span class="ipl">%d</span><span class="str"></span><span class="esc">\n</span><span class="str">&quot;</span>, $checksum, $n, $pf);


