<span class="com">{ The Computer Language Benchmarks Game</span>
<span class="com">  http://benchmarksgame.alioth.debian.org</span>
<span class="com"></span>
<span class="com">  contributed by Ian Osgood,</span>
<span class="com">  modified by Florian Klaempfl</span>
<span class="com">  modified by Ales Katona</span>
<span class="com">  modified by Vincent Snijders</span>
<span class="com">  modified by Jeppe Johansen</span>
<span class="com">}</span>

<span class="com">{$mode objfpc}</span>

<span class="kwa">program</span> n_body;

<span class="kwa">uses</span> Math;

<span class="kwa">type</span>
  Body = <span class="kwa">record</span>
    x, y, z,
    vx, vy, vz,
    mass : <span class="kwb">double</span>;
  <span class="kwa">end</span>;
  PBody = ^Body;

<span class="kwa">const</span> pi = <span class="num">3.141592653589793</span>;
      solarMass = <span class="num">4</span> * <span class="kwd">sqr</span>(pi);
      daysPerYear = <span class="num">365.24</span>;

<span class="kwa">type</span>
  tbody = <span class="kwa">array</span>[<span class="num">1</span>.<span class="num">.5</span>] <span class="kwa">of</span> Body;

<span class="kwa">const</span> b : tbody = (
  <span class="com">{ Sun }</span>
  ( x:<span class="num">0</span>; y:<span class="num">0</span>; z:<span class="num">0</span>;  vx:<span class="num">0</span>; vy:<span class="num">0</span>; vz:<span class="num">0</span>;  mass: solarMass ),
  <span class="com">{ Jupiter }</span>
  ( x:    <span class="num">4.84143144246472090e+00</span>;
    y:   -<span class="num">1.16032004402742839e+00</span>;
    z:   -<span class="num">1.03622044471123109e-01</span>;
    vx:   <span class="num">1.66007664274403694e-03</span> * daysPerYear;
    vy:   <span class="num">7.69901118419740425e-03</span> * daysPerYear;
    vz:  -<span class="num">6.90460016972063023e-05</span> * daysPerYear;
    mass: <span class="num">9.54791938424326609e-04</span> * solarMass ),
  <span class="com">{ Saturn }</span>
  ( x:    <span class="num">8.34336671824457987e+00</span>;
    y:    <span class="num">4.12479856412430479e+00</span>;
    z:   -<span class="num">4.03523417114321381e-01</span>;
    vx:  -<span class="num">2.76742510726862411e-03</span> * daysPerYear;
    vy:   <span class="num">4.99852801234917238e-03</span> * daysPerYear;
    vz:   <span class="num">2.30417297573763929e-05</span> * daysPerYear;
    mass: <span class="num">2.85885980666130812e-04</span> * solarMass ),
  <span class="com">{ Uranus }</span>
  ( x:    <span class="num">1.28943695621391310e+01</span>;
    y:   -<span class="num">1.51111514016986312e+01</span>;
    z:   -<span class="num">2.23307578892655734e-01</span>;
    vx:   <span class="num">2.96460137564761618e-03</span> * daysPerYear;
    vy:   <span class="num">2.37847173959480950e-03</span> * daysPerYear;
    vz:  -<span class="num">2.96589568540237556e-05</span> * daysPerYear;
    mass: <span class="num">4.36624404335156298e-05</span> * solarMass ),
  <span class="com">{ Neptune }</span>
  ( x:    <span class="num">1.53796971148509165e+01</span>;
    y:   -<span class="num">2.59193146099879641e+01</span>;
    z:    <span class="num">1.79258772950371181e-01</span>;
    vx:   <span class="num">2.68067772490389322e-03</span> * daysPerYear;
    vy:   <span class="num">1.62824170038242295e-03</span> * daysPerYear;
    vz:  -<span class="num">9.51592254519715870e-05</span> * daysPerYear;
    mass: <span class="num">5.15138902046611451e-05</span> * solarMass )
);

<span class="kwa">procedure</span> offsetMomentum;
<span class="kwa">var</span> px,py,pz : <span class="kwb">double</span>;
    i : <span class="kwb">integer</span>;
<span class="kwa">begin</span>
  px:=<span class="num">0.0</span>; py:=<span class="num">0.0</span>; pz:=<span class="num">0.0</span>;
  <span class="kwc">for</span> i := <span class="kwd">low</span>(b)+<span class="num">1</span> <span class="kwc">to</span> <span class="kwd">high</span>(b) <span class="kwc">do</span>
    <span class="kwc">with</span> b[i] <span class="kwc">do</span>
    <span class="kwa">begin</span>
      px := px - vx * mass;
      py := py - vy * mass;
      pz := pz - vz * mass;
    <span class="kwa">end</span>;
  b[<span class="kwd">low</span>(b)].vx := px / solarMass;
  b[<span class="kwd">low</span>(b)].vy := py / solarMass;
  b[<span class="kwd">low</span>(b)].vz := pz / solarMass;
<span class="kwa">end</span>;

<span class="kwa">function</span> <span class="kwd">distance</span>(i,j : <span class="kwb">integer</span>) : <span class="kwb">double</span>;
<span class="kwa">begin</span>
  distance := <span class="kwd">sqrt</span>(<span class="kwd">sqr</span>(b[i].x-b[j].x) + <span class="kwd">sqr</span>(b[i].y-b[j].y) +
<span class="kwd">sqr</span>(b[i].z-b[j].z));
<span class="kwa">end</span>;

<span class="kwa">function</span> energy : <span class="kwb">double</span>;
<span class="kwa">var</span>
  i,j : <span class="kwb">integer</span>;
<span class="kwa">begin</span>
  result := <span class="num">0.0</span>;
  <span class="kwc">for</span> i := <span class="kwd">low</span>(b) <span class="kwc">to</span> <span class="kwd">high</span>(b) <span class="kwc">do</span>
    <span class="kwc">with</span> b[i] <span class="kwc">do</span>
    <span class="kwa">begin</span>
      result := result + mass * (<span class="kwd">sqr</span>(vx) + <span class="kwd">sqr</span>(vy) + <span class="kwd">sqr</span>(vz)) * <span class="num">0.5</span>;
      <span class="kwc">for</span> j := i+<span class="num">1</span> <span class="kwc">to</span> <span class="kwd">high</span>(b) <span class="kwc">do</span>
        result := result - mass * b[j].mass / <span class="kwd">distance</span>(i,j);
    <span class="kwa">end</span>;
<span class="kwa">end</span>;

<span class="kwa">procedure</span> <span class="kwd">advance</span>(dt : <span class="kwb">double</span>);
<span class="kwa">var</span> i,j : <span class="kwb">integer</span>;
    dx,dy,dz,mag,dsquared : <span class="kwb">double</span>;
    bi,bj : PBody;
<span class="kwa">begin</span>
  bi:=&#64;b[<span class="kwd">low</span>(b)];
  <span class="kwc">for</span> i := <span class="kwd">low</span>(b) <span class="kwc">to</span> <span class="kwd">high</span>(b)-<span class="num">1</span> <span class="kwc">do</span> <span class="kwa">begin</span>
    bj := bi;
    <span class="kwc">for</span> j := i+<span class="num">1</span> <span class="kwc">to</span> <span class="kwd">high</span>(b) <span class="kwc">do</span>
    <span class="kwa">begin</span>
      <span class="kwd">inc</span>(bj);
      dx := bi^.x - bj^.x;
      dy := bi^.y - bj^.y;
      dz := bi^.z - bj^.z;
      dsquared := <span class="kwd">sqr</span>(dx)+<span class="kwd">sqr</span>(dy)+<span class="kwd">sqr</span>(dz);
      mag := dt / (<span class="kwd">sqrt</span>(dsquared)*dsquared);
      bi^.vx := bi^.vx - dx * bj^.mass * mag;
      bi^.vy := bi^.vy - dy * bj^.mass * mag;
      bi^.vz := bi^.vz - dz * bj^.mass * mag;
      bj^.vx := bj^.vx + dx * bi^.mass * mag;
      bj^.vy := bj^.vy + dy * bi^.mass * mag;
      bj^.vz := bj^.vz + dz * bi^.mass * mag;
    <span class="kwa">end</span>;
    <span class="kwd">inc</span>(bi);
  <span class="kwa">end</span>;
  bi:=&#64;b[<span class="kwd">low</span>(b)];
  <span class="kwc">for</span> i := <span class="kwd">low</span>(b) <span class="kwc">to</span> <span class="kwd">high</span>(b) <span class="kwc">do</span> <span class="kwa">begin</span>
    <span class="kwc">with</span> bi^ <span class="kwc">do</span>
    <span class="kwa">begin</span>
      x := x + dt * vx;
      y := y + dt * vy;
      z := z + dt * vz;
    <span class="kwa">end</span>;
    <span class="kwd">inc</span>(bi);
  <span class="kwa">end</span>;
<span class="kwa">end</span>;

<span class="kwa">var</span> i : <span class="kwb">integer</span>;
    n : <span class="kwb">Integer</span>;
<span class="kwa">begin</span>
  <span class="kwd">SetPrecisionMode</span>(pmDouble);
  offsetMomentum;
  <span class="kwd">writeln</span>(energy:<span class="num">0</span>:<span class="num">9</span>);
  <span class="kwd">Val</span>(<span class="kwd">ParamStr</span>(<span class="num">1</span>), n, i);
  <span class="kwc">for</span> i := <span class="num">1</span> <span class="kwc">to</span> n <span class="kwc">do</span> <span class="kwd">advance</span>(<span class="num">0.01</span>);
  <span class="kwd">writeln</span>(energy:<span class="num">0</span>:<span class="num">9</span>);
<span class="kwa">end</span>.
