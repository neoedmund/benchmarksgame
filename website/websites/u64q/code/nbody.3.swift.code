<span class="com">/* The Computer Language Benchmarks Game</span>
<span class="com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="com">   contributed by Isaac Gouy </span>
<span class="com">*/</span>

<span class="kwa">import</span> CoreFoundation


<span class="kwa">class</span> Body {
   <span class="kwa">var</span> x, y, z, vx, vy, vz, mass : <span class="kwb">Double</span>

   <span class="kwa">init</span>(x: <span class="kwb">Double</span>, y: <span class="kwb">Double</span>, z: <span class="kwb">Double</span>, 
         <span class="kwc">vx</span>: <span class="kwb">Double</span>, vy: <span class="kwb">Double</span>, vz: <span class="kwb">Double</span>, mass: <span class="kwb">Double</span>) {
      <span class="kwa">self</span>.x = x
      <span class="kwa">self</span>.y = y
      <span class="kwa">self</span>.z = z
      <span class="kwa">self</span>.vx = vx
      <span class="kwa">self</span>.vy = vy
      <span class="kwa">self</span>.vz = vz
      <span class="kwa">self</span>.mass = mass
   }
}

<span class="kwa">let</span> PI = <span class="num">3.141592653589793</span>
<span class="kwa">let</span> SOLAR_MASS = <span class="num">4</span> * PI * PI
<span class="kwa">let</span> DAYS_PER_YEAR = <span class="num">365.24</span>

<span class="kwa">var</span> bodies: [Body] = [
   <span class="kwd">Body</span> (
      <span class="kwc">x</span>: <span class="num">0.0</span>,
      <span class="kwc">y</span>: <span class="num">0.0</span>,
      <span class="kwc">z</span>: <span class="num">0.0</span>,
      <span class="kwc">vx</span>: <span class="num">0.0</span>,
      <span class="kwc">vy</span>: <span class="num">0.0</span>,
      <span class="kwc">vz</span>: <span class="num">0.0</span>,
      <span class="kwc">mass</span>: SOLAR_MASS
   ), 

   <span class="kwd">Body</span> (
      <span class="kwc">x</span>: <span class="num">4.84143144246472090e+00</span>,
      <span class="kwc">y</span>: -<span class="num">1.16032004402742839e+00</span>,
      <span class="kwc">z</span>: -<span class="num">1.03622044471123109e-01</span>,
      <span class="kwc">vx</span>: <span class="num">1.66007664274403694e-03</span> * DAYS_PER_YEAR,
      <span class="kwc">vy</span>: <span class="num">7.69901118419740425e-03</span> * DAYS_PER_YEAR,
      <span class="kwc">vz</span>: -<span class="num">6.90460016972063023e-05</span> * DAYS_PER_YEAR,
      <span class="kwc">mass</span>: <span class="num">9.54791938424326609e-04</span> * SOLAR_MASS
   ),

   <span class="kwd">Body</span> (
      <span class="kwc">x</span>: <span class="num">8.34336671824457987e+00</span>,
      <span class="kwc">y</span>: <span class="num">4.12479856412430479e+00</span>,
      <span class="kwc">z</span>: -<span class="num">4.03523417114321381e-01</span>,
      <span class="kwc">vx</span>: -<span class="num">2.76742510726862411e-03</span> * DAYS_PER_YEAR,
      <span class="kwc">vy</span>: <span class="num">4.99852801234917238e-03</span> * DAYS_PER_YEAR,
      <span class="kwc">vz</span>: <span class="num">2.30417297573763929e-05</span> * DAYS_PER_YEAR,
      <span class="kwc">mass</span>: <span class="num">2.85885980666130812e-04</span> * SOLAR_MASS
   ),

   <span class="kwd">Body</span> (
      <span class="kwc">x</span>: <span class="num">1.28943695621391310e+01</span>,
      <span class="kwc">y</span>: -<span class="num">1.51111514016986312e+01</span>,
      <span class="kwc">z</span>: -<span class="num">2.23307578892655734e-01</span>,
      <span class="kwc">vx</span>: <span class="num">2.96460137564761618e-03</span> * DAYS_PER_YEAR,
      <span class="kwc">vy</span>: <span class="num">2.37847173959480950e-03</span> * DAYS_PER_YEAR,
      <span class="kwc">vz</span>: -<span class="num">2.96589568540237556e-05</span> * DAYS_PER_YEAR,
      <span class="kwc">mass</span>: <span class="num">4.36624404335156298e-05</span> * SOLAR_MASS
   ),

   <span class="kwd">Body</span> (
      <span class="kwc">x</span>: <span class="num">1.53796971148509165e+01</span>,
      <span class="kwc">y</span>: -<span class="num">2.59193146099879641e+01</span>,
      <span class="kwc">z</span>: <span class="num">1.79258772950371181e-01</span>,
      <span class="kwc">vx</span>: <span class="num">2.68067772490389322e-03</span> * DAYS_PER_YEAR,
      <span class="kwc">vy</span>: <span class="num">1.62824170038242295e-03</span> * DAYS_PER_YEAR,
      <span class="kwc">vz</span>: -<span class="num">9.51592254519715870e-05</span> * DAYS_PER_YEAR,
      <span class="kwc">mass</span>: <span class="num">5.15138902046611451e-05</span> * SOLAR_MASS
   )
]


<span class="kwa">func</span> <span class="kwd">offsetMomentum</span>() {
   <span class="kwa">var</span> px = <span class="num">0.0</span>
   <span class="kwa">var</span> py = <span class="num">0.0</span>
   <span class="kwa">var</span> pz = <span class="num">0.0</span>

   <span class="kwa">for</span> body <span class="kwa">in</span> bodies {
      px += body.vx * body.mass
      py += body.vy * body.mass		
      pz += body.vz * body.mass	
   }

   bodies[<span class="num">0</span>].vx = -px / SOLAR_MASS;
   bodies[<span class="num">0</span>].vy = -py / SOLAR_MASS;
   bodies[<span class="num">0</span>].vz = -pz / SOLAR_MASS;
}


<span class="kwa">func</span> <span class="kwd">energy</span>() -&gt; <span class="kwb">Double</span> {		
   <span class="kwa">var</span> dx, dy, dz, distance: <span class="kwb">Double</span>	
   <span class="kwa">var</span> e = <span class="num">0.0</span>		   
		
   <span class="kwa">for</span> i <span class="kwa">in</span> <span class="num">0</span>..&lt;bodies.count {
      e += <span class="num">0.5</span> * bodies[i].mass * 
         ( bodies[i].vx * bodies[i].vx 
         + bodies[i].vy * bodies[i].vy 
         + bodies[i].vz * bodies[i].vz )
			   
      <span class="kwa">for</span> j <span class="kwa">in</span> i+<span class="num">1</span>..&lt;bodies.count {
         dx = bodies[i].x - bodies[j].x
         dy = bodies[i].y - bodies[j].y
         dz = bodies[i].z - bodies[j].z
                                
         distance = <span class="kwd">sqrt</span>(dx*dx + dy*dy + dz*dz)
         e -= (bodies[i].mass * bodies[j].mass) / distance
      }
   }
   <span class="kwa">return</span> e;
}


<span class="kwa">func</span> <span class="kwd">advance</span>(dt: <span class="kwb">Double</span>) {
   <span class="kwa">var</span> dx, dy, dz, distance, mag: <span class="kwb">Double</span>	
	
   <span class="kwa">for</span> i <span class="kwa">in</span> <span class="num">0</span>..&lt;bodies.count {
      <span class="kwa">for</span> j <span class="kwa">in</span> i+<span class="num">1</span>..&lt;bodies.count {
         dx = bodies[i].x - bodies[j].x
         dy = bodies[i].y - bodies[j].y
         dz = bodies[i].z - bodies[j].z
				
         distance = <span class="kwd">sqrt</span>(dx*dx + dy*dy + dz*dz)				   
         mag = dt / (distance * distance * distance)

         bodies[i].vx -= dx * bodies[j].mass * mag
         bodies[i].vy -= dy * bodies[j].mass * mag
         bodies[i].vz -= dz * bodies[j].mass * mag
                                
         bodies[j].vx += dx * bodies[i].mass * mag
         bodies[j].vy += dy * bodies[i].mass * mag
         bodies[j].vz += dz * bodies[i].mass * mag
      }
   }		

   <span class="kwa">for</span> i <span class="kwa">in</span> <span class="num">0</span>..&lt;bodies.count {
      bodies[i].x += dt * bodies[i].vx
      bodies[i].y += dt * bodies[i].vy
      bodies[i].z += dt * bodies[i].vz
   }	
}


<span class="kwa">let</span> n: <span class="kwb">Int</span> = <span class="kwb">Int</span>(Process.arguments[<span class="num">1</span>])!
<span class="kwd">offsetMomentum</span>()
<span class="kwd">print</span>( <span class="kwd">energy</span>() )
<span class="kwa">for</span> _ <span class="kwa">in</span> <span class="num">1</span>...n {
   <span class="kwd">advance</span>(<span class="num">0.01</span>)
}
<span class="kwd">print</span>( <span class="kwd">energy</span>() )


