<span class="com">(* The Computer Language Benchmarks Game</span>
<span class="com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Jean de La Taille</span>
<span class="com">*)</span>

<span class="kwa">program</span> project1;

<span class="kwa">uses</span>
  <span class="com">{$IFDEF UNIX}</span>
  cthreads,
  <span class="com">{$ENDIF}</span>
  SysUtils, DateUtils, Math;

<span class="kwa">type</span>
  arrWord = <span class="kwa">array</span>[<span class="num">0</span>.<span class="num">.12</span>] <span class="kwa">of</span> <span class="kwb">Word</span>;
  threadData = <span class="kwa">record</span>
    num, n, count, checksum : <span class="kwb">longint</span>;
    list, counters, limits : arrWord;
  <span class="kwa">end</span>;

<span class="com">(******************************************************************************)</span>

<span class="com">(* Thread *)</span>
<span class="kwa">function</span> <span class="kwd">run</span>(p : <span class="kwb">pointer</span>) : ptrint;
<span class="kwa">var</span>
  i, k, l, <span class="com">(*n,*)</span> num : <span class="kwb">longint</span>;
  count, maxCount, checksum : <span class="kwb">longint</span>;
  f : <span class="kwb">boolean</span>;
  list, counters, limits : arrWord;

  <span class="slc">// Flip function</span>
  <span class="kwa">function</span> flip : <span class="kwb">longint</span>; <span class="kwa">inline</span>;
  <span class="kwa">var</span>
    count, f, i, j, k, tmp : <span class="kwb">longint</span>;
    tmpList : arrWord;
  <span class="kwa">begin</span>
    tmpList := list;
    count := <span class="num">0</span>;
    <span class="slc">// While the head list is not 1, do lot of reverse</span>
    f := tmpList[<span class="num">0</span>];
    <span class="kwc">while</span> (f &lt;&gt; <span class="num">1</span>) <span class="kwc">do</span>
    <span class="kwa">begin</span>
      <span class="slc">// Reverse</span>
      j := f &gt;&gt; <span class="num">1</span>;
      k := f - <span class="num">1</span>;
      <span class="kwc">for</span> i := <span class="num">0</span> <span class="kwc">to</span> j - <span class="num">1</span> <span class="kwc">do</span>
      <span class="kwa">begin</span>
        tmp := tmpList[i];
        tmpList[i] := tmpList[k];
        tmpList[k] := tmp;
        <span class="kwd">Dec</span>(k);
      <span class="kwa">end</span>;
      f := tmpList[<span class="num">0</span>];
      <span class="slc">// End of reverse</span>
      <span class="kwd">Inc</span>(count);
    <span class="kwa">end</span>;
    flip := count;
  <span class="kwa">end</span>;
  <span class="slc">// Swap function</span>
  <span class="kwa">procedure</span> <span class="kwd">swap</span>(<span class="kwa">var</span> a, b : <span class="kwb">word</span>); <span class="kwa">inline</span>;
  <span class="kwa">begin</span>
    l := a;
    a := b;
    b := l;
  <span class="kwa">end</span>;
  <span class="slc">// Roll3 function</span>
  <span class="kwa">procedure</span> <span class="kwd">roll3</span>(<span class="kwa">var</span> a, b, c : <span class="kwb">word</span>); <span class="kwa">inline</span>;
  <span class="kwa">begin</span>
    l := a;
    a := b;
    b := c;
    c := l;
  <span class="kwa">end</span>;
  <span class="slc">// Roll function</span>
  <span class="kwa">procedure</span> <span class="kwd">roll</span>(k : <span class="kwb">longint</span>); <span class="kwa">inline</span>;
  <span class="kwa">var</span>
    j : <span class="kwb">longint</span>;
  <span class="kwa">begin</span>
    l := list[<span class="num">0</span>];
    <span class="kwc">for</span> j := <span class="num">0</span> <span class="kwc">to</span> k <span class="kwc">do</span>
      list[j] := list[j + <span class="num">1</span>];
    list[j] := l;
  <span class="kwa">end</span>;

<span class="kwa">begin</span>
  <span class="slc">/// n := threadData(p^).n;</span>
  num := <span class="kwd">threadData</span>(p^).num;
  limits := <span class="kwd">threadData</span>(p^).limits;
  counters := <span class="kwd">threadData</span>(p^).counters;
  list := <span class="kwd">threadData</span>(p^).list;
  <span class="slc">/// WriteLn(n, ' ', num, ' ', list[0]);</span>
  <span class="slc">// Main loop</span>
  f := <span class="kwb">false</span>;
  maxCount := <span class="num">0</span>;
  checksum := <span class="num">0</span>;
  <span class="kwc">for</span> i := <span class="num">1</span> <span class="kwc">to</span> num <span class="kwc">do</span>
  <span class="kwa">begin</span>
    count := flip;
    <span class="slc">// Check if the number of reverse is the max</span>
    <span class="kwc">if</span> (count &gt; maxCount) <span class="kwc">then</span>
      maxCount := count;
    <span class="slc">// Compute checksum</span>
    checksum := count - checksum;
    <span class="slc">// Swap</span>
    <span class="kwd">swap</span>(list[<span class="num">0</span>], list[<span class="num">1</span>]);
    <span class="slc">// If needed, roll 3</span>
    <span class="kwc">if</span> (f) <span class="kwc">then</span>
    <span class="kwa">begin</span>
      <span class="slc">// Roll 3</span>
      <span class="kwd">roll3</span>(list[<span class="num">0</span>], list[<span class="num">1</span>], list[<span class="num">2</span>]);
      k := <span class="num">3</span>;
      <span class="kwd">Dec</span>(counters[<span class="num">3</span>]);
      <span class="slc">// If needed, roll next</span>
      <span class="kwc">while</span> ((counters[k] = <span class="num">0</span>)) <span class="kwc">do</span>
      <span class="kwa">begin</span>
        counters[k] := limits[k];
        <span class="kwd">roll</span>(k);
        <span class="kwd">Inc</span>(k);
        <span class="kwd">Dec</span>(counters[k]);
      <span class="kwa">end</span>;
    <span class="kwa">end</span>;
    f := <span class="kwa">not</span> f;
  <span class="kwa">end</span>;
  <span class="kwd">threadData</span>(p^).checksum := checksum;
  <span class="kwd">threadData</span>(p^).count := maxCount;
  run := <span class="num">0</span>;
<span class="kwa">end</span>;

<span class="com">(* Main routine, to launch threads *)</span>
<span class="kwa">procedure</span> <span class="kwd">launch</span>(n : <span class="kwb">longint</span>);
<span class="kwa">var</span>
  <span class="slc">//start, finish : TDateTime;</span>
  list, counters, limits : arrWord;
  i, l, num, count, checksum : <span class="kwb">longint</span>;
  tt : <span class="kwa">array of</span> TThreadID;
  td : <span class="kwa">array of</span> threadData;

  <span class="slc">// Roll function</span>
  <span class="kwa">procedure</span> <span class="kwd">roll</span>(k : <span class="kwb">longint</span>); <span class="kwa">inline</span>;
  <span class="kwa">var</span>
    j : <span class="kwb">longint</span>;
  <span class="kwa">begin</span>
    l := list[<span class="num">0</span>];
    <span class="kwc">for</span> j := <span class="num">0</span> <span class="kwc">to</span> k <span class="kwc">do</span>
      list[j] := list[j + <span class="num">1</span>];
    list[j] := l;
  <span class="kwa">end</span>;

<span class="kwa">begin</span>
  <span class="slc">/// start := now;</span>
  <span class="kwd">SetLength</span>(tt, n);
  <span class="kwd">SetLength</span>(td, n);
  <span class="slc">// Inits the arrays</span>
  num := <span class="num">1</span>;
  <span class="kwc">for</span> i := <span class="num">0</span> <span class="kwc">to</span> n - <span class="num">1</span> <span class="kwc">do</span>
  <span class="kwa">begin</span>
    limits[i] := i;
    counters[i] := i;
    list[i] := i + <span class="num">1</span>;
    num := num * (i + <span class="num">1</span>);
  <span class="kwa">end</span>;
  num := num <span class="kwa">div</span> n;
  <span class="slc">// Launch threads</span>
  <span class="kwc">for</span> i := <span class="num">0</span> <span class="kwc">to</span> n - <span class="num">1</span> <span class="kwc">do</span>
  <span class="kwa">begin</span>
    td[i].n := n;
    td[i].num := num;
    td[i].list := list;
    td[i].counters := counters;
    td[i].limits := limits;
    tt[i] := <span class="kwd">BeginThread</span>(&#64;run, &#64;td[i]);
    <span class="kwd">roll</span>(n - <span class="num">1</span>);
  <span class="kwa">end</span>;
  <span class="slc">// Wait threads</span>
  checksum := <span class="num">0</span>;
  count := <span class="num">0</span>;
  <span class="kwc">for</span> i := <span class="num">0</span> <span class="kwc">to</span> n - <span class="num">1</span> <span class="kwc">do</span>
  <span class="kwa">begin</span>
    <span class="kwd">WaitForThreadTerminate</span>(tt[i], <span class="num">0</span>);
    count := <span class="kwd">max</span>(count, td[i].count);
    <span class="kwc">if</span> ((n <span class="kwa">and</span> <span class="num">1</span>) = <span class="num">0</span>) <span class="kwc">then</span>
      checksum := td[i].checksum + checksum
    <span class="kwc">else</span>
      checksum := checksum - td[i].checksum;
  <span class="kwa">end</span>;
  <span class="slc">/// finish := now;</span>
  <span class="slc">/// WriteLn('Time : ', (MilliSecondsBetween(start, finish) / 1000) : 0 : 4);</span>
  <span class="kwd">WriteLn</span>(<span class="kwd">abs</span>(checksum));
  <span class="kwd">WriteLn</span>(<span class="str">'Pfannkuchen('</span>, n, <span class="str">') = '</span>, count);
<span class="kwa">end</span>;

<span class="com">(* Main program *)</span>
<span class="kwa">begin</span>
  <span class="kwc">if</span> (argc &gt; <span class="num">1</span>) <span class="kwc">then</span>
    <span class="kwd">launch</span>(<span class="kwd">StrToInt</span>(argv[<span class="num">1</span>]))
  <span class="kwc">else</span>
    <span class="kwd">launch</span>(<span class="num">4</span>);
<span class="kwa">end</span>.

