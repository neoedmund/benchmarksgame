<span class="slc">% The Computer Language Benchmarks Game</span>
<span class="slc">% http://benchmarksgame.alioth.debian.org/</span>
<span class="slc">%% Contributed by Fredrik Svahn based on Per Gustafsson's mandelbrot program</span>

<span class="opt">-</span><span class="kwd">module</span><span class="opt">(</span>mandelbrot<span class="opt">).</span>
<span class="opt">-</span><span class="kwd">export</span><span class="opt">([</span>main<span class="opt">/</span><span class="num">1</span><span class="opt">]).</span>
<span class="opt">-</span><span class="kwd">define</span><span class="opt">(</span>LIM_SQR<span class="opt">,</span> <span class="num">4.0</span><span class="opt">).</span>
<span class="opt">-</span><span class="kwd">define</span><span class="opt">(</span>ITER<span class="opt">,</span> <span class="num">50</span><span class="opt">).</span>
<span class="opt">-</span><span class="kwd">define</span><span class="opt">(</span>SR<span class="opt">, -</span><span class="num">1.5</span><span class="opt">).</span>
<span class="opt">-</span><span class="kwd">define</span><span class="opt">(</span>SI<span class="opt">, -</span><span class="num">1</span><span class="opt">).</span>

<span class="kwd">main</span><span class="opt">([</span>Arg<span class="opt">]) -&gt;</span>
    N <span class="opt">=</span> <span class="kwb">list_to_integer</span><span class="opt">(</span>Arg<span class="opt">),</span>
    <span class="kwc">io</span><span class="opt">:</span><span class="kwd">put_chars</span><span class="opt">([</span><span class="str">&quot;P4</span><span class="esc">\n</span><span class="str">&quot;</span><span class="opt">,</span> Arg<span class="opt">,</span> <span class="str">&quot; &quot;</span><span class="opt">,</span> Arg<span class="opt">,</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="opt">]),</span>
    
    <span class="slc">%% Spawn one process per row</span>
    Row <span class="opt">=</span> <span class="kwa">fun</span><span class="opt">(</span>Y<span class="opt">)-&gt;</span> <span class="kwb">spawn</span><span class="opt">(</span><span class="kwa">fun</span><span class="opt">()-&gt;</span> <span class="kwd">row</span><span class="opt">(</span><span class="num">0</span><span class="opt">,</span> ?SI<span class="opt">+</span>Y<span class="opt">*</span><span class="num">2</span><span class="opt">/</span>N<span class="opt">,</span> N<span class="opt">,</span> <span class="num">0</span><span class="opt">, [],</span> <span class="num">7</span><span class="opt">)</span> <span class="kwa">end</span><span class="opt">)</span> <span class="kwa">end</span><span class="opt">,</span>
    Pids <span class="opt">=</span> <span class="kwc">lists</span><span class="opt">:</span><span class="kwd">map</span><span class="opt">(</span>Row<span class="opt">,</span> <span class="kwc">lists</span><span class="opt">:</span><span class="kwd">seq</span><span class="opt">(</span><span class="num">0</span><span class="opt">,</span>N<span class="opt">-</span><span class="num">1</span><span class="opt">)),</span>

    <span class="slc">%Pass token around to make sure printouts are in the right order</span>
    <span class="kwb">hd</span><span class="opt">(</span>Pids<span class="opt">) !</span> <span class="kwb">tl</span><span class="opt">(</span>Pids<span class="opt">) ++ [</span> <span class="kwb">self</span><span class="opt">() ],</span>
    <span class="kwa">receive</span> _Token <span class="opt">-&gt;</span> <span class="kwb">halt</span><span class="opt">(</span><span class="num">0</span><span class="opt">)</span> <span class="kwa">end</span><span class="opt">.</span>

<span class="slc">%Iterate over a row, collect bits, bytes and finally print the row</span>
<span class="kwd">row</span><span class="opt">(</span>X<span class="opt">,</span> _<span class="opt">,</span> N<span class="opt">,</span> Bits<span class="opt">,</span> Bytes<span class="opt">,</span> BitC<span class="opt">)</span> <span class="kwa">when</span> X <span class="opt">=:=</span> N<span class="opt">-</span><span class="num">1</span> <span class="opt">-&gt;</span>
    <span class="kwa">receive</span> Pids <span class="opt">-&gt;</span>
	    <span class="kwd">put_chars</span><span class="opt">(</span>Bits<span class="opt">,</span> Bytes<span class="opt">,</span> BitC<span class="opt">),</span>
	    <span class="kwb">hd</span><span class="opt">(</span>Pids<span class="opt">) !</span> <span class="kwb">tl</span><span class="opt">(</span>Pids<span class="opt">)</span>
    <span class="kwa">end</span><span class="opt">;</span>

<span class="kwd">row</span><span class="opt">(</span>X<span class="opt">,</span> Y2<span class="opt">,</span> N<span class="opt">,</span> Bits<span class="opt">,</span> Bytes<span class="opt">,</span> <span class="num">0</span><span class="opt">) -&gt;</span>
    <span class="kwd">row</span><span class="opt">(</span>X<span class="opt">+</span><span class="num">1</span><span class="opt">,</span> Y2<span class="opt">,</span> N<span class="opt">,</span> <span class="num">0</span><span class="opt">, [</span>Bits bsl <span class="num">1</span> <span class="opt">+</span> <span class="kwd">m</span><span class="opt">(</span>?ITER<span class="opt">,</span> ?SR<span class="opt">+</span>X<span class="opt">*</span><span class="num">2</span><span class="opt">/</span>N<span class="opt">,</span> Y2<span class="opt">) |</span> Bytes<span class="opt">],</span> <span class="num">7</span><span class="opt">);</span>

<span class="kwd">row</span><span class="opt">(</span>X<span class="opt">,</span> Y2<span class="opt">,</span> N<span class="opt">,</span> Bits<span class="opt">,</span> Bytes<span class="opt">,</span> BitC<span class="opt">) -&gt;</span>
    <span class="kwd">row</span><span class="opt">(</span>X<span class="opt">+</span><span class="num">1</span><span class="opt">,</span> Y2<span class="opt">,</span> N<span class="opt">,</span> Bits bsl <span class="num">1</span> <span class="opt">+</span> <span class="kwd">m</span><span class="opt">(</span>?ITER<span class="opt">,</span> ?SR<span class="opt">+</span>X<span class="opt">*</span><span class="num">2</span><span class="opt">/</span>N<span class="opt">,</span> Y2<span class="opt">),</span> Bytes<span class="opt">,</span> BitC<span class="opt">-</span><span class="num">1</span><span class="opt">).</span>

<span class="slc">%Mandelbrot algorithm</span>
<span class="kwd">m</span><span class="opt">(</span>Iter<span class="opt">,</span> CR<span class="opt">,</span>CI<span class="opt">) -&gt;</span> <span class="kwd">m</span><span class="opt">(</span>Iter <span class="opt">-</span> <span class="num">1</span><span class="opt">,</span> CR<span class="opt">,</span> CI<span class="opt">,</span> CR<span class="opt">,</span> CI<span class="opt">).</span>

<span class="kwd">m</span><span class="opt">(</span>Iter<span class="opt">,</span> R<span class="opt">,</span> I<span class="opt">,</span> CR<span class="opt">,</span> CI<span class="opt">) -&gt;</span>
    <span class="kwa">case</span> R<span class="opt">*</span>R<span class="opt">+</span>I<span class="opt">*</span>I <span class="opt">&gt;</span> ?LIM_SQR <span class="kwa">of</span> 
	false <span class="kwa">when</span> Iter <span class="opt">&gt;</span> <span class="num">0</span> <span class="opt">-&gt;</span> <span class="kwd">m</span><span class="opt">(</span>Iter<span class="opt">-</span><span class="num">1</span><span class="opt">,</span> R<span class="opt">*</span>R<span class="opt">-</span>I<span class="opt">*</span>I<span class="opt">+</span>CR<span class="opt">,</span> <span class="num">2</span><span class="opt">*</span>R<span class="opt">*</span>I<span class="opt">+</span>CI<span class="opt">,</span> CR<span class="opt">,</span> CI<span class="opt">);</span>
	false <span class="opt">-&gt;</span> <span class="num">1</span><span class="opt">;</span>
	true <span class="opt">-&gt;</span> <span class="num">0</span>
    <span class="kwa">end</span><span class="opt">.</span>

<span class="kwd">put_chars</span><span class="opt">(</span>_<span class="opt">,</span> Bytes<span class="opt">,</span> <span class="num">7</span><span class="opt">)-&gt;</span> <span class="kwc">io</span><span class="opt">:</span><span class="kwd">put_chars</span><span class="opt">(</span><span class="kwc">lists</span><span class="opt">:</span><span class="kwd">reverse</span><span class="opt">(</span>Bytes<span class="opt">));</span>
<span class="kwd">put_chars</span><span class="opt">(</span>Bits<span class="opt">,</span> Bytes<span class="opt">,</span> C<span class="opt">) -&gt;</span> <span class="kwc">io</span><span class="opt">:</span><span class="kwd">put_chars</span><span class="opt">(</span><span class="kwc">lists</span><span class="opt">:</span><span class="kwd">reverse</span><span class="opt">([</span>Bits <span class="kwd">bsl</span> <span class="opt">(</span>C<span class="opt">+</span><span class="num">1</span><span class="opt">) |</span> Bytes<span class="opt">])).</span>
