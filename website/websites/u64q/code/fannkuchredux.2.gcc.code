<span class="com">/* The Computer Language Benchmarks Game</span>
<span class="com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">contributed by Miroslav Rubanets</span>
<span class="com">algorithm is based on Java 6 source code by Oleg Mazurov</span>
<span class="com">source is based on my C++ submission.</span>
<span class="com"></span>
<span class="com">Building checked in Ubuntu 11.4 with g++ 4.5 (both x86 and amd64).</span>
<span class="com">gcc -pipe -Wall -O3 -fomit-frame-pointer -march=native -lpthread \</span>
<span class="com">    -falign-labels=8 fannkuchredux.gcc-2.c -o fannkuchredux.gcc-2.gcc_run</span>
<span class="com">note that -falign-labels=8 is needed only on x86 with gcc 4.5</span>
<span class="com">*/</span>

<span class="slc">//std stuff</span>
<span class="ppc">#include &lt;stdio.h&gt;</span>
<span class="ppc">#include &lt;stdlib.h&gt;</span>
<span class="ppc">#include &lt;string.h&gt;</span>
<span class="slc">//posix threads</span>
<span class="ppc">#include &lt;pthread.h&gt;</span>
<span class="slc">//linux (for sysconf)</span>
<span class="ppc">#include &lt;unistd.h&gt;</span>
<span class="slc">//gcc stuff</span>
<span class="ppc">#define unlikely(x)     __builtin_expect((x),0)</span>
<span class="slc">//hardcoded limits</span>
<span class="ppc">#define MAX_PROBLEM_SIZE 12</span>
<span class="ppc">#define MAX_CPU_LIMIT 4</span>

<span class="kwc">inline</span> <span class="kwb">int</span> <span class="kwd">max</span>(<span class="kwb">int</span> a, <span class="kwb">int</span> b){ <span class="kwa">return</span> a &gt; b ? a : b;}
<span class="kwc">inline</span> <span class="kwb">int</span> <span class="kwd">min</span>(<span class="kwb">int</span> a, <span class="kwb">int</span> b){ <span class="kwa">return</span> a &lt; b ? a : b;}

<span class="kwc">typedef</span> <span class="kwb">struct</span> tagResult{<span class="kwb">int</span> maxflips, checksum; } Result;
<span class="kwc">typedef</span> <span class="kwb">struct</span> tagPermutationGenerator{
    <span class="kwb">int</span> perm[MAX_PROBLEM_SIZE];
    <span class="kwb">int</span> count[MAX_PROBLEM_SIZE];
    <span class="kwb">int</span>* factorials;    
    <span class="kwb">int</span> length;
} G;

<span class="kwc">inline</span> <span class="kwb">void</span> <span class="kwd">copy</span>(<span class="kwb">int</span>* dst, <span class="kwb">int</span>* src, <span class="kwb">int</span> n){
    <span class="kwb">int</span>* e = src+n;
    <span class="kwa">for</span>(; src != e; ++src,++dst )
        *dst = *src;
}
<span class="kwc">inline</span> <span class="kwb">void</span> <span class="kwd">rotate</span>( <span class="kwb">int</span>* data, <span class="kwb">int</span> n){
    <span class="kwb">int</span> i;
    <span class="kwb">int</span> first = data[<span class="num">0</span>];
    <span class="kwa">for</span> (i=<span class="num">0</span>; i&lt;n; ++i)
        data[i] = data[i+<span class="num">1</span>];
    data[n] = first;
}
<span class="kwc">inline</span> <span class="kwb">void</span> <span class="kwd">reverse</span>( <span class="kwb">int</span>*data, <span class="kwb">int</span> n ){
    <span class="kwb">int</span> * lo = &amp;data[<span class="num">0</span>], * hi = &amp;data[n];
    <span class="kwa">for</span> (; lo &lt; hi; ++lo, --hi){ 
        <span class="kwb">int</span> tmp = *lo; *lo = *hi; *hi = tmp;
    }
}
<span class="kwb">void</span> <span class="kwd">first_permutation</span>( G* g, <span class="kwb">int</span> idx ){
    <span class="kwb">int</span> p[MAX_PROBLEM_SIZE];
    <span class="kwb">int</span> pp[MAX_PROBLEM_SIZE];
    <span class="kwb">int</span> len = g-&gt;length;
    <span class="kwb">int</span> d, i, j;
    <span class="kwd">memset</span>(p, <span class="num">0</span>, MAX_PROBLEM_SIZE*<span class="kwa">sizeof</span>(<span class="kwb">int</span>));
    <span class="kwd">memset</span>(pp, <span class="num">0</span>, MAX_PROBLEM_SIZE*<span class="kwa">sizeof</span>(<span class="kwb">int</span>));
    <span class="kwa">for</span> ( i=<span class="num">0</span>; i&lt;len; ++i ) 
        p[i] = i;
    <span class="kwa">for</span> ( i=len-<span class="num">1</span>; i&gt;<span class="num">0</span>; --i ) {
        d = idx / g-&gt;factorials[i];
        g-&gt;count[i] = d;
        idx = idx % g-&gt;factorials[i];
        <span class="kwd">copy</span>( &amp;pp[<span class="num">0</span>], &amp;p[<span class="num">0</span>], (i+<span class="num">1</span>) );
        <span class="kwa">for</span> ( j=<span class="num">0</span>; j&lt;=i; ++j ){
            p[j] = j+d &lt;= i ? pp[j+d] : pp[j+d-i-<span class="num">1</span>];
        }
    }
    <span class="kwd">copy</span>( &amp;g-&gt;perm[<span class="num">0</span>], &amp;p[<span class="num">0</span>], len );
}
<span class="kwb">void</span> <span class="kwd">next_permutation</span>( G*p ){
    <span class="kwb">int</span> i=<span class="num">1</span>;
    <span class="kwd">rotate</span>( p-&gt;perm, i);
    <span class="kwa">while</span> (++p-&gt;count[i] &gt; i){
        p-&gt;count[i++] = <span class="num">0</span>;
        <span class="kwd">rotate</span>( p-&gt;perm, i );
    }
}
<span class="kwc">typedef</span> <span class="kwb">struct</span> tagTaskContext{
    <span class="kwb">union</span>{<span class="slc">// to avoid false sharing on multi cpu.</span>
        pthread_t thread;
        <span class="kwb">char</span> padding[<span class="num">64</span>];
    };
    G generator;
    <span class="kwb">int</span> first_index, last_index;
    Result result;
} Task;

<span class="kwb">void</span>* <span class="kwd">task_body</span>( <span class="kwb">void</span> *pvoid ){
    Task* p = (Task*)pvoid;
    <span class="kwb">int</span> total_flips;
    <span class="kwb">int</span> i = p-&gt;first_index;
    <span class="kwb">int</span> n = p-&gt;last_index;
    <span class="kwd">first_permutation</span>( &amp;p-&gt;generator, i );
    <span class="kwa">for</span>(; i &lt; n; ++i){
        <span class="kwb">int</span> data[MAX_PROBLEM_SIZE];
        <span class="kwc">register</span> <span class="kwb">int</span> flips = <span class="num">0</span>;        
        <span class="kwc">register</span> <span class="kwb">int</span> f =  p-&gt;generator.perm[<span class="num">0</span>];
        <span class="kwa">if</span>(f){
            <span class="kwd">copy</span>( &amp;data[<span class="num">0</span>], &amp;p-&gt;generator.perm[<span class="num">0</span>], p-&gt;generator.length );
            <span class="kwa">do</span>{
                <span class="kwd">reverse</span>( data, f );
                ++flips;
            }<span class="kwa">while</span>( <span class="kwd">unlikely</span>( f = data[<span class="num">0</span>] ) );
        }
        total_flips = flips;
        p-&gt;result.maxflips = <span class="kwd">max</span>(p-&gt;result.maxflips, total_flips);
        p-&gt;result.checksum += i%<span class="num">2</span> ==<span class="num">0</span> ? total_flips : -total_flips;
        <span class="kwd">next_permutation</span>( &amp;p-&gt;generator );
    }
    <span class="kwa">return</span> <span class="num">0</span>;
}
<span class="kwb">int</span> <span class="kwd">hardware_concurrency</span>(){<span class="slc">//linux specific</span>
    <span class="kwb">long</span> numCPU = <span class="kwd">sysconf</span>( _SC_NPROCESSORS_ONLN );
    <span class="kwa">if</span>( numCPU &lt;= <span class="num">0</span> ) <span class="kwa">return</span> <span class="num">1</span>;
    <span class="kwa">if</span>( numCPU &gt;= MAX_CPU_LIMIT ) <span class="kwa">return</span> MAX_CPU_LIMIT;
    <span class="kwa">return</span> (<span class="kwb">int</span>)numCPU;
}
<span class="kwb">const char</span>* usage = <span class="str">&quot;usage fannkuchredux number</span><span class="esc">\n</span><span class="str">\</span>
<span class="str">number has to be in range [3-12]</span><span class="esc">\n</span><span class="str">&quot;</span>;
<span class="kwb">int</span> <span class="kwd">main</span>(<span class="kwb">int</span> argc, <span class="kwb">char</span>* argv[]){
    <span class="kwb">int</span> len;
    <span class="kwb">int</span> factorials[MAX_PROBLEM_SIZE+<span class="num">1</span>];
    <span class="kwb">int</span> n_cpu;
    <span class="kwb">int</span> i, n, index, index_max, index_step, err;
    Result result;
    Task parts[MAX_CPU_LIMIT];
    <span class="kwa">if</span>( argc &lt; <span class="num">2</span> ){
        <span class="kwd">printf</span>(<span class="str">&quot;%s&quot;</span>, usage);
        <span class="kwa">return</span> <span class="num">1</span>;
    }
    len = <span class="kwd">atoi</span>(argv[<span class="num">1</span>] ); 
    <span class="kwa">if</span>( len &lt; <span class="num">3</span> || len &gt; MAX_PROBLEM_SIZE ){
        <span class="kwd">printf</span>(<span class="str">&quot;%s&quot;</span>, usage);
        <span class="kwa">return</span> <span class="num">2</span>;
    }
    factorials[<span class="num">0</span>] = <span class="num">1</span>;
    <span class="kwa">for</span>( i = <span class="num">1</span>; i&lt;len+<span class="num">1</span>; ++i )
        factorials[i] = factorials[i-<span class="num">1</span>]*i;
    n_cpu = <span class="kwd">hardware_concurrency</span>();
    result.maxflips = <span class="num">0</span>;
    result.checksum = <span class="num">0</span>;
    n = <span class="kwd">min</span>( n_cpu, MAX_CPU_LIMIT );
    index = <span class="num">0</span>;
    index_max = factorials[len]; 
    index_step = (index_max + n-<span class="num">1</span>)/n;
    <span class="kwa">for</span>(i = <span class="num">0</span>; i&lt;n; ++i, index += index_step){
        Task* p = &amp;parts[i];
        <span class="slc">//init task</span>
        <span class="kwd">memset</span>( p, <span class="num">0</span>, <span class="kwa">sizeof</span>(Task) );
        p-&gt;generator.factorials = factorials;
        p-&gt;generator.length = len;
        p-&gt;first_index = index;
        p-&gt;last_index = index + index_step;
        err = <span class="kwd">pthread_create</span>( &amp;p-&gt;thread, <span class="num">0</span>, task_body, p );
        <span class="kwa">if</span>( err ) <span class="kwa">return</span> err;
    }    
    <span class="kwa">for</span>(i = <span class="num">0</span>; i&lt;n; ++i){
        Task *p = &amp;parts[i];
        err = <span class="kwd">pthread_join</span>( p-&gt;thread, <span class="num">0</span> );
        <span class="kwa">if</span>( err ) <span class="kwa">return</span> err;
        result.maxflips = <span class="kwd">max</span>( p-&gt;result.maxflips, result.maxflips );
        result.checksum += p-&gt;result.checksum;
    }
    <span class="kwd">printf</span>(<span class="str">&quot;%d</span><span class="esc">\n</span><span class="str">Pfannkuchen(%d) = %d</span><span class="esc">\n</span><span class="str">&quot;</span>, result.checksum, len, result.maxflips);
    <span class="kwa">return</span> <span class="num">0</span>;
}
