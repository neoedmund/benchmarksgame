<span class="com">(* The Computer Language Benchmarks Game</span>
<span class="com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * contributed by Don Syme</span>
<span class="com"> * based on C# contribution by Isaac Gouy, Antti Lankila, A.Nahr, The Anh Tran</span>
<span class="com"> * Uses native pointer access to one big pinned blob, plus simple task runner</span>
<span class="com"> *)</span>

<span class="ppc">#nowarn</span> <span class="pps">&quot;9&quot;</span><span class="ppc"></span>

<span class="kwa">open</span> <span class="kwd">System</span>
<span class="kwa">open</span> <span class="kwd">System</span>.<span class="kwd">IO</span>
<span class="kwa">open</span> <span class="kwd">System</span>.<span class="kwd">Collections</span>.<span class="kwd">Generic</span>
<span class="kwa">open</span> <span class="kwd">System</span>.<span class="kwd">Text</span>
<span class="kwa">open</span> <span class="kwd">System</span>.<span class="kwd">Threading</span>
<span class="kwa">open</span> <span class="kwd">System</span>.<span class="kwd">Runtime</span>.<span class="kwd">InteropServices</span>
<span class="kwa">open</span> <span class="kwd">Microsoft</span>.<span class="kwd">FSharp</span>.<span class="kwd">NativeInterop</span>

<span class="kwa">let</span> toBytes (s: <span class="kwb">string</span>) = s.<span class="kwd">ToCharArray</span>() |&gt; <span class="kwd">Array</span>.map byte
<span class="kwa">let</span> toString (s: byte []) = <span class="kwd">String</span>(s |&gt; <span class="kwd">Array</span>.map char)
<span class="kwa">let</span> prefixes = [| <span class="str">&quot;ggt&quot;</span>; <span class="str">&quot;ggta&quot;</span>; <span class="str">&quot;ggtatt&quot;</span>; <span class="str">&quot;ggtattttaatt&quot;</span>; <span class="str">&quot;ggtattttaatttatagt&quot;</span> |]

<span class="kwa">let</span> prefixBytes = 
    [| <span class="kwa">for</span> p <span class="kwa">in</span> prefixes -&gt; toBytes p |]

<span class="kwa">let</span> prefixLengths = 
    [| <span class="kwa">for</span> p <span class="kwa">in</span> prefixBytes -&gt; p.<span class="kwd">Length</span> |]

<span class="kwa">let</span> prefixOffsets = <span class="kwd">Array</span>.scan (+) <span class="num">0</span> prefixLengths
<span class="kwa">let</span> dnaStart = prefixOffsets.[prefixLengths.<span class="kwd">Length</span>]

<span class="kwa">let</span> createDNA() = 
    <span class="slc">//let input = File.OpenText(&quot;knucleotide-input-2500000.txt&quot;)</span>
    <span class="kwa">let</span> input = <span class="kwa">new</span> <span class="kwd">StreamReader</span>(<span class="kwd">Console</span>.<span class="kwd">OpenStandardInput</span>())
    
    <span class="kwa">let</span> text = 
        seq { 
            <span class="kwa">while true do</span>
                yield input.<span class="kwd">ReadLine</span>()
        }
        |&gt; <span class="kwd">Seq</span>.takeWhile (<span class="kwa">fun</span> x -&gt; x &lt;&gt; <span class="kwa">null</span>)
        |&gt; <span class="kwd">Seq</span>.skipWhile (<span class="kwa">fun</span> x -&gt; not (x.<span class="kwd">StartsWith</span>(<span class="str">&quot;&gt;THREE&quot;</span>)))
        |&gt; <span class="kwd">Seq</span>.skip <span class="num">1</span>
        |&gt; <span class="kwd">String</span>.concat <span class="str">&quot;&quot;</span>
    
    <span class="slc">// convert the text to a pinned array of bytes</span>
    <span class="kwa">let</span> bytes = 
        text
        |&gt; toBytes
        |&gt; <span class="kwd">Array</span>.append (<span class="kwd">Array</span>.concat prefixBytes)
    
    <span class="kwa">let</span> h = <span class="kwd">GCHandle</span>.<span class="kwd">Alloc</span>(bytes, <span class="kwd">GCHandleType</span>.<span class="kwd">Pinned</span>)
    <span class="kwa">let</span> addr = h.<span class="kwd">AddrOfPinnedObject</span>() |&gt; <span class="kwd">NativePtr</span>.ofNativeInt
    addr, bytes.<span class="kwd">Length</span>

<span class="kwa">let</span> dna, dnaLength = createDNA()
<span class="kwa">let inline</span> readDNA i = <span class="kwd">NativePtr</span>.get dna i

<span class="kwa">let inline</span> readDNABytes s n = 
    <span class="kwa">let</span> res = <span class="kwd">Array</span>.zeroCreate n
    <span class="kwa">for</span> i <span class="kwa">in</span> <span class="num">0</span>..n - <span class="num">1</span> <span class="kwa">do</span>
        res.[i] &lt;- <span class="kwd">NativePtr</span>.get dna (s + i)
    res

<span class="kwa">let</span> keyHash (k, n) = 
    <span class="kwa">let mutable</span> hash = <span class="num">0</span>
    <span class="kwa">for</span> i <span class="kwa">in</span> <span class="num">0</span>..n - <span class="num">1</span> <span class="kwa">do</span>
        hash &lt;- hash * <span class="num">31</span> + <span class="kwb">int</span> (readDNA (k + i))
    hash

<span class="kwa">let</span> keyText (k, n) = toString(readDNABytes k n).<span class="kwd">ToUpper</span>()

<span class="kwa">type</span> <span class="kwd">Value</span> = 
    { <span class="kwa">mutable</span> value: <span class="kwb">int</span>
      key: <span class="kwb">int</span> * <span class="kwb">int</span> }

<span class="kwa">let</span> generateFrequencies (frameSize) = 
    <span class="kwa">let</span> freq = <span class="kwd">Dictionary</span>&lt;<span class="kwb">int</span>, <span class="kwd">Value</span>&gt;()
    <span class="kwa">let mutable</span> v = <span class="kwd">Unchecked</span>.defaultof&lt;<span class="kwd">Value</span>&gt;
    <span class="kwa">for</span> i <span class="kwa">in</span> dnaStart..dnaLength - frameSize <span class="kwa">do</span>
        <span class="kwa">let</span> h = keyHash (i, frameSize)
        <span class="kwa">if</span> freq.<span class="kwd">TryGetValue</span>(h, &amp;v) <span class="kwa">then</span> v.value &lt;- v.value + <span class="num">1</span>
        <span class="kwa">else</span> freq.<span class="kwd">Add</span>(h, { value = <span class="num">1</span>; key = (i, frameSize) })
    freq

<span class="kwa">let</span> writeCount (n: <span class="kwb">int</span>) = 
    <span class="kwa">let</span> freq = generateFrequencies (prefixLengths.[n])
    <span class="kwa">let</span> hash = keyHash (prefixOffsets.[n], prefixLengths.[n])
    
    <span class="kwa">let</span> count = 
        <span class="kwa">if</span> freq.<span class="kwd">ContainsKey</span>(hash) <span class="kwa">then</span> freq.[hash].value
        <span class="kwa">else</span> <span class="num">0</span>
    <span class="kwd">String</span>.<span class="kwd">Format</span>(<span class="str">&quot;</span><span class="ipl">{0}</span><span class="str"></span><span class="esc">\t</span><span class="str"></span><span class="ipl">{1}</span><span class="str">&quot;</span>, count, prefixes.[n].<span class="kwd">ToUpper</span>())

<span class="kwa">type</span> <span class="kwd">Pair</span> = <span class="kwd">KeyValuePair</span>&lt;<span class="kwb">int</span>, <span class="kwd">Value</span>&gt;

<span class="kwa">let</span> writeFrequencies (nucleotideLength) = 
    <span class="kwa">let</span> freq = generateFrequencies (nucleotideLength)
    <span class="kwa">let</span> items = <span class="kwa">new</span> <span class="kwd">ResizeArray</span>&lt;<span class="kwd">Pair</span>&gt;(freq)
    items.<span class="kwd">Sort</span>(<span class="kwa">fun</span> (p1: <span class="kwd">Pair</span>) (p2: <span class="kwd">Pair</span>) -&gt; 
        <span class="kwa">let</span> c = p2.<span class="kwd">Value</span>.value - p1.<span class="kwd">Value</span>.value
        <span class="kwa">if</span> c = <span class="num">0</span> <span class="kwa">then</span> keyText(p1.<span class="kwd">Value</span>.key).<span class="kwd">CompareTo</span>(keyText(p2.<span class="kwd">Value</span>.key))
        <span class="kwa">else</span> c)
    <span class="kwa">let</span> buf = <span class="kwa">new</span> <span class="kwd">StringBuilder</span>()
    <span class="kwa">let</span> sum = dnaLength - dnaStart - nucleotideLength + <span class="num">1</span>
    <span class="kwa">for</span> element <span class="kwa">in</span> items <span class="kwa">do</span>
        <span class="kwa">let</span> percent = double element.<span class="kwd">Value</span>.value * <span class="num">100.0</span> / double sum
        buf.<span class="kwd">AppendFormat</span>(<span class="str">&quot;</span><span class="ipl">{0}</span> <span class="str">{1:f3}</span><span class="esc">\n</span><span class="str">&quot;</span>, keyText element.<span class="kwd">Value</span>.key, percent) |&gt; ignore
    buf.<span class="kwd">ToString</span>()

<span class="kwa">let</span> runTasks (tasks: (<span class="kwb">unit</span> -&gt; '<span class="kwd">T</span>) []) = 
    <span class="kwa">let</span> taskCount = <span class="kwb">ref</span> tasks.<span class="kwd">Length</span>
    <span class="kwa">let</span> results = <span class="kwd">Array</span>.zeroCreate tasks.<span class="kwd">Length</span>
    
    <span class="kwa">let rec</span> worker() = 
        <span class="kwa">let</span> j = <span class="kwd">Interlocked</span>.<span class="kwd">Decrement</span>(&amp;taskCount.contents)
        <span class="kwa">if</span> j &gt;= <span class="num">0</span> <span class="kwa">then</span> 
            results.[j] &lt;- tasks.[j]()
            worker()
    
    <span class="kwa">let</span> threads = 
        <span class="kwd">Array</span>.init <span class="kwd">Environment</span>.<span class="kwd">ProcessorCount</span> (<span class="kwa">fun</span> i -&gt; 
            <span class="kwa">let</span> t = <span class="kwa">new</span> <span class="kwd">Thread</span>(worker)
            t.<span class="kwd">Start</span>()
            t)
    
    <span class="kwa">for</span> t <span class="kwa">in</span> threads <span class="kwa">do</span>
        t.<span class="kwd">Join</span>()
    results

<span class="kwa">let</span> results = 
    runTasks [| yield (<span class="kwa">fun</span> () -&gt; writeFrequencies <span class="num">1</span>)
                yield (<span class="kwa">fun</span> () -&gt; writeFrequencies <span class="num">2</span>)
                <span class="kwa">for</span> i <span class="kwa">in</span> <span class="num">0</span>..prefixes.<span class="kwd">Length</span> - <span class="num">1</span> <span class="kwa">do</span>
                    yield (<span class="kwa">fun</span> () -&gt; writeCount i) |]

<span class="slc">//let endTime = System.DateTime.Now.Ticks</span>
<span class="kwa">for</span> s <span class="kwa">in</span> results <span class="kwa">do</span>
    <span class="kwd">Console</span>.<span class="kwd">Out</span>.<span class="kwd">WriteLine</span>(s)
