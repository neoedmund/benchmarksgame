<span class="com">/* The Computer Language Benchmarks Game</span>
<span class="com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Branimir Maksimovic</span>
<span class="com">   first permutation algo taken from Miroslav Rubanets program</span>
<span class="com">*/</span>
<span class="ppc">#include &lt;cstdlib&gt;</span>
<span class="ppc">#include &lt;cstdio&gt;</span>
<span class="ppc">#include &lt;algorithm&gt;</span>
<span class="ppc">#include &lt;future&gt;</span>
<span class="ppc">#include &lt;unistd.h&gt;</span>

<span class="kwc">typedef</span> <span class="kwb">unsigned char</span> int_t;

<span class="kwb">void</span> <span class="kwd">rotate</span>(int_t* p, <span class="kwb">int</span> n)
{
   int_t tmp = p[<span class="num">0</span>];
   <span class="kwa">for</span>(<span class="kwb">int</span> i = <span class="num">0</span>; i &lt; n; ++i)p[i]=p[i+<span class="num">1</span>];
   p[n] = tmp;
}

<span class="kwb">void</span> <span class="kwd">next_permutation</span>(int_t* beg, <span class="kwb">int</span> n, int_t* c)
{
   <span class="kwb">int</span> i = <span class="num">1</span>;
   <span class="kwa">while</span>(i&lt;n)
   {
      <span class="kwd">rotate</span>(beg,i);
      <span class="kwa">if</span>(c[i]&gt;=i)c[i++]=<span class="num">0</span>;
      <span class="kwa">else break</span>;
   }
   ++c[i];
}

<span class="kwc">class</span> Perm{
<span class="kwc">public</span>:
<span class="kwb">struct</span> P{
   int_t p[<span class="num">16</span>];
};
<span class="kwd">Perm</span>(<span class="kwb">unsigned</span> n)
: cnt {<span class="num">0</span>},<span class="kwd">n</span>(n),<span class="kwd">permcount</span>(<span class="num">0</span>)
{
   fact[<span class="num">0</span>]=<span class="num">1</span>;
   <span class="kwa">for</span>(<span class="kwb">unsigned</span> i=<span class="num">1</span>;i&lt;n+<span class="num">1</span>;++i)
   {
      fact[i]=fact[i-<span class="num">1</span>]*i;
   }
}
P <span class="kwd">get</span>(<span class="kwb">int</span> idx)
{ 
    <span class="kwb">char</span> pp[<span class="num">16</span>]={};
    permcount = idx;
    int_t i = <span class="num">0</span>;
    std::<span class="kwd">generate</span>(perm.p,perm.p+n,[&amp;i](){<span class="kwa">return</span> ++i;});
    <span class="kwa">for</span> ( <span class="kwb">unsigned</span> i=n-<span class="num">1</span>; i&gt;<span class="num">0</span>; --i ) {
        <span class="kwb">unsigned</span> d = idx / fact[i];
        cnt[i] = d;
        idx = idx % fact[i];
        std::<span class="kwd">copy</span>( &amp;perm.p[<span class="num">0</span>], &amp;perm.p[i+<span class="num">1</span>], &amp;pp[<span class="num">0</span>] );
        <span class="kwa">for</span> (<span class="kwb">unsigned</span> j=<span class="num">0</span>; j&lt;=i; ++j ){
         perm.p[j] = j+d &lt;= i ? pp[j+d] : pp[j+d-i-<span class="num">1</span>];
      }
    }
   <span class="kwa">return</span> perm;
}
P <span class="kwd">next</span>()
{
   <span class="kwd">next_permutation</span>(perm.p,n,cnt);
   ++permcount;
   <span class="kwa">return</span> perm;
}
<span class="kwb">unsigned</span> <span class="kwd">count</span>()<span class="kwb">const</span> { <span class="kwa">return</span> permcount; }
<span class="kwb">unsigned</span> <span class="kwd">max</span>()<span class="kwb">const</span> { <span class="kwa">return</span> fact[n]; }
<span class="kwc">private</span>:
   int_t cnt[<span class="num">16</span>];
   <span class="kwb">unsigned</span> fact[<span class="num">16</span>],n,permcount;
   P perm;
};

<span class="kwb">struct</span> Result{
   <span class="kwb">int</span> checksum;
   <span class="kwb">int</span> maxflips;
};

Result <span class="kwd">work</span>(Perm perm,<span class="kwb">unsigned</span> n,<span class="kwb">unsigned</span> max)
{
   Result r={<span class="num">0</span>};
   Perm::P p = perm.<span class="kwd">get</span>(n);
   <span class="kwa">for</span>(; perm.<span class="kwd">count</span>()&lt;max;p=perm.<span class="kwd">next</span>())
   {
      <span class="kwb">int</span> flips = <span class="num">0</span>;
      <span class="kwa">while</span>(p.p[<span class="num">0</span>] != <span class="num">1</span>)
      {
         std::<span class="kwd">reverse</span>(p.p,p.p+p.p[<span class="num">0</span>]);
         ++flips;
      }
      r.checksum += (perm.<span class="kwd">count</span>()%<span class="num">2</span> == <span class="num">0</span>)?flips:-flips;
      r.maxflips = std::<span class="kwd">max</span>(r.maxflips,flips);
   }
   <span class="kwa">return</span> r;
}

Result <span class="kwd">fannkuch</span>(<span class="kwb">int</span> n)
{
   Result tmp = {<span class="num">0</span>};
   Perm <span class="kwd">perm</span>(n);
   
   <span class="kwb">unsigned</span> N = <span class="kwd">sysconf</span>(_SC_NPROCESSORS_ONLN);
   std::future&lt;Result&gt; ft[N];
   
   <span class="kwb">unsigned</span> k = perm.<span class="kwd">max</span>()/N;
   <span class="kwb">unsigned</span> j = <span class="num">0</span>;
   <span class="kwa">for</span>(<span class="kwb">unsigned</span> i = <span class="num">0</span> ; i &lt; N;++i,j+=k)
   {
      <span class="kwb">unsigned</span> max = i&lt;N-<span class="num">1</span>?j+k:perm.<span class="kwd">max</span>();
      ft[i] = std::<span class="kwd">async</span>(std::launch::async,work,perm,j,max);
   }
   <span class="kwa">for</span>(<span class="kwb">unsigned</span> i = <span class="num">0</span>; i &lt; N; ++i)
   {
      <span class="kwc">auto</span> r = ft[i].<span class="kwd">get</span>();
      tmp.checksum += r.checksum;
      tmp.maxflips = std::<span class="kwd">max</span>(tmp.maxflips,r.maxflips);
   }
   <span class="kwa">return</span> tmp;
}

<span class="kwb">int</span> <span class="kwd">main</span>(<span class="kwb">int</span> argc, <span class="kwb">char</span>** argv)
{
   <span class="kwb">int</span> n = <span class="num">7</span>;
   <span class="kwa">if</span>(argc &gt; <span class="num">1</span>)n = <span class="kwd">atoi</span>(argv[<span class="num">1</span>]);
   <span class="kwa">if</span>(n &lt; <span class="num">3</span> || n &gt; <span class="num">12</span>)
   {
      <span class="kwd">printf</span>(<span class="str">&quot;n should be between [3 and 12]</span><span class="esc">\n</span><span class="str">&quot;</span>);
      <span class="kwa">return</span> <span class="num">0</span>;
   }
   Result r = <span class="kwd">fannkuch</span>(n);
   <span class="kwd">printf</span>(<span class="str">&quot;%d</span><span class="esc">\n</span><span class="str">Pfannkuchen(%d) = %d</span><span class="esc">\n</span><span class="str">&quot;</span>,r.checksum,n,r.maxflips);
}
