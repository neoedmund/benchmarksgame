<span class="com">/* The Computer Language Benchmarks Game</span>
<span class="com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   direct transliteration of Greg Buchholz's C program</span>
<span class="com">   contributed by Isaac Gouy, fix by David Turnbull</span>
<span class="com">*/</span>

<span class="kwa">import</span> Glibc

<span class="kwa">let</span> w: <span class="kwb">Int</span> = <span class="kwb">Int</span>(Process.arguments[<span class="num">1</span>])!
<span class="kwa">let</span> h = w

<span class="kwa">var</span> bit_num = <span class="num">0</span>, i = <span class="num">0</span>, byte_acc: Int32 = <span class="num">0</span>
<span class="kwa">let</span> iter = <span class="num">50</span>, limit = <span class="num">2.0</span>
<span class="kwa">var</span> Zr, Zi, Cr, Ci, Tr, Ti: <span class="kwb">Double</span>

<span class="kwd">print</span>(<span class="str">&quot;P4</span><span class="esc">\n</span><span class="str">\(w) \(h)&quot;</span>)

<span class="kwa">for</span> y <span class="kwa">in</span> <span class="num">0</span>..&lt;h {
   <span class="kwa">for</span> x <span class="kwa">in</span> <span class="num">0</span>..&lt;w {

      Zr = <span class="num">0.0</span>; Zi = <span class="num">0.0</span>; Tr = <span class="num">0.0</span>; Ti = <span class="num">0.0</span>
      Cr = <span class="num">2.0</span>*<span class="kwb">Double</span>(x)/<span class="kwb">Double</span>(w) - <span class="num">1.5</span>; 
      Ci = <span class="num">2.0</span>*<span class="kwb">Double</span>(y)/<span class="kwb">Double</span>(h) - <span class="num">1.0</span>

      i = <span class="num">0</span>
      <span class="kwa">while</span> i &lt; iter &amp;&amp; (Tr+Ti &lt;= limit*limit) {
         ++i
         Zi = <span class="num">2.0</span>*Zr*Zi + Ci
         Zr = Tr - Ti + Cr
         Tr = Zr * Zr
         Ti = Zi * Zi
      }

      byte_acc &lt;&lt;= <span class="num">1</span>
      <span class="kwa">if</span> Tr+Ti &lt;= limit*limit { byte_acc |= <span class="num">0x01</span> }

      ++bit_num

      <span class="kwa">if</span> bit_num == <span class="num">8</span> {
         <span class="kwd">putc</span>(byte_acc,stdout) <span class="slc">// Glibc</span>
         byte_acc = <span class="num">0</span>
         bit_num = <span class="num">0</span>
      }
      <span class="kwa">else if</span> x == w-<span class="num">1</span> {
         byte_acc &lt;&lt;= (<span class="num">8</span>-w%<span class="num">8</span>)
         <span class="kwd">putc</span>(byte_acc,stdout) <span class="slc">// Glibc</span>
         byte_acc = <span class="num">0</span>
         bit_num = <span class="num">0</span>
      }
   }
}
