<span class="slc"># The Computer Language Benchmarks Game</span>
<span class="slc"># http://benchmarksgame.alioth.debian.org</span>
<span class="slc">#</span>
<span class="slc"># Optimized for Ruby by Jesse Millikan</span>
<span class="slc"># From version ported by Michael Neumann from the C gcc version, </span>
<span class="slc"># which was written by Christoph Bauer. </span>

SOLAR_MASS = <span class="num">4</span> * Math:<span class="kwc">:PI</span>**<span class="num">2</span>
DAYS_PER_YEAR = <span class="num">365.24</span>

<span class="kwa">class</span> Planet
 attr_accessor <span class="kwc">:x</span>, <span class="kwc">:y</span>, <span class="kwc">:z</span>, <span class="kwc">:vx</span>, <span class="kwc">:vy</span>, <span class="kwc">:vz</span>, <span class="kwc">:mass</span>

 <span class="kwa">def</span> <span class="kwd">initialize</span>(x, y, z, vx, vy, vz, mass<span class="opt">)</span>
  <span class="kwb">&#64;x</span>, <span class="kwb">&#64;y</span>, <span class="kwb">&#64;z</span> = x, y, z
  <span class="kwb">&#64;vx</span>, <span class="kwb">&#64;vy</span>, <span class="kwb">&#64;vz</span> = vx * DAYS_PER_YEAR, vy * DAYS_PER_YEAR, vz * DAYS_PER_YEAR 
  <span class="kwb">&#64;mass</span> = mass * SOLAR_MASS
 <span class="kwa">end</span>

 <span class="kwa">def</span> <span class="kwd">move_from_i</span>(bodies, nbodies, dt, i<span class="opt">)</span>
  <span class="kwa">while</span> i &lt; nbodies
   b2 = bodies[i]
   dx = <span class="kwb">&#64;x</span> - b2.x
   dy = <span class="kwb">&#64;y</span> - b2.y
   dz = <span class="kwb">&#64;z</span> - b2.z

   distance = Math.<span class="kwd">sqrt</span>(dx * dx + dy * dy + dz * dz<span class="opt">)</span>
   mag = dt / (distance * distance * distance<span class="opt">)</span>
   b_mass_mag, b2_mass_mag = <span class="kwb">&#64;mass</span> * mag, b2.mass * mag

   <span class="kwb">&#64;vx</span> -= dx * b2_mass_mag
   <span class="kwb">&#64;vy</span> -= dy * b2_mass_mag
   <span class="kwb">&#64;vz</span> -= dz * b2_mass_mag
   b2.vx += dx * b_mass_mag
   b2.vy += dy * b_mass_mag
   b2.vz += dz * b_mass_mag
   i += <span class="num">1</span> 
  <span class="kwa">end</span>

  <span class="kwb">&#64;x</span> += dt * <span class="kwb">&#64;vx</span>
  <span class="kwb">&#64;y</span> += dt * <span class="kwb">&#64;vy</span>
  <span class="kwb">&#64;z</span> += dt * <span class="kwb">&#64;vz</span>
 <span class="kwa">end</span>
<span class="kwa">end</span>

<span class="kwa">def</span> <span class="kwd">energy</span>(bodies<span class="opt">)</span>
  e = <span class="num">0.0</span>
  nbodies = bodies.size
 
  <span class="kwa">for</span> i <span class="kwa">in</span> <span class="num">0</span> ... nbodies 
    b = bodies[i]
    e += <span class="num">0.5</span> * b.mass * (b.vx * b.vx + b.vy * b.vy + b.vz * b.vz<span class="opt">)</span>
    <span class="kwa">for</span> j <span class="kwa">in</span> (i + <span class="num">1</span><span class="opt">)</span> ... nbodies
      b2 = bodies[j]
      dx = b.x - b2.x
      dy = b.y - b2.y
      dz = b.z - b2.z
      distance = Math.<span class="kwd">sqrt</span>(dx * dx + dy * dy + dz * dz<span class="opt">)</span>
      e -= (b.mass * b2.mass<span class="opt">)</span> / distance
    <span class="kwa">end</span>
  <span class="kwa">end</span>
  e
<span class="kwa">end</span>

<span class="kwa">def</span> <span class="kwd">offset_momentum</span>(bodies<span class="opt">)</span>
  px, py, pz = <span class="num">0.0</span>, <span class="num">0.0</span>, <span class="num">0.0</span>

  <span class="kwa">for</span> b <span class="kwa">in</span> bodies
    m = b.mass
    px += b.vx * m
    py += b.vy * m
    pz += b.vz * m
  <span class="kwa">end</span>

  b = bodies[<span class="num">0</span>]
  b.vx = - px / SOLAR_MASS
  b.vy = - py / SOLAR_MASS
  b.vz = - pz / SOLAR_MASS
<span class="kwa">end</span>

BODIES = [
  <span class="slc"># sun</span>
  Planet.<span class="kwd">new</span>(<span class="num">0.0</span>, <span class="num">0.0</span>, <span class="num">0.0</span>, <span class="num">0.0</span>, <span class="num">0.0</span>, <span class="num">0.0</span>, <span class="num">1.0</span><span class="opt">)</span>,

  <span class="slc"># jupiter</span>
  Planet.<span class="kwd">new</span>(
    <span class="num">4.84143144246472090e+00</span>,
    -<span class="num">1.16032004402742839e+00</span>,
    -<span class="num">1.03622044471123109e-01</span>,
    <span class="num">1.66007664274403694e-03</span>,
    <span class="num">7.69901118419740425e-03</span>,
    -<span class="num">6.90460016972063023e-05</span>,
    <span class="num">9.54791938424326609e-04</span><span class="opt">)</span>,

  <span class="slc"># saturn</span>
  Planet.<span class="kwd">new</span>(
    <span class="num">8.34336671824457987e+00</span>,
    <span class="num">4.12479856412430479e+00</span>,
    -<span class="num">4.03523417114321381e-01</span>,
    -<span class="num">2.76742510726862411e-03</span>,
    <span class="num">4.99852801234917238e-03</span>,
    <span class="num">2.30417297573763929e-05</span>,
    <span class="num">2.85885980666130812e-04</span><span class="opt">)</span>,

  <span class="slc"># uranus</span>
  Planet.<span class="kwd">new</span>(
    <span class="num">1.28943695621391310e+01</span>,
    -<span class="num">1.51111514016986312e+01</span>,
    -<span class="num">2.23307578892655734e-01</span>,
    <span class="num">2.96460137564761618e-03</span>,
    <span class="num">2.37847173959480950e-03</span>,
    -<span class="num">2.96589568540237556e-05</span>,
    <span class="num">4.36624404335156298e-05</span><span class="opt">)</span>,

  <span class="slc"># neptune</span>
  Planet.<span class="kwd">new</span>(
    <span class="num">1.53796971148509165e+01</span>,
    -<span class="num">2.59193146099879641e+01</span>,
    <span class="num">1.79258772950371181e-01</span>,
    <span class="num">2.68067772490389322e-03</span>,
    <span class="num">1.62824170038242295e-03</span>,
    -<span class="num">9.51592254519715870e-05</span>,
    <span class="num">5.15138902046611451e-05</span><span class="opt">)</span>
]


n = <span class="kwd">Integer</span>(<span class="kwc">ARGV</span>[<span class="num">0</span>]<span class="opt">)</span>

<span class="kwd">offset_momentum</span>(BODIES<span class="opt">)</span>

puts <span class="str">&quot;%.9f&quot;</span> % <span class="kwd">energy</span>(BODIES<span class="opt">)</span>

nbodies = BODIES.size
dt = <span class="num">0.01</span>

n.times <span class="kwa">do</span>
  i = <span class="num">0</span>
  <span class="kwa">while</span> i &lt; nbodies
    b = BODIES[i]
    b.<span class="kwd">move_from_i</span>(BODIES, nbodies, dt, i + <span class="num">1</span><span class="opt">)</span>
    i += <span class="num">1</span>
  <span class="kwa">end</span>
<span class="kwa">end</span>

puts <span class="str">&quot;%.9f&quot;</span> % <span class="kwd">energy</span>(BODIES<span class="opt">)</span>
