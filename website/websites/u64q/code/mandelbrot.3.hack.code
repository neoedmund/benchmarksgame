&lt;?hh
<span class="com">/* </span>
<span class="com">   The Computer Language Benchmarks Game</span>
<span class="com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Thomas GODART (based on Greg Buchholz's C program)</span>
<span class="com">   multicore by anon</span>
<span class="com">   PHP as HHVM/Hack by Isaac Gouy</span>
<span class="com"> */</span>

<span class="kwa">function</span> <span class="kwd">getProcs</span>() {
   $procs = <span class="num">1</span>;
   <span class="kwa">if</span> (<span class="kwd">file_exists</span>(<span class="str">'/proc/cpuinfo'</span>)) {
      $procs = <span class="kwd">preg_match_all</span>(<span class="str">'/^processor\s/m'</span>, <span class="kwd">file_get_contents</span>(<span class="str">'/proc/cpuinfo'</span>), $discard);
   }
   $procs &lt;&lt;= <span class="num">1</span>;
   <span class="kwa">return</span> $procs;
}

$h = (<span class="kwb">int</span>) (($argc == <span class="num">2</span>) ? $argv[<span class="num">1</span>] : <span class="num">600</span>);
$w = $h;

<span class="kwa">if</span> ($w % <span class="num">8</span>) {
   <span class="kwd">fprintf</span>(STDERR, <span class="str">&quot;width</span> <span class="ipl">%d</span> <span class="str">not multiple of 8</span><span class="esc">\n</span><span class="str">&quot;</span>, $w);
   <span class="kwa">exit</span>(<span class="num">1</span>);
}

<span class="kwd">printf</span> (<span class="str">&quot;P4</span><span class="esc">\n</span><span class="str"></span><span class="ipl">%d %d</span><span class="str"></span><span class="esc">\n</span><span class="str">&quot;</span>, $w, $h);

$shsize = $w * ($w &gt;&gt; <span class="num">3</span>);
$shmop = <span class="kwd">shmop_open</span>(<span class="kwd">ftok</span>(__FILE__, <span class="kwd">chr</span>(<span class="kwd">time</span>() &amp; <span class="num">255</span>)), <span class="str">'c'</span>, <span class="num">0644</span>, $shsize);

<span class="kwa">if</span> (!$shmop) {
   <span class="kwa">echo</span> <span class="str">&quot;faild to shmop_open()</span><span class="esc">\n</span><span class="str">&quot;</span>;
   <span class="kwa">exit</span>(<span class="num">1</span>);
}

$bit_num = <span class="num">128</span>;
$byte_acc = <span class="num">0</span>;

$yfac = <span class="num">2.0</span> / $h;
$xfac = <span class="num">2.0</span> / $w;

$shifted_w = $w &gt;&gt; <span class="num">3</span>;
$step = <span class="num">1</span>;

$procs = <span class="kwd">getProcs</span>();
$child = $procs - <span class="num">1</span>;
<span class="kwa">while</span> ($child &gt; <span class="num">0</span>) {
   $pid = <span class="kwd">pcntl_fork</span>();
   <span class="kwa">if</span> ($pid === -<span class="num">1</span>) {
      <span class="kwa">die</span>(<span class="str">'could not fork'</span>);
   } <span class="kwa">else if</span> ($pid) {
      --$child;
      <span class="kwa">continue</span>;
   }
   <span class="kwa">break</span>;
}

$step = $procs;
$y = $child;

<span class="kwa">for</span> ( ; $y &lt; $h ; $y+=$step)
{
   $result = <span class="kwa">array</span>(<span class="str">'c*'</span>);

   $Ci = $y * $yfac - <span class="num">1.0</span>;

   <span class="kwa">for</span> ($x = <span class="num">0</span> ; $x &lt; $w ; ++$x)
   {
      $Zr = <span class="num">0</span>; $Zi = <span class="num">0</span>; $Tr = <span class="num">0</span>; $Ti = <span class="num">0.0</span>;

      $Cr = $x * $xfac - <span class="num">1.5</span>;

      <span class="kwa">do</span> {
         <span class="kwa">for</span> ($i = <span class="num">0</span> ; $i &lt; <span class="num">50</span> ; ++$i)
         {
            $Zi = <span class="num">2.0</span> * $Zr * $Zi + $Ci;
            $Zr = $Tr - $Ti + $Cr;
            $Tr = $Zr * $Zr;
            <span class="kwa">if</span> (($Tr+($Ti = $Zi * $Zi)) &gt; <span class="num">4.0</span>) <span class="kwa">break</span> <span class="num">2</span>;
         }
         $byte_acc += $bit_num;
      } <span class="kwa">while</span> (FALSE);

      <span class="kwa">if</span> ($bit_num === <span class="num">1</span>) {
         $result[] = $byte_acc;
         $bit_num = <span class="num">128</span>;
         $byte_acc = <span class="num">0</span>;
      } <span class="kwa">else</span> {
         $bit_num &gt;&gt;= <span class="num">1</span>;
      }
   }
   <span class="kwa">if</span> ($bit_num !== <span class="num">128</span>) {
      $result[] = $byte_acc;
      $bit_num = <span class="num">128</span>;
      $byte_acc = <span class="num">0</span>;
   }
   <span class="kwd">shmop_write</span>($shmop, <span class="kwd">call_user_func_array</span>(<span class="str">'pack'</span>, $result), $y * $shifted_w);
}

<span class="kwa">if</span> ($child &gt; <span class="num">0</span>) {
   <span class="kwa">exit</span>(<span class="num">0</span>);
}

$child = $procs - <span class="num">1</span>;
$status = <span class="num">0</span>;
<span class="kwa">while</span> ($child-- &gt; <span class="num">0</span>) {
   <span class="kwd">pcntl_wait</span>($status);
}

$step = $shsize &gt;&gt; <span class="num">3</span>;
<span class="kwa">for</span>($i = <span class="num">0</span>; $i &lt; $shsize; $i+=$step) {
   <span class="kwa">echo</span> <span class="kwd">shmop_read</span>($shmop, $i, $step);
}
<span class="kwd">shmop_delete</span>($shmop);

