<span class="com">/* The Computer Language Benchmarks Game</span>
<span class="com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="com">   contributed by Isaac Gouy </span>
<span class="com">*/</span>

<span class="kwa">import</span> CoreFoundation


<span class="kwa">class</span> TreeNode {
   <span class="kwa">var left</span>, <span class="kwa">right</span> : TreeNode?
   <span class="kwa">var</span> item : <span class="kwb">Int</span>

   <span class="kwa">init</span>(_ <span class="kwa">left</span>: TreeNode?, _ <span class="kwa">right</span>: TreeNode?, _ item: <span class="kwb">Int</span>) {
      <span class="kwa">self</span>.<span class="kwa">left</span> = <span class="kwa">left</span>
      <span class="kwa">self</span>.<span class="kwa">right</span> = <span class="kwa">right</span>
      <span class="kwa">self</span>.item = item
   }

   <span class="kwa">func</span> <span class="kwd">check</span>() -&gt; <span class="kwb">Int</span> {
      <span class="kwa">if left</span> == <span class="kwa">nil</span> {
         <span class="kwa">return</span> item
      }
      <span class="kwa">return</span> item + <span class="kwa">left</span>!.<span class="kwd">check</span>() - <span class="kwa">right</span>!.<span class="kwd">check</span>()
   }
}

<span class="kwa">func</span> <span class="kwd">bottomUpTree</span>(item: <span class="kwb">Int</span>, _ depth: <span class="kwb">Int</span>) -&gt; TreeNode {
   <span class="kwa">if</span> depth == <span class="num">0</span> {
      <span class="kwa">return</span> <span class="kwd">TreeNode</span>(<span class="kwa">nil</span>,<span class="kwa">nil</span>,item)
   }
   <span class="kwa">return</span> <span class="kwd">TreeNode</span>(
      <span class="kwd">bottomUpTree</span>(<span class="num">2</span>*item-<span class="num">1</span>, depth-<span class="num">1</span>),
      <span class="kwd">bottomUpTree</span>(<span class="num">2</span>*item, depth-<span class="num">1</span>),
      item
   )
}


<span class="kwa">let</span> n: <span class="kwb">Int</span> = <span class="kwb">Int</span>(Process.arguments[<span class="num">1</span>])!
<span class="kwa">let</span> minDepth = <span class="num">4</span>
<span class="kwa">let</span> maxDepth = n
<span class="kwa">let</span> stretchDepth = n + <span class="num">1</span>

<span class="kwa">let</span> check = <span class="kwd">bottomUpTree</span>(<span class="num">0</span>,stretchDepth).<span class="kwd">check</span>()
<span class="kwd">print</span>(<span class="str">&quot;stretch tree of depth \(stretchDepth)</span><span class="esc">\t</span> <span class="str">check: \(check)&quot;</span>)

<span class="kwa">let</span> longLivedTree = <span class="kwd">bottomUpTree</span>(<span class="num">0</span>,maxDepth)

<span class="kwa">var</span> depth = minDepth
<span class="kwa">while</span> depth &lt;= maxDepth {
   <span class="kwa">let</span> iterations = <span class="num">1</span> &lt;&lt; (maxDepth - depth + minDepth)
   <span class="kwa">var</span> check = <span class="num">0</span>
   <span class="kwa">for</span> i <span class="kwa">in</span> <span class="num">0</span>..&lt;iterations {
      check += <span class="kwd">bottomUpTree</span>(i,depth).<span class="kwd">check</span>()
      check += <span class="kwd">bottomUpTree</span>(-i,depth).<span class="kwd">check</span>()
   }
   <span class="kwd">print</span>(<span class="str">&quot;\(iterations*2)</span><span class="esc">\t</span> <span class="str">trees of depth \(depth)</span><span class="esc">\t</span> <span class="str">check: \(check)&quot;</span>)
   depth += <span class="num">2</span>
}

<span class="kwd">print</span>(<span class="str">&quot;long lived tree of depth \(maxDepth)</span><span class="esc">\t</span> <span class="str">check: \(longLivedTree.check())&quot;</span>)

