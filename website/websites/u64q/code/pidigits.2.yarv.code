<span class="slc"># The Computer Language Benchmarks Game</span>
<span class="slc"># http://benchmarksgame.alioth.debian.org</span>
<span class="slc">#</span>
<span class="slc"># Use libgmp-ruby_1.0 </span>
<span class="slc">#</span>
<span class="slc"># contributed by Gabriele Renzi</span>
<span class="slc"># modified by Pilho Kim</span>

<span class="kwa">require</span> <span class="str">'gmp'</span>

<span class="kwa">class</span> PiDigitSpigot
    <span class="kwa">def</span> <span class="kwd">initialize</span>(<span class="opt">)</span>
        <span class="kwb">&#64;ZERO</span> = GMP:<span class="kwc">:Z</span>.<span class="kwd">new</span>(<span class="num">0</span><span class="opt">)</span>
        <span class="kwb">&#64;ONE</span> = GMP:<span class="kwc">:Z</span>.<span class="kwd">new</span>(<span class="num">1</span><span class="opt">)</span>
        <span class="kwb">&#64;THREE</span> = GMP:<span class="kwc">:Z</span>.<span class="kwd">new</span>(<span class="num">3</span><span class="opt">)</span>
        <span class="kwb">&#64;FOUR</span> = GMP:<span class="kwc">:Z</span>.<span class="kwd">new</span>(<span class="num">4</span><span class="opt">)</span>
        <span class="kwb">&#64;TEN</span> = GMP:<span class="kwc">:Z</span>.<span class="kwd">new</span>(<span class="num">10</span><span class="opt">)</span>
        <span class="kwb">&#64;z</span> = Transformation.new <span class="kwb">&#64;ONE</span>,<span class="kwb">&#64;ZERO</span>,<span class="kwb">&#64;ZERO</span>,<span class="kwb">&#64;ONE</span>
        <span class="kwb">&#64;x</span> = Transformation.new <span class="kwb">&#64;ZERO</span>,<span class="kwb">&#64;ZERO</span>,<span class="kwb">&#64;ZERO</span>,<span class="kwb">&#64;ZERO</span>
        <span class="kwb">&#64;inverse</span> = Transformation.new <span class="kwb">&#64;ZERO</span>,<span class="kwb">&#64;ZERO</span>,<span class="kwb">&#64;ZERO</span>,<span class="kwb">&#64;ZERO</span>
    <span class="kwa">end</span>

    <span class="kwa">def next</span>!
        <span class="kwb">&#64;y</span> = <span class="kwb">&#64;z</span>.<span class="kwd">extract</span>(<span class="kwb">&#64;THREE</span><span class="opt">)</span>
        <span class="kwa">if</span> safe? <span class="kwb">&#64;y</span>
            <span class="kwb">&#64;z</span> = <span class="kwd">produce</span>(<span class="kwb">&#64;y</span><span class="opt">)</span>
            <span class="kwb">&#64;y</span>
        <span class="kwa">else</span>
            <span class="kwb">&#64;z</span> = consume <span class="kwb">&#64;x</span>.<span class="kwa">next</span>!(<span class="opt">)</span>
            <span class="kwa">next</span>!(<span class="opt">)</span>
        <span class="kwa">end</span>
    <span class="kwa">end</span>

    <span class="kwa">def</span> safe?(digit<span class="opt">)</span>
        digit == <span class="kwb">&#64;z</span>.<span class="kwd">extract</span>(<span class="kwb">&#64;FOUR</span><span class="opt">)</span>
    <span class="kwa">end</span>

    <span class="kwa">def</span> <span class="kwd">produce</span>(i<span class="opt">)</span>
        <span class="kwb">&#64;inverse</span>.<span class="kwd">qrst</span>(<span class="kwb">&#64;TEN</span>,-<span class="kwb">&#64;TEN</span>*i,<span class="kwb">&#64;ZERO</span>,<span class="kwb">&#64;ONE</span><span class="opt">)</span>.<span class="kwd">compose</span>(<span class="kwb">&#64;z</span><span class="opt">)</span>
    <span class="kwa">end</span>

    <span class="kwa">def</span> <span class="kwd">consume</span>(a<span class="opt">)</span>
        <span class="kwb">&#64;z</span>.<span class="kwd">compose</span>(a<span class="opt">)</span>
    <span class="kwa">end</span>
<span class="kwa">end</span>


<span class="kwa">class</span> Transformation
    attr_reader <span class="kwc">:q</span>, <span class="kwc">:r</span>, <span class="kwc">:s</span>, <span class="kwc">:t</span>
    <span class="kwa">def</span> <span class="kwd">initialize</span> (q, r, s, t<span class="opt">)</span>
        <span class="kwb">&#64;ZERO</span> = GMP:<span class="kwc">:Z</span>.<span class="kwd">new</span>(<span class="num">0</span><span class="opt">)</span>
        <span class="kwb">&#64;ONE</span> = GMP:<span class="kwc">:Z</span>.<span class="kwd">new</span>(<span class="num">1</span><span class="opt">)</span>
        <span class="kwb">&#64;TWO</span> = GMP:<span class="kwc">:Z</span>.<span class="kwd">new</span>(<span class="num">2</span><span class="opt">)</span>
        <span class="kwb">&#64;FOUR</span> = GMP:<span class="kwc">:Z</span>.<span class="kwd">new</span>(<span class="num">4</span><span class="opt">)</span>
        <span class="kwb">&#64;q</span>,<span class="kwb">&#64;r</span>,<span class="kwb">&#64;s</span>,<span class="kwb">&#64;t</span>,<span class="kwb">&#64;k</span> = q,r,s,t,<span class="kwb">&#64;ZERO</span>
    <span class="kwa">end</span>

    <span class="kwa">def next</span>!(<span class="opt">)</span>
        <span class="kwb">&#64;q</span> = <span class="kwb">&#64;k</span> = <span class="kwb">&#64;k</span> + <span class="kwb">&#64;ONE</span>
        <span class="kwb">&#64;r</span> = <span class="kwb">&#64;FOUR</span> * <span class="kwb">&#64;k</span> + <span class="kwb">&#64;TWO</span>
        <span class="kwb">&#64;s</span> = <span class="kwb">&#64;ZERO</span>
        <span class="kwb">&#64;t</span> = <span class="kwb">&#64;TWO</span> * <span class="kwb">&#64;k</span> + <span class="kwb">&#64;ONE</span>
        <span class="kwa">self</span>
    <span class="kwa">end</span>

    <span class="kwa">def</span> <span class="kwd">extract</span>(j<span class="opt">)</span>
        (<span class="kwb">&#64;q</span> * j + <span class="kwb">&#64;r</span><span class="opt">)</span>.<span class="kwd">tdiv</span>( <span class="kwb">&#64;s</span> * j + <span class="kwb">&#64;t</span> <span class="opt">)</span>
    <span class="kwa">end</span>

    <span class="kwa">def</span> <span class="kwd">compose</span>(a<span class="opt">)</span>
        <span class="kwa">self</span>.<span class="kwa">class</span>.<span class="kwd">new</span>( <span class="kwb">&#64;q</span> * a.q,
                        <span class="kwb">&#64;q</span> * a.r + r * a.t,
                        <span class="kwb">&#64;s</span> * a.q + t * a.s,
                        <span class="kwb">&#64;s</span> * a.r + t * a.t
                    <span class="opt">)</span>
    <span class="kwa">end</span>

    <span class="kwa">def</span> qrst *args
        initialize *args
        <span class="kwa">self</span>
    <span class="kwa">end</span>

<span class="kwa">end</span>


<span class="kwb">&#64;zero</span> = GMP:<span class="kwc">:Z</span>.<span class="kwd">new</span>(<span class="num">0</span><span class="opt">)</span>
<span class="kwb">&#64;one</span> = GMP:<span class="kwc">:Z</span>.<span class="kwd">new</span>(<span class="num">1</span><span class="opt">)</span>
<span class="kwb">&#64;two</span> = GMP:<span class="kwc">:Z</span>.<span class="kwd">new</span>(<span class="num">2</span><span class="opt">)</span>
<span class="kwb">&#64;four</span> = GMP:<span class="kwc">:Z</span>.<span class="kwd">new</span>(<span class="num">4</span><span class="opt">)</span>
<span class="kwb">&#64;ten</span> = GMP:<span class="kwc">:Z</span>.<span class="kwd">new</span>(<span class="num">10</span><span class="opt">)</span>

WIDTH = <span class="num">10</span>
n = <span class="kwd">Integer</span>(<span class="kwc">ARGV</span>[<span class="num">0</span>] || <span class="str">&quot;27&quot;</span><span class="opt">)</span>
j = <span class="num">0</span>

digits = PiDigitSpigot.new

<span class="kwa">while</span> n &gt; <span class="num">0</span>
    <span class="kwa">if</span> n &gt;= WIDTH
        WIDTH.times {print digits.next!}
        j += WIDTH
    <span class="kwa">else</span>
        n.times {print digits.next!}
        (WIDTH-n<span class="opt">)</span>.times {print &quot; &quot;}
        j += n
    <span class="kwa">end</span>
    puts <span class="str">&quot;</span><span class="esc">\t</span><span class="str">:&quot;</span>+j.to_s
    n -= WIDTH
<span class="kwa">end</span>
