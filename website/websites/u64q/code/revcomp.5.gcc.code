<span class="com">/* The Computer Language Benchmarks Game</span>
<span class="com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Mr Ledrug</span>
<span class="com">   modified by Attila Balazs</span>
<span class="com">*/</span>

<span class="ppc">#define _GNU_SOURCE</span>
<span class="ppc">#include &lt;sched.h&gt;</span>
<span class="ppc">#include &lt;stdio.h&gt;</span>
<span class="ppc">#include &lt;stdlib.h&gt;</span>
<span class="ppc">#include &lt;ctype.h&gt;</span>
<span class="ppc">#include &lt;unistd.h&gt;</span>
<span class="ppc">#include &lt;string.h&gt;</span>

<span class="kwb">char</span> *pairs = <span class="str">&quot;ATCGGCTAUAMKRYWWSSYRKMVBHDDHBVNN</span><span class="esc">\n\n</span><span class="str">&quot;</span>;
<span class="kwb">char</span> tbl[<span class="num">128</span>];

<span class="kwb">void</span> <span class="kwd">process</span>(<span class="kwb">char</span> *from, <span class="kwb">char</span> *to) {
   <span class="kwa">while</span> (*from++ != <span class="str">'</span><span class="esc">\n</span><span class="str">'</span>);

   <span class="kwb">size_t</span> len = to - from;
   <span class="kwb">size_t</span> off = <span class="num">60</span> - (len % <span class="num">61</span>);

   <span class="kwa">if</span> (off) {
      <span class="kwb">char</span> *m;
      <span class="kwa">for</span> (m = from + <span class="num">60</span> - off; m &lt; to; m += <span class="num">61</span>) {
         <span class="kwd">memmove</span>(m + <span class="num">1</span>, m, off);
         *m = <span class="str">'</span><span class="esc">\n</span><span class="str">'</span>;
      }
   }

   <span class="kwb">char</span> c;
   <span class="kwa">for</span> (to--; from &lt;= to; from++, to--)
      c = tbl[(<span class="kwb">int</span>)*from], *from = tbl[(<span class="kwb">int</span>)*to], *to = c;
}

<span class="kwb">int</span> <span class="kwd">main</span>() {
   <span class="kwb">char</span> *s;
   <span class="kwa">for</span> (s = pairs; *s; s += <span class="num">2</span>) {
      tbl[<span class="kwd">toupper</span>(s[<span class="num">0</span>])] = s[<span class="num">1</span>];
      tbl[<span class="kwd">tolower</span>(s[<span class="num">0</span>])] = s[<span class="num">1</span>];
   }


   <span class="kwb">const size_t</span> _1M = <span class="num">1024</span> * <span class="num">1024</span>;
   <span class="kwb">size_t</span> buflen = <span class="num">8</span> * <span class="num">1024</span>, len, end = <span class="num">0</span>;
   <span class="kwb">char</span> *buf = <span class="kwd">malloc</span>(buflen);

   <span class="kwb">int</span> in = <span class="kwd">fileno</span>(stdin);
   <span class="kwa">while</span> ((len = <span class="kwd">read</span>(in, buf + end, buflen - <span class="num">256</span> - end))) {
      <span class="kwa">if</span> (len &lt; <span class="num">0</span>) <span class="kwa">break</span>;
      end += len;
      <span class="kwa">if</span> (end &gt;= buflen - <span class="num">256</span>) {
         buflen = (buflen &gt;= _1M) ? buflen + _1M : buflen * <span class="num">2</span>;
         buf = <span class="kwd">realloc</span>(buf, buflen);
      }
   }
   buf[end] = <span class="str">'&gt;'</span>;

   <span class="kwb">char</span> *from, *to = buf + end - <span class="num">1</span>;
   <span class="kwa">while</span> (<span class="num">1</span>) {
      <span class="kwa">for</span> (from = to; *from != <span class="str">'&gt;'</span>; from--);

      <span class="kwd">process</span>(from, to);

      to = from - <span class="num">1</span>;
      <span class="kwa">if</span> (to &lt; buf) <span class="kwa">break</span>;
   }

   <span class="kwd">write</span>(<span class="kwd">fileno</span>(stdout), buf, end);
   <span class="kwd">free</span>(buf);

   <span class="kwa">return</span> <span class="num">0</span>;
}
