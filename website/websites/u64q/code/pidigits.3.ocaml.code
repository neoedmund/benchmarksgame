<span class="com">(* The Computer Language Benchmarks Game</span>
<span class="com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * contributed by Christophe TROESTLER</span>
<span class="com"> * modified by Mat√≠as Giovannini</span>
<span class="com"> * modified by Ethan Burns</span>
<span class="com"> *)</span>

<span class="kwa">open</span> <span class="kwd">Big_int</span>

<span class="kwa">type</span> lft = big_int * big_int * big_int * big_int
<span class="kwa">type</span> lft_ints = <span class="kwb">int</span> * <span class="kwb">int</span> * <span class="kwb">int</span> * <span class="kwb">int</span>

<span class="kwa">let</span> <span class="kwb">unit</span>:lft = (unit_big_int, zero_big_int, zero_big_int, unit_big_int)

<span class="com">(* Attempt to avoid the (apparently slow) Big_int module in some</span>
<span class="com">   simple cases... seems to improve performance 30%. *)</span>

<span class="kwa">let</span> ( */ ) a b =
  <span class="kwa">if</span> b = <span class="num">0</span> <span class="kwa">then</span>
    zero_big_int
  <span class="kwa">else if</span> b = <span class="num">1</span> <span class="kwa">then</span>
    a
  <span class="kwa">else if</span> b = <span class="num">2</span> <span class="kwa">then</span>
    add_big_int a a
  <span class="kwa">else</span>
    mult_int_big_int b a

<span class="kwa">let</span> ( +/ ) a b =
  <span class="kwa">if</span> eq_big_int a zero_big_int <span class="kwa">then</span>
    b
  <span class="kwa">else if</span> eq_big_int b zero_big_int <span class="kwa">then</span>
    a
  <span class="kwa">else</span>
    add_big_int a b

<span class="kwa">let</span> ( // ) a b =
  <span class="kwa">if</span> lt_big_int a b <span class="kwa">then</span>
    zero_big_int
  <span class="kwa">else if</span> eq_big_int a b <span class="kwa">then</span>
    unit_big_int
  <span class="kwa">else</span>
    div_big_int a b

<span class="kwa">let</span> extr (q, r, s, t) x =
  int_of_big_int ((q */ x +/ r) // (s */ x +/ t))

<span class="kwa">let</span> comp ((q, r, s, t) : lft) ((u, v, w, x) : lft_ints) : lft =
  q */ u +/ r */ w,
  q */ v +/ r */ x,
  s */ u +/ t */ w,
  s */ v +/ t */ x

<span class="kwa">let</span> comp' ((q, r, s, t) : lft_ints) ((u, v, w, x) : lft) : lft =
  u */ q +/ w */ r,
  v */ q +/ x */ r,
  u */ s +/ w */ t,
  v */ s +/ x */ t

<span class="kwa">let</span> stream next safe prod cons ith_x z_0 i_0 num =
  <span class="kwa">let</span> buf = <span class="kwc">Buffer</span>.create (num * <span class="num">2</span>) <span class="kwa">in</span>
  <span class="kwa">let</span> col = <span class="kwb">ref</span> <span class="num">0</span> <span class="kwa">in</span>
  <span class="kwa">let</span> z_int = int_of_char '<span class="num">0</span>' <span class="kwa">in</span>
  <span class="kwa">let</span> end_row left =
    col := <span class="num">0</span>;
    <span class="kwc">Buffer</span>.add_string buf <span class="str">&quot;</span><span class="esc">\t</span><span class="str">:&quot;</span>;
    <span class="kwc">Buffer</span>.add_string buf (string_of_int (num - left));
    <span class="kwc">Buffer</span>.add_char buf '<span class="esc">\n</span>'; <span class="kwa">in</span>
  <span class="kwa">let</span> next_digit left d =
    <span class="kwc">Buffer</span>.add_char buf (char_of_int (d + z_int));
    incr col;
    <span class="kwa">if</span> (!col = <span class="num">10</span>) <span class="kwa">then</span> end_row left <span class="kwa">in</span>
  <span class="kwa">let rec</span> do_stream z i left =
    <span class="kwa">if</span> left &gt; <span class="num">0</span> <span class="kwa">then</span>
      <span class="kwa">let</span> y = next z <span class="kwa">in</span>
	<span class="kwa">if</span> safe z y <span class="kwa">then begin</span>
	  <span class="kwa">let</span> left' = left - <span class="num">1</span> <span class="kwa">in</span>
	    next_digit left' y;
	    do_stream (prod z y) i left'
	<span class="kwa">end else begin</span>
	  do_stream (cons z (ith_x i)) (i + <span class="num">1</span>) left
	<span class="kwa">end</span>
  <span class="kwa">in</span>
    do_stream z_0 i_0 num;
    <span class="kwa">if</span> !col &lt;&gt; <span class="num">0</span> <span class="kwa">then begin</span>
      <span class="kwc">Buffer</span>.add_string buf (<span class="kwc">String</span>.make (<span class="num">10</span> - !col) ' ');
      end_row <span class="num">0</span>;
    <span class="kwa">end</span>;
    print_string (<span class="kwc">Buffer</span>.contents buf);
    print_newline

<span class="kwa">let</span> pi num =
  <span class="kwa">let</span> init = <span class="kwb">unit</span> <span class="kwa">in</span>
  <span class="kwa">let</span> lfts k = <span class="kwa">let</span> x = <span class="num">2</span> * k + <span class="num">1</span> <span class="kwa">in</span> k, <span class="num">2</span> * x, <span class="num">0</span>, x <span class="kwa">in</span>
  <span class="kwa">let</span> next z = extr z <span class="num">3</span> <span class="kwa">in</span>
  <span class="kwa">let</span> safe z n = n = (extr z <span class="num">4</span>) <span class="kwa">in</span>
  <span class="kwa">let</span> prod z n = comp' (<span class="num">10</span>, ~-<span class="num">10</span> * n, <span class="num">0</span>, <span class="num">1</span>) z <span class="kwa">in</span>
  <span class="kwa">let</span> cons z z' = comp z z' <span class="kwa">in</span>
    stream next safe prod cons lfts init <span class="num">1</span> num

<span class="kwa">let</span> main () =
  <span class="kwa">let</span> num =
    <span class="kwa">if</span> <span class="kwc">Array</span>.length <span class="kwc">Sys</span>.argv &lt; <span class="num">2</span> <span class="kwa">then</span>
      <span class="num">27</span>
    <span class="kwa">else</span>
      <span class="kwa">try</span> int_of_string <span class="kwc">Sys</span>.argv.(<span class="num">1</span>) <span class="kwa">with</span> _ -&gt; <span class="num">27</span>
  <span class="kwa">in</span>
    pi num

<span class="kwa">let</span> _ = main ()
