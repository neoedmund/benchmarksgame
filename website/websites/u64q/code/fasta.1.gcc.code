<span class="com">/* The Computer Language Benchmarks Game</span>
<span class="com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * by Paul Hsieh</span>
<span class="com"> */</span>

<span class="ppc">#include &lt;stdio.h&gt;</span>
<span class="ppc">#include &lt;stdlib.h&gt;</span>

<span class="ppc">#define IM 139968</span>
<span class="ppc">#define IA   3877</span>
<span class="ppc">#define IC  29573</span>

<span class="kwb">double</span> <span class="kwd">gen_random</span> (<span class="kwb">double</span> max) {
    <span class="kwb">static long</span> last = <span class="num">42</span>;
    <span class="kwa">return</span> max * (last = (last * IA + IC) % IM) / IM;
}

<span class="kwb">struct</span> aminoacids {
    <span class="kwb">char</span> c;
    <span class="kwb">double</span> p;
};

<span class="com">/* Weighted selection from alphabet */</span>

<span class="kwb">void</span> <span class="kwd">makeCumulative</span> (<span class="kwb">struct</span> aminoacids * genelist, <span class="kwb">int</span> count) {
    <span class="kwb">double</span> cp = <span class="num">0.0</span>;
    <span class="kwb">int</span> i;

    <span class="kwa">for</span> (i=<span class="num">0</span>; i &lt; count; i++) {
        cp += genelist[i].p;
        genelist[i].p = cp;
    }
}

<span class="kwb">char</span> <span class="kwd">selectRandom</span> (<span class="kwb">const struct</span> aminoacids * genelist, <span class="kwb">int</span> count) {
    <span class="kwb">double</span> r = <span class="kwd">gen_random</span> (<span class="num">1</span>);
    <span class="kwb">int</span> i, lo, hi;

    <span class="kwa">if</span> (r &lt; genelist[<span class="num">0</span>].p) <span class="kwa">return</span> genelist[<span class="num">0</span>].c;

    lo = <span class="num">0</span>;
    hi = count-<span class="num">1</span>;

    <span class="kwa">while</span> (hi &gt; lo+<span class="num">1</span>) {
        i = (hi + lo) / <span class="num">2</span>;
        <span class="kwa">if</span> (r &lt; genelist[i].p) hi = i; <span class="kwa">else</span> lo = i;
    }
    <span class="kwa">return</span> genelist[hi].c;
}

<span class="com">/* Generate and write FASTA format */</span>

<span class="ppc">#define LINE_LENGTH (60)</span>

<span class="kwb">void</span> <span class="kwd">makeRandomFasta</span> (<span class="kwb">const char</span> * id, <span class="kwb">const char</span> * desc, <span class="kwb">const struct</span> 
aminoacids * genelist, <span class="kwb">int</span> count, <span class="kwb">int</span> n) {
   <span class="kwb">int</span> todo = n;
   <span class="kwb">int</span> i, m;

   <span class="kwd">printf</span> (<span class="str">&quot;&gt;%s %s</span><span class="esc">\n</span><span class="str">&quot;</span>, id, desc);

   <span class="kwa">for</span> (; todo &gt; <span class="num">0</span>; todo -= LINE_LENGTH) {
       <span class="kwb">char</span> pick[LINE_LENGTH+<span class="num">1</span>];
       <span class="kwa">if</span> (todo &lt; LINE_LENGTH) m = todo; <span class="kwa">else</span> m = LINE_LENGTH;
       <span class="kwa">for</span> (i=<span class="num">0</span>; i &lt; m; i++) pick[i] = <span class="kwd">selectRandom</span> (genelist, count);
       pick[m] = <span class="str">'\0'</span>;
       <span class="kwd">puts</span> (pick);
   }
}

<span class="kwb">void</span> <span class="kwd">makeRepeatFasta</span> (<span class="kwb">const char</span> * id, <span class="kwb">const char</span> * desc, <span class="kwb">const char</span> * 
s, <span class="kwb">int</span> n) {
   <span class="kwb">char</span> * ss;
   <span class="kwb">int</span> todo = n, k = <span class="num">0</span>, kn = <span class="kwd">strlen</span> (s);
   <span class="kwb">int</span> m;

   ss = (<span class="kwb">char</span> *) <span class="kwd">malloc</span> (kn + <span class="num">1</span>);
   <span class="kwd">memcpy</span> (ss, s, kn+<span class="num">1</span>);

   <span class="kwd">printf</span> (<span class="str">&quot;&gt;%s %s</span><span class="esc">\n</span><span class="str">&quot;</span>, id, desc);

   <span class="kwa">for</span> (; todo &gt; <span class="num">0</span>; todo -= LINE_LENGTH) {
       <span class="kwa">if</span> (todo &lt; LINE_LENGTH) m = todo; <span class="kwa">else</span> m = LINE_LENGTH;

       <span class="kwa">while</span> (m &gt;= kn - k) {
           <span class="kwd">printf</span> (<span class="str">&quot;%s&quot;</span>, s+k);
           m -= kn - k;
           k = <span class="num">0</span>;
       }

       ss[k + m] = <span class="str">'\0'</span>;
       <span class="kwd">puts</span> (ss+k);
       ss[k + m] = s[m+k];
       k += m;
   }

   <span class="kwd">free</span> (ss);
}

<span class="com">/* Main -- define alphabets, make 3 fragments */</span>

<span class="kwb">struct</span> aminoacids iub[] = {
    { <span class="str">'a'</span>, <span class="num">0.27</span> },
    { <span class="str">'c'</span>, <span class="num">0.12</span> },
    { <span class="str">'g'</span>, <span class="num">0.12</span> },
    { <span class="str">'t'</span>, <span class="num">0.27</span> },

    { <span class="str">'B'</span>, <span class="num">0.02</span> },
    { <span class="str">'D'</span>, <span class="num">0.02</span> },
    { <span class="str">'H'</span>, <span class="num">0.02</span> },
    { <span class="str">'K'</span>, <span class="num">0.02</span> },
    { <span class="str">'M'</span>, <span class="num">0.02</span> },
    { <span class="str">'N'</span>, <span class="num">0.02</span> },
    { <span class="str">'R'</span>, <span class="num">0.02</span> },
    { <span class="str">'S'</span>, <span class="num">0.02</span> },
    { <span class="str">'V'</span>, <span class="num">0.02</span> },
    { <span class="str">'W'</span>, <span class="num">0.02</span> },
    { <span class="str">'Y'</span>, <span class="num">0.02</span> }
};

<span class="ppc">#define IUB_LEN (sizeof (iub) / sizeof (struct aminoacids))</span>

<span class="kwb">struct</span> aminoacids homosapiens[] = {
    { <span class="str">'a'</span>, <span class="num">0.3029549426680</span> },
    { <span class="str">'c'</span>, <span class="num">0.1979883004921</span> },
    { <span class="str">'g'</span>, <span class="num">0.1975473066391</span> },
    { <span class="str">'t'</span>, <span class="num">0.3015094502008</span> },
};

<span class="ppc">#define HOMOSAPIENS_LEN (sizeof (homosapiens) / sizeof (struct aminoacids))</span>

<span class="kwb">char</span> * alu =
   <span class="str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span> \
   <span class="str">&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span> \
   <span class="str">&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span> \
   <span class="str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span> \
   <span class="str">&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span> \
   <span class="str">&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span> \
   <span class="str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span>;

<span class="kwb">int</span> <span class="kwd">main</span> (<span class="kwb">int</span> argc, <span class="kwb">char</span> * argv[]) {
    <span class="kwb">int</span> n = <span class="num">1000</span>;

    <span class="kwa">if</span> (argc &gt; <span class="num">1</span>) <span class="kwd">sscanf</span> (argv[<span class="num">1</span>], <span class="str">&quot;%d&quot;</span>, &amp;n);

    <span class="kwd">makeCumulative</span> (iub, IUB_LEN);
    <span class="kwd">makeCumulative</span> (homosapiens, HOMOSAPIENS_LEN);

    <span class="kwd">makeRepeatFasta</span> (<span class="str">&quot;ONE&quot;</span>, <span class="str">&quot;Homo sapiens alu&quot;</span>, alu, n*<span class="num">2</span>);
    <span class="kwd">makeRandomFasta</span> (<span class="str">&quot;TWO&quot;</span>, <span class="str">&quot;IUB ambiguity codes&quot;</span>, iub, IUB_LEN, n*<span class="num">3</span>);
    <span class="kwd">makeRandomFasta</span> (<span class="str">&quot;THREE&quot;</span>, <span class="str">&quot;Homo sapiens frequency&quot;</span>, homosapiens, 
HOMOSAPIENS_LEN, n*<span class="num">5</span>);

    <span class="kwa">return</span> <span class="num">0</span>;
}

