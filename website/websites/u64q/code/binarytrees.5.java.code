<span class="com">/**</span>
<span class="com"> * The Computer Language Benchmarks Game</span>
<span class="com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * Loosely based on Jarkko Miettinen's implementation. Requires Java 8.</span>
<span class="com"> *</span>
<span class="com"> * contributed by Heikki Salokanto.</span>
<span class="com"> * modified by Chandra Sekar</span>
<span class="com"> */</span>

<span class="kwa">import</span> java.util.LinkedList;
<span class="kwa">import</span> java.util.Queue;
<span class="kwa">import</span> java.util.concurrent.ExecutorService;
<span class="kwa">import</span> java.util.concurrent.Executors;
<span class="kwa">import</span> java.util.concurrent.Future;

<span class="kwa">public class</span> binarytrees {

    <span class="slc">// In case you have a hyper-threaded 2-core CPU, you should adjust this to THREADS = 2.</span>
    <span class="slc">// There is no easy way to reliably detect if HT is enabled.</span>
    <span class="kwa">static final</span> <span class="kwb">int</span> PROCESSORS = Runtime.<span class="kwd">getRuntime</span>().<span class="kwd">availableProcessors</span>();
    <span class="kwa">static final</span> <span class="kwb">int</span> THREADS = PROCESSORS &gt; <span class="num">6</span> ? <span class="num">6</span> : PROCESSORS;

    <span class="kwa">public static</span> <span class="kwb">void</span> <span class="kwd">main</span>(String[] args) <span class="kwa">throws</span> Exception {
        <span class="kwb">int</span> n = args.length &gt; <span class="num">0</span> ? Integer.<span class="kwd">parseInt</span>(args[<span class="num">0</span>]) : <span class="num">0</span>;
        <span class="kwb">int</span> maxDepth = (<span class="num">6</span> &gt; n) ? <span class="num">6</span> : n;
        ExecutorService executorService = Executors.<span class="kwd">newFixedThreadPool</span>(THREADS);
        Queue&lt;Future&lt;?&gt;&gt; tasks = <span class="kwd">createTasks</span>(executorService, maxDepth, maxDepth + <span class="num">1</span>);

        System.out.<span class="kwd">println</span>(<span class="str">&quot;stretch tree of depth &quot;</span> + (maxDepth + <span class="num">1</span>) + <span class="str">&quot;</span><span class="esc">\t</span> <span class="str">check: &quot;</span> + tasks.<span class="kwd">poll</span>().<span class="kwd">get</span>());

        <span class="slc">// Wait for the &quot;Long-lived tree&quot; to finish building, and preserve it in memory</span>
        TreeNode longLivedTree = (TreeNode) tasks.<span class="kwd">poll</span>().<span class="kwd">get</span>();

        <span class="kwa">for</span> (Future&lt;?&gt; future : tasks)
            System.out.<span class="kwd">println</span>(future.<span class="kwd">get</span>());

        System.out.<span class="kwd">println</span>(<span class="str">&quot;long lived tree of depth &quot;</span> + maxDepth + <span class="str">&quot;</span><span class="esc">\t</span> <span class="str">check: &quot;</span> + longLivedTree.<span class="kwd">check</span>());

        executorService.<span class="kwd">shutdown</span>();
    }

    <span class="kwa">static</span> Queue&lt;Future&lt;?&gt;&gt; <span class="kwd">createTasks</span>(ExecutorService executor, <span class="kwb">int</span> maxDepth, <span class="kwb">int</span> stretchDepth) {
        Queue&lt;Future&lt;?&gt;&gt; list = <span class="kwa">new</span> LinkedList&lt;&gt;();

        <span class="slc">// &quot;stretch memory&quot; task</span>
        list.<span class="kwd">add</span>(executor.<span class="kwd">submit</span>(() -&gt; TreeNode.<span class="kwd">create</span>(<span class="num">0</span>, stretchDepth).<span class="kwd">check</span>()));

        <span class="slc">// &quot;long-lived tree&quot; task</span>
        list.<span class="kwd">add</span>(executor.<span class="kwd">submit</span>(() -&gt; TreeNode.<span class="kwd">create</span>(<span class="num">0</span>, maxDepth)));

        <span class="kwa">for</span> (<span class="kwb">int</span> d = <span class="num">4</span>; d &lt;= maxDepth; d += <span class="num">2</span>) {
            <span class="kwa">final</span> <span class="kwb">int</span> depth = d;
            <span class="kwa">final</span> <span class="kwb">int</span> iterations = <span class="num">16</span> &lt;&lt; (maxDepth - depth);

            list.<span class="kwd">add</span>(executor.<span class="kwd">submit</span>(() -&gt; {
                <span class="kwb">int</span> check = <span class="num">0</span>;
                <span class="kwa">for</span> (<span class="kwb">int</span> item = <span class="num">0</span>; item &lt; iterations; item++) {
                    check += TreeNode.<span class="kwd">create</span>(item, depth).<span class="kwd">check</span>() + TreeNode.<span class="kwd">create</span>(-item, depth).<span class="kwd">check</span>();
                }
                <span class="kwa">return</span> (iterations &lt;&lt; <span class="num">1</span>) + <span class="str">&quot;</span><span class="esc">\t</span> <span class="str">trees of depth &quot;</span> + depth + <span class="str">&quot;</span><span class="esc">\t</span> <span class="str">check: &quot;</span> + check;
            }));
        }

        <span class="kwa">return</span> list;
    }

    <span class="kwa">static class</span> TreeNode {
        <span class="kwb">int</span> item;
        TreeNode left, right;

        <span class="kwa">static</span> TreeNode <span class="kwd">create</span>(<span class="kwb">int</span> item, <span class="kwb">int</span> depth) {
            TreeNode[] queue = <span class="kwa">new</span> TreeNode[(<span class="num">1</span> &lt;&lt; depth) - <span class="num">1</span>];
            queue[<span class="num">0</span>] = <span class="kwa">new</span> <span class="kwd">TreeNode</span>(item);

            <span class="kwb">int</span> head = <span class="num">0</span>, nodes = <span class="num">0</span>;
            <span class="kwb">int</span> target = queue.length - <span class="num">1</span>;
            <span class="kwa">while</span> (nodes &lt; target) {
                item &lt;&lt;= <span class="num">1</span>;
                TreeNode node = queue[head++];
                node.left = <span class="kwa">new</span> <span class="kwd">TreeNode</span>(item - <span class="num">1</span>);
                node.right = <span class="kwa">new</span> <span class="kwd">TreeNode</span>(item);
                queue[++nodes] = node.left;
                queue[++nodes] = node.right;
            }
            <span class="kwa">return</span> queue[<span class="num">0</span>];
        }

        <span class="kwd">TreeNode</span>(<span class="kwb">int</span> item) {
            <span class="kwa">this</span>.item = item;
        }

        <span class="kwb">int</span> <span class="kwd">check</span>() {
            <span class="kwa">return</span> left == null ? item : left.<span class="kwd">check</span>() - right.<span class="kwd">check</span>() + item;
        }
    }
}
