<span class="com">{ The Computer Language Benchmarks Game</span>
<span class="com">  http://benchmarksgame.alioth.debian.org</span>
<span class="com"></span>
<span class="com">  contributed by Ales Katona</span>
<span class="com">  modified by Vincent Snijders</span>
<span class="com">  optimized and multithreaded by Jean de La Taille </span>
<span class="com">}</span>

<span class="kwa">program</span> mandelbrot;

<span class="kwa">uses</span>
  <span class="com">{$ifdef unix}</span>cthreads,<span class="com">{$endif}</span>
  sysUtils, dateUtils, math;

<span class="kwa">const</span>
  Limit = <span class="num">4</span>;

<span class="kwa">var</span>
  n, n_1, dimx, dimy : <span class="kwb">longint</span>;
  TextBuf: <span class="kwa">array of</span> <span class="kwb">byte</span>;
  start, finish : TDateTime;

<span class="kwa">type</span>
  mem = <span class="kwa">record</span>
    from_y, to_y : <span class="kwb">longint</span>;
  <span class="kwa">end</span>;
  pmem = ^mem;

<span class="kwa">function</span> <span class="kwd">subThread</span>(p: <span class="kwb">pointer</span>) : <span class="kwb">longint</span>;
<span class="kwa">var</span>
  x, y, from_y, to_y, buf_index, i: <span class="kwb">Longint</span>;
  Zr, Zi, Ti, Tr : <span class="kwb">Double</span>;
  Cr, Ci : <span class="kwb">Double</span>;
  bits: <span class="kwb">Longint</span>;
  bit: <span class="kwb">Longint</span>;
<span class="kwa">begin</span>
  from_y := <span class="kwd">pmem</span>(p)^.from_y;
  to_y := <span class="kwd">pmem</span>(p)^.to_y;
  buf_index := from_y * dimx;
  <span class="kwc">for</span> y := from_y <span class="kwc">to</span> to_y <span class="kwc">do</span>
  <span class="kwa">begin</span>
    bit := <span class="num">128</span>; <span class="slc">// 1000 0000</span>
    bits := <span class="num">0</span>;
    Ci := ((y + y) / n) - <span class="num">1.0</span>;
    <span class="kwc">for</span> x := <span class="num">0</span> <span class="kwc">to</span> n_1 <span class="kwc">do</span>
    <span class="kwa">begin</span>
      <span class="slc">//---------------------------</span>
      Zr := <span class="num">0</span>;
      Zi := <span class="num">0</span>;
      Tr := <span class="num">0</span>;
      Ti := <span class="num">0</span>;
      Cr := ((x + x) / n) - <span class="num">1.5</span>;
      <span class="kwc">for</span> i := <span class="num">1</span> <span class="kwc">to</span> <span class="num">50</span> <span class="kwc">do</span>
      <span class="kwa">begin</span>
        Zi := <span class="num">2</span> * Zr * Zi + Ci;
        Zr := Tr - Ti + Cr;
        Ti := Zi * Zi;
        Tr := Zr * Zr;
        <span class="kwc">if</span> ((Tr + Ti) &gt; limit) <span class="kwc">then</span>
        <span class="kwa">begin</span>
          bits := bits <span class="kwa">or</span> bit;
          break;
        <span class="kwa">end</span>;
      <span class="kwa">end</span>;
      <span class="slc">//---------------------------</span>
      bit := bit &gt;&gt; <span class="num">1</span>;
      <span class="kwc">if</span> (bit = <span class="num">0</span>) <span class="kwc">then</span>
      <span class="kwa">begin</span>
        TextBuf[buf_index] := <span class="kwa">not</span> bits;
        <span class="kwd">inc</span>(buf_index);
        bits := <span class="num">0</span>;
        bit := <span class="num">128</span>;
      <span class="kwa">end</span>;
    <span class="kwa">end</span>;
  <span class="kwa">end</span>;
  subThread := <span class="num">0</span>;
<span class="kwa">end</span>;

<span class="kwa">procedure</span> run;
<span class="kwa">var</span>
  i, l, x, y, buf_index: <span class="kwb">Longint</span>;
  tt : <span class="kwa">array</span>[<span class="num">0</span>.<span class="num">.3</span>] <span class="kwa">of</span> TThreadID;
  m : <span class="kwa">array</span>[<span class="num">0</span>.<span class="num">.3</span>] <span class="kwa">of</span> mem;
  stepL : <span class="kwb">longint</span>;
<span class="kwa">begin</span>
  n_1 := n - <span class="num">1</span>;
  l := <span class="num">0</span>;
  stepL := <span class="kwd">floor</span>(n / <span class="num">4</span>);

  start := now;
  <span class="kwc">for</span> i := <span class="num">0</span> <span class="kwc">to</span> <span class="num">2</span> <span class="kwc">do</span>
  <span class="kwa">begin</span>
    m[i].from_y := l;
    m[i].to_y := l + stepL - <span class="num">1</span>;
    tt[i] := <span class="kwd">BeginThread</span>(&#64;subThread, &#64;m[i]);
    l := l + stepL;
  <span class="kwa">end</span>;
  m[<span class="num">3</span>].from_y := l;
  m[<span class="num">3</span>].to_y := n_1;
  tt[<span class="num">3</span>] := <span class="kwd">BeginThread</span>(&#64;subThread, &#64;m[<span class="num">3</span>]);
  <span class="kwc">for</span> i := <span class="num">0</span> <span class="kwc">to</span> <span class="num">3</span> <span class="kwc">do</span>
    <span class="kwd">WaitForThreadTerminate</span>(tt[i], <span class="num">0</span>);
  finish := now;
  <span class="slc">//WriteLn('Time : ', MilliSecondsBetween(start, finish) / 1000 : 0 : 4);</span>

  buf_index := <span class="num">0</span>;
  <span class="kwc">for</span> y := <span class="num">0</span> <span class="kwc">to</span> n_1 <span class="kwc">do</span>
    <span class="kwc">for</span> x := <span class="num">0</span> <span class="kwc">to</span> dimx - <span class="num">1</span> <span class="kwc">do</span>
    <span class="kwa">begin</span>
      <span class="kwd">write</span>(<span class="kwd">chr</span>(TextBuf[buf_index]));;
      <span class="kwd">inc</span>(buf_index);
    <span class="kwa">end</span>;
<span class="kwa">end</span>;


<span class="kwa">begin</span>
  <span class="kwd">Val</span>(<span class="kwd">ParamStr</span>(<span class="num">1</span>), n);
  <span class="kwd">write</span>(<span class="str">'P4'</span>, <span class="kwd">chr</span>(<span class="num">10</span>), n, <span class="str">' '</span>, n, <span class="kwd">chr</span>(<span class="num">10</span>));
  <span class="slc">//write('P5', chr(10), n, ' ', n, chr(10), 255, chr(10));</span>

  dimx := <span class="kwd">Ceil</span>(n / <span class="num">8</span>);
  dimy := n;
  <span class="kwd">SetLength</span>(TextBuf, (dimx * dimy) + <span class="num">1</span>);

  start := now;

  run;

  finish := now;
<span class="kwa">end</span>.


