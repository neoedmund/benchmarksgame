<span class="slc">// The Computer Language Benchmarks Game</span>
<span class="slc">// http://benchmarksgame.alioth.debian.org/</span>
<span class="slc">//</span>
<span class="slc">// Contributed by Jeremy Zerfas</span>

<span class="slc">// This controls the initial size used for the hash tables. This needs to be a</span>
<span class="slc">// power of two because a mask is also calculated from this by using</span>
<span class="slc">// INITIAL_HASH_TABLE_SIZE-1.</span>
<span class="ppc">#define INITIAL_HASH_TABLE_SIZE 64</span>
<span class="slc">// This controls the maximum length for each set of nucleotide sequence</span>
<span class="slc">// frequencies and each nucleotide sequence count output by this program.</span>
<span class="ppc">#define MAXIMUM_OUTPUT_LENGTH 4096</span>

<span class="ppc">#include &lt;stdint.h&gt;</span>
<span class="ppc">#include &lt;stdlib.h&gt;</span>
<span class="ppc">#include &lt;stdio.h&gt;</span>
<span class="ppc">#include &lt;string.h&gt;</span>

<span class="slc">// intptr_t should be the native integer type on most sane systems.</span>
<span class="kwc">typedef</span> <span class="kwb">intptr_t</span> intnative_t;


<span class="slc">//******************************************</span>
<span class="slc">//*** Start of hash table implementation ***</span>
<span class="slc">//******************************************</span>

<span class="slc">// In order to prevent too many collisions from occurring the hash table is</span>
<span class="slc">// grown when it is filled to a certain percentage. This value sets the</span>
<span class="slc">// percentage that controls when growing should occur. This value must be set as</span>
<span class="slc">// a fraction between 0 and 1 but sane values are generally around 3/4. Setting</span>
<span class="slc">// the value too low causes the hash table to be made larger than it needs to be</span>
<span class="slc">// which reduces the effectiveness of caches and setting it too high will cause</span>
<span class="slc">// a large amount of collisions.</span>
<span class="ppc">#define HASH_TABLE_LOAD_LIMIT 12/16</span>

<span class="kwc">typedef</span> <span class="kwb">struct</span> element{
   <span class="ppc">#define      EMPTY_VALUE_KEY -1</span>
   <span class="kwb">int64_t</span>      key;    <span class="slc">// If key is negative, then this element is empty,</span>
                  <span class="slc">// otherwise key and value contain the unmodified key</span>
                  <span class="slc">// and value.</span>
   <span class="kwb">int32_t</span>      value;
} element;

<span class="kwc">typedef</span> <span class="kwb">struct</span> hash_table{
   intnative_t   size;         <span class="slc">// The current capacity of the hash table. Never</span>
                        <span class="slc">// will actually be reached since the hash table</span>
                        <span class="slc">// will be grown first when it reaches</span>
                        <span class="slc">// element_Limit.</span>
   <span class="kwb">int64_t</span>      key_Mask;      <span class="slc">// ANDed with keys to make sure that hash table</span>
                        <span class="slc">// indexes do not exceed the size of the hash</span>
                        <span class="slc">// table.</span>
   intnative_t   element_Limit;   <span class="slc">// Controls the maximum amount of elements that</span>
                        <span class="slc">// are allowed in the hash table before it will</span>
                        <span class="slc">// be grown.</span>
   intnative_t   element_Count;   <span class="slc">// The current amount of elements in the hash</span>
                        <span class="slc">// table.</span>
   element   *   elements;
} hash_table;


<span class="slc">// Create a hash table with space allocated for requested_Size elements.</span>
<span class="slc">// requested_Size must be a power of two since the mask for keys is defined as</span>
<span class="slc">// requested_Size-1.</span>
<span class="kwb">static</span> hash_table * <span class="kwd">create_Hash_Table</span>(intnative_t requested_Size){
   hash_table * created_Hash_Table=<span class="kwd">malloc</span>(<span class="kwa">sizeof</span>(hash_table));

   <span class="slc">// Initialize the properties for the created_Hash_Table.</span>
   created_Hash_Table-&gt;size=requested_Size;
   created_Hash_Table-&gt;key_Mask=requested_Size-<span class="num">1</span>;
   created_Hash_Table-&gt;element_Limit=requested_Size*HASH_TABLE_LOAD_LIMIT;
   created_Hash_Table-&gt;element_Count=<span class="num">0</span>;
   created_Hash_Table-&gt;elements=<span class="kwd">malloc</span>(requested_Size*<span class="kwa">sizeof</span>(element));

   <span class="slc">// Initialize all elements in the created_Hash_Table to have initial keys</span>
   <span class="slc">// set to EMPTY_VALUE_KEY and values set to 0.</span>
   <span class="kwa">for</span>(intnative_t i=<span class="num">0</span>; i&lt;requested_Size; i++)
      created_Hash_Table-&gt;elements[i]=(element){EMPTY_VALUE_KEY, <span class="num">0</span>};

   <span class="kwa">return</span> created_Hash_Table;
}


<span class="slc">// Destroy hash table pointed to by hash_Table_To_Destroy and all of its</span>
<span class="slc">// elements.</span>
<span class="kwb">static void</span> <span class="kwd">destroy_Hash_Table</span>(hash_table * hash_Table_To_Destroy){
   <span class="kwd">free</span>(hash_Table_To_Destroy-&gt;elements);
   <span class="kwd">free</span>(hash_Table_To_Destroy);
}


<span class="slc">// Hash function used to hash keys.</span>
<span class="ppc">#define hash_Key(key) (key ^ key&gt;&gt;7)</span>


<span class="slc">// Grow hash_Table_To_Grow by quadrupling it in size. A new elements array is</span>
<span class="slc">// created, the existing elements are inserted into the new elements array, the</span>
<span class="slc">// old elements array is deleted, and the properties for hash_Table_To_Grow are</span>
<span class="slc">// updated. </span>
<span class="kwb">static void</span> <span class="kwd">grow_Hash_Table</span>(hash_table * <span class="kwb">const</span> hash_Table_To_Grow){
   <span class="kwb">const</span> intnative_t old_Hash_Table_Size=hash_Table_To_Grow-&gt;size;
   <span class="kwb">const</span> intnative_t new_Hash_Table_Size=old_Hash_Table_Size*<span class="num">4</span>;

   <span class="slc">// Keep a reference to old_Hash_Table_Elements and allocate space for</span>
   <span class="slc">// new_Hash_Table_Elements.</span>
   element * <span class="kwb">const</span> old_Hash_Table_Elements=hash_Table_To_Grow-&gt;elements;
   element * <span class="kwb">const</span> new_Hash_Table_Elements=<span class="kwd">malloc</span>(new_Hash_Table_Size*
     <span class="kwa">sizeof</span>(element));

   <span class="slc">// Update the properties for the hash_Table_To_Grow.</span>
   hash_Table_To_Grow-&gt;size=new_Hash_Table_Size;
   hash_Table_To_Grow-&gt;key_Mask=new_Hash_Table_Size-<span class="num">1</span>;
   hash_Table_To_Grow-&gt;element_Limit=new_Hash_Table_Size*HASH_TABLE_LOAD_LIMIT;
   hash_Table_To_Grow-&gt;elements=new_Hash_Table_Elements;

   <span class="slc">// Initialize all elements in new_Hash_Table_Elements to have initial keys</span>
   <span class="slc">// set to EMPTY_VALUE_KEY and values set to 0.</span>
   <span class="kwa">for</span>(intnative_t i=<span class="num">0</span>; i&lt;new_Hash_Table_Size; i++)
      new_Hash_Table_Elements[i]=(element){EMPTY_VALUE_KEY, <span class="num">0</span>};

   <span class="slc">// Copy all old_Hash_Table_Elements to new_Hash_Table_Elements. This code is</span>
   <span class="slc">// simpler and faster than using the find_Or_Add_Element_For_Key() function</span>
   <span class="slc">// since we don't need to worry about updating element_Count and checking to</span>
   <span class="slc">// see if we have reached element_Limit.</span>
   <span class="kwa">for</span>(intnative_t i=<span class="num">0</span>; i&lt;old_Hash_Table_Size; i++){
      <span class="kwa">if</span>(old_Hash_Table_Elements[i].key&gt;=<span class="num">0</span>){
         <span class="kwb">int64_t</span> elements_Index=<span class="kwd">hash_Key</span>(old_Hash_Table_Elements[i].key) &amp;
           hash_Table_To_Grow-&gt;key_Mask;

         <span class="slc">// Find the first free spot in new_Hash_Table_Elements and copy the</span>
         <span class="slc">// old element to it.</span>
         <span class="kwa">while</span>(new_Hash_Table_Elements[elements_Index].key&gt;=<span class="num">0</span>){
            elements_Index++;
            elements_Index&amp;=hash_Table_To_Grow-&gt;key_Mask;
         }
         new_Hash_Table_Elements[elements_Index]=old_Hash_Table_Elements[i];
      }
   };

   <span class="kwd">free</span>(old_Hash_Table_Elements);
}


<span class="slc">// See if key is already in hash_Table and if so then return the element for it,</span>
<span class="slc">// otherwise add the key to hash_table (and grow it if necessary) and return the</span>
<span class="slc">// element for it.</span>
<span class="kwb">static</span> <span class="kwc">inline</span> element * <span class="kwd">find_Or_Add_Element_For_Key</span>(
  hash_table * <span class="kwb">const</span> hash_Table, <span class="kwb">const int64_t</span> key){
   <span class="kwb">int64_t</span> elements_Index=<span class="kwd">hash_Key</span>(key) &amp; hash_Table-&gt;key_Mask;

   <span class="slc">// Search hash_Table for key.</span>
   element * <span class="kwb">const</span> elements=hash_Table-&gt;elements;
   <span class="kwa">while</span>(elements[elements_Index].key!=key){
      <span class="slc">// If we reach a key with a negative value then that means that key is</span>
      <span class="slc">// not in hash_Table so we will go ahead and add it.</span>
      <span class="kwa">if</span>(elements[elements_Index].key&lt;<span class="num">0</span>){
         <span class="slc">// If we're at the hash table's load limit then grow the hash table</span>
         <span class="slc">// and call this function a second time to add and return an item.</span>
         <span class="kwa">if</span>(hash_Table-&gt;element_Count&gt;=hash_Table-&gt;element_Limit){
            <span class="kwd">grow_Hash_Table</span>(hash_Table);
            <span class="kwa">return</span> <span class="kwd">find_Or_Add_Element_For_Key</span>(hash_Table, key);
         }

         <span class="slc">// Set the key for this element to key, increment element_Count, and</span>
         <span class="slc">// break out of the loop so that this element will be returned.</span>
         elements[elements_Index].key=key;
         hash_Table-&gt;element_Count++;
         <span class="kwa">break</span>;
      }

      <span class="slc">// Still haven't found key or a free spot so continue to the next index.</span>
      elements_Index++;
      elements_Index&amp;=hash_Table-&gt;key_Mask;
   }
   <span class="kwa">return</span> &amp;(elements[elements_Index]);
}
<span class="slc">//******************************************</span>
<span class="slc">//***  End of hash table implementation  ***</span>
<span class="slc">//******************************************</span>


<span class="slc">// Function to use when sorting elements with qsort() later. Elements with</span>
<span class="slc">// larger values will come first and in cases of identical values then elements</span>
<span class="slc">// with smaller keys will come first.</span>
<span class="kwb">static int</span> <span class="kwd">element_Compare</span>(<span class="kwb">const void</span> * uncasted_Left_Element,
  <span class="kwb">const void</span> * uncasted_Right_Element){
   <span class="kwb">const</span> element * left_Element=uncasted_Left_Element,
     * right_Element=uncasted_Right_Element;

   <span class="slc">// Sort based on element values.</span>
   <span class="kwa">if</span>(left_Element-&gt;value &lt; right_Element-&gt;value) <span class="kwa">return</span> <span class="num">1</span>;
   <span class="kwa">if</span>(left_Element-&gt;value &gt; right_Element-&gt;value) <span class="kwa">return</span> -<span class="num">1</span>;

   <span class="slc">// If we got here then both items have the same value so then sort based on</span>
   <span class="slc">// key.</span>
   <span class="kwa">if</span>(left_Element-&gt;key &gt; right_Element-&gt;key)
      <span class="kwa">return</span> <span class="num">1</span>;
   <span class="kwa">else</span>
      <span class="kwa">return</span> -<span class="num">1</span>;
}


<span class="slc">// Macro to convert a nucleotide character to a code. Note that upper and lower</span>
<span class="slc">// case ASCII letters only differ in the fifth bit from the right and we only</span>
<span class="slc">// need the three least significant bits to differentiate the letters 'A', 'C',</span>
<span class="slc">// 'G', and 'T'. Spaces in this array/string will never be used as long as</span>
<span class="slc">// characters other than 'A', 'C', 'G', and 'T' aren't used.</span>
<span class="ppc">#define code_For_Nucleotide(nucleotide) (</span><span class="pps">&quot; \0 \1\3  \2&quot;</span><span class="ppc">[nucleotide &amp; 0x7])</span>


<span class="slc">// And one more macro to convert the codes back to nucleotide characters.</span>
<span class="ppc">#define nucleotide_For_Code(code) (</span><span class="pps">&quot;ACGT&quot;</span><span class="ppc">[code &amp; 0x3])</span>


<span class="slc">// Generate frequences for all nucleotide sequences in sequences that are of</span>
<span class="slc">// length sequence_Length and then save it to output.</span>
<span class="kwb">static void</span> <span class="kwd">generate_Frequencies_For_Sequences</span>(<span class="kwb">char</span> * sequences,
  intnative_t sequences_Length, intnative_t sequence_Length, <span class="kwb">char</span> * output){
   hash_table * hash_Table=<span class="kwd">create_Hash_Table</span>(INITIAL_HASH_TABLE_SIZE);

   <span class="slc">// Add all the sequences of sequence_Length to hash_Table.</span>
   <span class="kwb">int64_t</span> code=<span class="num">0</span>;
   <span class="kwa">for</span>(intnative_t i=<span class="num">0</span>; i&lt;sequences_Length; i++){
      <span class="kwb">const int64_t</span> mask=((<span class="kwb">int64_t</span>)<span class="num">1</span>&lt;&lt;<span class="num">2</span>*sequence_Length)-<span class="num">1</span>;
      code=(code&lt;&lt;<span class="num">2</span> &amp; mask) | sequences[i];
      <span class="kwa">if</span>(i&gt;=sequence_Length-<span class="num">1</span>)
         <span class="kwd">find_Or_Add_Element_For_Key</span>(hash_Table, code)-&gt;value++;
   }

   <span class="slc">// Create an array of elements from hash_Table.</span>
   intnative_t elements_Array_Size=hash_Table-&gt;element_Count;
   element * elements_Array=<span class="kwd">malloc</span>(elements_Array_Size*<span class="kwa">sizeof</span>(element));
   <span class="kwa">for</span>(intnative_t i=<span class="num">0</span>, j=<span class="num">0</span>; i&lt;hash_Table-&gt;size; i++){
      <span class="kwa">if</span>(hash_Table-&gt;elements[i].key&gt;=<span class="num">0</span>){
         elements_Array[j].key=hash_Table-&gt;elements[i].key;
         elements_Array[j].value=hash_Table-&gt;elements[i].value;
         j++;
      }
   }

   <span class="slc">// Sort elements_Array.</span>
   <span class="kwd">qsort</span>(elements_Array, elements_Array_Size, <span class="kwa">sizeof</span>(element),
     &amp;element_Compare);

   <span class="slc">// Calculate the total count of all elements.</span>
   intnative_t total_Count=<span class="num">0</span>;
   <span class="kwa">for</span>(intnative_t i=<span class="num">0</span>; i&lt;elements_Array_Size; i++)
      total_Count+=elements_Array[i].value;

   <span class="slc">// Print the frequencies for each element.</span>
   <span class="kwa">for</span>(intnative_t output_Position=<span class="num">0</span>, i=<span class="num">0</span>; i&lt;elements_Array_Size; i++){
      <span class="slc">// Decode key back into a nucleotide sequence.</span>
      <span class="kwb">char</span> nucleotide_Sequence[sequence_Length+<span class="num">1</span>];
      <span class="kwa">for</span>(intnative_t j=sequence_Length-<span class="num">1</span>; j&gt;-<span class="num">1</span>; j--){
         nucleotide_Sequence[j]=<span class="kwd">nucleotide_For_Code</span>(elements_Array[i].key);
         elements_Array[i].key&gt;&gt;=<span class="num">2</span>;
      }
      nucleotide_Sequence[sequence_Length]=<span class="str">'\0'</span>;

      <span class="slc">// Output the frequency for nucleotide_Sequence to output.</span>
      output_Position+=<span class="kwd">snprintf</span>(output+output_Position,
        MAXIMUM_OUTPUT_LENGTH-output_Position, <span class="str">&quot;%s %.3f</span><span class="esc">\n</span><span class="str">&quot;</span>,
        nucleotide_Sequence, <span class="num">100.0</span>f*elements_Array[i].value/total_Count);
   }

   <span class="kwd">free</span>(elements_Array);
   <span class="kwd">destroy_Hash_Table</span>(hash_Table);
}


<span class="slc">// Generate a count for the number of time nucleotide_Sequence appears in</span>
<span class="slc">// sequences and then save it to output.</span>
<span class="kwb">static void</span> <span class="kwd">generate_Count_For_Sequence</span>(<span class="kwb">char</span> * sequences,
  <span class="kwb">const</span> intnative_t sequences_Length, <span class="kwb">const char</span> * nucleotide_Sequence,
  <span class="kwb">char</span> * output){
   <span class="kwb">const</span> intnative_t nucleotide_Sequence_Length=<span class="kwd">strlen</span>(nucleotide_Sequence);

   hash_table * hash_Table=<span class="kwd">create_Hash_Table</span>(INITIAL_HASH_TABLE_SIZE);

   <span class="slc">// Add all the sequences of nucleotide_Sequence_Length to hash_Table.</span>
   <span class="kwb">int64_t</span> key=<span class="num">0</span>;
   <span class="kwa">for</span>(intnative_t i=<span class="num">0</span>; i&lt;sequences_Length; i++){
      <span class="kwb">const int64_t</span> mask=((<span class="kwb">int64_t</span>)<span class="num">1</span>&lt;&lt;<span class="num">2</span>*nucleotide_Sequence_Length)-<span class="num">1</span>;
      key=(key&lt;&lt;<span class="num">2</span> &amp; mask) | sequences[i];
      <span class="kwa">if</span>(i&gt;=nucleotide_Sequence_Length)
         <span class="kwd">find_Or_Add_Element_For_Key</span>(hash_Table, key)-&gt;value++;
   }

   <span class="slc">// Generate key for the sequence.</span>
   key=<span class="num">0</span>;
   <span class="kwa">for</span>(intnative_t i=<span class="num">0</span>; i&lt;nucleotide_Sequence_Length; i++)
      key=(key&lt;&lt;<span class="num">2</span>) | <span class="kwd">code_For_Nucleotide</span>(nucleotide_Sequence[i]);

   <span class="slc">// Output the count for nucleotide_Sequence to output.</span>
   intnative_t count=<span class="kwd">find_Or_Add_Element_For_Key</span>(hash_Table, key)-&gt;value;
   <span class="kwd">snprintf</span>(output, MAXIMUM_OUTPUT_LENGTH, <span class="str">&quot;%jd</span><span class="esc">\t</span><span class="str">%s&quot;</span>, (<span class="kwb">intmax_t</span>)count,
     nucleotide_Sequence);

   <span class="kwd">destroy_Hash_Table</span>(hash_Table);
}


<span class="kwb">int</span> <span class="kwd">main</span>(){
   <span class="kwb">char</span> buffer[<span class="num">4096</span>];

   <span class="slc">// Find the start of the third nucleotide sequence.</span>
   <span class="kwa">while</span>(<span class="kwd">fgets</span>(buffer, <span class="kwa">sizeof</span>(buffer), stdin) &amp;&amp; <span class="kwd">memcmp</span>(<span class="str">&quot;&gt;THREE&quot;</span>, buffer,
     <span class="kwa">sizeof</span>(<span class="str">&quot;&gt;THREE&quot;</span>)-<span class="num">1</span>));

   <span class="slc">// Start with 1 MB of storage for reading in the nucleotide sequence and</span>
   <span class="slc">// grow exponentially.</span>
   intnative_t nucleotide_Sequence_Capacity=<span class="num">1048576</span>;
   intnative_t nucleotide_Sequence_Size=<span class="num">0</span>;
   <span class="kwb">char</span> * nucleotide_Sequence=<span class="kwd">malloc</span>(nucleotide_Sequence_Capacity);

   <span class="slc">// Start reading and encoding the third nucleotide sequence.</span>
   <span class="kwa">while</span>(<span class="kwd">fgets</span>(buffer, <span class="kwa">sizeof</span>(buffer), stdin) &amp;&amp; buffer[<span class="num">0</span>]!=<span class="str">'&gt;'</span>){
      <span class="kwa">for</span>(intnative_t i=<span class="num">0</span>; buffer[i]!=<span class="str">'\0'</span>; i++){
         <span class="kwa">if</span>(buffer[i]!=<span class="str">'</span><span class="esc">\n</span><span class="str">'</span>)
            nucleotide_Sequence[nucleotide_Sequence_Size++]=
              <span class="kwd">code_For_Nucleotide</span>(buffer[i]);
      }

      <span class="slc">// Make sure we still have enough memory allocated for any potential</span>
      <span class="slc">// nucleotides in the next line.</span>
      <span class="kwa">if</span>(nucleotide_Sequence_Capacity-nucleotide_Sequence_Size &lt;
        <span class="kwa">sizeof</span>(buffer)){
         nucleotide_Sequence_Capacity*=<span class="num">2</span>;
         nucleotide_Sequence=<span class="kwd">realloc</span>(nucleotide_Sequence,
           nucleotide_Sequence_Capacity);
      }
   }

   <span class="slc">// Free up any leftover memory.</span>
   nucleotide_Sequence=<span class="kwd">realloc</span>(nucleotide_Sequence, nucleotide_Sequence_Size);

   <span class="kwb">char</span> output_Buffer[<span class="num">7</span>][MAXIMUM_OUTPUT_LENGTH];

   <span class="slc">// Do the following functions in parallel.</span>
   <span class="ppc">#pragma omp parallel sections</span>
   {
      <span class="ppc">#pragma omp section</span>
      { <span class="kwd">generate_Frequencies_For_Sequences</span>(nucleotide_Sequence,
        nucleotide_Sequence_Size, <span class="num">1</span>, output_Buffer[<span class="num">0</span>]); }
      <span class="ppc">#pragma omp section</span>
      { <span class="kwd">generate_Frequencies_For_Sequences</span>(nucleotide_Sequence,
        nucleotide_Sequence_Size, <span class="num">2</span>, output_Buffer[<span class="num">1</span>]); }

      <span class="ppc">#pragma omp section</span>
      { <span class="kwd">generate_Count_For_Sequence</span>(nucleotide_Sequence,
        nucleotide_Sequence_Size, <span class="str">&quot;GGT&quot;</span>, output_Buffer[<span class="num">2</span>]); }
      <span class="ppc">#pragma omp section</span>
      { <span class="kwd">generate_Count_For_Sequence</span>(nucleotide_Sequence,
        nucleotide_Sequence_Size, <span class="str">&quot;GGTA&quot;</span>, output_Buffer[<span class="num">3</span>]); }
      <span class="ppc">#pragma omp section</span>
      { <span class="kwd">generate_Count_For_Sequence</span>(nucleotide_Sequence,
        nucleotide_Sequence_Size, <span class="str">&quot;GGTATT&quot;</span>, output_Buffer[<span class="num">4</span>]); }
      <span class="ppc">#pragma omp section</span>
      { <span class="kwd">generate_Count_For_Sequence</span>(nucleotide_Sequence,
        nucleotide_Sequence_Size, <span class="str">&quot;GGTATTTTAATT&quot;</span>, output_Buffer[<span class="num">5</span>]); }
      <span class="ppc">#pragma omp section</span>
      { <span class="kwd">generate_Count_For_Sequence</span>(nucleotide_Sequence,
        nucleotide_Sequence_Size, <span class="str">&quot;GGTATTTTAATTTATAGT&quot;</span>, output_Buffer[<span class="num">6</span>]); }
   }

   <span class="kwa">for</span>(intnative_t i=<span class="num">0</span>; i&lt;<span class="num">7</span>; <span class="kwd">printf</span>(<span class="str">&quot;%s</span><span class="esc">\n</span><span class="str">&quot;</span>, output_Buffer[i++]));

   <span class="kwd">free</span>(nucleotide_Sequence);

   <span class="kwa">return</span> <span class="num">0</span>;
}
