<span class="slc"># The Computer Language Benchmarks Game</span>
<span class="slc"># http://benchmarksgame.alioth.debian.org/</span>
<span class="slc"># Contributed by Sokolov Yura</span>

<span class="kwb">$last</span> = <span class="num">42.0</span>
<span class="kwa">def</span> <span class="kwd">gen_random</span> (max,im=<span class="num">139968</span>,ia=<span class="num">3877</span>,ic=<span class="num">29573</span><span class="opt">)</span> 
    (max * (<span class="kwb">$last</span> = (<span class="kwb">$last</span> * ia + ic<span class="opt">)</span> % im<span class="opt">))</span> / im
<span class="kwa">end</span>

alu = 
   <span class="str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span>+
   <span class="str">&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span>+
   <span class="str">&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span>+
   <span class="str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span>+
   <span class="str">&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span>+
   <span class="str">&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span>+
   <span class="str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span>

iub = [
    [<span class="str">&quot;a&quot;</span>, <span class="num">0.27</span>],
    [<span class="str">&quot;c&quot;</span>, <span class="num">0.12</span>],
    [<span class="str">&quot;g&quot;</span>, <span class="num">0.12</span>],
    [<span class="str">&quot;t&quot;</span>, <span class="num">0.27</span>],

    [<span class="str">&quot;B&quot;</span>, <span class="num">0.02</span>],
    [<span class="str">&quot;D&quot;</span>, <span class="num">0.02</span>],
    [<span class="str">&quot;H&quot;</span>, <span class="num">0.02</span>],
    [<span class="str">&quot;K&quot;</span>, <span class="num">0.02</span>],
    [<span class="str">&quot;M&quot;</span>, <span class="num">0.02</span>],
    [<span class="str">&quot;N&quot;</span>, <span class="num">0.02</span>],
    [<span class="str">&quot;R&quot;</span>, <span class="num">0.02</span>],
    [<span class="str">&quot;S&quot;</span>, <span class="num">0.02</span>],
    [<span class="str">&quot;V&quot;</span>, <span class="num">0.02</span>],
    [<span class="str">&quot;W&quot;</span>, <span class="num">0.02</span>],
    [<span class="str">&quot;Y&quot;</span>, <span class="num">0.02</span>],
]
homosapiens = [
    [<span class="str">&quot;a&quot;</span>, <span class="num">0.3029549426680</span>],
    [<span class="str">&quot;c&quot;</span>, <span class="num">0.1979883004921</span>],
    [<span class="str">&quot;g&quot;</span>, <span class="num">0.1975473066391</span>],
    [<span class="str">&quot;t&quot;</span>, <span class="num">0.3015094502008</span>],
]

<span class="kwa">def</span> <span class="kwd">make_repeat_fasta</span>(id, desc, src, n<span class="opt">)</span>
    puts <span class="str">&quot;&gt;</span><span class="ipl">#{id}</span> <span class="str"></span><span class="ipl">#{desc}</span><span class="str">&quot;</span>
    v = <span class="kwa">nil</span>
    width = <span class="num">60</span>
    l = src.length
    s = src * ((n / l<span class="opt">)</span> + <span class="num">1</span><span class="opt">)</span>
    s.slice!(n, l<span class="opt">)</span>
    <span class="kwd">puts</span> (s.<span class="kwd">scan</span>(<span class="kwc">/.{1,#{width}}/</span><span class="opt">)</span>.<span class="kwd">join</span>(<span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="opt">))</span>
<span class="kwa">end</span>

<span class="kwa">def</span> <span class="kwd">make_random_fasta</span>(id, desc, table, n<span class="opt">)</span>
    puts <span class="str">&quot;&gt;</span><span class="ipl">#{id}</span> <span class="str"></span><span class="ipl">#{desc}</span><span class="str">&quot;</span>
    rand, v = <span class="kwa">nil</span>,<span class="kwa">nil</span>
    width = <span class="num">60</span>
    chunk = <span class="num">1</span> * width
    prob = <span class="num">0.0</span>
    table.each{|v| v[1]= (prob += v[1])}
    <span class="kwa">for</span> i <span class="kwa">in</span> <span class="num">1</span>..(n/width<span class="opt">)</span>
        <span class="kwd">puts</span> (<span class="num">1</span>..width<span class="opt">)</span>.collect{
            rand = <span class="kwd">gen_random</span>(<span class="num">1.0</span><span class="opt">)</span>
            table.find{|v| v[1]&gt;rand}[<span class="num">0</span>]
        }.join
    <span class="kwa">end</span>
    <span class="kwa">if</span> n%width != <span class="num">0</span>
        <span class="kwd">puts</span> (<span class="num">1</span>..(n%width<span class="opt">))</span>.collect{
            rand = <span class="kwd">gen_random</span>(<span class="num">1.0</span><span class="opt">)</span>
            table.find{|v| v[1]&gt;rand}[<span class="num">0</span>]
        }.join
    <span class="kwa">end</span>
<span class="kwa">end</span>


n = (<span class="kwc">ARGV</span>[<span class="num">0</span>] <span class="kwa">or</span> <span class="num">27</span><span class="opt">)</span>.to_i 

<span class="kwd">make_repeat_fasta</span>(<span class="str">'ONE'</span>, <span class="str">'Homo sapiens alu'</span>, alu, n*<span class="num">2</span><span class="opt">)</span>
<span class="kwd">make_random_fasta</span>(<span class="str">'TWO'</span>, <span class="str">'IUB ambiguity codes'</span>, iub, n*<span class="num">3</span><span class="opt">)</span>
<span class="kwd">make_random_fasta</span>(<span class="str">'THREE'</span>, <span class="str">'Homo sapiens frequency'</span>, homosapiens, n*<span class="num">5</span><span class="opt">)</span>

