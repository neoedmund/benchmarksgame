<span class="slc"># The Computer Language Benchmarks Game</span>
<span class="slc"># http://benchmarksgame.alioth.debian.org/</span>
<span class="slc">#</span>
<span class="slc">#  contributed by Mykola Zubach</span>

<span class="kwa">use</span> strict;
<span class="kwa">use</span> threads;

<span class="kwc">my</span>(<span class="kwb">$sequence</span>, <span class="kwb">$seq_len</span>, <span class="kwb">$thr</span>, <span class="kwb">&#64;threads</span>, <span class="kwb">%h</span>);

<span class="kwa">sub</span> read_sequence($) {
  <span class="kwc">my</span> <span class="kwb">$id</span> = <span class="kwc">shift</span>;
  <span class="kwc">my</span> <span class="kwb">$out</span>;

  <span class="kwa">while</span>(&lt;STDIN&gt;) {
    <span class="kwa">last if</span> <span class="kwd">/^&gt;$id /</span>;
  }

  <span class="kwa">while</span>(&lt;STDIN&gt;) {
    <span class="kwa">last if</span> <span class="kwd">/^&gt;/</span>;
    <span class="kwc">chomp</span>;
    <span class="kwb">$out</span> .= <span class="kwc">uc</span>(<span class="kwb">$_</span>);
  }

  <span class="kwa">return</span> <span class="kwb">$out</span>;
}

<span class="kwa">sub</span> count_freq($) {
  <span class="kwc">my</span> <span class="kwb">$len</span> = <span class="kwc">shift</span>;
  <span class="kwc">my</span> <span class="kwb">$end</span> = <span class="kwb">$seq_len</span> - <span class="kwb">$len</span>;

  <span class="kwb">%h</span> = ();
  <span class="kwa">for</span>(<span class="kwc">my</span> <span class="kwb">$i</span> = <span class="num">0</span>; <span class="kwb">$i</span> &lt;= <span class="kwb">$end</span>; <span class="kwb">$i</span>++) {
    <span class="kwb">$h</span>{<span class="kwc">substr</span>(<span class="kwb">$sequence</span>, <span class="kwb">$i</span>, <span class="kwb">$len</span>)} ++;
  }
}

<span class="kwa">sub</span> count_len($) {
  <span class="kwc">my</span> <span class="kwb">$len</span> = <span class="kwc">shift</span>;
  <span class="kwc">my</span> <span class="kwb">$sum</span> = <span class="kwb">$seq_len</span> - <span class="kwb">$len</span> + <span class="num">1</span>;
  <span class="kwc">my</span> <span class="kwb">$out</span> = <span class="str">''</span>;

  count_freq(<span class="kwb">$len</span>);

  <span class="kwa">foreach</span> <span class="kwc">my</span> <span class="kwb">$s</span>  (<span class="kwc">sort</span> { <span class="kwb">$h</span>{<span class="kwb">$b</span>} &lt;=&gt; <span class="kwb">$h</span>{<span class="kwb">$a</span>} || <span class="kwb">$a</span> <span class="kwc">cmp</span> <span class="kwb">$b</span> } <span class="kwc">keys</span> <span class="kwb">%h</span>) {
    <span class="kwb">$out</span> .= <span class="kwc">sprintf</span> <span class="str">&quot;</span><span class="ipl">$s</span> <span class="str">%.3f</span><span class="esc">\n</span><span class="str">&quot;</span>, <span class="kwb">$h</span>{<span class="kwb">$s</span>} * <span class="num">100</span> / <span class="kwb">$sum</span>;
  }
  <span class="kwb">$out</span> .= <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span>;

  <span class="kwa">return</span> <span class="kwb">$out</span>;
}

<span class="kwa">sub</span> count_sequence($) {
  <span class="kwc">my</span> <span class="kwb">$s</span> = <span class="kwc">shift</span>;

<span class="slc"># count ALL sequences of specified length!</span>
  count_freq(<span class="kwc">length</span>(<span class="kwb">$s</span>));

  <span class="kwa">return</span> <span class="kwc">sprintf</span>(<span class="str">&quot;</span><span class="ipl">%d</span><span class="str"></span><span class="esc">\t</span><span class="str"></span><span class="ipl">$s</span><span class="str"></span><span class="esc">\n</span><span class="str">&quot;</span>, <span class="kwb">$h</span>{<span class="kwb">$s</span>});
}

<span class="slc">## MAIN()</span>

<span class="kwb">$sequence</span> = read_sequence(<span class="str">'THREE'</span>);
<span class="kwb">$seq_len</span> = <span class="kwc">length</span>(<span class="kwb">$sequence</span>);

<span class="kwa">foreach</span> <span class="kwc">my</span> <span class="kwb">$len</span> (<span class="num">1</span>,<span class="num">2</span>) {
  <span class="kwc">push</span> <span class="kwb">&#64;threads</span>, threads-&gt;<span class="kwd">create</span>(\&amp;count_len, <span class="kwb">$len</span>);
}

<span class="kwa">foreach</span> <span class="kwc">my</span> <span class="kwb">$s</span> (<span class="kwc">qw</span>(GGT GGTA GGTATT GGTATTTTAATT GGTATTTTAATTTATAGT)) {
  <span class="kwc">push</span> <span class="kwb">&#64;threads</span>, threads-&gt;<span class="kwd">create</span>(\&amp;count_sequence, <span class="kwb">$s</span>);
}

<span class="kwa">foreach</span> <span class="kwb">$thr</span> (<span class="kwb">&#64;threads</span>) {
  <span class="kwc">print</span> <span class="kwb">$thr</span>-&gt;<span class="kwc">join</span>();
}
