<span class="com">(*</span>
<span class="com">      The Computer Language Benchmarks Game</span>
<span class="com">      http://benchmarksgame.alioth.debian.org/ </span>
<span class="com"></span>
<span class="com">      Contributed by Don Syme</span>
<span class="com">      Port of C# version by by Marek Safar and optimized by kasthack</span>
<span class="com">*)</span>

<span class="kwa">open</span> <span class="kwd">System</span>

[&lt;<span class="kwd">AllowNullLiteral</span>&gt;]
<span class="kwa">type</span> <span class="kwd">TreeNode</span>(left:<span class="kwd">TreeNode</span>,right:<span class="kwd">TreeNode</span>,item) = 
    <span class="kwa">member</span> __.<span class="kwd">CheckSum</span> =
        <span class="kwa">match</span> right <span class="kwa">with</span> 
        | <span class="kwa">null</span> -&gt; item 
        | _ -&gt; item + left.<span class="kwd">CheckSum</span> - right.<span class="kwd">CheckSum</span>

<span class="kwa">let rec</span> mkTree(item, depth) =
    <span class="kwa">if</span> depth = <span class="num">0</span> <span class="kwa">then</span> <span class="kwd">TreeNode</span>(<span class="kwa">null</span>, <span class="kwa">null</span>, item)
    <span class="kwa">else</span> <span class="kwd">TreeNode</span>(mkTree (<span class="num">2</span>*item - <span class="num">1</span>, depth-<span class="num">1</span>), mkTree(<span class="num">2</span>*item, depth-<span class="num">1</span>), item)

<span class="kwa">let</span> bottomUpTree (item, depth) = mkTree(item, depth - <span class="num">1</span>)

<span class="kwa">let</span> minDepth = <span class="num">4</span>
[&lt;<span class="kwd">EntryPoint</span>&gt;]
<span class="kwa">let</span> main argv = 
    <span class="kwa">let</span> n = <span class="kwa">if</span> argv.<span class="kwd">Length</span> &gt; <span class="num">0</span> <span class="kwa">then</span> <span class="kwd">Int32</span>.<span class="kwd">Parse</span>(argv.[<span class="num">0</span>]) <span class="kwa">else</span> <span class="num">0</span>
    <span class="kwa">let</span> maxDepth = <span class="kwd">Math</span>.<span class="kwd">Max</span>(minDepth + <span class="num">2</span>, n)
    <span class="kwa">let</span> stretchDepth = maxDepth + <span class="num">1</span>
    <span class="kwa">let mutable</span> check = bottomUpTree(<span class="num">0</span>, stretchDepth).<span class="kwd">CheckSum</span>
    <span class="kwd">Console</span>.<span class="kwd">WriteLine</span>(<span class="str">&quot;stretch tree of depth</span> <span class="ipl">{0}</span><span class="str"></span><span class="esc">\t</span> <span class="str">check:</span> <span class="ipl">{1}</span><span class="str">&quot;</span>, stretchDepth, check)
    <span class="kwa">let</span> longLivedTree = bottomUpTree(<span class="num">0</span>, maxDepth)
    <span class="kwa">for</span> depth <span class="kwa">in</span> minDepth .. <span class="num">2</span> .. maxDepth <span class="kwa">do</span>
         <span class="kwa">let</span> iterations = <span class="num">1</span> &lt;&lt;&lt; ( maxDepth - depth + minDepth )
         check &lt;- <span class="num">0</span>
         <span class="kwa">for</span> i <span class="kwa">in</span> <span class="num">1</span> .. iterations <span class="kwa">do</span> 
            check &lt;- check + bottomUpTree(i, depth).<span class="kwd">CheckSum</span>
            check &lt;- check + bottomUpTree(-i, depth).<span class="kwd">CheckSum</span>
         <span class="kwd">Console</span>.<span class="kwd">WriteLine</span>(<span class="str">&quot;</span><span class="ipl">{0}</span><span class="str"></span><span class="esc">\t</span> <span class="str">trees of depth</span> <span class="ipl">{1}</span><span class="str"></span><span class="esc">\t</span> <span class="str">check:</span> <span class="ipl">{2}</span><span class="str">&quot;</span>,iterations * <span class="num">2</span>, depth, check)
    <span class="kwd">Console</span>.<span class="kwd">WriteLine</span>(<span class="str">&quot;long lived tree of depth</span> <span class="ipl">{0}</span><span class="str"></span><span class="esc">\t</span> <span class="str">check:</span> <span class="ipl">{1}</span><span class="str">&quot;</span>,maxDepth, longLivedTree.<span class="kwd">CheckSum</span>)
    <span class="num">0</span>

