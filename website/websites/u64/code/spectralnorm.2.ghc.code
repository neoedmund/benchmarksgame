<span class="slc">--</span>
<span class="slc">-- The Computer Language Benchmarks Game</span>
<span class="slc">-- http://benchmarksgame.alioth.debian.org/</span>
<span class="slc">-- Contributed by Greg Buchholz </span>

<span class="kwd">import</span> Data.<span class="kwb">Array</span>.Base
<span class="kwd">import</span> System.Environment
<span class="kwd">import</span> Numeric

main = <span class="kwd">do</span> 
        [arg] &lt;- <span class="kwc">getArgs</span>
        <span class="kwd">let</span> n = (<span class="kwc">read</span> arg) - <span class="num">1</span> 
        <span class="kwd">let</span> <span class="kwc">init</span> = <span class="kwc">listArray</span> (<span class="num">0</span>,n) (<span class="kwc">repeat</span> <span class="num">1.0</span>)
        <span class="kwd">let</span> (v:u:rest) = <span class="kwc">drop</span> <span class="num">19</span> $ <span class="kwc">iterate</span> (eval_AtA_times_u n) <span class="kwc">init</span>
        <span class="kwd">let</span> vBv = <span class="kwa">sum</span> [(u!i)*(v!i) |i&lt;-[<span class="num">0</span>..n]]
        <span class="kwd">let</span> vv  = <span class="kwa">sum</span> [(v!i)*(v!i) |i&lt;-[<span class="num">0</span>..n]]
        <span class="kwc">putStrLn</span> $ <span class="kwc">showFFloat</span> (Just <span class="num">9</span>) (<span class="kwc">sqrt</span> (vBv/vv)) <span class="str">&quot;&quot;</span>

eval_AtA_times_u n u = eval_At_times_u n v
    <span class="kwd">where</span> v = eval_A_times_u n u

eval_A x y = <span class="num">1.0</span>/((i+j)*(i+j+<span class="num">1</span>)/<span class="num">2</span>+i+<span class="num">1</span>)
    <span class="kwd">where</span> i = <span class="kwc">fromIntegral</span> x
          j = <span class="kwc">fromIntegral</span> y

eval_A_times_u :: <span class="kwb">Int</span> -&gt; UArray <span class="kwb">Int Double</span> -&gt; UArray <span class="kwb">Int Double</span>
eval_A_times_u n u = unsafeAccumArray (+) <span class="num">0</span> (<span class="num">0</span>,n) 
                     [(i,(eval_A i j) * u!j)|i&lt;-[<span class="num">0</span>..n], j&lt;-[<span class="num">0</span>..n]]
   
eval_At_times_u :: <span class="kwb">Int</span> -&gt; UArray <span class="kwb">Int Double</span> -&gt; UArray <span class="kwb">Int Double</span>
eval_At_times_u n u = unsafeAccumArray (+) <span class="num">0</span> (<span class="num">0</span>,n) 
                      [(i,(eval_A j i) * u!j)|i&lt;-[<span class="num">0</span>..n], j&lt;-[<span class="num">0</span>..n]]
