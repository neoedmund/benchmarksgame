
<span class="slc">-- The Computer Language Benchmarks Game</span>
<span class="slc">-- http://benchmarksgame.alioth.debian.org</span>
<span class="slc">--</span>
<span class="slc">-- contributed by Pascal Obry on 2005/04/07</span>
<span class="slc">-- modified by Gautier de Montmollin</span>
<span class="slc">-- modified by Georg Bauhaus, Jonathan Parker (July 2011)</span>

<span class="kwa">with</span> Ada.Command_Line;
<span class="kwa">with</span> GNAT.Float_Control;
<span class="kwa">with</span> Sequence.Data, Sequence.Creation;

<span class="kwa">procedure</span> Fasta <span class="kwa">is</span>

   N : <span class="kwa">constant</span> <span class="kwb">Positive</span> := <span class="kwb">Positive</span><span class="kwd">'Value</span> (Ada.Command_Line.Argument (<span class="num">1</span>));
   
   <span class="kwa">use</span> Sequence.Data, Sequence.Creation;
   
   Runner : Environment;
<span class="kwa">begin</span>
   GNAT.Float_Control.Reset;

   Make_Repeat_Fasta (<span class="str">&quot;&gt;ONE Homo sapiens alu&quot;</span>, ALU, N*<span class="num">2</span>);
   Make_Random_Fasta (<span class="str">&quot;&gt;TWO IUB ambiguity codes&quot;</span>, IUB, N*<span class="num">3</span>);
   Make_Random_Fasta (<span class="str">&quot;&gt;THREE Homo sapiens frequency&quot;</span>, Homosapiens, N*<span class="num">5</span>);

<span class="kwa">end</span> Fasta;
    
<span class="kwa">package</span> Sequence.Data <span class="kwa">is</span>
   
   <span class="kwa">pragma</span> Pure (Data);
   
   Homosapiens : <span class="kwa">constant</span> Nucleotide_Set(<span class="num">0</span>.<span class="num">.3</span>) :=
    ((<span class="str">'a'</span>, <span class="num">0.3029549426680</span>), (<span class="str">'c'</span>, <span class="num">0.1979883004921</span>),
     (<span class="str">'g'</span>, <span class="num">0.1975473066391</span>), (<span class="str">'t'</span>, <span class="num">0.3015094502008</span>));

   IUB : <span class="kwa">constant</span> Nucleotide_Set(<span class="num">0</span>.<span class="num">.14</span>) :=
    ((<span class="str">'a'</span>, <span class="num">0.27</span>), (<span class="str">'c'</span>, <span class="num">0.12</span>), (<span class="str">'g'</span>, <span class="num">0.12</span>), (<span class="str">'t'</span>, <span class="num">0.27</span>),
     (<span class="str">'B'</span>, <span class="num">0.02</span>), (<span class="str">'D'</span>, <span class="num">0.02</span>), (<span class="str">'H'</span>, <span class="num">0.02</span>), (<span class="str">'K'</span>, <span class="num">0.02</span>),
     (<span class="str">'M'</span>, <span class="num">0.02</span>), (<span class="str">'N'</span>, <span class="num">0.02</span>), (<span class="str">'R'</span>, <span class="num">0.02</span>), (<span class="str">'S'</span>, <span class="num">0.02</span>),
     (<span class="str">'V'</span>, <span class="num">0.02</span>), (<span class="str">'W'</span>, <span class="num">0.02</span>), (<span class="str">'Y'</span>, <span class="num">0.02</span>));

   ALU : <span class="kwa">constant</span> <span class="kwb">String</span> :=
     <span class="str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span> &amp;
     <span class="str">&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span> &amp;
     <span class="str">&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span> &amp;
     <span class="str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span> &amp;
     <span class="str">&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span> &amp;
     <span class="str">&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span> &amp;
     <span class="str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span>;
   
<span class="kwa">end</span> Sequence.Data;


<span class="kwa">with</span> Ada.Finalization;

<span class="kwa">package</span> Sequence.Creation <span class="kwa">is</span>

   <span class="kwa">procedure</span> Make_Random_Fasta
     (Title       : <span class="kwa">in</span> <span class="kwb">String</span>; 
      Nucleotides : <span class="kwa">in</span> Nucleotide_Set; 
      N           : <span class="kwa">in</span> <span class="kwb">Positive</span>);

   <span class="kwa">procedure</span> Make_Repeat_Fasta 
     (Title : <span class="kwa">in</span> <span class="kwb">String</span>;
      S     : <span class="kwa">in</span> <span class="kwb">String</span>; 
      N     : <span class="kwa">in</span> <span class="kwb">Positive</span>);
   
   <span class="kwa">type</span> Environment <span class="kwa">is new</span> Ada.Finalization.Limited_Controlled
     <span class="kwa">with null record</span>;

<span class="kwa">private</span>

   overriding
   <span class="kwa">procedure</span> Initialize (Active : <span class="kwa">in out</span> Environment);

   overriding
   <span class="kwa">procedure</span> Finalize (Active : <span class="kwa">in out</span> Environment);

<span class="kwa">end</span> Sequence.Creation;

<span class="kwa">package</span> Sequence <span class="kwa">is</span>
   
   <span class="kwa">pragma</span> Pure (Sequence);
   
   <span class="kwa">type</span> Real <span class="kwa">is digits</span> <span class="num">15</span>;

   <span class="kwa">type</span> Nucleotide <span class="kwa">is record</span>
      C : <span class="kwb">Character</span>;
      P : Real;
   <span class="kwa">end record</span>;

   Max_Length_of_Code : <span class="kwa">constant</span> := <span class="num">15</span>;

   <span class="kwa">subtype</span> Nucleotide_Index <span class="kwa">is</span> <span class="kwb">Integer</span> <span class="kwa">range</span> <span class="num">0</span> .. Max_Length_of_Code-<span class="num">1</span>;

   <span class="kwa">type</span> Nucleotide_Set <span class="kwa">is array</span> (Nucleotide_Index <span class="kwa">range</span> &lt;&gt;) <span class="kwa">of</span> Nucleotide;

<span class="kwa">end</span> Sequence;

<span class="kwa">with</span> LCG_Random;
<span class="kwa">with</span> Line_IO;

<span class="kwa">package body</span> Sequence.Creation <span class="kwa">is</span>

   <span class="kwa">package</span> Real_Random_Nums <span class="kwa">is new</span> LCG_Random (Real);
   <span class="kwa">use</span> Real_Random_Nums;
   
   overriding
   <span class="kwa">procedure</span> Initialize (Active : <span class="kwa">in out</span> Environment) <span class="kwa">is</span>
   <span class="kwa">begin</span>
      Line_IO.Open_Stdout;
   <span class="kwa">end</span> Initialize;
   
   overriding
   <span class="kwa">procedure</span> Finalize (Active : <span class="kwa">in out</span> Environment) <span class="kwa">is</span>
   <span class="kwa">begin</span>
      Line_IO.Close_Stdout;
   <span class="kwa">end</span> Finalize;


   Line_Length : <span class="kwa">constant</span> := <span class="num">60</span>;
   End_of_Line : <span class="kwb">String</span> <span class="kwa">renames</span> Line_IO.End_of_Line;

   <span class="kwa">subtype</span> Line_End_Positions <span class="kwa">is</span> <span class="kwb">Positive</span>
      <span class="kwa">range</span> Line_Length + <span class="num">1</span> .. Line_Length + End_of_Line<span class="kwd">'Length</span>;

   Line_Buffer : <span class="kwb">String</span> (<span class="num">1</span> .. Line_Length + End_of_Line<span class="kwd">'Length</span>);

   Nucleo_Cumulative : <span class="kwa">array</span> (Nucleotide_Index) <span class="kwa">of</span> Nucleotide;

   <span class="kwa">procedure</span> Make_Random_Fasta
     (Title       : <span class="kwa">in</span> <span class="kwb">String</span>; 
      Nucleotides : <span class="kwa">in</span> Nucleotide_Set; 
      N           : <span class="kwa">in</span> <span class="kwb">Positive</span>)
   <span class="kwa">is</span>
      <span class="kwa">function</span> Random_Nucleotide <span class="kwa">return</span> <span class="kwb">Character</span> <span class="kwa">is</span>
         r : <span class="kwa">constant</span> Real := Gen_Random (<span class="num">1.0</span>);
         Result : <span class="kwb">Character</span> := <span class="str">'J'</span>;
      <span class="kwa">begin</span>
         Choose_Random: 
         <span class="kwa">for</span> i <span class="kwa">in</span> Nucleo_Cumulative<span class="kwd">'Range</span> <span class="kwa">loop</span>
            <span class="kwa">if</span> Nucleo_Cumulative(i).P &gt; r <span class="kwa">then</span>
               Result := Nucleo_Cumulative(i).C;
               <span class="kwa">exit</span> Choose_Random;
            <span class="kwa">end if</span>;
         <span class="kwa">end loop</span> Choose_Random;
         <span class="kwa">return</span> Result;
      <span class="kwa">end</span> Random_Nucleotide;

      Sum  : Real;
      Remaining_Chars  : <span class="kwa">constant</span> <span class="kwb">Natural</span> := N <span class="kwa">mod</span> Line_Length;
      No_of_Full_Lines : <span class="kwa">constant</span> <span class="kwb">Natural</span> := N  /  Line_Length;
   <span class="kwa">begin</span>
      Line_IO.Print (Title &amp; End_of_Line);

      Nucleo_Cumulative := (<span class="kwa">others</span> =&gt; (<span class="str">'j'</span>, <span class="num">2.0</span>));
      <span class="kwa">for</span> k <span class="kwa">in</span> Nucleotides<span class="kwd">'Range</span> <span class="kwa">loop</span>
         Nucleo_Cumulative(k).C := Nucleotides(k).C;
      <span class="kwa">end loop</span>;

      Sum := <span class="num">0.0</span>;
      <span class="kwa">for</span> k <span class="kwa">in</span> Nucleotides<span class="kwd">'Range</span> <span class="kwa">loop</span>
         Sum := Sum + Nucleotides(k).P;
         Nucleo_Cumulative(k).P := Sum;
      <span class="kwa">end loop</span>;

      Line_Buffer(Line_End_Positions) := End_of_Line;

      <span class="kwa">for</span> k <span class="kwa">in</span> <span class="num">1</span> .. No_of_Full_Lines <span class="kwa">loop</span>
         <span class="kwa">for</span> i <span class="kwa">in</span> <span class="num">1</span> .. Line_Length <span class="kwa">loop</span>
            Line_Buffer(i) := Random_Nucleotide;
         <span class="kwa">end loop</span>;
         Line_IO.Print (Line_Buffer);
      <span class="kwa">end loop</span>;

      <span class="kwa">if</span> Remaining_Chars &gt; <span class="num">0</span> <span class="kwa">then</span>
         <span class="kwa">for</span> i <span class="kwa">in</span> <span class="num">1</span> .. Remaining_Chars <span class="kwa">loop</span>
            Line_Buffer(i) := Random_Nucleotide;
         <span class="kwa">end loop</span>;
         Line_IO.Print (Line_Buffer(<span class="num">1</span> .. Remaining_Chars) &amp; End_of_Line);
      <span class="kwa">end if</span>;

   <span class="kwa">end</span> Make_Random_Fasta;

   <span class="kwa">procedure</span> Make_Repeat_Fasta 
     (Title : <span class="kwa">in</span> <span class="kwb">String</span>;
      S     : <span class="kwa">in</span> <span class="kwb">String</span>; 
      N     : <span class="kwa">in</span> <span class="kwb">Positive</span>) 
   <span class="kwa">is</span>
      S_App : <span class="kwa">constant</span> <span class="kwb">String</span> := S &amp; S(S<span class="kwd">'First</span> .. S<span class="kwd">'First</span> + Line_Length);

      Pos : <span class="kwb">Positive</span> := S_App<span class="kwd">'First</span>;
      Remaining_Chars : <span class="kwb">Natural</span> := N;
      No_of_Chars_Output : <span class="kwb">Natural</span> := <span class="num">0</span>;
   <span class="kwa">begin</span>
      Line_IO.Print (Title &amp; End_of_Line);

      <span class="kwa">while</span> Remaining_Chars &gt; <span class="num">0</span> <span class="kwa">loop</span>

         No_of_Chars_Output := <span class="kwb">Integer</span><span class="kwd">'Min</span> (Remaining_Chars, Line_Length);

         Line_IO.Print (S_App (Pos .. Pos + No_of_Chars_Output - <span class="num">1</span>));
         Line_IO.Print (End_of_Line);

         Remaining_Chars := Remaining_Chars - No_of_Chars_Output;

         Pos := Pos + No_of_Chars_Output;
         <span class="kwa">if</span> Pos &gt; S<span class="kwd">'Last</span> <span class="kwa">then</span>
            Pos := Pos - S<span class="kwd">'Length</span>;
         <span class="kwa">end if</span>;

      <span class="kwa">end loop</span>;

   <span class="kwa">end</span> Make_Repeat_Fasta;

<span class="kwa">end</span> Sequence.Creation;

<span class="kwa">package</span> Line_IO <span class="kwa">is</span>

   <span class="kwa">procedure</span> Print (Item : <span class="kwb">String</span>);

   <span class="kwa">procedure</span> Close_Stdout;

   <span class="kwa">procedure</span> Open_Stdout;

   End_of_Line : <span class="kwa">constant</span> <span class="kwb">String</span> := (<span class="num">1</span> =&gt; ASCII.LF);

   <span class="kwa">pragma</span> Inline (Print);

<span class="kwa">end</span> Line_IO;


<span class="kwa">with</span> Ada.Streams.Stream_IO;
<span class="kwa">with</span> Unchecked_Conversion;

<span class="kwa">package body</span> Line_IO <span class="kwa">is</span>

   <span class="kwa">use</span> Ada.Streams;

   Stdout : Stream_IO.File_Type;

   <span class="kwa">procedure</span> Print (Item : <span class="kwb">String</span>) <span class="kwa">is</span>
      <span class="kwa">subtype</span> Index <span class="kwa">is</span> Stream_Element_Offset <span class="kwa">range</span>
         Stream_Element_Offset(Item<span class="kwd">'First</span>) .. Stream_Element_Offset(Item<span class="kwd">'Last</span>);
      <span class="kwa">subtype</span> XString <span class="kwa">is</span> <span class="kwb">String</span> (Item<span class="kwd">'Range</span>);
      <span class="kwa">subtype</span> XBytes <span class="kwa">is</span> Stream_Element_Array (Index);
      <span class="kwa">function</span> To_Bytes <span class="kwa">is new</span> Unchecked_Conversion
        (Source =&gt; XString,
         Target =&gt; XBytes);
   <span class="kwa">begin</span>
      Stream_IO.Write (Stdout, To_Bytes (Item));
   <span class="kwa">end</span> Print;

   <span class="kwa">procedure</span> Close_Stdout <span class="kwa">is</span>
   <span class="kwa">begin</span>
      Stream_IO.Close (Stdout);
   <span class="kwa">end</span> Close_Stdout;

   <span class="kwa">procedure</span> Open_Stdout <span class="kwa">is</span>
   <span class="kwa">begin</span>
      Stream_IO.Open 
        (File =&gt; Stdout,
         Mode =&gt; Stream_IO.Out_File,
         Name =&gt; <span class="str">&quot;/dev/stdout&quot;</span>);
   <span class="kwa">end</span> Open_Stdout;

<span class="kwa">end</span> Line_IO;


<span class="kwa">generic</span>

   <span class="kwa">type</span> Real <span class="kwa">is digits</span> &lt;&gt;;

<span class="kwa">package</span> LCG_Random <span class="kwa">is</span>

   <span class="kwa">function</span> Gen_Random (Max : <span class="kwa">in</span> Real) <span class="kwa">return</span> Real;
   <span class="slc">-- Linear congruential random number generator. </span>
   <span class="slc">-- Period = 139_968, with output in [0.0, 1.0) if Max = 1.0.</span>

<span class="kwa">end</span> LCG_Random;

<span class="kwa">package body</span> LCG_Random <span class="kwa">is</span>

   <span class="kwa">pragma</span> Assert (Real<span class="kwd">'Digits</span> &gt; <span class="num">5</span>);

   <span class="kwa">type</span> Random_State <span class="kwa">is mod</span> <span class="num">2</span>**<span class="num">32</span>;

   State : Random_State := <span class="num">42</span>;

   <span class="kwa">type</span> Signed <span class="kwa">is range</span>
      -<span class="num">2</span>**(Random_State<span class="kwd">'Size</span>-<span class="num">1</span>) .. <span class="num">2</span>**(Random_State<span class="kwd">'Size</span>-<span class="num">1</span>) - <span class="num">1</span>;

   <span class="kwa">function</span> Gen_Random (Max : <span class="kwa">in</span> Real) <span class="kwa">return</span> Real <span class="kwa">is</span>
      IM : <span class="kwa">constant</span> := <span class="num">139</span>_968;
      IA : <span class="kwa">constant</span> :=   <span class="num">3</span>_877;
      IC : <span class="kwa">constant</span> :=  <span class="num">29</span>_573;
   <span class="kwa">begin</span>
      State := (State * IA + IC) <span class="kwa">mod</span> IM;
      <span class="kwa">return</span> (Max * Real (Signed (State))) * (<span class="num">1.0</span> / Real (IM));
   <span class="kwa">end</span> Gen_Random;

<span class="kwa">end</span> LCG_Random;
