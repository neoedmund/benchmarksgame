<span class="com">/* The Computer Language Benchmarks Game</span>
<span class="com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="com">   contributed by Isaac Gouy </span>
<span class="com">   Optimized by Roy Williams*/</span>

<span class="com">/**</span>
<span class="com"> * &#64;type {number}</span>
<span class="com"> */</span>
<span class="kwa">var</span> PI = <span class="num">3.141592653589793</span>;

<span class="com">/**</span>
<span class="com"> * &#64;type {number}</span>
<span class="com"> */</span>
<span class="kwa">var</span> SOLAR_MASS = <span class="num">4</span> * PI * PI;

<span class="com">/**</span>
<span class="com"> * &#64;type {number}</span>
<span class="com"> */</span>
<span class="kwa">var</span> DAYS_PER_YEAR = <span class="num">365.24</span>;

<span class="com">/**</span>
<span class="com"> * &#64;param {number} x</span>
<span class="com"> * &#64;param {number} y</span>
<span class="com"> * &#64;param {number} z</span>
<span class="com"> * &#64;param {number} vx</span>
<span class="com"> * &#64;param {number} vy</span>
<span class="com"> * &#64;param {number} vz</span>
<span class="com"> * &#64;param {number} mass</span>
<span class="com"> * &#64;constructor</span>
<span class="com"> */</span>
<span class="kwa">function</span> <span class="kwd">Body</span>(x,y,z,vx,vy,vz,mass,buffer,bodyIndex) {
   <span class="kwa">this</span>.storage_ = <span class="kwa">new</span> <span class="kwd">Float64Array</span>(
      buffer, bodyIndex * Body.BYTES_SIZE, Body.NUM_FIELDS);
   <span class="kwa">this</span>.storage_[Body.X] = x;
   <span class="kwa">this</span>.storage_[Body.Y] = y;
   <span class="kwa">this</span>.storage_[Body.Z] = z;
   <span class="kwa">this</span>.storage_[Body.VX] = vx; 
   <span class="kwa">this</span>.storage_[Body.VY] = vy;
   <span class="kwa">this</span>.storage_[Body.VZ] = vz;
   <span class="kwa">this</span>.storage_[Body.MASS] = mass;
}

<span class="com">/**</span>
<span class="com"> * &#64;type {number}</span>
<span class="com"> * &#64;const</span>
<span class="com"> */</span>
Body.NUM_FIELDS = <span class="num">7</span>;

<span class="com">/**</span>
<span class="com"> * &#64;type {number}</span>
<span class="com"> * &#64;const</span>
<span class="com"> */</span>
Body.BYTES_SIZE = Body.NUM_FIELDS * <span class="num">8</span>;

<span class="com">/**</span>
<span class="com"> * &#64;type {number}</span>
<span class="com"> * &#64;const</span>
<span class="com"> */</span>
Body.X = <span class="num">0</span>;

<span class="com">/**</span>
<span class="com"> * &#64;type {number}</span>
<span class="com"> * &#64;const</span>
<span class="com"> */</span>
Body.Y = <span class="num">1</span>;

<span class="com">/**</span>
<span class="com"> * &#64;type {number}</span>
<span class="com"> * &#64;const</span>
<span class="com"> */</span>
Body.Z = <span class="num">2</span>;

<span class="com">/**</span>
<span class="com"> * &#64;type {number}</span>
<span class="com"> * &#64;const</span>
<span class="com"> */</span>
Body.VX = <span class="num">3</span>;

<span class="com">/**</span>
<span class="com"> * &#64;type {number}</span>
<span class="com"> * &#64;const</span>
<span class="com"> */</span>
Body.VY = <span class="num">4</span>;

<span class="com">/**</span>
<span class="com"> * &#64;type {number}</span>
<span class="com"> * &#64;const</span>
<span class="com"> */</span>
Body.VZ = <span class="num">5</span>;

<span class="com">/**</span>
<span class="com"> * &#64;type {number}</span>
<span class="com"> * &#64;const</span>
<span class="com"> */</span>
Body.MASS = <span class="num">6</span>;


<span class="com">/**</span>
<span class="com"> * &#64;param {number} px</span>
<span class="com"> * &#64;param {number} py</span>
<span class="com"> * &#64;param {number} pz</span>
<span class="com"> */</span>
Body.<span class="kwa">prototype</span>.offsetMomentum = <span class="kwa">function</span>(px,py,pz) {
   <span class="kwa">this</span>.storage_[Body.VX] = -px / SOLAR_MASS;
   <span class="kwa">this</span>.storage_[Body.VY] = -py / SOLAR_MASS;
   <span class="kwa">this</span>.storage_[Body.VZ] = -pz / SOLAR_MASS;
}

<span class="com">/**</span>
<span class="com"> * &#64;return {Body}</span>
<span class="com"> */</span>
<span class="kwa">function</span> <span class="kwd">Jupiter</span>(buffer, bodyIndex){
   <span class="kwa">return new</span> <span class="kwd">Body</span>(
      <span class="num">4.84143144246472090e+00</span>,
      -<span class="num">1.16032004402742839e+00</span>,
      -<span class="num">1.03622044471123109e-01</span>,
      <span class="num">1.66007664274403694e-03</span> * DAYS_PER_YEAR,
      <span class="num">7.69901118419740425e-03</span> * DAYS_PER_YEAR,
      -<span class="num">6.90460016972063023e-05</span> * DAYS_PER_YEAR,
      <span class="num">9.54791938424326609e-04</span> * SOLAR_MASS,
      buffer, bodyIndex
   );
}

<span class="com">/**</span>
<span class="com"> * &#64;return {Body}</span>
<span class="com"> */</span>
<span class="kwa">function</span> <span class="kwd">Saturn</span>(buffer, bodyIndex){
   <span class="kwa">return new</span> <span class="kwd">Body</span>(
      <span class="num">8.34336671824457987e+00</span>,
      <span class="num">4.12479856412430479e+00</span>,
      -<span class="num">4.03523417114321381e-01</span>,
      -<span class="num">2.76742510726862411e-03</span> * DAYS_PER_YEAR,
      <span class="num">4.99852801234917238e-03</span> * DAYS_PER_YEAR,
      <span class="num">2.30417297573763929e-05</span> * DAYS_PER_YEAR,
      <span class="num">2.85885980666130812e-04</span> * SOLAR_MASS,
      buffer, bodyIndex
   );
}

<span class="com">/**</span>
<span class="com"> * &#64;return {Body}</span>
<span class="com"> */</span>
<span class="kwa">function</span> <span class="kwd">Uranus</span>(buffer, bodyIndex){
   <span class="kwa">return new</span> <span class="kwd">Body</span>(
      <span class="num">1.28943695621391310e+01</span>,
      -<span class="num">1.51111514016986312e+01</span>,
      -<span class="num">2.23307578892655734e-01</span>,
      <span class="num">2.96460137564761618e-03</span> * DAYS_PER_YEAR,
      <span class="num">2.37847173959480950e-03</span> * DAYS_PER_YEAR,
      -<span class="num">2.96589568540237556e-05</span> * DAYS_PER_YEAR,
      <span class="num">4.36624404335156298e-05</span> * SOLAR_MASS,
      buffer, bodyIndex
   );
}

<span class="com">/**</span>
<span class="com"> * &#64;return {Body}</span>
<span class="com"> */</span>
<span class="kwa">function</span> <span class="kwd">Neptune</span>(buffer, bodyIndex){
   <span class="kwa">return new</span> <span class="kwd">Body</span>(
      <span class="num">1.53796971148509165e+01</span>,
      -<span class="num">2.59193146099879641e+01</span>,
      <span class="num">1.79258772950371181e-01</span>,
      <span class="num">2.68067772490389322e-03</span> * DAYS_PER_YEAR,
      <span class="num">1.62824170038242295e-03</span> * DAYS_PER_YEAR,
      -<span class="num">9.51592254519715870e-05</span> * DAYS_PER_YEAR,
      <span class="num">5.15138902046611451e-05</span> * SOLAR_MASS,
      buffer, bodyIndex
   );
}

<span class="com">/**</span>
<span class="com"> * &#64;return {Body}</span>
<span class="com"> */</span>
<span class="kwa">function</span> <span class="kwd">Sun</span>(buffer, bodyIndex){
   <span class="kwa">return new</span> <span class="kwd">Body</span>(<span class="num">0.0</span>, <span class="num">0.0</span>, <span class="num">0.0</span>, <span class="num">0.0</span>, <span class="num">0.0</span>, <span class="num">0.0</span>, SOLAR_MASS, buffer, bodyIndex);
}

<span class="com">/**</span>
<span class="com"> * &#64;param {Array.&lt;Body&gt;} bodies</span>
<span class="com"> * &#64;constructor</span>
<span class="com"> */</span>
<span class="kwa">function</span> <span class="kwd">NBodySystem</span>(bodies){
   <span class="com">/**</span>
<span class="com">    * &#64;type {Array.&lt;Body&gt;}</span>
<span class="com">    */</span>
   <span class="kwa">this</span>.bodies = bodies;
   <span class="kwa">var</span> px = <span class="num">0.0</span>;
   <span class="kwa">var</span> py = <span class="num">0.0</span>;
   <span class="kwa">var</span> pz = <span class="num">0.0</span>;
   <span class="kwa">var</span> size = <span class="kwa">this</span>.bodies.length;
   <span class="kwa">for</span> (<span class="kwa">var</span> i=<span class="num">0</span>; i&lt;size; i++){
      <span class="kwa">var</span> b = <span class="kwa">this</span>.bodies[i];
      <span class="kwa">var</span> m = b.storage_[Body.MASS];
      px += b.storage_[Body.VX] * m;
      py += b.storage_[Body.VY] * m;
      pz += b.storage_[Body.VZ] * m;
   }
   <span class="kwa">this</span>.bodies[<span class="num">0</span>].<span class="kwd">offsetMomentum</span>(px,py,pz);
}

<span class="com">/**</span>
<span class="com"> * &#64;param {number} dt</span>
<span class="com"> */</span>
NBodySystem.<span class="kwa">prototype</span>.advance = <span class="kwa">function</span>(dt){
   <span class="kwa">var</span> dx, dy, dz, distance, mag;
   <span class="kwa">var</span> size = <span class="kwa">this</span>.bodies.length;

   <span class="kwa">for</span> (<span class="kwa">var</span> i=<span class="num">0</span>; i&lt;size; i++) {
      <span class="kwa">var</span> bodyi = <span class="kwa">this</span>.bodies[i];
      <span class="kwa">var</span> imass = bodyi.storage_[Body.MASS]
      <span class="kwa">for</span> (<span class="kwa">var</span> j=i+<span class="num">1</span>; j&lt;size; j++) {
         <span class="kwa">var</span> bodyj = <span class="kwa">this</span>.bodies[j];
         <span class="kwa">var</span> jmass = bodyj.storage_[Body.MASS];
         dx = bodyi.storage_[Body.X] - bodyj.storage_[Body.X];
         dy = bodyi.storage_[Body.Y] - bodyj.storage_[Body.Y];
         dz = bodyi.storage_[Body.Z] - bodyj.storage_[Body.Z];

         distance = Math.<span class="kwd">sqrt</span>(dx*dx + dy*dy + dz*dz);
         mag = dt / (distance * distance * distance);

         bodyi.storage_[Body.VX] -= dx * jmass * mag;
         bodyi.storage_[Body.VY] -= dy * jmass * mag;
         bodyi.storage_[Body.VZ] -= dz * jmass * mag;

         bodyj.storage_[Body.VX] += dx * imass * mag;
         bodyj.storage_[Body.VY] += dy * imass * mag;
         bodyj.storage_[Body.VZ] += dz * imass * mag;
      }
      bodyi.storage_[Body.X] += dt * bodyi.storage_[Body.VX];
      bodyi.storage_[Body.Y] += dt * bodyi.storage_[Body.VY];
      bodyi.storage_[Body.Z] += dt * bodyi.storage_[Body.VZ];
   }
}

<span class="com">/**</span>
<span class="com"> * &#64;return {number}</span>
<span class="com"> */</span>
NBodySystem.<span class="kwa">prototype</span>.energy = <span class="kwa">function</span>(){
   <span class="kwa">var</span> dx, dy, dz, distance;
   <span class="kwa">var</span> e = <span class="num">0.0</span>;
   <span class="kwa">var</span> size = <span class="kwa">this</span>.bodies.length;

   <span class="kwa">for</span> (<span class="kwa">var</span> i=<span class="num">0</span>; i&lt;size; i++) {
      <span class="kwa">var</span> bodyi = <span class="kwa">this</span>.bodies[i];

      e += <span class="num">0.5</span> * bodyi.storage_[Body.MASS] *
         ( bodyi.storage_[Body.VX] * bodyi.storage_[Body.VX]
         + bodyi.storage_[Body.VY] * bodyi.storage_[Body.VY]
         + bodyi.storage_[Body.VZ] * bodyi.storage_[Body.VZ] );

      <span class="kwa">for</span> (<span class="kwa">var</span> j=i+<span class="num">1</span>; j&lt;size; j++) {
         <span class="kwa">var</span> bodyj = <span class="kwa">this</span>.bodies[j];
         dx = bodyi.storage_[Body.X] - bodyj.storage_[Body.X];
         dy = bodyi.storage_[Body.Y] - bodyj.storage_[Body.Y];
         dz = bodyi.storage_[Body.Z] - bodyj.storage_[Body.Z];

         distance = Math.<span class="kwd">sqrt</span>(dx*dx + dy*dy + dz*dz);
         e -= (bodyi.storage_[Body.MASS] * 
               bodyj.storage_[Body.MASS]) / distance;
      }
   }
   <span class="kwa">return</span> e;
}

<span class="com">/**</span>
<span class="com"> * &#64;type {number}</span>
<span class="com"> */</span>
n = arguments[<span class="num">0</span>];

<span class="com">/**</span>
<span class="com"> * &#64;param {number} n</span>
<span class="com"> */</span>
runTest = <span class="kwa">function</span>(n) {
  <span class="kwa">var</span> bodyBuffer = <span class="kwa">new</span> <span class="kwd">ArrayBuffer</span>(Body.BYTES_SIZE * <span class="num">5</span>);
  <span class="kwa">var</span> bodies = <span class="kwa">new</span> <span class="kwd">NBodySystem</span>( <span class="kwd">Array</span>( 
     <span class="kwd">Sun</span>(bodyBuffer, <span class="num">0</span>),<span class="kwd">Jupiter</span>(bodyBuffer, <span class="num">1</span>),
     <span class="kwd">Saturn</span>(bodyBuffer, <span class="num">2</span>),<span class="kwd">Uranus</span>(bodyBuffer, <span class="num">3</span>),<span class="kwd">Neptune</span>(bodyBuffer, <span class="num">4</span>) 
  ));
  <span class="kwd">print</span>(bodies.<span class="kwd">energy</span>().<span class="kwd">toFixed</span>(<span class="num">9</span>));
  <span class="kwa">for</span> (<span class="kwa">var</span> i=<span class="num">0</span>; i&lt;n; i++){ bodies.<span class="kwd">advance</span>(<span class="num">0.01</span>); }
  <span class="kwd">print</span>(bodies.<span class="kwd">energy</span>().<span class="kwd">toFixed</span>(<span class="num">9</span>));
}

<span class="kwd">runTest</span>(n);
