<span class="slc">;;   The Computer Language Benchmarks Game</span>
<span class="slc">;;   http://benchmarksgame.alioth.debian.org/</span>
<span class="slc">;;</span>
<span class="slc">;; ported from Java #2</span>
<span class="slc">;; contributed by Alex Miller</span>

(ns mandelbrot
  (:gen-class)
  (:import (java.io BufferedOutputStream)
           (java.util.concurrent.atomic AtomicInteger)))

(set! *warn-on-reflection* true)
(set! *unchecked-math* true)

(<span class="kwa">def</span> yct (AtomicInteger.))
(<span class="kwa">def</span> crb nil)
(<span class="kwa">def</span> cib nil)
(<span class="kwa">def</span> out nil)

(<span class="kwa">defn</span> jloop ^long [^longs xy ^doubles state ^long res ^long i]
  (<span class="kwc">let</span> [x (aget xy <span class="num">0</span>)
        y (aget xy <span class="num">1</span>)
        crb ^doubles crb
        cib ^doubles cib]
    (<span class="kwb">loop</span> [b <span class="num">0</span>
           j <span class="num">49</span>]
      (<span class="kwc">if</span> (&gt; j <span class="num">0</span>)
        (<span class="kwc">let</span> [zr1 (aget state <span class="num">0</span>)
              zi1 (aget state <span class="num">1</span>)
              nzr1 (+ (- (* zr1 zr1) (* zi1 zi1)) (aget crb (+ x i)))
              nzi1 (+ (* zr1 zi1) (* zr1 zi1) (aget cib y))
              zr2 (aget state <span class="num">2</span>)
              zi2 (aget state <span class="num">3</span>)              
              nzr2 (+ (- (* zr2 zr2) (* zi2 zi2)) (aget crb (+ x i <span class="num">1</span>)))
              nzi2 (+ (* zr2 zi2) (* zr2 zi2) (aget cib y))]
          (aset state <span class="num">0</span> nzr1)
          (aset state <span class="num">1</span> nzi1)
          (aset state <span class="num">2</span> nzr2)
          (aset state <span class="num">3</span> nzi2)
          (<span class="kwc">if</span> (&gt; (+ (* nzr1 nzr1) (* nzi1 nzi1)) <span class="num">4</span>)
            (<span class="kwc">let</span> [newb (bit-or b <span class="num">2</span>)]
              (<span class="kwc">if</span> (= newb <span class="num">3</span>)
                (<span class="kwb">recur</span> newb <span class="num">0</span>)
                (<span class="kwc">if</span> (&gt; (+ (* nzr2 nzr2) (* nzi2 nzi2)) <span class="num">4</span>)
                  (<span class="kwb">recur</span> <span class="num">3 0</span>)
                  (<span class="kwb">recur</span> newb (dec j)))))
            (<span class="kwc">if</span> (&gt; (+ (* nzr2 nzr2) (* nzi2 nzi2)) <span class="num">4</span>)
              (<span class="kwc">let</span> [newb (bit-or b <span class="num">1</span>)]
                (<span class="kwc">if</span> (= newb <span class="num">3</span>)
                  (<span class="kwb">recur</span> newb <span class="num">0</span>)
                  (<span class="kwb">recur</span> newb (dec j))))
              (<span class="kwb">recur</span> b (dec j)))))
        (+ (bit-shift-left res <span class="num">2</span>) b)))))

(<span class="kwa">defn</span> get-byte ^long [^long x ^long y]
  (<span class="kwc">let</span> [crb ^doubles crb
        cib ^doubles cib
        out ^objects out
        xy (long-array <span class="num">2</span>)
        state (double-array <span class="num">4</span>)] <span class="slc">;; [zr1 zi1 zr2 zi2]</span>
    (aset xy <span class="num">0</span> x)
    (aset xy <span class="num">1</span> y)
    (<span class="kwb">loop</span> [res <span class="num">0</span>
           i <span class="num">0</span>]
      (<span class="kwc">if</span> (&lt; i <span class="num">8</span>)
        (do
          (aset state <span class="num">0</span> (aget crb (+ x i)))
          (aset state <span class="num">1</span> (aget cib y))
          (aset state <span class="num">2</span> (aget crb (+ x i <span class="num">1</span>)))
          (aset state <span class="num">3</span> (aget cib y))
          (<span class="kwb">recur</span> (jloop xy state res i) (+ i <span class="num">2</span>)))
        (bit-xor res -<span class="num">1</span>)))))

(<span class="kwa">defn</span> put-line [^long y ^bytes line]
  (<span class="kwc">let</span> [linelen (alength line)]
    (<span class="kwb">loop</span> [xb <span class="num">0</span>]
      (<span class="kwc">when</span> (&lt; xb linelen)
        (aset line xb (byte (get-byte (* xb <span class="num">8</span>) y)))
        (<span class="kwb">recur</span> (inc xb))))))

(<span class="kwa">defn</span> putter [out]
  (<span class="kwc">let</span> [yct ^AtomicInteger yct
        out ^objects out
        outlen (alength out)]
    (<span class="kwa">fn</span> []
      (<span class="kwb">loop</span> [y (.getAndIncrement yct)]
        (<span class="kwc">when</span> (&lt; y outlen)
          (do
            (put-line y (aget out y))
            (<span class="kwb">recur</span> (.getAndIncrement yct))))))))

(<span class="kwa">defn</span> -main [&amp; args]
  (<span class="kwc">let</span> [n (<span class="kwc">if</span> (pos? (count args)) (. Long parseLong (nth args <span class="num">0</span>) <span class="num">10</span>) <span class="num">6000</span>)
        np7 (+ n <span class="num">7</span>)
        invn (/ <span class="num">2.0</span> n)
        threads (* <span class="num">2</span> (.availableProcessors (Runtime/getRuntime)))
        crb ^doubles (double-array np7)
        cib ^doubles (double-array np7)
        out ^objects (into-array (repeatedly n #(byte-array (quot (+ n <span class="num">7</span>) <span class="num">8</span>))))]
    (alter-var-root #'crb (constantly crb))
    (alter-var-root #'cib (constantly cib))
    (alter-var-root #'out (constantly out))
    (<span class="kwb">loop</span> [i <span class="num">0</span>]
      (<span class="kwc">when</span> (&lt; i n)
        (<span class="kwc">let</span> [m (* invn i)]        
          (aset cib i (- m <span class="num">1.0</span>))
          (aset crb i (- m <span class="num">1.5</span>))
          (<span class="kwb">recur</span> (inc i)))))
    (<span class="kwb">loop</span> [i <span class="num">0</span>
           pool []]
      (<span class="kwc">if</span> (&lt; i threads)
        (<span class="kwb">recur</span> (inc i) (conj pool (Thread. ^Runnable (putter out))))
        (do
          (<span class="kwb">doseq</span> [^Thread t pool] (.start t))
          (<span class="kwc">let</span> [stream (BufferedOutputStream. System/out)]
            (.write stream ^bytes (.getBytes (format <span class="str">&quot;P4</span><span class="esc">\n</span><span class="str">%d %d</span><span class="esc">\n</span><span class="str">&quot;</span> n n)))
            (<span class="kwb">doseq</span> [^Thread t pool] (.join t))
            (<span class="kwb">loop</span> [i <span class="num">0</span>]
              (<span class="kwc">if</span> (&lt; i n)
                (do
                  (.write stream ^bytes (aget out i))
                  (<span class="kwb">recur</span> (inc i)))
                (.close stream)))))))))


