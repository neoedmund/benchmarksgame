<span class="com">/* The Computer Language Benchmarks Game</span>
<span class="com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * converted to C by Joseph Pich√©</span>
<span class="com"> * from Java version by Oleg Mazurov and Isaac Gouy</span>
<span class="com"> *</span>
<span class="com"> */</span>

<span class="ppc">#include &lt;stdio.h&gt;</span>
<span class="ppc">#include &lt;stdlib.h&gt;</span>

<span class="kwc">inline</span> <span class="kwb">static int</span> <span class="kwd">max</span>(<span class="kwb">int</span> a, <span class="kwb">int</span> b)
{
    <span class="kwa">return</span> a &gt; b ? a : b;
}

<span class="kwb">int</span> <span class="kwd">fannkuchredux</span>(<span class="kwb">int</span> n)
{
    <span class="kwb">int</span> perm[n];
    <span class="kwb">int</span> perm1[n];
    <span class="kwb">int</span> count[n];
    <span class="kwb">int</span> maxFlipsCount = <span class="num">0</span>;
    <span class="kwb">int</span> permCount = <span class="num">0</span>;
    <span class="kwb">int</span> checksum = <span class="num">0</span>;

    <span class="kwb">int</span> i;

    <span class="kwa">for</span> (i=<span class="num">0</span>; i&lt;n; i+=<span class="num">1</span>)
        perm1[i] = i;
    <span class="kwb">int</span> r = n;

    <span class="kwa">while</span> (<span class="num">1</span>) {
        <span class="kwa">while</span> (r != <span class="num">1</span>) {
            count[r-<span class="num">1</span>] = r;
            r -= <span class="num">1</span>;
        }

        <span class="kwa">for</span> (i=<span class="num">0</span>; i&lt;n; i+=<span class="num">1</span>)
            perm[i] = perm1[i];
        <span class="kwb">int</span> flipsCount = <span class="num">0</span>;
        <span class="kwb">int</span> k;

        <span class="kwa">while</span> ( !((k = perm[<span class="num">0</span>]) == <span class="num">0</span>) ) {
            <span class="kwb">int</span> k2 = (k+<span class="num">1</span>) &gt;&gt; <span class="num">1</span>;
            <span class="kwa">for</span> (i=<span class="num">0</span>; i&lt;k2; i++) {
                <span class="kwb">int</span> temp = perm[i]; perm[i] = perm[k-i]; perm[k-i] = temp;
            }
            flipsCount += <span class="num">1</span>;
        }

        maxFlipsCount = <span class="kwd">max</span>(maxFlipsCount, flipsCount);
        checksum += permCount % <span class="num">2</span> == <span class="num">0</span> ? flipsCount : -flipsCount;

        <span class="com">/* Use incremental change to generate another permutation */</span>
        <span class="kwa">while</span> (<span class="num">1</span>) {
            <span class="kwa">if</span> (r == n) {
                <span class="kwd">printf</span>(<span class="str">&quot;%d</span><span class="esc">\n</span><span class="str">&quot;</span>, checksum);
                <span class="kwa">return</span> maxFlipsCount;
            }

            <span class="kwb">int</span> perm0 = perm1[<span class="num">0</span>];
            i = <span class="num">0</span>;
            <span class="kwa">while</span> (i &lt; r) {
                <span class="kwb">int</span> j = i + <span class="num">1</span>;
                perm1[i] = perm1[j];
                i = j;
            }
            perm1[r] = perm0;
            count[r] = count[r] - <span class="num">1</span>;
            <span class="kwa">if</span> (count[r] &gt; <span class="num">0</span>) <span class="kwa">break</span>;
            r++;
        }
        permCount++;
    }
}

<span class="kwb">int</span> <span class="kwd">main</span>(<span class="kwb">int</span> argc, <span class="kwb">char</span> *argv[])
{
    <span class="kwb">int</span> n = argc &gt; <span class="num">1</span> ? <span class="kwd">atoi</span>(argv[<span class="num">1</span>]) : <span class="num">7</span>;
    <span class="kwd">printf</span>(<span class="str">&quot;Pfannkuchen(%d) = %d</span><span class="esc">\n</span><span class="str">&quot;</span>, n, <span class="kwd">fannkuchredux</span>(n));
    <span class="kwa">return</span> <span class="num">0</span>;
}
