<span class="slc">-- The Computer Language Benchmarks Game</span>
<span class="slc">-- http://benchmarksgame.alioth.debian.org/</span>
<span class="slc">-- contributed by Mike Pall</span>
<span class="slc">-- modified by Geoff Leyland</span>
<span class="slc">-- modified by Mario Pernici</span>

sun = {}
jupiter = {}
saturn = {}
uranus = {}
neptune = {}

<span class="kwa">local</span> <span class="kwb">sqrt</span> = math.<span class="kwb">sqrt</span>

<span class="kwa">local</span> PI = <span class="num">3.141592653589793</span>
<span class="kwa">local</span> SOLAR_MASS = <span class="num">4</span> * PI * PI
<span class="kwa">local</span> DAYS_PER_YEAR = <span class="num">365.24</span>
sun.x = <span class="num">0.0</span>
sun.y = <span class="num">0.0</span>
sun.z = <span class="num">0.0</span>
sun.vx = <span class="num">0.0</span>
sun.vy = <span class="num">0.0</span>
sun.vz = <span class="num">0.0</span>
sun.mass = SOLAR_MASS
jupiter.x = <span class="num">4.84143144246472090e+00</span>
jupiter.y = -<span class="num">1.16032004402742839e+00</span>
jupiter.z = -<span class="num">1.03622044471123109e-01</span>
jupiter.vx = <span class="num">1.66007664274403694e-03</span> * DAYS_PER_YEAR
jupiter.vy = <span class="num">7.69901118419740425e-03</span> * DAYS_PER_YEAR
jupiter.vz = -<span class="num">6.90460016972063023e-05</span> * DAYS_PER_YEAR
jupiter.mass = <span class="num">9.54791938424326609e-04</span> * SOLAR_MASS
saturn.x = <span class="num">8.34336671824457987e+00</span>
saturn.y = <span class="num">4.12479856412430479e+00</span>
saturn.z = -<span class="num">4.03523417114321381e-01</span>
saturn.vx = -<span class="num">2.76742510726862411e-03</span> * DAYS_PER_YEAR
saturn.vy = <span class="num">4.99852801234917238e-03</span> * DAYS_PER_YEAR
saturn.vz = <span class="num">2.30417297573763929e-05</span> * DAYS_PER_YEAR
saturn.mass = <span class="num">2.85885980666130812e-04</span> * SOLAR_MASS
uranus.x = <span class="num">1.28943695621391310e+01</span>
uranus.y = -<span class="num">1.51111514016986312e+01</span>
uranus.z = -<span class="num">2.23307578892655734e-01</span>
uranus.vx = <span class="num">2.96460137564761618e-03</span> * DAYS_PER_YEAR
uranus.vy = <span class="num">2.37847173959480950e-03</span> * DAYS_PER_YEAR
uranus.vz = -<span class="num">2.96589568540237556e-05</span> * DAYS_PER_YEAR
uranus.mass = <span class="num">4.36624404335156298e-05</span> * SOLAR_MASS
neptune.x = <span class="num">1.53796971148509165e+01</span>
neptune.y = -<span class="num">2.59193146099879641e+01</span>
neptune.z = <span class="num">1.79258772950371181e-01</span>
neptune.vx = <span class="num">2.68067772490389322e-03</span> * DAYS_PER_YEAR
neptune.vy = <span class="num">1.62824170038242295e-03</span> * DAYS_PER_YEAR
neptune.vz = -<span class="num">9.51592254519715870e-05</span> * DAYS_PER_YEAR
neptune.mass = <span class="num">5.15138902046611451e-05</span> * SOLAR_MASS

<span class="kwa">local</span> bodies = {sun,jupiter,saturn,uranus,neptune}

<span class="kwa">local function</span> <span class="kwd">advance</span>(bodies, nbody, dt)
  <span class="kwa">for</span> i=<span class="num">1</span>,nbody <span class="kwa">do</span>
    <span class="kwa">local</span> bi = bodies[i]
    <span class="kwa">local</span> bix, biy, biz, bimass = bi.x, bi.y, bi.z, bi.mass
    <span class="kwa">local</span> bivx, bivy, bivz = bi.vx, bi.vy, bi.vz
    <span class="kwa">for</span> j=i+<span class="num">1</span>,nbody <span class="kwa">do</span>
      <span class="kwa">local</span> bj = bodies[j]
      <span class="kwa">local</span> dx, dy, dz = bix-bj.x, biy-bj.y, biz-bj.z
      <span class="kwa">local</span> dist2 = dx*dx + dy*dy + dz*dz
      <span class="kwa">local</span> mag = <span class="kwb">sqrt</span>(dist2)
      mag = dt / (mag * dist2)
      <span class="kwa">local</span> bm = bj.mass*mag
      bivx = bivx - (dx * bm)
      bivy = bivy - (dy * bm)
      bivz = bivz - (dz * bm)
      bm = bimass*mag
      bj.vx = bj.vx + (dx * bm)
      bj.vy = bj.vy + (dy * bm)
      bj.vz = bj.vz + (dz * bm)
    <span class="kwa">end</span>
    bi.vx = bivx
    bi.vy = bivy
    bi.vz = bivz
    bi.x = bix + dt * bivx
    bi.y = biy + dt * bivy
    bi.z = biz + dt * bivz
  <span class="kwa">end</span>
<span class="kwa">end</span>

<span class="kwa">local function</span> <span class="kwd">energy</span>(bodies, nbody)
  <span class="kwa">local</span> e = <span class="num">0</span>
  <span class="kwa">for</span> i=<span class="num">1</span>,nbody <span class="kwa">do</span>
    <span class="kwa">local</span> bi = bodies[i]
    <span class="kwa">local</span> vx, vy, vz, bim = bi.vx, bi.vy, bi.vz, bi.mass
    e = e + (<span class="num">0.5</span> * bim * (vx*vx + vy*vy + vz*vz))
    <span class="kwa">for</span> j=i+<span class="num">1</span>,nbody <span class="kwa">do</span>
      <span class="kwa">local</span> bj = bodies[j]
      <span class="kwa">local</span> dx, dy, dz = bi.x-bj.x, bi.y-bj.y, bi.z-bj.z
      <span class="kwa">local</span> distance = <span class="kwb">sqrt</span>(dx*dx + dy*dy + dz*dz)
      e = e - ((bim * bj.mass) / distance)
    <span class="kwa">end</span>
  <span class="kwa">end</span>
  <span class="kwa">return</span> e
<span class="kwa">end</span>

<span class="kwa">local function</span> <span class="kwd">offsetMomentum</span>(b, nbody)
  <span class="kwa">local</span> px, py, pz = <span class="num">0</span>, <span class="num">0</span>, <span class="num">0</span>
  <span class="kwa">for</span> i=<span class="num">1</span>,nbody <span class="kwa">do</span>
    <span class="kwa">local</span> bi = b[i]
    <span class="kwa">local</span> bim = bi.mass
    px = px + (bi.vx * bim)
    py = py + (bi.vy * bim)
    pz = pz + (bi.vz * bim)
  <span class="kwa">end</span>
  b[<span class="num">1</span>].vx = -px / SOLAR_MASS
  b[<span class="num">1</span>].vy = -py / SOLAR_MASS
  b[<span class="num">1</span>].vz = -pz / SOLAR_MASS
<span class="kwa">end</span>

<span class="kwa">local</span> N = <span class="kwb">tonumber</span>(arg <span class="kwa">and</span> arg[<span class="num">1</span>]) <span class="kwa">or</span> <span class="num">1000</span>
<span class="kwa">local</span> nbody = #bodies

<span class="kwd">offsetMomentum</span>(bodies, nbody)
io.<span class="kwb">write</span>( <span class="kwb">string</span>.<span class="kwb">format</span>(<span class="str">&quot;%0.9f&quot;</span>,<span class="kwd">energy</span>(bodies, nbody)), <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span>)
<span class="kwa">for</span> i=<span class="num">1</span>,N <span class="kwa">do</span> <span class="kwd">advance</span>(bodies, nbody, <span class="num">0.01</span>) <span class="kwa">end</span>
io.<span class="kwb">write</span>( <span class="kwb">string</span>.<span class="kwb">format</span>(<span class="str">&quot;%0.9f&quot;</span>,<span class="kwd">energy</span>(bodies, nbody)), <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span>)
