<span class="slc"># The Computer Language Benchmarks Game</span>
<span class="slc"># http://benchmarksgame.alioth.debian.org/</span>
<span class="slc">#</span>
<span class="slc"># Contributed by Andrew Rodland</span>

<span class="kwa">use</span> strict;

<span class="kwa">sub</span> eval_A {
  <span class="kwa">use</span> integer;
  <span class="kwc">my</span> <span class="kwb">$div</span> = ( (<span class="kwb">$_</span>[<span class="num">0</span>] + <span class="kwb">$_</span>[<span class="num">1</span>]) * (<span class="kwb">$_</span>[<span class="num">0</span>] + <span class="kwb">$_</span>[<span class="num">1</span>] + <span class="num">1</span>) / <span class="num">2</span>) + <span class="kwb">$_</span>[<span class="num">0</span>] + <span class="num">1</span>;
  <span class="kwa">no</span> integer;
  <span class="num">1</span> / <span class="kwb">$div</span>;
}

<span class="kwa">sub</span> multiplyAv {
  <span class="kwa">return</span> <span class="kwc">map</span> {
    <span class="kwc">my</span> (<span class="kwb">$i</span>, <span class="kwb">$sum</span>) = (<span class="kwb">$_</span>);
    <span class="kwb">$sum</span> += eval_A(<span class="kwb">$i</span>, <span class="kwb">$_</span>) * <span class="kwb">$_</span>[<span class="kwb">$_</span>] <span class="kwa">for</span> <span class="num">0</span> .. <span class="kwb">$#_</span>;
    <span class="kwb">$sum</span>;
  } <span class="num">0</span> .. <span class="kwb">$#_</span>;
}

<span class="kwa">sub</span> multiplyAtv {
  <span class="kwa">return</span> <span class="kwc">map</span> {
    <span class="kwc">my</span> (<span class="kwb">$i</span>, <span class="kwb">$sum</span>) = (<span class="kwb">$_</span>);
    <span class="kwb">$sum</span> += eval_A(<span class="kwb">$_</span>, <span class="kwb">$i</span>) * <span class="kwb">$_</span>[<span class="kwb">$_</span>] <span class="kwa">for</span> <span class="num">0</span> .. <span class="kwb">$#_</span>;
    <span class="kwb">$sum</span>;
  } <span class="num">0</span> .. <span class="kwb">$#_</span>;
}

<span class="kwa">sub</span> multiplyAtAv {
  <span class="kwa">return</span> multiplyAtv( multiplyAv( <span class="kwb">&#64;_</span> ) );
}

<span class="kwc">my</span> <span class="kwb">$n</span> = <span class="kwb">&#64;ARGV</span> ? <span class="kwc">shift</span> : <span class="num">500</span>;
<span class="kwc">my</span> <span class="kwb">&#64;u</span> = (<span class="num">1</span>) x <span class="kwb">$n</span>;
<span class="kwc">my</span> <span class="kwb">&#64;v</span>;
<span class="kwa">for</span> (<span class="num">0</span> .. <span class="num">9</span>) {
  <span class="kwb">&#64;v</span> = multiplyAtAv( <span class="kwb">&#64;u</span> );
  <span class="kwb">&#64;u</span> = multiplyAtAv( <span class="kwb">&#64;v</span> );
}

<span class="kwc">my</span> (<span class="kwb">$vBv</span>, <span class="kwb">$vv</span>);
<span class="kwa">for</span> <span class="kwc">my</span> <span class="kwb">$i</span> (<span class="num">0</span> .. <span class="kwb">$#u</span>) {
  <span class="kwb">$vBv</span> += <span class="kwb">$u</span>[<span class="kwb">$i</span>] * <span class="kwb">$v</span>[<span class="kwb">$i</span>];
  <span class="kwb">$vv</span> += <span class="kwb">$v</span>[<span class="kwb">$i</span>] ** <span class="num">2</span>;
}

<span class="kwc">printf</span>( <span class="str">&quot;</span><span class="ipl">%0</span><span class="str">.9f</span><span class="esc">\n</span><span class="str">&quot;</span>, <span class="kwc">sqrt</span>( <span class="kwb">$vBv</span> / <span class="kwb">$vv</span> ) );

