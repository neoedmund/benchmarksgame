<span class="com">/*</span>
<span class="com"> * The Computer Language Benchmarks Game</span>
<span class="com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="com"> * </span>
<span class="com"> * modified by Mehmet D. AKIN</span>
<span class="com"> * modified by Daryl Griffith</span>
<span class="com"> */</span>

<span class="kwa">import</span> java.io.IOException;
<span class="kwa">import</span> java.io.OutputStream;
<span class="kwa">import</span> java.util.concurrent.ArrayBlockingQueue;
<span class="kwa">import</span> java.util.concurrent.BlockingQueue;
<span class="kwa">import</span> java.util.concurrent.atomic.AtomicInteger;

<span class="kwa">public class</span> fasta {

    <span class="kwa">static final</span> <span class="kwb">int</span> LINE_LENGTH = <span class="num">60</span>;
    <span class="kwa">static final</span> <span class="kwb">int</span> LINE_COUNT = <span class="num">1024</span>;
    <span class="kwa">static final</span> NucleotideSelector[] WORKERS 
            = <span class="kwa">new</span> NucleotideSelector[
                    Runtime.<span class="kwd">getRuntime</span>().<span class="kwd">availableProcessors</span>() &gt; <span class="num">1</span> 
                    ? Runtime.<span class="kwd">getRuntime</span>().<span class="kwd">availableProcessors</span>() - <span class="num">1</span> 
                    : <span class="num">1</span>];
    <span class="kwa">static final</span> AtomicInteger IN = <span class="kwa">new</span> <span class="kwd">AtomicInteger</span>();
    <span class="kwa">static final</span> AtomicInteger OUT = <span class="kwa">new</span> <span class="kwd">AtomicInteger</span>();
    <span class="kwa">static final</span> <span class="kwb">int</span> BUFFERS_IN_PLAY = <span class="num">6</span>;
    <span class="kwa">static final</span> <span class="kwb">int</span> IM = <span class="num">139968</span>;
    <span class="kwa">static final</span> <span class="kwb">int</span> IA = <span class="num">3877</span>;
    <span class="kwa">static final</span> <span class="kwb">int</span> IC = <span class="num">29573</span>;
    <span class="kwa">static final</span> <span class="kwb">float</span> ONE_OVER_IM = <span class="num">1</span>f / IM;
    <span class="kwa">static</span> <span class="kwb">int</span> last = <span class="num">42</span>;

    <span class="kwa">public static</span> <span class="kwb">void</span> <span class="kwd">main</span>(String[] args) {
        <span class="kwb">int</span> n = <span class="num">1000</span>;

        <span class="kwa">if</span> (args.length &gt; <span class="num">0</span>) {
            n = Integer.<span class="kwd">parseInt</span>(args[<span class="num">0</span>]);
        }
        <span class="kwa">for</span> (<span class="kwb">int</span> i = <span class="num">0</span>; i &lt; WORKERS.length; i++) {
            WORKERS[i] = <span class="kwa">new</span> <span class="kwd">NucleotideSelector</span>();
            WORKERS[i].<span class="kwd">setDaemon</span>(true);
            WORKERS[i].<span class="kwd">start</span>();
        }
        <span class="kwa">try</span> (OutputStream writer = System.out;) {
            <span class="kwa">final</span> <span class="kwb">int</span> bufferSize = LINE_COUNT * LINE_LENGTH;

            <span class="kwa">for</span> (<span class="kwb">int</span> i = <span class="num">0</span>; i &lt; BUFFERS_IN_PLAY; i++) {
                <span class="kwd">lineFillALU</span>(
                        <span class="kwa">new</span> <span class="kwd">AluBuffer</span>(LINE_LENGTH, bufferSize, i * bufferSize));
            }
            <span class="kwd">speciesFillALU</span>(writer, n * <span class="num">2</span>, <span class="str">&quot;&gt;ONE Homo sapiens alu</span><span class="esc">\n</span><span class="str">&quot;</span>);
            <span class="kwa">for</span> (<span class="kwb">int</span> i = <span class="num">0</span>; i &lt; BUFFERS_IN_PLAY; i++) {
                <span class="kwd">writeBuffer</span>(writer);
                <span class="kwd">lineFillRandom</span>(<span class="kwa">new</span> <span class="kwd">Buffer</span>(true, LINE_LENGTH, bufferSize));
            }
            <span class="kwd">speciesFillRandom</span>(writer
                    , n * <span class="num">3</span>
                    , <span class="str">&quot;&gt;TWO IUB ambiguity codes</span><span class="esc">\n</span><span class="str">&quot;</span>
                    , true);
            <span class="kwa">for</span> (<span class="kwb">int</span> i = <span class="num">0</span>; i &lt; BUFFERS_IN_PLAY; i++) {
                <span class="kwd">writeBuffer</span>(writer);
                <span class="kwd">lineFillRandom</span>(<span class="kwa">new</span> <span class="kwd">Buffer</span>(false, LINE_LENGTH, bufferSize));
            }
            <span class="kwd">speciesFillRandom</span>(writer
                    , n * <span class="num">5</span>
                    , <span class="str">&quot;&gt;THREE Homo sapiens frequency</span><span class="esc">\n</span><span class="str">&quot;</span>
                    , false);
            <span class="kwa">for</span> (<span class="kwb">int</span> i = <span class="num">0</span>; i &lt; BUFFERS_IN_PLAY; i++) {
                <span class="kwd">writeBuffer</span>(writer);
            }
        } <span class="kwa">catch</span> (IOException ex) {
        }
     }

    <span class="kwa">private static</span> <span class="kwb">void</span> <span class="kwd">lineFillALU</span>(AbstractBuffer buffer) {
        WORKERS[OUT.<span class="kwd">incrementAndGet</span>() % WORKERS.length].<span class="kwd">put</span>(buffer);
    }

    <span class="kwa">private static</span> <span class="kwb">void</span> <span class="kwd">bufferFillALU</span>(OutputStream writer
            , <span class="kwb">int</span> buffers) <span class="kwa">throws</span> IOException {
        AbstractBuffer buffer;

        <span class="kwa">for</span> (<span class="kwb">int</span> i = <span class="num">0</span>; i &lt; buffers; i++) {
            buffer = WORKERS[IN.<span class="kwd">incrementAndGet</span>() % WORKERS.length].<span class="kwd">take</span>();
            writer.<span class="kwd">write</span>(buffer.nucleotides);
            <span class="kwd">lineFillALU</span>(buffer);
        }
    }

    <span class="kwa">private static</span> <span class="kwb">void</span> <span class="kwd">speciesFillALU</span>(<span class="kwa">final</span> OutputStream writer
            , <span class="kwa">final</span> <span class="kwb">int</span> nChars
            , <span class="kwa">final</span> String name) <span class="kwa">throws</span> IOException {
        <span class="kwa">final</span> <span class="kwb">int</span> bufferSize = LINE_COUNT * LINE_LENGTH;
        <span class="kwa">final</span> <span class="kwb">int</span> bufferCount = nChars / bufferSize;
        <span class="kwa">final</span> <span class="kwb">int</span> bufferLoops = bufferCount - BUFFERS_IN_PLAY;
        <span class="kwa">final</span> <span class="kwb">int</span> charsLeftover = nChars - (bufferCount * bufferSize);

        writer.<span class="kwd">write</span>(name.<span class="kwd">getBytes</span>());
        <span class="kwd">bufferFillALU</span>(writer, bufferLoops);
        <span class="kwa">if</span> (charsLeftover &gt; <span class="num">0</span>) {
            <span class="kwd">writeBuffer</span>(writer);
            <span class="kwd">lineFillALU</span>(
                    <span class="kwa">new</span> <span class="kwd">AluBuffer</span>(LINE_LENGTH
                            , charsLeftover
                            , nChars - charsLeftover));
        }
    }

    <span class="kwa">private static</span> <span class="kwb">void</span> <span class="kwd">lineFillRandom</span>(Buffer buffer) {
        <span class="kwa">for</span> (<span class="kwb">int</span> i = <span class="num">0</span>; i &lt; buffer.randoms.length; i++) {
            last = (last * IA + IC) % IM;
            buffer.randoms[i] = last * ONE_OVER_IM;
        }
        WORKERS[OUT.<span class="kwd">incrementAndGet</span>() % WORKERS.length].<span class="kwd">put</span>(buffer);
    }

    <span class="kwa">private static</span> <span class="kwb">void</span> <span class="kwd">bufferFillRandom</span>(OutputStream writer
            , <span class="kwb">int</span> loops) <span class="kwa">throws</span> IOException {
        AbstractBuffer buffer;

        <span class="kwa">for</span> (<span class="kwb">int</span> i = <span class="num">0</span>; i &lt; loops; i++) {
            buffer = WORKERS[IN.<span class="kwd">incrementAndGet</span>() % WORKERS.length].<span class="kwd">take</span>();
            writer.<span class="kwd">write</span>(buffer.nucleotides);
            <span class="kwd">lineFillRandom</span>((Buffer) buffer);
        }
    }

    <span class="kwa">private static</span> <span class="kwb">void</span> <span class="kwd">speciesFillRandom</span>(<span class="kwa">final</span> OutputStream writer
            , <span class="kwa">final</span> <span class="kwb">int</span> nChars
            , <span class="kwa">final</span> String name
            , <span class="kwa">final</span> <span class="kwb">boolean</span> isIUB) <span class="kwa">throws</span> IOException {
        <span class="kwa">final</span> <span class="kwb">int</span> bufferSize = LINE_COUNT * LINE_LENGTH;
        <span class="kwa">final</span> <span class="kwb">int</span> bufferCount = nChars / bufferSize;
        <span class="kwa">final</span> <span class="kwb">int</span> bufferLoops = bufferCount - BUFFERS_IN_PLAY;
        <span class="kwa">final</span> <span class="kwb">int</span> charsLeftover = nChars - (bufferCount * bufferSize);

        writer.<span class="kwd">write</span>(name.<span class="kwd">getBytes</span>());
        <span class="kwd">bufferFillRandom</span>(writer, bufferLoops);
        <span class="kwa">if</span> (charsLeftover &gt; <span class="num">0</span>) {
            <span class="kwd">writeBuffer</span>(writer);    
            <span class="kwd">lineFillRandom</span>(<span class="kwa">new</span> <span class="kwd">Buffer</span>(isIUB, LINE_LENGTH, charsLeftover));
        }
    }

    <span class="kwa">private static</span> <span class="kwb">void</span> <span class="kwd">writeBuffer</span>(OutputStream writer) <span class="kwa">throws</span> IOException {
        writer.<span class="kwd">write</span>(
                WORKERS[IN.<span class="kwd">incrementAndGet</span>() % WORKERS.length]
                        .<span class="kwd">take</span>()
                        .nucleotides);
    }

    <span class="kwa">public static class</span> NucleotideSelector <span class="kwa">extends</span> Thread {

        <span class="kwa">private final</span> BlockingQueue&lt;AbstractBuffer&gt; 
                <span class="kwa">in</span> = <span class="kwa">new</span> ArrayBlockingQueue&lt;&gt;(BUFFERS_IN_PLAY);
        <span class="kwa">private final</span> BlockingQueue&lt;AbstractBuffer&gt; 
                out = <span class="kwa">new</span> ArrayBlockingQueue&lt;&gt;(BUFFERS_IN_PLAY);

        <span class="kwa">public</span> <span class="kwb">void</span> <span class="kwd">put</span>(AbstractBuffer line) {
            <span class="kwa">try</span> {
                <span class="kwa">in</span>.<span class="kwd">put</span>(line);
            } <span class="kwa">catch</span> (InterruptedException ex) {
            }
        }

        <span class="kwc">&#64;Override</span>
        <span class="kwa">public</span> <span class="kwb">void</span> <span class="kwd">run</span>() {
            AbstractBuffer line;

            <span class="kwa">try</span> {
                <span class="kwa">for</span> (;;) {
                    line = <span class="kwa">in</span>.<span class="kwd">take</span>();
                    line.<span class="kwd">selectNucleotides</span>();
                    out.<span class="kwd">put</span>(line);
                }
            } <span class="kwa">catch</span> (InterruptedException ex) {
            }
        }

        <span class="kwa">public</span> AbstractBuffer <span class="kwd">take</span>() {
            <span class="kwa">try</span> {
                <span class="kwa">return</span> out.<span class="kwd">take</span>();
            } <span class="kwa">catch</span> (InterruptedException ex) {
            }
            <span class="kwa">return</span> null;
        }
    }

    <span class="kwa">public abstract static class</span> AbstractBuffer {

        <span class="kwa">final</span> <span class="kwb">int</span> LINE_LENGTH;
        <span class="kwa">final</span> <span class="kwb">int</span> LINE_COUNT;
        <span class="kwb">byte</span>[] chars;
        <span class="kwa">final</span> <span class="kwb">byte</span>[] nucleotides;
        <span class="kwa">final</span> <span class="kwb">int</span> CHARS_LEFTOVER;

        <span class="kwa">public</span> <span class="kwd">AbstractBuffer</span>(<span class="kwa">final</span> <span class="kwb">int</span> lineLength, <span class="kwa">final</span> <span class="kwb">int</span> nChars) {
            LINE_LENGTH = lineLength;
            <span class="kwa">final</span> <span class="kwb">int</span> outputLineLength = lineLength + <span class="num">1</span>;
            LINE_COUNT = nChars / lineLength;
            CHARS_LEFTOVER = nChars % lineLength;
            <span class="kwa">final</span> <span class="kwb">int</span> nucleotidesSize 
                    = nChars + LINE_COUNT + (CHARS_LEFTOVER == <span class="num">0</span> ? <span class="num">0</span> : <span class="num">1</span>);
            <span class="kwa">final</span> <span class="kwb">int</span> lastNucleotide = nucleotidesSize - <span class="num">1</span>;

            nucleotides = <span class="kwa">new</span> <span class="kwb">byte</span>[nucleotidesSize];
            <span class="kwa">for</span> (<span class="kwb">int</span> i = lineLength
                    ; i &lt; lastNucleotide
                    ; i += outputLineLength) {
                nucleotides[i] = <span class="str">'</span><span class="esc">\n</span><span class="str">'</span>;
            }
            nucleotides[nucleotides.length - <span class="num">1</span>] = <span class="str">'</span><span class="esc">\n</span><span class="str">'</span>;
        }

        <span class="kwa">public abstract</span> <span class="kwb">void</span> <span class="kwd">selectNucleotides</span>();
    }

    <span class="kwa">public static class</span> AluBuffer <span class="kwa">extends</span> AbstractBuffer {

        <span class="kwa">final</span> String ALU =
                <span class="str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span>
                + <span class="str">&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span>
                + <span class="str">&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span>
                + <span class="str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span>
                + <span class="str">&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span>
                + <span class="str">&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span>
                + <span class="str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span>;
        <span class="kwa">final</span> <span class="kwb">int</span> MAX_ALU_INDEX = ALU.<span class="kwd">length</span>() - LINE_LENGTH;
        <span class="kwa">final</span> <span class="kwb">int</span> ALU_ADJUST = LINE_LENGTH - ALU.<span class="kwd">length</span>();
        <span class="kwa">final</span> <span class="kwb">int</span> nChars;
        <span class="kwb">int</span> charIndex;
        <span class="kwb">int</span> nucleotideIndex;

        <span class="kwa">public</span> <span class="kwd">AluBuffer</span>(<span class="kwa">final</span> <span class="kwb">int</span> lineLength
                , <span class="kwa">final</span> <span class="kwb">int</span> nChars
                , <span class="kwa">final</span> <span class="kwb">int</span> offset) {
            <span class="kwa">super</span>(lineLength, nChars);
            <span class="kwa">this</span>.nChars = nChars;
            chars = (ALU + ALU.<span class="kwd">substring</span>(<span class="num">0</span>, LINE_LENGTH)).<span class="kwd">getBytes</span>();
            charIndex = offset % ALU.<span class="kwd">length</span>();
        }

        <span class="kwc">&#64;Override</span>
        <span class="kwa">public</span> <span class="kwb">void</span> <span class="kwd">selectNucleotides</span>() {
            nucleotideIndex = <span class="num">0</span>;
            <span class="kwa">for</span> (<span class="kwb">int</span> i = <span class="num">0</span>; i &lt; LINE_COUNT; i++) {
                <span class="kwd">ALUFillLine</span>(LINE_LENGTH);
            }
            <span class="kwa">if</span> (CHARS_LEFTOVER &gt; <span class="num">0</span>) {
                <span class="kwd">ALUFillLine</span>(CHARS_LEFTOVER);
            }
            charIndex = (charIndex + (nChars * (BUFFERS_IN_PLAY - <span class="num">1</span>))) 
                    % ALU.<span class="kwd">length</span>();
        }

        <span class="kwa">private</span> <span class="kwb">void</span> <span class="kwd">ALUFillLine</span>(<span class="kwa">final</span> <span class="kwb">int</span> charCount) {
            System.<span class="kwd">arraycopy</span>(chars
                    , charIndex
                    , nucleotides
                    , nucleotideIndex
                    , charCount);
            charIndex += charIndex &lt; MAX_ALU_INDEX ? charCount : ALU_ADJUST;
            nucleotideIndex += charCount + <span class="num">1</span>;
        }
    }

    <span class="kwa">public static class</span> Buffer <span class="kwa">extends</span> AbstractBuffer {

        <span class="kwa">final</span> <span class="kwb">byte</span>[] iubChars = <span class="kwa">new</span> <span class="kwb">byte</span>[]{
            <span class="str">'a'</span>, <span class="str">'c'</span>, <span class="str">'g'</span>, <span class="str">'t'</span>,
            <span class="str">'B'</span>, <span class="str">'D'</span>, <span class="str">'H'</span>, <span class="str">'K'</span>,
            <span class="str">'M'</span>, <span class="str">'N'</span>, <span class="str">'R'</span>, <span class="str">'S'</span>,
            <span class="str">'V'</span>, <span class="str">'W'</span>, <span class="str">'Y'</span>};
        <span class="kwa">final</span> <span class="kwb">double</span>[] iubProbs = <span class="kwa">new</span> <span class="kwb">double</span>[]{
            <span class="num">0.27</span>, <span class="num">0.12</span>, <span class="num">0.12</span>, <span class="num">0.27</span>,
            <span class="num">0.02</span>, <span class="num">0.02</span>, <span class="num">0.02</span>, <span class="num">0.02</span>,
            <span class="num">0.02</span>, <span class="num">0.02</span>, <span class="num">0.02</span>, <span class="num">0.02</span>,
            <span class="num">0.02</span>, <span class="num">0.02</span>, <span class="num">0.02</span>,};
        <span class="kwa">final</span> <span class="kwb">byte</span>[] sapienChars = <span class="kwa">new</span> <span class="kwb">byte</span>[]{
            <span class="str">'a'</span>,
            <span class="str">'c'</span>,
            <span class="str">'g'</span>,
            <span class="str">'t'</span>};
        <span class="kwa">final</span> <span class="kwb">double</span>[] sapienProbs = <span class="kwa">new</span> <span class="kwb">double</span>[]{
            <span class="num">0.3029549426680</span>,
            <span class="num">0.1979883004921</span>,
            <span class="num">0.1975473066391</span>,
            <span class="num">0.3015094502008</span>};
        <span class="kwa">final</span> <span class="kwb">float</span>[] probs;
        <span class="kwa">final</span> <span class="kwb">float</span>[] randoms;
        <span class="kwa">final</span> <span class="kwb">int</span> charsInFullLines;

        <span class="kwa">public</span> <span class="kwd">Buffer</span>(<span class="kwa">final</span> <span class="kwb">boolean</span> isIUB
                , <span class="kwa">final</span> <span class="kwb">int</span> lineLength
                , <span class="kwa">final</span> <span class="kwb">int</span> nChars) {
            <span class="kwa">super</span>(lineLength, nChars);
            <span class="kwb">double</span> cp = <span class="num">0</span>;
            <span class="kwa">final</span> <span class="kwb">double</span>[] dblProbs = isIUB ? iubProbs : sapienProbs;

            chars = isIUB ? iubChars : sapienChars;
            probs = <span class="kwa">new</span> <span class="kwb">float</span>[dblProbs.length];
            <span class="kwa">for</span> (<span class="kwb">int</span> i = <span class="num">0</span>; i &lt; probs.length; i++) {
                cp += dblProbs[i];
                probs[i] = (<span class="kwb">float</span>) cp;
            }
            probs[probs.length - <span class="num">1</span>] = <span class="num">2</span>f;
            randoms = <span class="kwa">new</span> <span class="kwb">float</span>[nChars];
            charsInFullLines = (nChars / lineLength) * lineLength;
        }

        <span class="kwc">&#64;Override</span>
        <span class="kwa">public</span> <span class="kwb">void</span> <span class="kwd">selectNucleotides</span>() {
            <span class="kwb">int</span> i, j, m;
            <span class="kwb">float</span> r;
            <span class="kwb">int</span> k;

            <span class="kwa">for</span> (i = <span class="num">0</span>, j = <span class="num">0</span>; i &lt; charsInFullLines; j++) {
                <span class="kwa">for</span> (k = <span class="num">0</span>; k &lt; LINE_LENGTH; k++) {
                    r = randoms[i++];
                    <span class="kwa">for</span> (m = <span class="num">0</span>; probs[m] &lt; r; m++) {
                    }
                    nucleotides[j++] = chars[m];
                }
            }
            <span class="kwa">for</span> (k = <span class="num">0</span>; k &lt; CHARS_LEFTOVER; k++) {
                r = randoms[i++];
                <span class="kwa">for</span> (m = <span class="num">0</span>; probs[m] &lt; r; m++) {
                }
                nucleotides[j++] = chars[m];
            }
        }
    }
}
