<span class="slc">-- The Computer Language Benchmarks Game</span>
<span class="slc">-- http://benchmarksgame.alioth.debian.org/</span>
<span class="slc">-- contributed by Mike Pall</span>

<span class="kwa">local function</span> <span class="kwd">fannkuch</span>(n)
  <span class="kwa">local</span> p, q, s, sign, maxflips, sum = {}, {}, {}, <span class="num">1</span>, <span class="num">0</span>, <span class="num">0</span>
  <span class="kwa">for</span> i=<span class="num">1</span>,n <span class="kwa">do</span> p[i] = i; q[i] = i; s[i] = i <span class="kwa">end</span>
  <span class="kwa">repeat</span>
    <span class="slc">-- Copy and flip.</span>
    <span class="kwa">local</span> q1 = p[<span class="num">1</span>]				<span class="slc">-- Cache 1st element.</span>
    <span class="kwa">if</span> q1 ~= <span class="num">1</span> <span class="kwa">then</span>
      <span class="kwa">for</span> i=<span class="num">2</span>,n <span class="kwa">do</span> q[i] = p[i] <span class="kwa">end</span>		<span class="slc">-- Work on a copy.</span>
      <span class="kwa">local</span> flips = <span class="num">1</span>
      <span class="kwa">repeat</span>
	<span class="kwa">local</span> qq = q[q1]
	<span class="kwa">if</span> qq == <span class="num">1</span> <span class="kwa">then</span>				<span class="slc">-- ... until 1st element is 1.</span>
	  sum = sum + sign*flips
	  <span class="kwa">if</span> flips &gt; maxflips <span class="kwa">then</span> maxflips = flips <span class="kwa">end</span> <span class="slc">-- New maximum?</span>
	  <span class="kwa">break</span>
	<span class="kwa">end</span>
	q[q1] = q1
	<span class="kwa">if</span> q1 &gt;= <span class="num">4</span> <span class="kwa">then</span>
	  <span class="kwa">local</span> i, j = <span class="num">2</span>, q1 - <span class="num">1</span>
	  <span class="kwa">repeat</span> q[i], q[j] = q[j], q[i]; i = i + <span class="num">1</span>; j = j - <span class="num">1</span>; <span class="kwa">until</span> i &gt;= j
	<span class="kwa">end</span>
	q1 = qq; flips = flips + <span class="num">1</span>
      <span class="kwa">until false</span>
    <span class="kwa">end</span>
    <span class="slc">-- Permute.</span>
    <span class="kwa">if</span> sign == <span class="num">1</span> <span class="kwa">then</span>
      p[<span class="num">2</span>], p[<span class="num">1</span>] = p[<span class="num">1</span>], p[<span class="num">2</span>]; sign = -<span class="num">1</span>	<span class="slc">-- Rotate 1&lt;-2.</span>
    <span class="kwa">else</span>
      p[<span class="num">2</span>], p[<span class="num">3</span>] = p[<span class="num">3</span>], p[<span class="num">2</span>]; sign = <span class="num">1</span>		<span class="slc">-- Rotate 1&lt;-2 and 1&lt;-2&lt;-3.</span>
      <span class="kwa">for</span> i=<span class="num">3</span>,n <span class="kwa">do</span>
	<span class="kwa">local</span> sx = s[i]
	<span class="kwa">if</span> sx ~= <span class="num">1</span> <span class="kwa">then</span> s[i] = sx-<span class="num">1</span>; <span class="kwa">break end</span>
	<span class="kwa">if</span> i == n <span class="kwa">then return</span> sum, maxflips <span class="kwa">end</span>	<span class="slc">-- Out of permutations.</span>
	s[i] = i
	<span class="slc">-- Rotate 1&lt;-...&lt;-i+1.</span>
	<span class="kwa">local</span> t = p[<span class="num">1</span>]; <span class="kwa">for</span> j=<span class="num">1</span>,i <span class="kwa">do</span> p[j] = p[j+<span class="num">1</span>] <span class="kwa">end</span>; p[i+<span class="num">1</span>] = t
      <span class="kwa">end</span>
    <span class="kwa">end</span>
  <span class="kwa">until false</span>
<span class="kwa">end</span>

<span class="kwa">local</span> n = <span class="kwb">tonumber</span>(arg <span class="kwa">and</span> arg[<span class="num">1</span>]) <span class="kwa">or</span> <span class="num">1</span>
<span class="kwa">local</span> sum, flips = <span class="kwd">fannkuch</span>(n)
io.<span class="kwb">write</span>(sum, <span class="str">&quot;</span><span class="esc">\n</span><span class="str">Pfannkuchen(&quot;</span>, n, <span class="str">&quot;) = &quot;</span>, flips, <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span>)
