<span class="slc">;; The Computer Language Benchmarks Game</span>
<span class="slc">;;   http://benchmarksgame.alioth.debian.org/</span>
<span class="slc">;;</span>
<span class="slc">;;   contributed by Alexey Voznyuk</span>
<span class="slc">;;</span>

(<span class="kwa">defpackage</span> #:fannkuch-redux
  (:use :cl))

(<span class="kwa">in-package</span> :fannkuch-redux)

(<span class="kwa">defun</span> make-facts-vector (<span class="kwa">seq-length</span>)
  (<span class="kwa">make-array</span> (<span class="kwa">1</span>+ seq-length)
              :initial-contents (<span class="kwa">cons</span> <span class="num">1</span> (<span class="kwa">loop</span> :with r = <span class="num">1</span> :for i from <span class="num">1</span> to seq-length
                                           :collect (<span class="kwa">setf</span> r (* r i))))))

(<span class="kwa">defmacro</span> with-vars-bound ((<span class="kwa">vars</span> bind-vars) &amp;body body)
  `(<span class="kwa">let</span> (,&#64;(<span class="kwa">loop</span> :for var :in vars :for bind-var :in bind-vars :collect `(,var ,bind-var)))
     (<span class="kwa">declare</span> (<span class="kwa">type</span> fixnum ,&#64;vars) (<span class="kwa">ignorable</span> ,&#64;vars))
     ,&#64;body))

(<span class="kwa">defmacro</span> with-permutations (((&amp;rest seq-vars) perm-index-start perm-count) &amp;body body)
  (<span class="kwa">let</span>* ((<span class="kwa">seq-length</span> (<span class="kwa">length</span> seq-vars))
         (<span class="kwa">facts</span> (<span class="kwa">make-facts-vector</span> seq-length))
         (<span class="kwa">outer-tag</span> (<span class="kwa">gensym</span>))
         (<span class="kwa">count</span> (<span class="kwa">gensym</span>)))
    (<span class="kwa">labels</span> ((<span class="kwa">build-loop</span> (<span class="kwa">depth</span> upper-seq-vars)
               (<span class="kwa">if</span> (&gt;= depth seq-length)
                   `(<span class="kwa">with-vars-bound</span> (,seq-vars ,upper-seq-vars)
                      (<span class="kwa">when</span> (<span class="kwa">zerop</span> ,count)
                        (<span class="kwa">return-from</span> ,outer-tag))
                      (<span class="kwa">decf</span> ,count)
                      ,&#64;body)
                   (<span class="kwa">let</span>* ((<span class="kwa">my-seq-vars</span> (<span class="kwa">loop</span> :repeat (<span class="kwa">-</span> seq-length depth) :collect (<span class="kwa">gensym</span>)))
                          (<span class="kwa">shift-body</span> `(<span class="kwa">let</span> ((<span class="kwa">first</span> ,(<span class="kwa">car</span> my-seq-vars)))
                                         (<span class="kwa">setf</span> ,&#64;(<span class="kwa">loop</span> :for src :in my-seq-vars and dst = src
                                                    :when dst :collect dst and :collect src)
                                               ,(<span class="kwa">car</span> (<span class="kwa">last</span> my-seq-vars)) first)))
                          (<span class="kwa">repeat-body</span> (<span class="kwa">if</span> (= depth (<span class="kwa">1-</span> seq-length))
                                           (<span class="kwa">build-loop</span> (<span class="kwa">1</span>+ depth) upper-seq-vars)
                                           `(<span class="kwa">prog1</span> (<span class="kwa">if</span> (&gt;= ,perm-index-start ,(<span class="kwa">elt</span> facts (<span class="kwa">-</span> seq-length depth <span class="num">1</span>)))
                                                       (<span class="kwa">decf</span> ,perm-index-start ,(<span class="kwa">elt</span> facts (<span class="kwa">-</span> seq-length depth <span class="num">1</span>)))
                                                       ,(<span class="kwa">build-loop</span> (<span class="kwa">1</span>+ depth)
                                                                    (<span class="kwa">append</span> my-seq-vars (<span class="kwa">subseq</span> upper-seq-vars
                                                                                                (<span class="kwa">length</span> my-seq-vars)))))
                                              ,shift-body))))
                     (<span class="kwa">if</span> (&gt; (<span class="kwa">-</span> seq-length depth) <span class="num">1</span>)
                         `(<span class="kwa">with-vars-bound</span> (,my-seq-vars ,upper-seq-vars)
                            (<span class="kwa">loop</span> :repeat ,(<span class="kwa">-</span> seq-length depth) :do ,repeat-body))
                         repeat-body)))))
      `(<span class="kwa">let</span> ((,count ,perm-count))
         (<span class="kwa">declare</span> (<span class="kwa">type</span> (<span class="kwa">integer</span> <span class="num">0</span> ,(<span class="kwa">elt</span> facts seq-length)) ,count))
         (<span class="kwa">block</span> ,outer-tag
           ,(<span class="kwa">build-loop</span> <span class="num">0</span> (<span class="kwa">loop</span> :for i :from <span class="num">0</span> :below seq-length :collect i)))))))

(<span class="kwa">defmacro</span> with-flips-count (((&amp;rest seq-vars) flips-count) &amp;body body)
  (<span class="kwa">let</span> ((<span class="kwa">head</span> (<span class="kwa">car</span> seq-vars)))
    `(<span class="kwa">let</span> ((,flips-count <span class="num">0</span>))
       (<span class="kwa">declare</span> (<span class="kwa">type</span> fixnum ,flips-count))
       (<span class="kwa">unless</span> (<span class="kwa">zerop</span> ,head)
         (<span class="kwa">loop</span>
            (<span class="kwa">incf</span> ,flips-count)
            (<span class="kwa">cond</span>
              ,&#64;(<span class="kwa">loop</span> :for value :from <span class="num">1</span> :below (<span class="kwa">length</span> seq-vars)
                   :collect `((= ,head ,value)
                              (<span class="kwa">when</span> (<span class="kwa">zerop</span> ,(<span class="kwa">elt</span> seq-vars value))
                                (<span class="kwa">return</span>))
                              ,&#64;(<span class="kwa">loop</span> :for l :from <span class="num">0</span> :for r :downfrom value :while (&lt; l r)
                                   :collect `(<span class="kwa">rotatef</span> ,(<span class="kwa">elt</span> seq-vars l) ,(<span class="kwa">elt</span> seq-vars r))))))))
       ,&#64;body)))

(<span class="kwa">defstruct</span> atomic
  (<span class="kwa">counter</span> <span class="num">0</span> :type (<span class="kwa">unsigned-byte</span> #+x86-64 <span class="num">64</span> #+x86 <span class="num">32</span>)))

(<span class="kwa">defmacro</span> deffannkuch (<span class="kwa">seq-length</span> &amp;key (<span class="kwa">workers</span> <span class="num">1</span>) worker-chunk-size)
  (<span class="kwa">let</span>* ((<span class="kwa">facts</span> (<span class="kwa">make-facts-vector</span> seq-length))
         (<span class="kwa">chunk-size</span> (<span class="kwa">or</span> worker-chunk-size (<span class="kwa">min</span> (<span class="kwa">elt</span> facts seq-length) <span class="num">400</span>)))
         (<span class="kwa">seq-vars</span> (<span class="kwa">loop</span> :for i :from <span class="num">0</span> :below seq-length :collect (<span class="kwa">gensym</span>))))
    `(<span class="kwa">lambda</span> ()
       (<span class="kwa">declare</span> (<span class="kwa">optimize</span> (<span class="kwa">speed</span> <span class="num">3</span>) (<span class="kwa">safety</span> <span class="num">0</span>) (<span class="kwa">debug</span> <span class="num">0</span>)))
       (<span class="kwa">let</span> ((<span class="kwa">wrk-max-flips</span> (<span class="kwa">make-array</span> ,workers :element-type 'fixnum))
             (<span class="kwa">wrk-checksums</span> (<span class="kwa">make-array</span> ,workers :element-type 'fixnum))
             (<span class="kwa">current-idx</span> (<span class="kwa">make-atomic</span>)))
         (<span class="kwa">flet</span> ((<span class="kwa">make-worker</span> (<span class="kwa">wrk-index</span>)
                  (<span class="kwa">declare</span> (<span class="kwa">type</span> (<span class="kwa">integer</span> <span class="num">0</span> ,(<span class="kwa">1-</span> workers)) wrk-index))
                  (<span class="kwa">lambda</span> ()
                    (<span class="kwa">loop</span>
                       :with checksum :of-type fixnum = <span class="num">0</span>
                       :with max-flips :of-type fixnum = <span class="num">0</span>
                       :for perm-index :of-type fixnum = (<span class="kwa">sb-ext</span>:atomic-incf (<span class="kwa">atomic-counter</span> current-idx)
                                                                             ,chunk-size)
                       :while (&lt; perm-index ,(<span class="kwa">elt</span> facts seq-length))
                       :for sign :of-type boolean = (<span class="kwa">evenp</span> perm-index)
                       :do (<span class="kwa">with-permutations</span> ((,&#64;seq-vars) perm-index ,chunk-size)
                             (<span class="kwa">with-flips-count</span> ((,&#64;seq-vars) flips-count)
                               (<span class="kwa">when</span> (&gt; flips-count max-flips)
                                 (<span class="kwa">setf</span> max-flips flips-count))
                               (<span class="kwa">incf</span> checksum (<span class="kwa">if</span> sign flips-count (<span class="kwa">-</span> flips-count)))
                               (<span class="kwa">setf</span> sign (<span class="kwa">not</span> sign))))
                       :finally (<span class="kwa">setf</span> (<span class="kwa">elt</span> wrk-max-flips wrk-index) max-flips
                                      (<span class="kwa">elt</span> wrk-checksums wrk-index) checksum)))))
           (<span class="kwa">mapc</span> #'sb-thread:join-thread
                 (<span class="kwa">list</span> ,&#64;(<span class="kwa">loop</span> :for wrk-index :from <span class="num">0</span> :below workers
                            :collect `(<span class="kwa">sb-thread</span>:make-thread (<span class="kwa">make-worker</span> ,wrk-index))))))
         (<span class="kwa">loop</span> :for i :from <span class="num">0</span> :below ,workers
            :summing (<span class="kwa">elt</span> wrk-checksums i) :into checksum :of-type fixnum
            :maximizing (<span class="kwa">elt</span> wrk-max-flips i) :into max-flips
            :finally (<span class="kwa">return</span> (<span class="kwa">values</span> checksum max-flips)))))))

(<span class="kwa">defun</span> main (&amp;optional force-n)
  (<span class="kwa">let</span>* ((<span class="kwa">args</span> (<span class="kwa">cdr</span> sb-ext:*posix-argv*))
         (<span class="kwa">n</span> (<span class="kwa">or</span> force-n (<span class="kwa">if</span> args (<span class="kwa">parse-integer</span> (<span class="kwa">car</span> args)) <span class="num">12</span>))))
    (<span class="kwa">multiple-value-bind</span> (<span class="kwa">checksum</span> max-flips-count)
        (<span class="kwa">funcall</span> (<span class="kwa">the</span> function (<span class="kwa">eval</span> `(<span class="kwa">deffannkuch</span> ,n :workers <span class="num">4</span> :worker-chunk-size <span class="num">12000</span>))))
      (<span class="kwa">format</span> t <span class="str">&quot;~a~%Pfannkuchen(~a) = ~a~%&quot;</span> checksum n max-flips-count))))


(<span class="kwa">in-package</span> :cl-user)

(<span class="kwa">defun</span> main ()
  (<span class="kwa">fannkuch-redux</span>::main))

