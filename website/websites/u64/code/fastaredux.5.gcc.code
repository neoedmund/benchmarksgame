<span class="slc">// The Computer Language Benchmarks Game</span>
<span class="slc">// http://benchmarksgame.alioth.debian.org/</span>
<span class="slc">//</span>
<span class="slc">// Contributed by Jeremy Zerfas</span>

<span class="slc">// This controls the width of lines that are output by this program.</span>
<span class="ppc">#define MAXIMUM_LINE_WIDTH   60</span>

<span class="slc">// This controls the size of the lookup table which is used for looking up</span>
<span class="slc">// probabilities and finding the index for the approximate nucleotide with that</span>
<span class="slc">// probability.</span>
<span class="ppc">#define LOOKUP_TABLE_SIZE   8192</span>
<span class="ppc">#define LOOKUP_TABLE_SCALE   ((float)(LOOKUP_TABLE_SIZE-1))</span>

<span class="ppc">#include &lt;stdint.h&gt;</span>
<span class="ppc">#include &lt;string.h&gt;</span>
<span class="ppc">#include &lt;stdio.h&gt;</span>
<span class="ppc">#include &lt;stdlib.h&gt;</span>

<span class="slc">// intptr_t should be the native integer type on most sane systems.</span>
<span class="kwc">typedef</span> <span class="kwb">intptr_t</span> intnative_t;

<span class="kwc">typedef</span> <span class="kwb">struct</span>{
   <span class="kwb">char</span> letter;
   <span class="kwb">float</span> probability;
} nucleotide_info;


<span class="slc">// Repeatedly print string_To_Repeat until it has printed</span>
<span class="slc">// number_Of_Characters_To_Create. The output is also wrapped to</span>
<span class="slc">// MAXIMUM_LINE_WIDTH columns.</span>
<span class="kwb">static void</span> <span class="kwd">repeat_And_Wrap_String</span>(<span class="kwb">const char</span> string_To_Repeat[],
  <span class="kwb">const</span> intnative_t number_Of_Characters_To_Create){
   <span class="kwb">const</span> intnative_t string_To_Repeat_Length=<span class="kwd">strlen</span>(string_To_Repeat);

   <span class="slc">// Create an extended_String_To_Repeat which is a copy of string_To_Repeat</span>
   <span class="slc">// but extended with another copy of the first MAXIMUM_LINE_WIDTH characters</span>
   <span class="slc">// of string_To_Repeat appended to the end. Later on this allows us to</span>
   <span class="slc">// generate a line of output just by doing simple memory copies using an</span>
   <span class="slc">// appropriate offset into extended_String_To_Repeat.</span>
   <span class="kwb">char</span> extended_String_To_Repeat[string_To_Repeat_Length+MAXIMUM_LINE_WIDTH];
   <span class="kwa">for</span>(intnative_t column=<span class="num">0</span>; column&lt;string_To_Repeat_Length+MAXIMUM_LINE_WIDTH;
     column++)
      extended_String_To_Repeat[column]=
        string_To_Repeat[column%string_To_Repeat_Length];
   intnative_t offset=<span class="num">0</span>;

   <span class="kwb">char</span> line[MAXIMUM_LINE_WIDTH+<span class="num">1</span>];
   line[MAXIMUM_LINE_WIDTH]=<span class="str">'</span><span class="esc">\n</span><span class="str">'</span>;

   <span class="kwa">for</span>(intnative_t current_Number_Of_Characters_To_Create=
     number_Of_Characters_To_Create;
     current_Number_Of_Characters_To_Create&gt;<span class="num">0</span>;){
      <span class="slc">// Figure out the length of the line we need to write. If it's less than</span>
      <span class="slc">// MAXIMUM_LINE_WIDTH then we also need to add a line feed in the right</span>
      <span class="slc">// spot too.</span>
      intnative_t line_Length=MAXIMUM_LINE_WIDTH;
      <span class="kwa">if</span>(current_Number_Of_Characters_To_Create&lt;MAXIMUM_LINE_WIDTH){
         line_Length=current_Number_Of_Characters_To_Create;
         line[line_Length]=<span class="str">'</span><span class="esc">\n</span><span class="str">'</span>;
      }

      <span class="kwd">memcpy</span>(line, extended_String_To_Repeat+offset, line_Length);

      <span class="slc">// Update the offset, reducing it by string_To_Repeat_Length if</span>
      <span class="slc">// necessary.</span>
      offset+=line_Length;
      <span class="kwa">if</span>(offset&gt;string_To_Repeat_Length)
         offset-=string_To_Repeat_Length;

      <span class="slc">// Output the line to stdout and update the</span>
      <span class="slc">// current_Number_Of_Characters_To_Create.</span>
      <span class="kwd">fwrite</span>(line, line_Length+<span class="num">1</span>, <span class="num">1</span>, stdout);
      current_Number_Of_Characters_To_Create-=line_Length;
   }
}


<span class="slc">// Generate a floating point pseudorandom number from 0.0 to LOOKUP_TABLE_SCALE</span>
<span class="slc">// using a linear congruential generator.</span>
<span class="ppc">#define IM      139968</span>
<span class="ppc">#define IA      3877</span>
<span class="ppc">#define IC      29573</span>
<span class="ppc">#define SEED   42</span>
<span class="kwb">static</span> <span class="kwc">inline</span> <span class="kwb">float</span> <span class="kwd">get_LCG_Pseudorandom_Number</span>(){
   <span class="kwb">static uint32_t</span> seed=SEED;
   seed=(seed*IA + IC)%IM;
   <span class="kwa">return</span> LOOKUP_TABLE_SCALE/IM*seed;
}


<span class="slc">// Print a pseudorandom DNA sequence that is number_Of_Characters_To_Create</span>
<span class="slc">// characters long and made up of the nucleotides specified in</span>
<span class="slc">// nucleotides_Information and occurring at the frequencies specified in</span>
<span class="slc">// nucleotides_Information. The output is also wrapped to MAXIMUM_LINE_WIDTH</span>
<span class="slc">// columns.</span>
<span class="kwb">static void</span> <span class="kwd">generate_And_Wrap_Pseudorandom_DNA_Sequence</span>(
  <span class="kwb">const</span> nucleotide_info nucleotides_Information[],
  <span class="kwb">const</span> intnative_t number_Of_Nucleotides,
  <span class="kwb">const</span> intnative_t number_Of_Characters_To_Create){

   <span class="slc">// Cumulate the probabilities.</span>
   <span class="kwb">float</span> cumulative_Probabilities[number_Of_Nucleotides],
     cumulative_Probability=<span class="num">0.0</span>;
   <span class="kwa">for</span>(intnative_t i=<span class="num">0</span>; i&lt;number_Of_Nucleotides; i++){
      cumulative_Probability+=nucleotides_Information[i].probability;
      cumulative_Probabilities[i]=cumulative_Probability*LOOKUP_TABLE_SCALE;
   }

   <span class="slc">// Adjust the last probability so that nothing will go past it.</span>
   cumulative_Probabilities[number_Of_Nucleotides-<span class="num">1</span>]=LOOKUP_TABLE_SIZE;

   <span class="slc">// Create and fill the nucleotide_Indexes_Lookup_Table which will allow us</span>
   <span class="slc">// to later lookup a probability and quickly find the approximate index for</span>
   <span class="slc">// the nucleotide with that selected probability.</span>
   <span class="kwb">uint8_t</span> nucleotide_Indexes_Lookup_Table[LOOKUP_TABLE_SIZE], current_Index=<span class="num">0</span>;
   <span class="kwa">for</span>(intnative_t probability=<span class="num">0</span>; probability&lt;LOOKUP_TABLE_SIZE;
     probability++){
      <span class="kwa">while</span>(probability&gt;=cumulative_Probabilities[current_Index])
         current_Index++;

      nucleotide_Indexes_Lookup_Table[probability]=current_Index;
   }

   <span class="kwb">char</span> line[MAXIMUM_LINE_WIDTH+<span class="num">1</span>];
   line[MAXIMUM_LINE_WIDTH]=<span class="str">'</span><span class="esc">\n</span><span class="str">'</span>;

   <span class="kwa">for</span>(intnative_t current_Number_Of_Characters_To_Create=
     number_Of_Characters_To_Create;
     current_Number_Of_Characters_To_Create&gt;<span class="num">0</span>;){
      <span class="slc">// Figure out the length of the line we need to write. If it's less than</span>
      <span class="slc">// MAXIMUM_LINE_WIDTH then we also need to add a line feed in the right</span>
      <span class="slc">// spot too.</span>
      intnative_t line_Length=MAXIMUM_LINE_WIDTH;
      <span class="kwa">if</span>(current_Number_Of_Characters_To_Create&lt;MAXIMUM_LINE_WIDTH){
         line_Length=current_Number_Of_Characters_To_Create;
         line[line_Length]=<span class="str">'</span><span class="esc">\n</span><span class="str">'</span>;
      }

      <span class="slc">// Fill up the line with characters from nucleotides_Information[] that</span>
      <span class="slc">// are selected by looking up a pseudorandom number.</span>
      <span class="kwa">for</span>(intnative_t column=<span class="num">0</span>; column&lt;line_Length; column++){
         <span class="kwb">const float</span> r=<span class="kwd">get_LCG_Pseudorandom_Number</span>();

         <span class="slc">// Lookup the probability in the lookup table and then use the</span>
         <span class="slc">// resulting index as the index where we should start the linear</span>
         <span class="slc">// search for the correct nucleotide at.</span>
         intnative_t index=nucleotide_Indexes_Lookup_Table[(intnative_t)r];
         <span class="kwa">while</span>(cumulative_Probabilities[index]&lt;=r)
            index++;

         line[column]=nucleotides_Information[index].letter;
      }

      <span class="slc">// Output the line to stdout and update the</span>
      <span class="slc">// current_Number_Of_Characters_To_Create.</span>
      <span class="kwd">fwrite</span>(line, line_Length+<span class="num">1</span>, <span class="num">1</span>, stdout);
      current_Number_Of_Characters_To_Create-=line_Length;
   }
}


<span class="kwb">int</span> <span class="kwd">main</span>(<span class="kwb">int</span> argc, <span class="kwb">char</span> ** argv){
   <span class="kwb">const</span> intnative_t n=<span class="kwd">atoi</span>(argv[<span class="num">1</span>]);

   <span class="kwd">fputs</span>(<span class="str">&quot;&gt;ONE Homo sapiens alu</span><span class="esc">\n</span><span class="str">&quot;</span>, stdout);
   <span class="kwb">const char</span> homo_Sapiens_Alu[]=
     <span class="str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGGGAGGCCGAGGCGGGCGGATCACCTGAGGTC&quot;</span>
     <span class="str">&quot;AGGAGTTCGAGACCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAATACAAAAATTAGCCGGGCG&quot;</span>
     <span class="str">&quot;TGGTGGCGCGCGCCTGTAATCCCAGCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGGAGGCGG&quot;</span>
     <span class="str">&quot;AGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCCAGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span>;
   <span class="kwd">repeat_And_Wrap_String</span>(homo_Sapiens_Alu, <span class="num">2</span>*n);

   <span class="kwd">fputs</span>(<span class="str">&quot;&gt;TWO IUB ambiguity codes</span><span class="esc">\n</span><span class="str">&quot;</span>, stdout);
   nucleotide_info iub_Nucleotides_Information[]={
     {<span class="str">'a'</span>, <span class="num">0.27</span>}, {<span class="str">'c'</span>, <span class="num">0.12</span>}, {<span class="str">'g'</span>, <span class="num">0.12</span>}, {<span class="str">'t'</span>, <span class="num">0.27</span>}, {<span class="str">'B'</span>, <span class="num">0.02</span>},
     {<span class="str">'D'</span>, <span class="num">0.02</span>}, {<span class="str">'H'</span>, <span class="num">0.02</span>}, {<span class="str">'K'</span>, <span class="num">0.02</span>}, {<span class="str">'M'</span>, <span class="num">0.02</span>}, {<span class="str">'N'</span>, <span class="num">0.02</span>},
     {<span class="str">'R'</span>, <span class="num">0.02</span>}, {<span class="str">'S'</span>, <span class="num">0.02</span>}, {<span class="str">'V'</span>, <span class="num">0.02</span>}, {<span class="str">'W'</span>, <span class="num">0.02</span>}, {<span class="str">'Y'</span>, <span class="num">0.02</span>}};
   <span class="kwd">generate_And_Wrap_Pseudorandom_DNA_Sequence</span>(iub_Nucleotides_Information,
     <span class="kwa">sizeof</span>(iub_Nucleotides_Information)/<span class="kwa">sizeof</span>(nucleotide_info), <span class="num">3</span>*n);

   <span class="kwd">fputs</span>(<span class="str">&quot;&gt;THREE Homo sapiens frequency</span><span class="esc">\n</span><span class="str">&quot;</span>, stdout);
   nucleotide_info homo_Sapien_Nucleotides_Information[]={
     {<span class="str">'a'</span>, <span class="num">0.3029549426680</span>}, {<span class="str">'c'</span>, <span class="num">0.1979883004921</span>},
     {<span class="str">'g'</span>, <span class="num">0.1975473066391</span>}, {<span class="str">'t'</span>, <span class="num">0.3015094502008</span>}};
   <span class="kwd">generate_And_Wrap_Pseudorandom_DNA_Sequence</span>(
     homo_Sapien_Nucleotides_Information,
     <span class="kwa">sizeof</span>(homo_Sapien_Nucleotides_Information)/<span class="kwa">sizeof</span>(nucleotide_info), <span class="num">5</span>*n);

   <span class="kwa">return</span> <span class="num">0</span>;
}
