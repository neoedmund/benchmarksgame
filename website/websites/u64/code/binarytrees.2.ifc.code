<span class="slc">! The Computer Language Benchmarks Game</span>
<span class="slc">! http://benchmarksgame.alioth.debian.org/</span>
<span class="slc">!</span>
<span class="slc">! original C program by Francesco Abbate</span>
<span class="slc">! Fortran version by Vladimir Fuka</span>


<span class="kwa">module</span> apr
  <span class="kwa">use</span> iso_c_binding
  <span class="kwa">implicit none</span>

  <span class="kwa">interface</span>

    <span class="kwa">integer</span>(c_int) <span class="kwa">function</span> <span class="kwd">apr_initialize</span>() <span class="kwd">bind</span>(C)
      import
    <span class="kwa">end function</span>

    <span class="kwa">type</span>(c_ptr) <span class="kwa">function</span> <span class="kwd">apr_palloc</span>(p,size) <span class="kwd">bind</span>(C)
      import
      <span class="kwa">type</span>(c_ptr), value :: p
      <span class="kwa">integer</span>(c_size_t), value :: size
    <span class="kwa">end function</span>

    <span class="kwa">integer</span>(c_int) <span class="kwa">function</span> <span class="kwd">apr_pool_create_unmanaged_ex</span>(newpool, abort_fn, allocator) <span class="kwd">bind</span>(C)
      import
      <span class="kwa">type</span>(c_ptr), <span class="kwd">intent</span>(out) :: newpool
      <span class="kwa">type</span>(c_funptr), value :: abort_fn
      <span class="kwa">type</span>(c_funptr), value :: allocator
    <span class="kwa">end function</span>

    <span class="kwa">subroutine</span> <span class="kwd">apr_pool_clear</span>(p) <span class="kwd">bind</span>(C)
      import
      <span class="kwa">type</span>(c_ptr),value :: p
    <span class="kwa">end subroutine</span>

    <span class="kwa">subroutine</span> <span class="kwd">apr_pool_destroy</span>(p) <span class="kwd">bind</span>(C)
      import
      <span class="kwa">type</span>(c_ptr),value :: p
    <span class="kwa">end subroutine</span>

  <span class="kwa">end interface</span>

  <span class="kwa">contains</span>

    <span class="kwa">integer</span>(c_int) <span class="kwa">function</span> <span class="kwd">abrt</span>(i) <span class="kwd">bind</span>(C)
      <span class="kwa">integer</span>(c_int), value ,<span class="kwd">intent</span>(in) :: i
      abrt = i
      error <span class="kwa">stop</span>
    <span class="kwa">end function</span>

<span class="kwa">end module</span> apr

<span class="kwa">module</span> trees
  <span class="kwa">use</span> iso_c_binding
  <span class="kwa">use</span> apr

  <span class="kwa">implicit none</span>

  <span class="kwa">type</span> node
    <span class="kwa">integer</span> i
    <span class="kwa">type</span>(node), <span class="kwa">pointer</span> :: left
    <span class="kwa">type</span>(node), <span class="kwa">pointer</span> :: right
  <span class="kwa">end type</span>

  <span class="kwa">contains</span>

    <span class="kwa">recursive integer function</span> <span class="kwd">node_check</span>(n) <span class="kwd">result</span>(res)
      <span class="kwa">type</span>(node), <span class="kwd">intent</span>(in) :: n
      <span class="kwa">integer</span> lc,rc

      <span class="kwa">if</span> (<span class="kwd">associated</span>(n%left)) <span class="kwa">then</span>
          lc = <span class="kwd">node_check</span>(n%left)
          rc = <span class="kwd">node_check</span>(n%right)
          res = lc + n%i - rc
      <span class="kwa">else</span>
        res =  n%i
      <span class="kwa">endif</span>
    <span class="kwa">end function</span>


    <span class="kwa">recursive function</span> <span class="kwd">make</span>(i,depth, pool) <span class="kwd">result</span>(res)
      <span class="kwa">type</span>(node),<span class="kwa">pointer</span> :: res
      <span class="kwa">type</span>(c_ptr), <span class="kwd">intent</span>(in) :: pool
      <span class="kwa">integer</span>, <span class="kwd">intent</span>(in) :: i
      <span class="kwa">integer</span>, <span class="kwd">intent</span>(in) :: depth

      <span class="kwa">call</span> <span class="kwd">c_f_pointer</span>( <span class="kwd">apr_palloc</span>(pool, <span class="kwd">sizeof</span>(res)), res)

      res%i = i

      <span class="kwa">if</span> (depth &gt; <span class="num">0</span>) <span class="kwa">then</span>
          res%left  =&gt; <span class="kwd">make</span>(<span class="num">2</span>*i-<span class="num">1</span>, depth - <span class="num">1</span>, pool)
          res%right =&gt; <span class="kwd">make</span>(<span class="num">2</span>*i  , depth - <span class="num">1</span>, pool)
      <span class="kwa">else</span>
          res%left  =&gt; <span class="kwd">null</span>()
          res%right =&gt; <span class="kwd">null</span>()
      <span class="kwa">end if</span>
    <span class="kwa">end function</span>

<span class="kwa">end module</span> trees



<span class="kwa">program</span> main
  <span class="kwa">use</span> iso_c_binding
  <span class="kwa">use</span> apr
  <span class="kwa">use</span> trees

  <span class="kwa">implicit none</span>

  <span class="kwa">integer</span>, <span class="kwa">parameter</span> :: line_size = <span class="num">64</span>

  <span class="kwa">type</span>(c_ptr) :: long_lived_pool
  <span class="kwa">integer</span>,<span class="kwa">parameter</span> :: min_depth = <span class="num">4</span>
  <span class="kwa">integer</span> :: req_depth, max_depth, stretch_depth
  <span class="kwa">integer</span>(c_int) :: tmp
  <span class="kwa">character</span>(<span class="num">32</span>) :: str

  <span class="kwa">type</span>(node),<span class="kwa">pointer</span> :: long_lived_tree

  <span class="kwa">integer</span> d,iterations,c,i
  <span class="kwa">type</span>(c_ptr) :: store
  <span class="kwa">type</span>(node),<span class="kwa">pointer</span> :: a, b, curr
  <span class="kwa">character</span>(line_size),<span class="kwa">dimension</span>(:),allocatable :: outputstr
  <span class="kwa">character</span>, <span class="kwa">parameter</span> :: t = <span class="kwd">achar</span>(<span class="num">9</span>)
  <span class="kwa">type</span>(c_funptr):: abrtptr

  abrtptr = <span class="kwd">c_funloc</span>(abrt)

  <span class="kwa">if</span> (<span class="kwd">command_argument_count</span>()==<span class="num">1</span>) <span class="kwa">then</span>
    <span class="kwa">call</span> <span class="kwd">get_command_argument</span>(<span class="num">1</span>,str)
    <span class="kwa">read</span>(str,*) req_depth
  <span class="kwa">else</span>
    req_depth = <span class="num">10</span>
  <span class="kwa">end if</span>

  <span class="kwa">if</span> (req_depth &gt; min_depth+<span class="num">2</span>) <span class="kwa">then</span>
    max_depth = req_depth
  <span class="kwa">else</span>
    max_depth = min_depth + <span class="num">2</span>
  <span class="kwa">end if</span>

  <span class="kwd">allocate</span>(<span class="kwd">outputstr</span>(min_depth:max_depth))

  stretch_depth = max_depth+<span class="num">1</span>

  tmp = <span class="kwd">apr_initialize</span>()

  <span class="slc">! Alloc then dealloc stretchdepth tree</span>

  tmp = <span class="kwd">apr_pool_create_unmanaged_ex</span>(store, abrtptr, c_null_funptr)

  curr =&gt; <span class="kwd">make</span>(<span class="num">0</span>, stretch_depth, store)

  <span class="kwa">write</span>(*,<span class="str">&quot;(2(a,i0))&quot;</span>) <span class="str">&quot;stretch tree of depth &quot;</span>,stretch_depth, t//<span class="str">&quot; check: &quot;</span>,  <span class="kwd">node_check</span>(curr)

  <span class="kwa">call</span> <span class="kwd">apr_pool_destroy</span>(store)

  tmp = <span class="kwd">apr_pool_create_unmanaged_ex</span>(long_lived_pool, abrtptr, c_null_funptr)

  long_lived_tree =&gt; <span class="kwd">make</span>(<span class="num">0</span>, max_depth, long_lived_pool)

  <span class="slc">!$omp parallel do private(store, a, b, c, i, iterations, tmp) schedule(dynamic,1)</span>
  <span class="kwa">do</span>  d = min_depth, max_depth, <span class="num">2</span>
      iterations = <span class="kwd">ishft</span>(<span class="num">1</span>, max_depth - d + min_depth)
      c = <span class="num">0</span>

      tmp = <span class="kwd">apr_pool_create_unmanaged_ex</span>(store, abrtptr, c_null_funptr)

      <span class="kwa">do</span> i = <span class="num">1</span>,iterations
          a =&gt; <span class="kwd">make</span>( i, d, store)
          b =&gt; <span class="kwd">make</span>(-i, d, store)
          c = c+ <span class="kwd">node_check</span>(a) + <span class="kwd">node_check</span>(b)
          <span class="kwa">call</span> <span class="kwd">apr_pool_clear</span>(store)
      <span class="kwa">end do</span>

      <span class="kwa">call</span> <span class="kwd">apr_pool_destroy</span>(store)

      <span class="kwa">write</span>(<span class="kwd">outputstr</span>(d),<span class="str">&quot;(2(i0,a),i0)&quot;</span>) <span class="num">2</span>*iterations,t//<span class="str">&quot; trees of depth &quot;</span>, d ,t//<span class="str">&quot; check: &quot;</span>, c
  <span class="kwa">end do</span>
  <span class="slc">!$omp end parallel do</span>

  <span class="kwa">do</span> d = min_depth, max_depth, <span class="num">2</span>
    <span class="kwa">write</span>(*,<span class="str">&quot;(a)&quot;</span>) <span class="kwd">trim</span>(<span class="kwd">outputstr</span>(d))
  <span class="kwa">end do</span>

  <span class="kwa">write</span>(*,<span class="str">&quot;(2(a,i0))&quot;</span>) <span class="str">&quot;long lived tree of depth &quot;</span>, max_depth ,t//<span class="str">&quot; check: &quot;</span>, <span class="kwd">node_check</span>(long_lived_tree)
<span class="kwa">end program</span>

