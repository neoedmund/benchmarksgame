<span class="com">/* The Computer Language Benchmarks Game</span>
<span class="com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * contributed by Jimmy Tang</span>
<span class="com"> * modified by Sindhudweep Narayan Sarkar</span>
<span class="com">*/</span>

<span class="kwa">using</span> System;
<span class="kwa">using</span> System.Linq;
<span class="kwa">using</span> System.Threading;
<span class="kwa">using</span> System.Collections.Generic;
<span class="kwa">using</span> System.Text.RegularExpressions;
<span class="kwa">using</span> System.Threading.Tasks;

<span class="kwa">class</span> regexdna {
   <span class="kwa">static</span> <span class="kwb">void</span> <span class="kwd">Main</span>() {
      <span class="kwb">string</span> sequence = Console.In.<span class="kwd">ReadToEnd</span>();
      <span class="kwb">int</span> initialLength = sequence.Length;
            
      sequence = Regex.<span class="kwd">Replace</span>(sequence, <span class="str">&quot;&gt;.*</span><span class="esc">\n</span><span class="str">|</span><span class="esc">\n</span><span class="str">&quot;</span>, <span class="str">&quot;&quot;</span>);
      <span class="kwb">int</span> codeLength = sequence.Length;
      
      <span class="kwb">string</span>[] variants = {
      <span class="str">&quot;agggtaaa|tttaccct&quot;</span>
      ,<span class="str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span>
      ,<span class="str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span>
      ,<span class="str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span>
      ,<span class="str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span>
      ,<span class="str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span>
      ,<span class="str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span>
      ,<span class="str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span>
      ,<span class="str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span>
      };
      
      Parallel.<span class="kwd">For</span>(<span class="num">0</span>, variants.Length, i =&gt; 
         { 
            var pattern = <span class="kwa">new</span> <span class="kwd">Regex</span>(variants[i], RegexOptions.Compiled); 
            variants[i] += <span class="str">&quot; &quot;</span> + pattern.<span class="kwd">Matches</span>(sequence).Count; 
         });
      Console.<span class="kwd">WriteLine</span>(<span class="kwb">string</span>.<span class="kwd">Join</span>(<span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span>, variants));
      
      var dict = <span class="kwa">new</span> Dictionary&lt;<span class="kwb">string</span>, <span class="kwb">string</span>&gt; {
         {<span class="str">&quot;B&quot;</span>, <span class="str">&quot;(c|g|t)&quot;</span>}, {<span class="str">&quot;D&quot;</span>, <span class="str">&quot;(a|g|t)&quot;</span>},   {<span class="str">&quot;H&quot;</span>, <span class="str">&quot;(a|c|t)&quot;</span>}, {<span class="str">&quot;K&quot;</span>, <span class="str">&quot;(g|t)&quot;</span>},
         {<span class="str">&quot;M&quot;</span>, <span class="str">&quot;(a|c)&quot;</span>},   {<span class="str">&quot;N&quot;</span>, <span class="str">&quot;(a|c|g|t)&quot;</span>}, {<span class="str">&quot;R&quot;</span>, <span class="str">&quot;(a|g)&quot;</span>},   {<span class="str">&quot;S&quot;</span>, <span class="str">&quot;(c|g)&quot;</span>},
         {<span class="str">&quot;V&quot;</span>, <span class="str">&quot;(a|c|g)&quot;</span>}, {<span class="str">&quot;W&quot;</span>, <span class="str">&quot;(a|t)&quot;</span>},     {<span class="str">&quot;Y&quot;</span>, <span class="str">&quot;(c|t)&quot;</span>} 
      };
      sequence = <span class="kwa">new</span> <span class="kwd">Regex</span>(<span class="str">&quot;[WYKMSRBDVHN]&quot;</span>, RegexOptions.Compiled).<span class="kwd">Replace</span>(sequence, m =&gt; dict[m.Value]);
      Console.<span class="kwd">WriteLine</span>(<span class="str">&quot;</span><span class="esc">\n</span><span class="str"></span><span class="ipl">{0}</span><span class="str"></span><span class="esc">\n</span><span class="str"></span><span class="ipl">{1}</span><span class="str"></span><span class="esc">\n</span><span class="str"></span><span class="ipl">{2}</span><span class="str">&quot;</span>, initialLength, codeLength, sequence.Length);
   }
}
