<span class="com">{-</span>
<span class="com">   The Computer Language Benchmarks Game</span>
<span class="com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="com">   contributed by Olof Kraigher</span>
<span class="com">-}</span>

<span class="kwd">module</span> Main <span class="kwd">where</span>

<span class="kwd">import</span> System.Environment; <span class="kwd">import</span> Data.List; <span class="kwd">import</span> Data.Bits; <span class="kwd">import</span> Data.<span class="kwb">Array</span>.IArray;
<span class="kwd">import</span> Data.Word(Word64); <span class="kwd">import</span> Data.<span class="kwb">Maybe</span>; <span class="kwd">import</span> Control.Monad;

<span class="kwd">data</span> Direction = E | SE | SW | W | NW | NE <span class="kwd">deriving</span> (Enum, Eq, Ord)
<span class="kwd">type</span> Piece = [Direction]
<span class="kwd">type</span> CellCoord = (<span class="kwb">Int</span>, <span class="kwb">Int</span>)
<span class="kwd">type</span> CellIndex = <span class="kwb">Int</span>
<span class="kwd">type</span> Mask = Word64
<span class="kwd">type</span> Color = <span class="kwb">Int</span>
<span class="kwd">type</span> Solution = <span class="kwb">String</span>

<span class="kwd">class</span> Rotatable a <span class="kwd">where</span> rot :: a -&gt; a 
<span class="kwd">class</span> Floppable a <span class="kwd">where</span> flop :: a -&gt; a	
<span class="kwd">class</span> Maskable a <span class="kwd">where</span> mask :: a -&gt; Mask

<span class="kwd">instance</span> Rotatable Direction	<span class="kwd">where</span> rot d = <span class="kwc">toEnum</span> $ <span class="kwc">mod</span> ((<span class="kwc">fromEnum</span> d) + <span class="num">1</span>) <span class="num">6</span>
<span class="kwd">instance</span> Rotatable Piece 		<span class="kwd">where</span> rot a = <span class="kwc">map</span> rot a

<span class="kwd">instance</span> Floppable Direction 	<span class="kwd">where</span> flop d = <span class="kwc">toEnum</span> $ <span class="kwc">mod</span> (<span class="num">9</span> - (<span class="kwc">fromEnum</span> d)) <span class="num">6</span>
<span class="kwd">instance</span> Floppable Piece 		<span class="kwd">where</span> flop a = <span class="kwc">map</span> flop a

<span class="kwd">instance</span> Maskable CellCoord 	<span class="kwd">where</span> mask (x,y) = bit (x + y*width)
<span class="kwd">instance</span> Maskable [CellCoord]	<span class="kwd">where</span> mask p = <span class="kwc">foldl</span>' (<span class="esc">\a</span> b -&gt; a .|. mask b) <span class="num">0</span> p
<span class="kwd">instance</span> Maskable CellIndex 	<span class="kwd">where</span> mask i = bit i


width :: <span class="kwb">Int</span>
width = <span class="num">5</span>

height :: <span class="kwb">Int</span>
height = <span class="num">10</span>

cellcs :: [CellCoord]
cellcs = [(x,y) | y &lt;- [<span class="num">0</span>..height-<span class="num">1</span>], x &lt;- [<span class="num">0</span>..width-<span class="num">1</span>]]

cellis :: [CellIndex]
cellis = [<span class="num">0</span>..width*height-<span class="num">1</span>]

fullMask :: Mask
fullMask = <span class="num">0x3FFFFFFFFFFFF</span> 
		
pieces :: <span class="kwb">Array</span> Color Piece
pieces = <span class="kwa">array</span> (<span class="num">0</span>,<span class="num">9</span>) $ <span class="kwc">zip</span> [<span class="num">0</span>.<span class="num">.9</span>] $ 
		[	[E,	 E,  E,  SE],
			[SE, SW, W,  SW],
			[W,  W,  SW, SE],
			[E,  E,  SW, SE],
			[NW, W,  NW, SE, SW],
			[E,  E,  NE, W],
			[NW, NE, NE, W],
			[NE, SE, E,  NE],
			[SE, SE, E,  SE],
			[E,  NW, NW, NW]]

valid :: CellCoord -&gt; <span class="kwb">Maybe</span> CellCoord
valid p&#64;(x,y)
	| <span class="num">0</span> &lt;= x, x &lt; width, <span class="num">0</span> &lt;= y, y &lt; height = Just p
	|<span class="kwc">otherwise</span> = Nothing

move :: CellCoord -&gt; Direction -&gt; <span class="kwb">Maybe</span> CellCoord
move (x,y) E = valid (x+<span class="num">1</span>,y)
move (x,y) W = valid (x-<span class="num">1</span>,y)
move (x,y) NE = valid (x+(<span class="kwc">mod</span> y <span class="num">2</span>),y-<span class="num">1</span>)
move (x,y) NW = valid (x+(<span class="kwc">mod</span> y <span class="num">2</span>)-<span class="num">1</span>,y-<span class="num">1</span>)
move (x,y) SE = valid (x+(<span class="kwc">mod</span> y <span class="num">2</span>),y+<span class="num">1</span>)
move (x,y) SW = valid (x+(<span class="kwc">mod</span> y <span class="num">2</span>)-<span class="num">1</span>,y+<span class="num">1</span>)


overlap :: Mask -&gt; Mask -&gt; <span class="kwb">Bool</span>
overlap a b = (a .&amp;. b) /= <span class="num">0</span>

legal :: Mask -&gt; Mask -&gt; <span class="kwb">Bool</span>
legal a b = <span class="kwc">not</span> $ overlap a b

bc :: Mask -&gt; <span class="kwb">Int</span>
bc <span class="num">0</span> = <span class="num">0</span>
bc mask = (<span class="kwc">fromIntegral</span> $ (mask .&amp;. <span class="num">1</span>)) + (bc (shiftR mask <span class="num">1</span>))

fill :: Mask -&gt; CellCoord -&gt; Mask
fill mask cell&#64;(x,y)
	| overlap mask (bit $ x + y*width) = mask
	| <span class="kwc">otherwise</span> = 
		<span class="kwd">let</span> mask' = mask .|. (bit $ x + y*width)
		<span class="kwd">in</span>	<span class="kwc">foldl</span>' fill mask' $ <span class="kwc">mapMaybe</span> (move cell) [E .. NE]

freeCell :: Mask -&gt; CellCoord
freeCell mask = 
	<span class="kwc">fromJust</span> $ <span class="kwc">find</span> (\(x,y) -&gt; legal mask (bit $ x + y*width)) cellcs

noIslands :: Mask -&gt; <span class="kwb">Bool</span>
noIslands mask = <span class="kwc">not</span> $ <span class="kwc">any</span> (&lt;<span class="num">5</span>) $ diffs $ noIslands' mask <span class="kwd">where</span>
	noIslands' mask
		| mask == fullMask = [bc mask]
		| <span class="kwc">otherwise</span> = (bc mask) : (noIslands' $ fill mask $ freeCell mask)
	diffs l = <span class="kwc">zipWith</span> (-) (<span class="kwc">tail</span> l) l
	

placePiece :: Piece -&gt; CellCoord -&gt; <span class="kwb">Maybe</span> [CellCoord]
placePiece [] cell = Just [cell]
placePiece (p:ps) cell = move cell p &gt;&gt;= (placePiece ps) &gt;&gt;= <span class="kwc">return</span> . (cell:)

pieceMasks :: <span class="kwb">Array</span> Color [Mask]
pieceMasks = amap pieceMasks' pieces <span class="kwd">where</span>		
	pieceMasks' piece
		| piece == (pieces!<span class="num">5</span>) = <span class="kwd">do</span>
			piece' &lt;- (<span class="kwc">take</span> <span class="num">3</span> $ <span class="kwc">iterate</span> rot piece) ++ (<span class="kwc">take</span> <span class="num">3</span> $ <span class="kwc">iterate</span> rot $ flop $ piece)
			<span class="kwc">filter</span> noIslands $ <span class="kwc">map</span> mask $ <span class="kwc">mapMaybe</span> (placePiece piece') cellcs
		
		| <span class="kwc">otherwise</span> = <span class="kwd">do</span>
			piece' &lt;- (<span class="kwc">take</span> <span class="num">6</span> $ <span class="kwc">iterate</span> rot piece) ++ (<span class="kwc">take</span> <span class="num">6</span> $ <span class="kwc">iterate</span> rot $ flop $ piece)
			<span class="kwc">filter</span> noIslands $ <span class="kwc">map</span> mask $ <span class="kwc">mapMaybe</span> (placePiece piece') cellcs

pieceMasksAtCell :: <span class="kwb">Array</span> Color (<span class="kwb">Array</span> CellIndex [Mask])
pieceMasksAtCell = amap pieceMasksAtCell' pieceMasks <span class="kwd">where</span>
	pieceMasksAtCell' masks = <span class="kwa">array</span> (<span class="num">0</span>,width*height-<span class="num">1</span>) $ pieceMasksAtCell'' masks cellis <span class="kwd">where</span>
		pieceMasksAtCell'' masks [] = []
		pieceMasksAtCell'' masks (c:cs) = 
			<span class="kwd">let</span> (a,b) = <span class="kwc">partition</span> (overlap (mask c)) masks
			<span class="kwd">in</span> (c,a) : (pieceMasksAtCell'' b cs)

format :: Color -&gt; Mask -&gt; <span class="kwb">Integer</span>
format c m =  (<span class="kwc">fromIntegral</span> c) * (binToDec m) <span class="kwd">where</span>
	binToDec :: Mask -&gt; <span class="kwb">Integer</span>
	binToDec <span class="num">0</span> = <span class="num">0</span>
	binToDec n = (<span class="kwc">fromIntegral</span> (<span class="kwc">mod</span> n <span class="num">2</span>)) + <span class="num">10</span>*(binToDec $ <span class="kwc">div</span> n <span class="num">2</span>)
	
ps :: Solution -&gt; <span class="kwb">IO</span> ()		
ps solution = pe $ <span class="kwc">map</span> (<span class="kwc">concatMap</span> (<span class="esc">\a</span> -&gt; [a,' '])) $ 
					<span class="kwc">take</span> height $ <span class="kwc">map</span> (<span class="kwc">take</span> <span class="num">5</span>) $ <span class="kwc">iterate</span> (<span class="kwc">drop</span> width) solution <span class="kwd">where</span>
	po [] = <span class="kwc">return</span> ()
	po (s:ss) = <span class="kwd">do</span>
		<span class="kwc">putStrLn</span> $ ' ':s
		pe ss

	pe [] = <span class="kwc">return</span> ()
	pe (s:ss) = <span class="kwd">do</span>
		<span class="kwc">putStrLn</span> s
		po ss

solutions :: [Solution]
solutions = solutions' <span class="num">0 0</span> [<span class="num">0</span>.<span class="num">.9</span>] (<span class="num">10</span>^(width*height)) <span class="kwd">where</span>

	solutions' :: Mask -&gt; CellIndex -&gt; [Color] -&gt; <span class="kwb">Integer</span>-&gt; [Solution]
	solutions' _ _ [] i = 	<span class="kwd">let</span> s = <span class="kwc">tail</span>.<span class="kwc">show</span> $ i <span class="kwd">in</span> [s, <span class="kwc">reverse</span> s]
	solutions' board cell colorsLeft i
		| overlap board (mask cell) = solutions' board (cell+<span class="num">1</span>) colorsLeft i
		| <span class="kwc">otherwise</span> = <span class="kwd">do</span>
			color &lt;- colorsLeft
			mask &lt;- <span class="kwc">filter</span> (legal board) $ pieceMasksAtCell!color!cell
			solutions' (board .|. mask) (cell+<span class="num">1</span>) (<span class="kwc">delete</span> color colorsLeft) (i + (format color mask))


main = <span class="kwd">do</span> 
	(n :: <span class="kwb">Int</span>) &lt;- <span class="kwc">return</span>.<span class="kwc">read</span>.<span class="kwc">head</span> =&lt;&lt; <span class="kwc">getArgs</span>
	<span class="kwd">let</span> nsolutions = <span class="kwc">take</span> n solutions
	<span class="kwc">putStrLn</span> $ (<span class="kwc">show</span> $ <span class="kwa">length</span> nsolutions) ++ <span class="str">&quot; solutions found</span><span class="esc">\n</span><span class="str">&quot;</span>
	ps $ <span class="kwc">minimum</span> nsolutions
	<span class="kwc">putStr</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span>
	ps $ <span class="kwc">maximum</span> nsolutions
	<span class="kwc">putStr</span> <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span>
