<span class="com">(*</span>
<span class="com"> * The Computer Language Benchmarks Game</span>
<span class="com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * Contributed by Paolo Ribeca</span>
<span class="com"> *</span>
<span class="com"> * (Very loosely based on previous version Ocaml #3,</span>
<span class="com"> *  which had been contributed by</span>
<span class="com"> *   Christophe TROESTLER</span>
<span class="com"> *  and enhanced by</span>
<span class="com"> *   Christian Szegedy and Yaron Minsky)</span>
<span class="com"> *)</span>

<span class="kwa">let</span> niter = <span class="num">50</span>
<span class="kwa">let</span> limit = <span class="num">4</span>.

<span class="kwa">let</span> () =
  <span class="kwa">let</span> w = int_of_string (<span class="kwc">Array</span>.get <span class="kwc">Sys</span>.argv <span class="num">1</span>) <span class="kwa">in</span>
  <span class="kwa">let</span> h = w <span class="kwa">in</span>
  <span class="kwa">let</span> fw = <span class="kwb">float</span> w /. <span class="num">2</span>. <span class="kwa">and</span> fh = <span class="kwb">float</span> h /. <span class="num">2</span>. <span class="kwa">in</span>
  <span class="kwc">Printf</span>.printf <span class="str">&quot;P4</span><span class="esc">\n</span><span class="str"></span><span class="ipl">%i %i</span><span class="str"></span><span class="esc">\n</span><span class="str">&quot;</span> w h;
  <span class="kwa">let</span> red_h = h - <span class="num">1</span> <span class="kwa">and</span> red_w = w - <span class="num">1</span> <span class="kwa">and</span> byte = <span class="kwb">ref</span> <span class="num">0</span> <span class="kwa">in</span>
  <span class="kwa">for</span> y = <span class="num">0</span> <span class="kwa">to</span> red_h <span class="kwa">do</span>
    <span class="kwa">let</span> ci = <span class="kwb">float</span> y /. fh -. <span class="num">1</span>. <span class="kwa">in</span>
    <span class="kwa">for</span> x = <span class="num">0</span> <span class="kwa">to</span> red_w <span class="kwa">do</span>
      <span class="kwa">let</span> cr = <span class="kwb">float</span> x /. fw -. <span class="num">1.5</span>
      <span class="kwa">and</span> zr = <span class="kwb">ref</span> <span class="num">0</span>. <span class="kwa">and</span> zi = <span class="kwb">ref</span> <span class="num">0</span>. <span class="kwa">and</span> trmti = <span class="kwb">ref</span> <span class="num">0</span>. <span class="kwa">and</span> n = <span class="kwb">ref</span> <span class="num">0</span> <span class="kwa">in</span>
      <span class="kwa">begin try</span>
	<span class="kwa">while true do</span>
	  zi := <span class="num">2</span>. *. !zr *. !zi +. ci;
	  zr := !trmti +. cr;
	  <span class="kwa">let</span> tr = !zr *. !zr <span class="kwa">and</span> ti = !zi *. !zi <span class="kwa">in</span>
	  <span class="kwa">if</span> tr +. ti &gt; limit <span class="kwa">then begin</span>
	    byte := !byte <span class="kwa">lsl</span> <span class="num">1</span>;
	    raise <span class="kwd">Exit</span>
	  <span class="kwa">end else if</span> incr n; !n = niter <span class="kwa">then begin</span>
	    byte := (!byte <span class="kwa">lsl</span> <span class="num">1</span>) <span class="kwa">lor</span> <span class="num">0x01</span>;
	    raise <span class="kwd">Exit</span>
	  <span class="kwa">end else</span>
	    trmti := tr -. ti
	<span class="kwa">done</span>
      <span class="kwa">with</span> <span class="kwd">Exit</span> -&gt; ()
      <span class="kwa">end</span>;
      <span class="kwa">if</span> x <span class="kwa">mod</span> <span class="num">8</span> = <span class="num">7</span> <span class="kwa">then</span> output_byte stdout !byte
    <span class="kwa">done</span>;
    <span class="kwa">let</span> rem = w <span class="kwa">mod</span> <span class="num">8</span> <span class="kwa">in</span>
    <span class="kwa">if</span> rem != <span class="num">0</span> <span class="kwa">then</span> <span class="com">(* the row doesnt divide evenly by 8 *)</span>
      output_byte stdout (!byte <span class="kwa">lsl</span> (<span class="num">8</span> - rem)) <span class="com">(* output last few bits *)</span>
  <span class="kwa">done</span>
