<span class="com">/* The Computer Language Benchmarks Game</span>
<span class="com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * Contributed by Mr Ledrug</span>
<span class="com">*/</span>

<span class="ppc">#include &lt;stdio.h&gt;</span>
<span class="ppc">#include &lt;stdlib.h&gt;</span>
<span class="ppc">#include &lt;gmp.h&gt;</span>

mpz_t tmp1, tmp2, acc, den, num;
<span class="kwc">typedef</span> <span class="kwb">unsigned int</span> ui;

ui <span class="kwd">extract_digit</span>(ui nth) {
   <span class="slc">// joggling between tmp1 and tmp2, so GMP won't have to use temp buffers</span>
   <span class="kwd">mpz_mul_ui</span>(tmp1, num, nth);
   <span class="kwd">mpz_add</span>(tmp2, tmp1, acc);
   <span class="kwd">mpz_tdiv_q</span>(tmp1, tmp2, den);

   <span class="kwa">return</span> <span class="kwd">mpz_get_ui</span>(tmp1);
}

<span class="kwb">void</span> <span class="kwd">eliminate_digit</span>(ui d) {
   <span class="kwd">mpz_submul_ui</span>(acc, den, d);
   <span class="kwd">mpz_mul_ui</span>(acc, acc, <span class="num">10</span>);
   <span class="kwd">mpz_mul_ui</span>(num, num, <span class="num">10</span>);
}

<span class="kwb">void</span> <span class="kwd">next_term</span>(ui k) {
   ui k2 = k * <span class="num">2U</span> + <span class="num">1U</span>;

   <span class="kwd">mpz_addmul_ui</span>(acc, num, <span class="num">2U</span>);
   <span class="kwd">mpz_mul_ui</span>(acc, acc, k2);
   <span class="kwd">mpz_mul_ui</span>(den, den, k2);
   <span class="kwd">mpz_mul_ui</span>(num, num, k);
}

<span class="kwb">int</span> <span class="kwd">main</span>(<span class="kwb">int</span> argc, <span class="kwb">char</span> **argv) {
   ui d, k, i;
   <span class="kwb">int</span> n = <span class="kwd">atoi</span>(argv[<span class="num">1</span>]);

   <span class="kwd">mpz_init</span>(tmp1);
   <span class="kwd">mpz_init</span>(tmp2);

   <span class="kwd">mpz_init_set_ui</span>(acc, <span class="num">0</span>);
   <span class="kwd">mpz_init_set_ui</span>(den, <span class="num">1</span>);
   <span class="kwd">mpz_init_set_ui</span>(num, <span class="num">1</span>);

   <span class="kwa">for</span> (i = k = <span class="num">0</span>; i &lt; n;) {
      <span class="kwd">next_term</span>(++k);
      <span class="kwa">if</span> (<span class="kwd">mpz_cmp</span>(num, acc) &gt; <span class="num">0</span>)
         <span class="kwa">continue</span>;

      d = <span class="kwd">extract_digit</span>(<span class="num">3</span>);
      <span class="kwa">if</span> (d != <span class="kwd">extract_digit</span>(<span class="num">4</span>))
         <span class="kwa">continue</span>;

      <span class="kwd">putchar</span>(<span class="str">'0'</span> + d);
      <span class="kwa">if</span> (++i % <span class="num">10</span> == <span class="num">0</span>)
         <span class="kwd">printf</span>(<span class="str">&quot;</span><span class="esc">\t</span><span class="str">:%u</span><span class="esc">\n</span><span class="str">&quot;</span>, i);
      <span class="kwd">eliminate_digit</span>(d);
   }

   <span class="kwa">return</span> <span class="num">0</span>;
}
