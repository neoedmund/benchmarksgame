<span class="slc">#  The Computer Language Benchmarks Game</span>
<span class="slc">#  http://benchmarksgame.alioth.debian.org/</span>
<span class="slc">#</span>
<span class="slc">#  contributed by Karl von Laudermann</span>
<span class="slc">#  modified by Jeremy Echols</span>
<span class="slc">#  modified by Detlef Reichl</span>
<span class="slc">#  modified by Joseph LaFata</span>
<span class="slc">#  modified by Peter Zotov</span>

size = <span class="kwc">ARGV</span>.shift.to_i

puts <span class="str">&quot;P4</span><span class="esc">\n</span><span class="str"></span><span class="ipl">#{size}</span> <span class="str"></span><span class="ipl">#{size}</span><span class="str">&quot;</span>

byte_acc = <span class="num">0</span>
bit_num = <span class="num">0</span>

y = <span class="num">0</span>
<span class="kwa">while</span> y &lt; size
  ci = (<span class="num">2.0</span>*y/size<span class="opt">)</span>-<span class="num">1.0</span>

  x = <span class="num">0</span>
  <span class="kwa">while</span> x &lt; size
    zrzr = zr = <span class="num">0.0</span>
    zizi = zi = <span class="num">0.0</span>
    cr = (<span class="num">2.0</span>*x/size<span class="opt">)</span>-<span class="num">1.5</span>
    escape = <span class="num">0b1</span>

    z = <span class="num">0</span>
    <span class="kwa">while</span> z &lt; <span class="num">50</span>
      tr = zrzr - zizi + cr
      ti = <span class="num">2.0</span>*zr*zi + ci
      zr = tr
      zi = ti
      <span class="slc"># preserve recalculation</span>
      zrzr = zr*zr
      zizi = zi*zi
      <span class="kwa">if</span> zrzr+zizi &gt; <span class="num">4.0</span>
        escape = <span class="num">0b0</span>
        <span class="kwa">break</span>
      <span class="kwa">end</span>
      z += <span class="num">1</span>
    <span class="kwa">end</span>

    byte_acc = (byte_acc &lt;&lt; <span class="num">1</span><span class="opt">)</span> | escape
    bit_num += <span class="num">1</span>

    <span class="slc"># Code is very similar for these cases, but using separate blocks</span>
    <span class="slc"># ensures we skip the shifting when it's unnecessary, which is most cases.</span>
    <span class="kwa">if</span> (bit_num == <span class="num">8</span><span class="opt">)</span>
      print byte_acc.chr
      byte_acc = <span class="num">0</span>
      bit_num = <span class="num">0</span>
    <span class="kwa">elsif</span> (x == size - <span class="num">1</span><span class="opt">)</span>
      byte_acc &lt;&lt;= (<span class="num">8</span> - bit_num<span class="opt">)</span>
      print byte_acc.chr
      byte_acc = <span class="num">0</span>
      bit_num = <span class="num">0</span>
    <span class="kwa">end</span>
    x += <span class="num">1</span>
  <span class="kwa">end</span>
  y += <span class="num">1</span>
<span class="kwa">end</span>
