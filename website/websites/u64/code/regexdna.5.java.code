<span class="com">/*</span>
<span class="com">   The Computer Language Benchmarks Game</span>
<span class="com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="com">   contributed by Michael Stover</span>
<span class="com"> */</span>

<span class="kwa">import</span> java.io.BufferedReader;
<span class="kwa">import</span> java.io.IOException;
<span class="kwa">import</span> java.io.InputStreamReader;
<span class="kwa">import</span> java.util.HashMap;
<span class="kwa">import</span> java.util.Map;
<span class="kwa">import</span> java.util.regex.Matcher;
<span class="kwa">import</span> java.util.regex.Pattern;

<span class="kwa">public final class</span> regexdna {

   <span class="kwa">private static final</span> Map&lt;String, String&gt; replacements = <span class="kwa">new</span> HashMap&lt;String, String&gt;();

   <span class="kwa">static</span> {

      replacements.<span class="kwd">put</span>(<span class="str">&quot;W&quot;</span>, <span class="str">&quot;(a|t)&quot;</span>);
      replacements.<span class="kwd">put</span>(<span class="str">&quot;Y&quot;</span>, <span class="str">&quot;(c|t)&quot;</span>);
      replacements.<span class="kwd">put</span>(<span class="str">&quot;K&quot;</span>, <span class="str">&quot;(g|t)&quot;</span>);
      replacements.<span class="kwd">put</span>(<span class="str">&quot;M&quot;</span>, <span class="str">&quot;(a|c)&quot;</span>);
      replacements.<span class="kwd">put</span>(<span class="str">&quot;S&quot;</span>, <span class="str">&quot;(c|g)&quot;</span>);
      replacements.<span class="kwd">put</span>(<span class="str">&quot;R&quot;</span>, <span class="str">&quot;(a|g)&quot;</span>);
      replacements.<span class="kwd">put</span>(<span class="str">&quot;B&quot;</span>, <span class="str">&quot;(c|g|t)&quot;</span>);
      replacements.<span class="kwd">put</span>(<span class="str">&quot;D&quot;</span>, <span class="str">&quot;(a|g|t)&quot;</span>);
      replacements.<span class="kwd">put</span>(<span class="str">&quot;V&quot;</span>, <span class="str">&quot;(a|c|g)&quot;</span>);
      replacements.<span class="kwd">put</span>(<span class="str">&quot;H&quot;</span>, <span class="str">&quot;(a|c|t)&quot;</span>);
      replacements.<span class="kwd">put</span>(<span class="str">&quot;N&quot;</span>, <span class="str">&quot;(a|c|g|t)&quot;</span>);
   }

   <span class="kwa">public static</span> <span class="kwb">void</span> <span class="kwd">main</span>(String[] args) <span class="kwa">throws</span> IOException {
      BufferedReader r = <span class="kwa">new</span> <span class="kwd">BufferedReader</span>(<span class="kwa">new</span> <span class="kwd">InputStreamReader</span>(System.<span class="kwa">in</span>,
            <span class="str">&quot;US-ASCII&quot;</span>));
      StringBuffer sb = <span class="kwa">new</span> <span class="kwd">StringBuffer</span>();
      String line;
      <span class="kwa">while</span> ((line = r.<span class="kwd">readLine</span>()) != null) {
         sb.<span class="kwd">append</span>(line);
         sb.<span class="kwd">append</span>(<span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span>);
      }

      <span class="kwb">int</span> initialLength = sb.<span class="kwd">length</span>();

      <span class="kwa">final</span> String sequence = sb.<span class="kwd">toString</span>().<span class="kwd">replaceAll</span>(<span class="str">&quot;&gt;.*</span><span class="esc">\n</span><span class="str">|</span><span class="esc">\n</span><span class="str">&quot;</span>, <span class="str">&quot;&quot;</span>);

      <span class="kwb">int</span> codeLength = sequence.<span class="kwd">length</span>();

      String[] variants = { <span class="str">&quot;agggtaaa|tttaccct&quot;</span>, <span class="str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span>,
            <span class="str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span>, <span class="str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span>,
            <span class="str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span>, <span class="str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span>,
            <span class="str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span>, <span class="str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span>,
            <span class="str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span> };

      <span class="kwa">final</span> Map&lt;String, Integer&gt; results = <span class="kwa">new</span> HashMap&lt;String, Integer&gt;();
      ThreadGroup tg = <span class="kwa">new</span> <span class="kwd">ThreadGroup</span>(<span class="str">&quot;regexWork&quot;</span>);
      <span class="kwa">for</span> (String v : variants) {
         <span class="kwa">final</span> String variant = v;
         <span class="kwa">new</span> <span class="kwd">Thread</span>(tg, v) {
            <span class="kwc">&#64;Override</span>
            <span class="kwa">public</span> <span class="kwb">void</span> <span class="kwd">run</span>() {
               <span class="kwb">int</span> count = <span class="num">0</span>;
               Matcher m = Pattern.<span class="kwd">compile</span>(variant).<span class="kwd">matcher</span>(sequence);
               <span class="kwa">while</span> (m.<span class="kwd">find</span>()) {
                  count++;
               }
               results.<span class="kwd">put</span>(variant, count);
            }
         }.<span class="kwd">start</span>();
      }
      Thread[] threads = <span class="kwa">new</span> Thread[variants.length];
      tg.<span class="kwd">enumerate</span>(threads);
      <span class="kwa">for</span> (Thread t : threads) {
         <span class="kwa">try</span> {
            <span class="kwa">if</span> (t != null) {
               t.<span class="kwd">join</span>();
            }
         } <span class="kwa">catch</span> (InterruptedException e) {
            <span class="slc">// noop</span>
         }
      }
      tg.<span class="kwd">destroy</span>();
      <span class="kwa">for</span> (String variant : variants) {
         System.out.<span class="kwd">println</span>(variant + <span class="str">&quot; &quot;</span> + results.<span class="kwd">get</span>(variant));
      }
      StringBuffer buf = <span class="kwa">new</span> <span class="kwd">StringBuffer</span>();
      Matcher m = Pattern.<span class="kwd">compile</span>(<span class="str">&quot;[WYKMSRBDVHN]&quot;</span>).<span class="kwd">matcher</span>(sequence);
      <span class="kwa">while</span> (m.<span class="kwd">find</span>()) {
         m.<span class="kwd">appendReplacement</span>(buf, <span class="str">&quot;&quot;</span>);
         buf.<span class="kwd">append</span>(replacements.<span class="kwd">get</span>(m.<span class="kwd">group</span>()));
      }
      m.<span class="kwd">appendTail</span>(buf);

      System.out.<span class="kwd">println</span>();
      System.out.<span class="kwd">println</span>(initialLength);
      System.out.<span class="kwd">println</span>(codeLength);
      System.out.<span class="kwd">println</span>(buf.<span class="kwd">length</span>());
   }
}
