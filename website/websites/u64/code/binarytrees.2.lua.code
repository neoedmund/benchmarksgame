<span class="slc">-- The Computer Language Benchmarks Game</span>
<span class="slc">-- http://benchmarksgame.alioth.debian.org/</span>
<span class="slc">-- contributed by Mike Pall</span>

<span class="kwa">local function</span> <span class="kwd">BottomUpTree</span>(item, depth)
  <span class="kwa">if</span> depth &gt; <span class="num">0</span> <span class="kwa">then</span>
    <span class="kwa">local</span> i = item + item
    depth = depth - <span class="num">1</span>
    <span class="kwa">local</span> left, right = <span class="kwd">BottomUpTree</span>(i-<span class="num">1</span>, depth), <span class="kwd">BottomUpTree</span>(i, depth)
    <span class="kwa">return</span> { item, left, right }
  <span class="kwa">else</span>
    <span class="kwa">return</span> { item }
  <span class="kwa">end</span>
<span class="kwa">end</span>

<span class="kwa">local function</span> <span class="kwd">ItemCheck</span>(tree)
  <span class="kwa">if</span> tree[<span class="num">2</span>] <span class="kwa">then</span>
    <span class="kwa">return</span> tree[<span class="num">1</span>] + <span class="kwd">ItemCheck</span>(tree[<span class="num">2</span>]) - <span class="kwd">ItemCheck</span>(tree[<span class="num">3</span>])
  <span class="kwa">else</span>
    <span class="kwa">return</span> tree[<span class="num">1</span>]
  <span class="kwa">end</span>
<span class="kwa">end</span>

<span class="kwa">local</span> N = <span class="kwb">tonumber</span>(arg <span class="kwa">and</span> arg[<span class="num">1</span>]) <span class="kwa">or</span> <span class="num">0</span>
<span class="kwa">local</span> mindepth = <span class="num">4</span>
<span class="kwa">local</span> maxdepth = mindepth + <span class="num">2</span>
<span class="kwa">if</span> maxdepth &lt; N <span class="kwa">then</span> maxdepth = N <span class="kwa">end</span>

<span class="kwa">do</span>
  <span class="kwa">local</span> stretchdepth = maxdepth + <span class="num">1</span>
  <span class="kwa">local</span> stretchtree = <span class="kwd">BottomUpTree</span>(<span class="num">0</span>, stretchdepth)
  io.<span class="kwb">write</span>(<span class="kwb">string</span>.<span class="kwb">format</span>(<span class="str">&quot;stretch tree of depth %d</span><span class="esc">\t</span> <span class="str">check: %d</span><span class="esc">\n</span><span class="str">&quot;</span>,
    stretchdepth, <span class="kwd">ItemCheck</span>(stretchtree)))
<span class="kwa">end</span>

<span class="kwa">local</span> longlivedtree = <span class="kwd">BottomUpTree</span>(<span class="num">0</span>, maxdepth)

<span class="kwa">for</span> depth=mindepth,maxdepth,<span class="num">2</span> <span class="kwa">do</span>
  <span class="kwa">local</span> iterations = <span class="num">2</span> ^ (maxdepth - depth + mindepth)
  <span class="kwa">local</span> check = <span class="num">0</span>
  <span class="kwa">for</span> i=<span class="num">1</span>,iterations <span class="kwa">do</span>
    check = check + <span class="kwd">ItemCheck</span>(<span class="kwd">BottomUpTree</span>(<span class="num">1</span>, depth)) +
            <span class="kwd">ItemCheck</span>(<span class="kwd">BottomUpTree</span>(-<span class="num">1</span>, depth))
  <span class="kwa">end</span>
  io.<span class="kwb">write</span>(<span class="kwb">string</span>.<span class="kwb">format</span>(<span class="str">&quot;%d</span><span class="esc">\t</span> <span class="str">trees of depth %d</span><span class="esc">\t</span> <span class="str">check: %d</span><span class="esc">\n</span><span class="str">&quot;</span>,
    iterations*<span class="num">2</span>, depth, check))
<span class="kwa">end</span>

io.<span class="kwb">write</span>(<span class="kwb">string</span>.<span class="kwb">format</span>(<span class="str">&quot;long lived tree of depth %d</span><span class="esc">\t</span> <span class="str">check: %d</span><span class="esc">\n</span><span class="str">&quot;</span>,
  maxdepth, <span class="kwd">ItemCheck</span>(longlivedtree)))
