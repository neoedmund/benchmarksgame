<span class="com">/* The Computer Language Benchmarks Game</span>
<span class="com">   http://benchmarksgame.alioth.debian.org/ </span>
<span class="com"></span>
<span class="com">   contributed by Marek Safar  </span>
<span class="com">*/</span>

<span class="kwa">using</span> System;

<span class="kwa">class</span> BinaryTrees
{
   <span class="kwb">const int</span> minDepth = <span class="num">4</span>;

   <span class="kwa">public static</span> <span class="kwb">void</span> <span class="kwd">Main</span>(String[] args)
   {
      <span class="kwb">int</span> n = <span class="num">0</span>;
      <span class="kwa">if</span> (args.Length &gt; <span class="num">0</span>) n = Int32.<span class="kwd">Parse</span>(args[<span class="num">0</span>]);

      <span class="kwb">int</span> maxDepth = Math.<span class="kwd">Max</span>(minDepth + <span class="num">2</span>, n);
      <span class="kwb">int</span> stretchDepth = maxDepth + <span class="num">1</span>;

      <span class="kwb">int</span> check = (TreeNode.<span class="kwd">bottomUpTree</span>(<span class="num">0</span>,stretchDepth)).<span class="kwd">itemCheck</span>();
      Console.<span class="kwd">WriteLine</span>(<span class="str">&quot;stretch tree of depth</span> <span class="ipl">{0}</span><span class="str"></span><span class="esc">\t</span> <span class="str">check:</span> <span class="ipl">{1}</span><span class="str">&quot;</span>, stretchDepth, check);

      TreeNode longLivedTree = TreeNode.<span class="kwd">bottomUpTree</span>(<span class="num">0</span>,maxDepth);

      <span class="kwa">for</span> (<span class="kwb">int</span> depth=minDepth; depth&lt;=maxDepth; depth+=<span class="num">2</span>){
         <span class="kwb">int</span> iterations = <span class="num">1</span> &lt;&lt; (maxDepth - depth + minDepth);

         check = <span class="num">0</span>;
         <span class="kwa">for</span> (<span class="kwb">int</span> i=<span class="num">1</span>; i&lt;=iterations; i++)
         {
            check += (TreeNode.<span class="kwd">bottomUpTree</span>(i,depth)).<span class="kwd">itemCheck</span>();
            check += (TreeNode.<span class="kwd">bottomUpTree</span>(-i,depth)).<span class="kwd">itemCheck</span>();
         }

         Console.<span class="kwd">WriteLine</span>(<span class="str">&quot;</span><span class="ipl">{0}</span><span class="str"></span><span class="esc">\t</span> <span class="str">trees of depth</span> <span class="ipl">{1}</span><span class="str"></span><span class="esc">\t</span> <span class="str">check:</span> <span class="ipl">{2}</span><span class="str">&quot;</span>,
            iterations*<span class="num">2</span>, depth, check);
      }

      Console.<span class="kwd">WriteLine</span>(<span class="str">&quot;long lived tree of depth</span> <span class="ipl">{0}</span><span class="str"></span><span class="esc">\t</span> <span class="str">check:</span> <span class="ipl">{1}</span><span class="str">&quot;</span>,
         maxDepth, longLivedTree.<span class="kwd">itemCheck</span>());
   }


   <span class="kwb">struct</span> TreeNode
   {
      <span class="kwa">class</span> Next
   	  {
	      <span class="kwa">public</span> TreeNode left, right;
      }
   	
      <span class="kwa">private</span> Next next;
      <span class="kwa">private</span> <span class="kwb">int</span> item;

      <span class="kwd">TreeNode</span>(<span class="kwb">int</span> item){
         <span class="kwa">this</span>.item = item;
         <span class="kwa">this</span>.next = <span class="kwa">null</span>;
      }

      <span class="kwa">internal static</span> TreeNode <span class="kwd">bottomUpTree</span>(<span class="kwb">int</span> item, <span class="kwb">int</span> depth){
         <span class="kwa">if</span> (depth&gt;<span class="num">0</span>){
            <span class="kwa">return new</span> <span class="kwd">TreeNode</span>(
                 <span class="kwd">bottomUpTree</span>(<span class="num">2</span>*item-<span class="num">1</span>, depth-<span class="num">1</span>)
               , <span class="kwd">bottomUpTree</span>(<span class="num">2</span>*item, depth-<span class="num">1</span>)
               , item
               );
         }
         <span class="kwa">else</span> {
            <span class="kwa">return new</span> <span class="kwd">TreeNode</span>(item);
         }
      }

      <span class="kwd">TreeNode</span>(TreeNode left, TreeNode right, <span class="kwb">int</span> item){
      	 <span class="kwa">this</span>.next = <span class="kwa">new</span> <span class="kwd">Next</span> ();
         <span class="kwa">this</span>.next.left = left;
         <span class="kwa">this</span>.next.right = right;
         <span class="kwa">this</span>.item = item;
      }

      <span class="kwa">internal</span> <span class="kwb">int</span> <span class="kwd">itemCheck</span>(){
         <span class="slc">// if necessary deallocate here</span>
         <span class="kwa">if</span> (next==<span class="kwa">null</span>) <span class="kwa">return</span> item;
         <span class="kwa">else return</span> item + next.left.<span class="kwd">itemCheck</span>() - next.right.<span class="kwd">itemCheck</span>();
      }
   }
}
