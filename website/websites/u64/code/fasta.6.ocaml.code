<span class="com">(* The Computer Language Benchmarks Game</span>
<span class="com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * contributed by Troestler Christophe</span>
<span class="com"> * modified by Mauricio Fernandez</span>
<span class="com"> * modified by Fabrice Le Fessant</span>
<span class="com"> *)</span>

<span class="com">(* Random number generator *)</span>


<span class="kwa">let</span> im = <span class="num">139968</span>
<span class="kwa">let</span> ia = <span class="num">3877</span>
<span class="kwa">let</span> ic = <span class="num">29573</span>
<span class="kwa">let</span> width = <span class="num">60</span>
<span class="kwa">let</span> im_inv_f = <span class="num">1</span>. /. <span class="kwb">float</span> im

<span class="kwa">let</span> rand_char last ps line j chars =
  <span class="kwa">let</span> n = (last * ia + ic) <span class="kwa">mod</span> im <span class="kwa">in</span>
  <span class="kwa">let</span> p = <span class="kwb">float</span> n *. im_inv_f <span class="kwa">in</span>
  <span class="kwa">let</span> len = <span class="kwc">Array</span>.length ps <span class="kwa">in</span>
  <span class="kwa">let</span> i = len/<span class="num">2</span> <span class="kwa">in</span>
  <span class="kwa">let</span> i =
  <span class="kwa">if</span> p &gt;= ps.(i) <span class="kwa">then</span>
    <span class="kwa">let</span> i = <span class="kwb">ref</span> (i+<span class="num">1</span>) <span class="kwa">in</span>
    <span class="kwa">while</span> p &gt;= ps.(!i) <span class="kwa">do</span> incr i <span class="kwa">done</span>;
    !i
  <span class="kwa">else</span>
    <span class="kwa">let</span> i = <span class="kwb">ref</span> <span class="num">0</span> <span class="kwa">in</span>
    <span class="kwa">while</span> p &gt;= ps.(!i) <span class="kwa">do</span> incr i <span class="kwa">done</span>;
    !i
  <span class="kwa">in</span>
  line.[j] &lt;- chars.(i);
  n

<span class="kwa">let</span> make_random_fasta last id desc table n =
  print_char '&gt;'; print_string id;
  print_char ' '; print_string desc;
  print_char '<span class="esc">\n</span>';
  <span class="kwa">let</span> len_table = <span class="kwc">Array</span>.length table <span class="kwa">in</span>
  <span class="kwa">let</span> ps = <span class="kwc">Array</span>.create len_table <span class="num">0</span>. <span class="kwa">in</span>
  <span class="kwa">let</span> chars = <span class="kwc">Array</span>.create len_table '<span class="esc">\000</span>' <span class="kwa">in</span>
  <span class="kwa">let</span> p = <span class="kwb">ref</span> <span class="num">0.0</span> <span class="kwa">in</span>
  <span class="kwa">for</span> i = <span class="num">0</span> <span class="kwa">to</span> len_table -<span class="num">1</span> <span class="kwa">do</span>
    <span class="kwa">let</span> (c, px) = table.(i) <span class="kwa">in</span>
    chars.(i) &lt;- c;
    p := !p +. px;
    ps.(i) &lt;- !p;
  <span class="kwa">done</span>;
  <span class="kwa">let</span> nlines = (n + width - <span class="num">1</span>) / width <span class="kwa">in</span>
  <span class="kwa">let</span> nchars = n + nlines <span class="kwa">in</span>
  <span class="kwa">let</span> line = <span class="kwc">String</span>.create nchars <span class="kwa">in</span>
  <span class="kwa">let</span> last_n = <span class="kwb">ref</span> last <span class="kwa">in</span>
  <span class="kwa">let</span> pos = <span class="kwb">ref</span> <span class="num">0</span> <span class="kwa">in</span>
  <span class="kwa">for</span> i = <span class="num">1</span> <span class="kwa">to</span> nlines-<span class="num">1</span> <span class="kwa">do</span>
    <span class="kwa">let</span> current_pos = !pos <span class="kwa">in</span>
    <span class="kwa">let</span> final_pos = current_pos + width-<span class="num">1</span> <span class="kwa">in</span>
    <span class="kwa">for</span> j = current_pos <span class="kwa">to</span> final_pos <span class="kwa">do</span>
      last_n := rand_char !last_n ps line j chars;
    <span class="kwa">done</span>;
    pos := final_pos + <span class="num">2</span>;
    line.[final_pos+<span class="num">1</span>] &lt;- '<span class="esc">\n</span>';
  <span class="kwa">done</span>;
  <span class="kwa">for</span> j = !pos <span class="kwa">to</span> nchars - <span class="num">2</span> <span class="kwa">do</span>
    last_n := rand_char !last_n ps line j chars;
  <span class="kwa">done</span>;
  line.[nchars-<span class="num">1</span>] &lt;- '<span class="esc">\n</span>';
  output_string stdout line;
  !last_n

<span class="com">(* [write s i0 l w] outputs [w] chars of [s.[0 .. l]], followed by a</span>
<span class="com">   newline, starting with [s.[i0]] and considering the substring [s.[0</span>
<span class="com">   .. l]] as a &quot;circle&quot;.</span>
<span class="com">   One assumes [0 &lt;= i0 &lt;= l &lt;= String.length s].</span>
<span class="com">   &#64;return [i0] needed for subsequent writes.  *)</span>
<span class="kwa">let rec</span> write s i0 l w =
  <span class="kwa">let</span> len = l - i0 <span class="kwa">in</span>
  <span class="kwa">if</span> w &lt;= len <span class="kwa">then</span> (output stdout s i0 w; print_char '<span class="esc">\n</span>'; i0 + w)
  <span class="kwa">else</span> (output stdout s i0 len; write s <span class="num">0</span> l (w - len))

<span class="kwa">let</span> make_repeat_fasta id desc src n =
  print_char '&gt;';
  print_string id;
  print_char ' ';
  print_string desc;
  print_char '<span class="esc">\n</span>';
  <span class="kwa">let</span> l = <span class="kwc">String</span>.length src
  <span class="kwa">and</span> i0 = <span class="kwb">ref</span> <span class="num">0</span> <span class="kwa">in</span>
  <span class="kwa">for</span> i = <span class="num">1</span> <span class="kwa">to</span> n / width <span class="kwa">do</span>
    i0 := write src !i0 l width;
  <span class="kwa">done</span>;
  <span class="kwa">let</span> w = n <span class="kwa">mod</span> width <span class="kwa">in</span>
  <span class="kwa">if</span> w &gt; <span class="num">0</span> <span class="kwa">then</span> ignore(write src !i0 l w)


<span class="kwa">let</span> alu = <span class="str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG\</span>
<span class="str">GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA\</span>
<span class="str">CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT\</span>
<span class="str">ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA\</span>
<span class="str">GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG\</span>
<span class="str">AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC\</span>
<span class="str">AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span>

<span class="kwa">let</span> iub = [| ('a', <span class="num">0.27</span>);  ('c', <span class="num">0.12</span>);  ('g', <span class="num">0.12</span>);  ('t', <span class="num">0.27</span>);
	     ('<span class="kwd">B</span>', <span class="num">0.02</span>);  ('<span class="kwd">D</span>', <span class="num">0.02</span>);  ('<span class="kwd">H</span>', <span class="num">0.02</span>);  ('<span class="kwd">K</span>', <span class="num">0.02</span>);
	     ('<span class="kwd">M</span>', <span class="num">0.02</span>);  ('<span class="kwd">N</span>', <span class="num">0.02</span>);  ('<span class="kwd">R</span>', <span class="num">0.02</span>);  ('<span class="kwd">S</span>', <span class="num">0.02</span>);
	     ('<span class="kwd">V</span>', <span class="num">0.02</span>);  ('<span class="kwd">W</span>', <span class="num">0.02</span>);  ('<span class="kwd">Y</span>', <span class="num">0.02</span>);  |]

<span class="kwa">let</span> homosapiens = [| ('a', <span class="num">0.3029549426680</span>);    ('c', <span class="num">0.1979883004921</span>);
		     ('g', <span class="num">0.1975473066391</span>);    ('t', <span class="num">0.3015094502008</span>);  |]

<span class="kwa">let</span> () =
  <span class="kwa">let</span> n = <span class="kwa">try</span> int_of_string(<span class="kwc">Array</span>.get <span class="kwc">Sys</span>.argv <span class="num">1</span>) <span class="kwa">with</span> _ -&gt; <span class="num">1000</span> <span class="kwa">in</span>
  make_repeat_fasta <span class="str">&quot;ONE&quot;</span> <span class="str">&quot;Homo sapiens alu&quot;</span> alu (n*<span class="num">2</span>);
  <span class="kwa">let</span> last = <span class="num">42</span> <span class="kwa">in</span>
  <span class="kwa">let</span> last = make_random_fasta last <span class="str">&quot;TWO&quot;</span> <span class="str">&quot;IUB ambiguity codes&quot;</span> iub (n*<span class="num">3</span>) <span class="kwa">in</span>
  <span class="kwa">let</span> _last =
    make_random_fasta last <span class="str">&quot;THREE&quot;</span> <span class="str">&quot;Homo sapiens frequency&quot;</span> homosapiens (n*<span class="num">5</span>)
  <span class="kwa">in</span>
  ()
