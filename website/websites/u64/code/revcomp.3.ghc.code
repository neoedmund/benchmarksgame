<span class="com">{-</span>
<span class="com">The Computer Language Benchmarks Game</span>
<span class="com">http://benchmarksgame.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">contributed by Louis Wasserman</span>
<span class="com">-}</span>

<span class="kwd">import</span> Control.Monad
<span class="kwd">import</span> Foreign
<span class="kwd">import</span> Data.ByteString.Internal
<span class="kwd">import</span> System.<span class="kwb">IO</span>

<span class="kwd">data</span> Buf = Buf !<span class="kwb">Int</span> !<span class="kwb">Int</span> !(Ptr Word8) 

withBuf run = run . Buf <span class="num">0</span> ini =&lt;&lt; mallocBytes ini
  <span class="kwd">where</span> ini = <span class="num">1024</span>

newSize len sz
  | len &lt;= sz  = sz
  | <span class="kwc">otherwise</span>  = newSize len (<span class="num">2</span> * sz)

<span class="com">{-# INLINE putBuf #-}</span>
putBuf pS lS (Buf lD szD pD) run
  | lD' &gt; szD  = <span class="kwd">do</span>
    <span class="kwd">let</span> szD' = newSize lD' szD
    pD' &lt;- reallocBytes pD szD'
    copyArray (pD' +* lD) pS lS
    run (Buf lD' szD' pD')
  | <span class="kwc">otherwise</span>  = <span class="kwd">do</span>
    copyArray (pD +* lD) pS lS
    run (Buf lD' szD pD)
  <span class="kwd">where</span> lD' = lD + lS

findChar p n c zero one = <span class="kwd">do</span>
    q &lt;- memchr p c (<span class="kwc">fromIntegral</span> (n :: <span class="kwb">Int</span>))
    <span class="kwd">if</span> q == nullPtr <span class="kwd">then</span> zero <span class="kwd">else</span> one $! q `minusPtr` p

clearBuf (Buf _ lB pB) = Buf <span class="num">0</span> lB pB

main = allocaArray <span class="num">82</span> $ \ line -&gt;
  <span class="kwd">let</span> go !buf = <span class="kwd">do</span>
      !m &lt;- hGetBuf <span class="kwc">stdin</span> line <span class="num">82</span>
      <span class="kwd">if</span> m == <span class="num">0</span> <span class="kwd">then</span> revcomp buf <span class="kwd">else do</span>
        findChar line m (c2w '&gt;') 
          (putBuf line m buf go)
          (\ end -&gt; <span class="kwd">do</span>
            putBuf line end buf revcomp
            putBuf (line +* end) (m - end) (clearBuf buf)
              go)
    <span class="kwd">in</span> withBuf go

(+*) = advancePtr

<span class="com">{-# INLINE comps #-}</span>
comps = Prelude.<span class="kwc">zipWith</span> (\ a b -&gt; (<span class="kwc">fromEnum</span> a, c2w b)) <span class="str">&quot;AaCcGgTtUuMmRrYyKkVvHhDdBb&quot;</span> 
  <span class="str">&quot;TTGGCCAAAAKKYYRRMMBBDDHHVV&quot;</span>

ca :: Ptr Word8
ca = inlinePerformIO $ <span class="kwd">do</span>
       !a &lt;- mallocArray <span class="num">200</span>
       <span class="kwc">mapM_</span> (\ i -&gt; pokeByteOff a (<span class="kwc">fromIntegral</span> i) i ) [<span class="num">0</span>.<span class="num">.199</span>::Word8]
       <span class="kwc">mapM_</span> (<span class="kwc">uncurry</span> (pokeByteOff a)) comps
       <span class="kwc">return</span> a

revcomp (Buf lBuf _ pBuf) = <span class="kwc">when</span> (lBuf &gt; <span class="num">0</span>) $ ca `<span class="kwc">seq</span>`
  findChar pBuf lBuf (c2w '<span class="esc">\n</span>') <span class="kwc">undefined</span> $ \ begin -&gt; <span class="kwd">let</span>
    begin' = begin + <span class="num">1</span>
    rc :: Ptr Word8 -&gt; Ptr Word8 -&gt; <span class="kwb">IO</span> ()
    rc !i !j | i &lt; j = <span class="kwd">do</span>
      x &lt;- peek i
      <span class="kwd">if</span> x == c2w '<span class="esc">\n</span>' <span class="kwd">then let</span> !i' = i +* <span class="num">1</span> <span class="kwd">in</span> rc1 j i' =&lt;&lt; peek i'
        <span class="kwd">else</span> rc1 j i x
    rc i j = <span class="kwc">when</span> (i == j) (poke i =&lt;&lt; comp =&lt;&lt; peek i)
    
    rc1 !j !i !xi = <span class="kwd">do</span>
      y &lt;- peek j
      <span class="kwd">if</span> y == c2w '<span class="esc">\n</span>' <span class="kwd">then let</span> !j' = j +* (-<span class="num">1</span>) <span class="kwd">in</span> rc2 i xi j' =&lt;&lt; peek j'
        <span class="kwd">else</span> rc2 i xi j y
    
    comp = peekElemOff ca . <span class="kwc">fromIntegral</span>
    
    rc2 !i !xi !j !xj = <span class="kwd">do</span>
      poke j =&lt;&lt; comp xi
      poke i =&lt;&lt; comp xj
      rc (i +* <span class="num">1</span>) (j +* (-<span class="num">1</span>))
    <span class="kwd">in do</span>
      hPutBuf <span class="kwc">stdout</span> pBuf begin'
      rc (pBuf +* begin') (pBuf +* (lBuf - <span class="num">1</span>))
      hPutBuf <span class="kwc">stdout</span> (pBuf +* begin') (lBuf - begin - <span class="num">1</span>)
