<span class="com">/* The Computer Language Benchmarks Game</span>
<span class="com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   Contributed by Branimir Maksimovic</span>
<span class="com">*/</span>

<span class="slc">// g++ 4.8.x bug, compile with: -Wl,--no-as-needed option </span>

<span class="ppc">#include &lt;iostream&gt;</span>
<span class="ppc">#include &lt;iomanip&gt;</span>
<span class="ppc">#include &lt;cstdint&gt;</span>
<span class="ppc">#include &lt;cstdio&gt;</span>
<span class="ppc">#include &lt;string&gt;</span>
<span class="ppc">#include &lt;cstring&gt;</span>
<span class="ppc">#include &lt;algorithm&gt;</span>
<span class="ppc">#include &lt;map&gt;</span>
<span class="ppc">#include &lt;ext/pb_ds/assoc_container.hpp&gt;</span>
<span class="ppc">#include &lt;future&gt;</span>
<span class="ppc">#include &lt;unistd.h&gt;</span>

<span class="kwb">unsigned char</span> tonum[<span class="num">256</span>],tochar[<span class="num">4</span>];
<span class="kwb">static void</span> <span class="kwd">init</span>()
{
   tonum[<span class="str">'A'</span>] = <span class="num">0</span>;
   tonum[<span class="str">'C'</span>] = <span class="num">1</span>;
   tonum[<span class="str">'T'</span>] = <span class="num">2</span>;
   tonum[<span class="str">'G'</span>] = <span class="num">3</span>;
   tochar[<span class="num">0</span>] = <span class="str">'A'</span>;
   tochar[<span class="num">1</span>] = <span class="str">'C'</span>;
   tochar[<span class="num">2</span>] = <span class="str">'T'</span>;
   tochar[<span class="num">3</span>] = <span class="str">'G'</span>;
}

<span class="kwb">struct</span> T{
   <span class="kwd">T</span>(<span class="kwb">const</span> std::string&amp; s = std::<span class="kwd">string</span>())
   :<span class="kwd">data</span>(<span class="num">0</span>),<span class="kwd">size</span>(s.<span class="kwd">size</span>())
   {
      <span class="kwd">reset</span>(s,<span class="num">0</span>,s.<span class="kwd">size</span>());
   }
   <span class="kwb">void</span> <span class="kwd">reset</span>(<span class="kwb">const</span> std::string&amp; s,<span class="kwb">unsigned</span> beg,<span class="kwb">unsigned</span> end)
   {
      size = end-beg;
      data = <span class="num">0</span>;
      <span class="kwa">for</span>(<span class="kwb">unsigned</span> i = beg; i != end; ++i)
      {
         data &lt;&lt;= <span class="num">2</span>;
         data |= tonum[<span class="kwb">unsigned</span>(s[i])];
      }
   }
   <span class="kwb">bool</span> <span class="kwc">operator</span>&lt;(<span class="kwb">const</span> T&amp; in)<span class="kwb">const</span>
   {
      <span class="kwa">return</span> data &lt; in.data;
   }
   <span class="kwb">bool</span> <span class="kwc">operator</span>==(<span class="kwb">const</span> T&amp; in)<span class="kwb">const</span>
   {
      <span class="kwa">return</span> data == in.data;
   }
   <span class="kwc">operator</span> std::<span class="kwd">string</span>()<span class="kwb">const</span>
   {
      std::string tmp;
      <span class="kwb">uint64_t</span> tmp1 = data;
      <span class="kwa">for</span>(<span class="kwb">unsigned</span> i = <span class="num">0</span>;i!=size;++i)
      {
         tmp+=tochar[tmp1 &amp; <span class="num">3</span>];
         tmp1 &gt;&gt;= <span class="num">2</span>;
      }
      std::<span class="kwd">reverse</span>(tmp.<span class="kwd">begin</span>(),tmp.<span class="kwd">end</span>());
      <span class="kwa">return</span> tmp;
   }
   <span class="kwb">struct</span> hash{
   <span class="kwb">uint64_t</span> <span class="kwc">operator</span>()(<span class="kwb">const</span> T&amp; t)<span class="kwb">const</span>{ <span class="kwa">return</span> t.data; }
   };
   <span class="kwb">uint64_t</span> data;
   <span class="kwb">unsigned char</span> size;
};

__gnu_pbds::cc_hash_table&lt;T,<span class="kwb">unsigned</span>,T::hash&gt;
<span class="kwd">calculate</span>(<span class="kwb">const</span> std::string&amp; input,<span class="kwb">unsigned</span> size, <span class="kwb">unsigned</span> beg=<span class="num">0</span>,<span class="kwb">unsigned</span> incr=<span class="num">1</span>)
{
   __gnu_pbds::cc_hash_table&lt;T,<span class="kwb">unsigned</span>,T::hash&gt; frequencies;
   T tmp;
   <span class="kwa">for</span> (<span class="kwb">unsigned</span> i = beg, i_end = input.<span class="kwd">size</span>() + <span class="num">1</span> - size; i &lt; i_end; i+=incr)
   {
     tmp.<span class="kwd">reset</span>(input,i,i+size);
      ++frequencies[tmp];
   }
   <span class="kwa">return</span> frequencies;
}

__gnu_pbds::cc_hash_table&lt;T,<span class="kwb">unsigned</span>,T::hash&gt;
<span class="kwd">tcalculate</span>(<span class="kwb">const</span> std::string&amp; input,<span class="kwb">unsigned</span> size)
{
   <span class="kwb">unsigned</span> N = <span class="kwd">sysconf</span> (_SC_NPROCESSORS_ONLN);

   std::future&lt;__gnu_pbds::cc_hash_table&lt;T,<span class="kwb">unsigned</span>,T::hash&gt;&gt; ft[N];
   <span class="kwa">for</span>(<span class="kwb">unsigned</span> i = <span class="num">0</span>; i&lt;N;++i)
      ft[i] = std::<span class="kwd">async</span>(std::launch::async,calculate,std::<span class="kwd">ref</span>(input),size,i,N);

   <span class="kwc">auto</span> frequencies = ft[<span class="num">0</span>].<span class="kwd">get</span>();

   <span class="kwa">for</span>(<span class="kwb">unsigned</span> i = <span class="num">1</span> ; i&lt;N; ++i)
      <span class="kwa">for</span>(<span class="kwc">auto</span>&amp; j : ft[i].<span class="kwd">get</span>())
      {
         frequencies[j.first]+=j.second;
      }
   <span class="kwa">return</span> frequencies;
}

<span class="kwb">void</span> <span class="kwd">write_frequencies</span>(<span class="kwb">const</span> std::string &amp; input, <span class="kwb">unsigned</span> size)
{
   <span class="kwb">unsigned</span> sum = input.<span class="kwd">size</span>() + <span class="num">1</span> - size;
   <span class="kwc">auto</span> frequencies = <span class="kwd">tcalculate</span>(input,size);
   std::map&lt;<span class="kwb">unsigned</span>, std::string,std::greater&lt;<span class="kwb">unsigned</span>&gt;&gt; freq;
   <span class="kwa">for</span>(<span class="kwc">auto</span>&amp; i: frequencies)
   {
      freq.<span class="kwd">insert</span>(std::<span class="kwd">make_pair</span>(i.second,i.first));
   }
   <span class="kwa">for</span>(<span class="kwc">auto</span>&amp; i : freq)
      std::cout &lt;&lt; i.second &lt;&lt; <span class="str">' '</span> &lt;&lt; (sum ? <span class="kwb">double</span>(<span class="num">100</span> * i.first) / sum : <span class="num">0.0</span>) &lt;&lt; <span class="str">'</span><span class="esc">\n</span><span class="str">'</span>;
   std::cout &lt;&lt; <span class="str">'</span><span class="esc">\n</span><span class="str">'</span>;
}

<span class="kwb">void</span> <span class="kwd">write_count</span>(<span class="kwb">const</span> std::string &amp; input, <span class="kwb">const</span> std::string&amp; string)
{
   <span class="kwb">unsigned</span> size = string.<span class="kwd">size</span>();
   <span class="kwc">auto</span> frequencies = <span class="kwd">tcalculate</span>(input,size);

   std::cout &lt;&lt; frequencies[string] &lt;&lt; <span class="str">'</span><span class="esc">\t</span><span class="str">'</span> &lt;&lt; string &lt;&lt; <span class="str">'</span><span class="esc">\n</span><span class="str">'</span>;
}

<span class="kwb">int</span> <span class="kwd">main</span>()
{
   <span class="kwd">init</span>();
   std::string input;
   <span class="kwb">char</span> buffer[<span class="num">256</span>];
   <span class="kwa">while</span> (<span class="kwd">fgets</span>(buffer,<span class="num">100</span>,stdin) &amp;&amp; <span class="kwd">memcmp</span>(<span class="str">&quot;&gt;THREE&quot;</span>,buffer,<span class="num">6</span>)!=<span class="num">0</span>);
   <span class="kwa">while</span> (<span class="kwd">fgets</span>(buffer,<span class="num">100</span>,stdin) &amp;&amp; buffer[<span class="num">0</span>] != <span class="str">'&gt;'</span>)
   {
      <span class="kwa">if</span> (buffer[<span class="num">0</span>] != <span class="str">';'</span>)
      {
         input.<span class="kwd">append</span>(buffer,<span class="kwd">strlen</span>(buffer)-<span class="num">1</span>);
      }
   }
   std::<span class="kwd">transform</span>(input.<span class="kwd">begin</span>(),input.<span class="kwd">end</span>(),input.<span class="kwd">begin</span>(),::toupper);

   std::cout &lt;&lt; std::<span class="kwd">setprecision</span>(<span class="num">3</span>) &lt;&lt; std::<span class="kwd">setiosflags</span>(std::ios::fixed);
   <span class="kwd">write_frequencies</span>(input,<span class="num">1</span>);
   <span class="kwd">write_frequencies</span>(input,<span class="num">2</span>);
   <span class="kwd">write_count</span>(input, <span class="str">&quot;GGT&quot;</span>);
   <span class="kwd">write_count</span>(input, <span class="str">&quot;GGTA&quot;</span>);
   <span class="kwd">write_count</span>(input, <span class="str">&quot;GGTATT&quot;</span>);
   <span class="kwd">write_count</span>(input, <span class="str">&quot;GGTATTTTAATT&quot;</span>);
   <span class="kwd">write_count</span>(input, <span class="str">&quot;GGTATTTTAATTTATAGT&quot;</span>);
}
