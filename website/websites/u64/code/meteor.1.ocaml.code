<span class="com">(* The Computer Language Benchmarks Game</span>
<span class="com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="com">   contributed by Otto Bommer</span>
<span class="com">*)</span>

<span class="kwa">open</span> <span class="kwd">Printf</span>

<span class="kwa">let rec</span> range i j = 
  <span class="kwa">if</span> i&lt;j <span class="kwa">then</span> i::(range (i+<span class="num">1</span>) j) 
  <span class="kwa">else if</span> i=j <span class="kwa">then</span> [i] <span class="kwa">else</span> i::(range (i-<span class="num">1</span>) j)
 
<span class="kwa">module</span> <span class="kwd">Board</span> = <span class="kwa">struct</span>
<span class="kwa">let</span> rows = <span class="num">10</span>
<span class="kwa">let</span> cols = <span class="num">5</span>
<span class="kwa">let</span> size = rows*cols
<span class="kwa">let</span> empty = <span class="kwc">Char</span>.chr(<span class="num">0xe</span>)
<span class="kwa">let</span> filled = <span class="kwc">Char</span>.chr(<span class="num">0xf</span>)

<span class="kwa">let</span> create () = <span class="kwa">let</span> s = <span class="kwc">String</span>.create size <span class="kwa">in</span> <span class="kwc">String</span>.fill s <span class="num">0</span> size empty; s
<span class="kwa">let</span> copy b = <span class="kwc">String</span>.copy b
<span class="kwa">let</span> get b n = b.[n]
<span class="kwa">let</span> set b n v = b.[n] &lt;- v

<span class="kwa">let</span> cset dst cells v = <span class="kwa">for</span> i = <span class="num">0</span> <span class="kwa">to</span> <span class="num">4</span> <span class="kwa">do</span> set dst (<span class="kwc">Array</span>.get cells i) v <span class="kwa">done</span>
<span class="kwa">let</span> cdel dst cells = <span class="kwa">for</span> i = <span class="num">0</span> <span class="kwa">to</span> <span class="num">4</span> <span class="kwa">do</span> set dst (<span class="kwc">Array</span>.get cells i) empty <span class="kwa">done</span>

<span class="kwa">let</span> compare s1 s2 = <span class="kwc">String</span>.compare s1 s2

<span class="kwa">let</span> find_empty b = <span class="kwa">try</span> <span class="kwc">String</span>.index b empty <span class="kwa">with</span> _ -&gt; size-<span class="num">1</span>
<span class="kwa">let</span> rotate a steps = (a+<span class="num">60</span>*steps) <span class="kwa">mod</span> <span class="num">360</span>
<span class="kwa">let</span> flip a = (<span class="num">540</span>-a) <span class="kwa">mod</span> <span class="num">360</span> 

<span class="kwa">let</span> print b =  <span class="kwc">List</span>.iter (<span class="kwa">fun</span> i -&gt; 
    printf <span class="str">&quot;</span><span class="ipl">%x</span> <span class="str">&quot;</span> (<span class="kwc">Char</span>.code (get b i)); 
    <span class="kwa">if</span> (i+<span class="num">1</span>) <span class="kwa">mod</span> cols==<span class="num">0</span> <span class="kwa">then</span> printf <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span>; 
    <span class="kwa">if</span> (i+cols+<span class="num">1</span>) <span class="kwa">mod</span> (cols*<span class="num">2</span>)==<span class="num">0</span> <span class="kwa">then</span> printf <span class="str">&quot; &quot;</span>
  ) (range <span class="num">0</span> (size-<span class="num">1</span>)); 
  printf <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span>

<span class="kwa">let</span> invert b =
  <span class="kwa">let</span> bflip = <span class="kwc">String</span>.create size <span class="kwa">in</span>
  <span class="kwa">for</span> i = <span class="num">0</span> <span class="kwa">to</span> (size-<span class="num">1</span>) <span class="kwa">do</span> set bflip (size-<span class="num">1</span>-i) (get b i) <span class="kwa">done</span>;
  bflip

<span class="kwa">let</span> dont_intersect b1 c =
  <span class="kwa">if</span> get b1 (<span class="kwc">Array</span>.get c <span class="num">0</span>) != empty <span class="kwa">then false</span>
  <span class="kwa">else if</span> get b1 (<span class="kwc">Array</span>.get c <span class="num">1</span>) != empty <span class="kwa">then false</span>
  <span class="kwa">else if</span> get b1 (<span class="kwc">Array</span>.get c <span class="num">2</span>) != empty <span class="kwa">then false</span>
  <span class="kwa">else if</span> get b1 (<span class="kwc">Array</span>.get c <span class="num">3</span>) != empty <span class="kwa">then false</span>
  <span class="kwa">else if</span> get b1 (<span class="kwc">Array</span>.get c <span class="num">4</span>) != empty <span class="kwa">then false</span>
  <span class="kwa">else true</span>

<span class="kwa">let</span> shift idx a =
   <span class="kwa">match</span> a <span class="kwa">with</span>
    |   <span class="num">0</span> -&gt;  idx-cols*<span class="num">2</span>
    |  <span class="num">30</span> -&gt;  idx-cols+(idx/cols) <span class="kwa">mod</span> <span class="num">2</span>
    |  <span class="num">60</span> -&gt;  idx-cols+<span class="num">1</span>+(idx/cols) <span class="kwa">mod</span> <span class="num">2</span>
    |  <span class="num">90</span> -&gt;  idx+<span class="num">1</span>
    | <span class="num">120</span> -&gt;  idx+cols+<span class="num">1</span>+(idx/cols) <span class="kwa">mod</span> <span class="num">2</span> 
    | <span class="num">150</span> -&gt;  idx+cols+(idx/cols) <span class="kwa">mod</span> <span class="num">2</span>
    | <span class="num">180</span> -&gt;  idx+cols*<span class="num">2</span>
    | <span class="num">210</span> -&gt;  idx+cols-<span class="num">1</span>+(idx/cols) <span class="kwa">mod</span> <span class="num">2</span>
    | <span class="num">240</span> -&gt;  idx+cols-<span class="num">2</span>+(idx/cols) <span class="kwa">mod</span> <span class="num">2</span>
    | <span class="num">270</span> -&gt;  idx-<span class="num">1</span>
    | <span class="num">300</span> -&gt;  idx-cols-<span class="num">2</span>+(idx/cols) <span class="kwa">mod</span> <span class="num">2</span>
    | <span class="num">330</span> -&gt;  idx-cols-<span class="num">1</span>+(idx/cols) <span class="kwa">mod</span> <span class="num">2</span>
    |   _ -&gt;  idx

<span class="kwa">let</span> inside idx a =
  <span class="kwa">if</span> idx &gt;= <span class="num">0</span> &amp;&amp; idx &lt; size <span class="kwa">then</span>
  <span class="kwa">match</span> a <span class="kwa">with</span>
    |   <span class="num">0</span> -&gt;  idx &gt;= cols*<span class="num">2</span>
    |  <span class="num">30</span> -&gt;  idx <span class="kwa">mod</span> (cols*<span class="num">2</span>) != (cols*<span class="num">2</span>-<span class="num">1</span>) &amp;&amp; idx &gt;= cols
    |  <span class="num">60</span> -&gt;  <span class="kwa">let</span> i = idx <span class="kwa">mod</span> (cols*<span class="num">2</span>) <span class="kwa">in</span> 
              i!=(cols-<span class="num">1</span>) &amp;&amp; i!=(cols*<span class="num">2</span>-<span class="num">2</span>) &amp;&amp; i!=(cols*<span class="num">2</span>-<span class="num">1</span>) &amp;&amp; idx&gt;=cols
    |  <span class="num">90</span> -&gt;  idx <span class="kwa">mod</span> cols != (cols-<span class="num">1</span>)
    | <span class="num">120</span> -&gt;  <span class="kwa">let</span> i = idx <span class="kwa">mod</span> (cols*<span class="num">2</span>) <span class="kwa">in</span> 
              i!=(cols-<span class="num">1</span>) &amp;&amp; i!=(cols*<span class="num">2</span>-<span class="num">2</span>) &amp;&amp; i!=(cols*<span class="num">2</span>-<span class="num">1</span>) &amp;&amp; idx&lt;(size-cols)
    | <span class="num">150</span> -&gt;  idx <span class="kwa">mod</span> (cols*<span class="num">2</span>) != (cols*<span class="num">2</span>-<span class="num">1</span>) &amp;&amp; idx&lt;(size-cols)
    | <span class="num">180</span> -&gt;  idx &lt; size-<span class="num">2</span>*cols
    | <span class="num">210</span> -&gt;  idx <span class="kwa">mod</span> (cols*<span class="num">2</span>) != <span class="num">0</span> &amp;&amp; idx &lt; (size-cols)
    | <span class="num">240</span> -&gt;  <span class="kwa">let</span> i = idx <span class="kwa">mod</span> (cols*<span class="num">2</span>) <span class="kwa">in</span> 
              i!=<span class="num">0</span> &amp;&amp; i!=<span class="num">1</span> &amp;&amp; i!=cols &amp;&amp; idx &lt; (size-cols)
    | <span class="num">270</span> -&gt;  idx <span class="kwa">mod</span> <span class="num">5</span> != <span class="num">0</span>
    | <span class="num">300</span> -&gt;  <span class="kwa">let</span> i = idx <span class="kwa">mod</span> (cols*<span class="num">2</span>) <span class="kwa">in</span> i!=<span class="num">0</span> &amp;&amp; i!=<span class="num">1</span> &amp;&amp; i!=cols &amp;&amp; idx &gt;= cols
    | <span class="num">330</span> -&gt;  idx <span class="kwa">mod</span> (cols*<span class="num">2</span>) != <span class="num">0</span> &amp;&amp; idx &gt;= cols
    |   _ -&gt;  <span class="kwa">false</span>
  <span class="kwa">else false</span>

<span class="kwa">let</span> cell_peers = <span class="kwc">List</span>.map (<span class="kwa">fun</span> idx -&gt; <span class="kwa">let</span> peers = <span class="kwb">ref</span> [] <span class="kwa">in</span>
  <span class="kwc">List</span>.iter (<span class="kwa">fun</span> a -&gt; <span class="kwa">if</span> inside idx a <span class="kwa">then</span> peers:=!peers &#64; [(shift idx a)]) 
  [<span class="num">30</span>; <span class="num">90</span>; <span class="num">150</span>; <span class="num">210</span>; <span class="num">270</span>; <span class="num">330</span>]; !peers) (range <span class="num">0</span> (size-<span class="num">1</span>))

<span class="kwa">let rec</span> fill_island b idx =
  <span class="kwa">let</span> n = <span class="kwb">ref</span> <span class="num">0</span> <span class="kwa">in</span>
  <span class="kwa">if</span> (get b idx) == empty <span class="kwa">then begin</span> set b idx filled; n:=!n+<span class="num">1</span> <span class="kwa">end</span>;
  <span class="kwa">let</span> peers = <span class="kwc">List</span>.nth cell_peers idx <span class="kwa">in</span> <span class="kwc">List</span>.iter (<span class="kwa">fun</span> i -&gt; 
    <span class="kwa">if</span> (get b i) == empty <span class="kwa">then begin</span> set b i filled; n:=!n+<span class="num">1</span>+fill_island b i <span class="kwa">end</span>
  ) peers; !n

<span class="kwa">let</span> is_fillable b pn =
  <span class="kwa">let</span> i = find_empty b <span class="kwa">in</span>
  <span class="kwa">let</span> tmp = copy b <span class="kwa">in</span>
  <span class="kwa">let</span> s = fill_island tmp i <span class="kwa">in</span>
  s <span class="kwa">mod</span> <span class="num">5</span> == <span class="num">0</span>
<span class="kwa">end</span>

<span class="kwa">module</span> <span class="kwd">Piece</span> = <span class="kwa">struct</span>
<span class="kwa">let</span> defs = [
   [| <span class="num">90</span>;  <span class="num">90</span>;  <span class="num">90</span>; <span class="num">150</span>|];
   [|<span class="num">150</span>;  <span class="num">90</span>;  <span class="num">30</span>;  <span class="num">90</span>|];
   [| <span class="num">90</span>;  <span class="num">90</span>; <span class="num">150</span>; <span class="num">210</span>|];
   [| <span class="num">90</span>;  <span class="num">90</span>; <span class="num">210</span>; <span class="num">150</span>|];
   [|<span class="num">150</span>;  <span class="num">90</span>;  <span class="num">30</span>; <span class="num">180</span>|];
   [| <span class="num">90</span>;  <span class="num">90</span>; <span class="num">210</span>;  <span class="num">90</span>|];
   [| <span class="num">90</span>; <span class="num">150</span>; <span class="num">150</span>;  <span class="num">30</span>|];
   [| <span class="num">90</span>; <span class="num">150</span>; <span class="num">150</span>; <span class="num">270</span>|];
   [| <span class="num">90</span>; <span class="num">150</span>;  <span class="num">90</span>;  <span class="num">90</span>|];
   [| <span class="num">90</span>;  <span class="num">90</span>;  <span class="num">90</span>; <span class="num">210</span>|]
]

<span class="kwa">let</span> count = <span class="kwc">List</span>.length defs
<span class="kwa">let</span> rotate p steps =  <span class="kwc">Array</span>.map (<span class="kwa">fun</span> j -&gt;  <span class="kwc">Board</span>.rotate j steps) p
<span class="kwa">let</span> flip p =  <span class="kwc">Array</span>.map (<span class="kwa">fun</span> i -&gt;  <span class="kwc">Board</span>.flip i) p
<span class="kwa">end</span>;;

<span class="kwa">module</span> <span class="kwd">Cell</span> = <span class="kwa">struct</span>
<span class="kwa">let</span> min cells =  <span class="kwc">Array</span>.fold_left min <span class="kwc">Board</span>.size cells

<span class="kwa">let</span> from_piece p idx = 
  <span class="kwa">let</span> a = <span class="kwc">Board</span>.shift idx (<span class="kwc">Array</span>.get p <span class="num">0</span>) <span class="kwa">in</span>
  <span class="kwa">let</span> b = <span class="kwc">Board</span>.shift a (<span class="kwc">Array</span>.get p <span class="num">1</span>) <span class="kwa">in</span>
  <span class="kwa">let</span> c = <span class="kwc">Board</span>.shift b (<span class="kwc">Array</span>.get p <span class="num">2</span>) <span class="kwa">in</span>
  <span class="kwa">let</span> d = <span class="kwc">Board</span>.shift c (<span class="kwc">Array</span>.get p <span class="num">3</span>) <span class="kwa">in</span>
  [|idx; a; b; c; d|]

<span class="kwa">let</span> fits_on_board cells p =
  <span class="kwc">Board</span>.inside (<span class="kwc">Array</span>.get cells <span class="num">0</span>) (<span class="kwc">Array</span>.get p <span class="num">0</span>) &amp;&amp;
  <span class="kwc">Board</span>.inside (<span class="kwc">Array</span>.get cells <span class="num">1</span>) (<span class="kwc">Array</span>.get p <span class="num">1</span>) &amp;&amp;
  <span class="kwc">Board</span>.inside (<span class="kwc">Array</span>.get cells <span class="num">2</span>) (<span class="kwc">Array</span>.get p <span class="num">2</span>) &amp;&amp;
  <span class="kwc">Board</span>.inside (<span class="kwc">Array</span>.get cells <span class="num">3</span>) (<span class="kwc">Array</span>.get p <span class="num">3</span>) &amp;&amp;
  (<span class="kwc">Array</span>.get cells <span class="num">4</span>) &gt;= <span class="num">0</span> &amp;&amp; (<span class="kwc">Array</span>.get cells <span class="num">4</span>) &lt; <span class="kwc">Board</span>.size

<span class="kwa">let</span> to_board cells pn = 
  <span class="kwa">let</span> b = <span class="kwc">Board</span>.create () <span class="kwa">in let</span> chr = <span class="kwc">Char</span>.chr pn <span class="kwa">in</span>
  <span class="kwc">Board</span>.set b (<span class="kwc">Array</span>.get cells <span class="num">0</span>) chr;
  <span class="kwc">Board</span>.set b (<span class="kwc">Array</span>.get cells <span class="num">1</span>) chr;
  <span class="kwc">Board</span>.set b (<span class="kwc">Array</span>.get cells <span class="num">2</span>) chr;
  <span class="kwc">Board</span>.set b (<span class="kwc">Array</span>.get cells <span class="num">3</span>) chr;
  <span class="kwc">Board</span>.set b (<span class="kwc">Array</span>.get cells <span class="num">4</span>) chr;
  b
<span class="kwa">end</span>;;

<span class="kwa">let</span> permutations =
  <span class="kwa">let</span> permutations = <span class="kwc">List</span>.map (<span class="kwa">fun</span> pn -&gt; <span class="kwb">ref</span> (<span class="kwc">List</span>.map (<span class="kwa">fun</span> l -&gt; <span class="kwb">ref</span> []) 
                       (range <span class="num">0</span> (<span class="kwc">Board</span>.size-<span class="num">1</span>)))) (range <span class="num">0</span> (<span class="kwc">Piece</span>.count-<span class="num">1</span>)) <span class="kwa">in</span>
  <span class="kwa">let</span> calc_piece_rotations pn idx =
    <span class="kwa">let</span> calc_rots piece =
      <span class="kwa">let</span> pieceperms = <span class="kwc">List</span>.nth permutations pn <span class="kwa">in</span>
      <span class="kwa">for</span> i = <span class="num">0</span> <span class="kwa">to</span> <span class="num">5</span> <span class="kwa">do</span>
        <span class="kwa">if</span> pn != <span class="num">3</span> || i &lt; <span class="num">3</span> <span class="kwa">then</span>
          <span class="kwa">let</span> rotp = <span class="kwc">Piece</span>.rotate piece i <span class="kwa">in</span>
          <span class="kwa">let</span> c = <span class="kwc">Cell</span>.from_piece rotp idx <span class="kwa">in</span>
          <span class="kwa">if</span> <span class="kwc">Cell</span>.fits_on_board c rotp <span class="kwa">then</span>
            <span class="kwa">let</span> pboard = <span class="kwc">Cell</span>.to_board c pn <span class="kwa">in</span>
            <span class="kwa">if</span> <span class="kwc">Board</span>.is_fillable pboard pn <span class="kwa">then</span>
              <span class="kwa">let</span> minimum = <span class="kwc">Cell</span>.min c <span class="kwa">in</span>
              <span class="kwa">let</span> rotperms = <span class="kwc">List</span>.nth !pieceperms minimum <span class="kwa">in</span>
              rotperms := !rotperms &#64; [(rotp, pn, c, pboard)];
      <span class="kwa">done</span> 
    <span class="kwa">in</span>
    <span class="kwa">let</span> p = <span class="kwc">List</span>.nth <span class="kwc">Piece</span>.defs pn <span class="kwa">in</span>
    calc_rots p;
    calc_rots (<span class="kwc">Piece</span>.flip p);
  <span class="kwa">in</span>
  <span class="kwc">List</span>.iter (<span class="kwa">fun</span> pn -&gt; <span class="kwc">List</span>.iter (<span class="kwa">fun</span> idx -&gt; calc_piece_rotations pn idx) 
    (range <span class="num">0</span> (<span class="kwc">Board</span>.size-<span class="num">1</span>))) (range <span class="num">0</span> (<span class="kwc">Piece</span>.count-<span class="num">1</span>));
  permutations

<span class="kwa">module</span> <span class="kwd">Solution</span> = <span class="kwa">struct</span>
<span class="kwa">exception</span> <span class="kwd">Max_solutions</span>
<span class="kwa">let rec</span> solve max board solutions depth usedmask = 
  <span class="kwa">for</span> ipn = <span class="num">0</span> <span class="kwa">to</span> <span class="kwc">Piece</span>.count-<span class="num">1</span> <span class="kwa">do</span>
    <span class="kwa">if</span> usedmask <span class="kwa">land</span> (<span class="num">1</span> <span class="kwa">lsl</span> ipn) == <span class="num">0</span> <span class="kwa">then</span> 
      <span class="kwa">begin</span>
      <span class="kwa">let</span> emptycell = <span class="kwc">Board</span>.find_empty board <span class="kwa">in</span>
      <span class="kwa">let</span> piece_perms = !(<span class="kwc">List</span>.nth permutations ipn) <span class="kwa">in</span>
      <span class="kwa">let</span> cell_perms = !(<span class="kwc">List</span>.nth piece_perms emptycell) <span class="kwa">in</span>

      <span class="kwc">List</span>.iter (<span class="kwa">fun</span> perm -&gt;
        <span class="kwa">let</span> (p, pn, c, pboard) = perm <span class="kwa">in</span>
        <span class="kwa">if</span> <span class="kwc">Board</span>.dont_intersect board c <span class="kwa">then</span>
          <span class="kwa">begin</span>
          <span class="kwc">Board</span>.cset board c (<span class="kwc">Char</span>.chr pn); 

          <span class="kwa">if</span> depth == <span class="num">9</span> <span class="kwa">then</span> 
            <span class="kwa">begin</span>
            solutions := !solutions &#64; [<span class="kwc">Board</span>.copy board] &#64; [<span class="kwc">Board</span>.invert board];
            <span class="kwa">if</span> (<span class="kwc">List</span>.length !solutions) &gt;= max <span class="kwa">then</span> raise <span class="kwd">Max_solutions</span>
            <span class="kwa">end</span>
          <span class="kwa">else</span>
              solve max board solutions (depth+<span class="num">1</span>) (usedmask <span class="kwa">lor</span> (<span class="num">1</span> <span class="kwa">lsl</span> pn));

          <span class="kwc">Board</span>.cdel board c
          <span class="kwa">end</span> 
        ) cell_perms
      <span class="kwa">end</span>;
  <span class="kwa">done</span>;
  <span class="kwa">if</span> depth == <span class="num">0</span> <span class="kwa">then</span> raise <span class="kwd">Max_solutions</span>

<span class="kwa">end</span>
<span class="kwa">let</span> _ = 
  <span class="kwa">let</span> max = <span class="kwa">try</span> int_of_string (<span class="kwc">Sys</span>.argv.(<span class="num">1</span>)) <span class="kwa">with</span> _ -&gt; <span class="num">2100</span> <span class="kwa">in</span>
  <span class="kwa">let</span> solutions = <span class="kwb">ref</span> [] <span class="kwa">in</span>
  <span class="kwa">let</span> board = <span class="kwc">Board</span>.create () <span class="kwa">in</span>
  <span class="kwa">try</span> <span class="kwc">Solution</span>.solve max board solutions <span class="num">0 0</span> <span class="kwa">with</span> _ -&gt; ();
  <span class="kwa">let</span> sorted_solutions = <span class="kwc">List</span>.sort <span class="kwc">Board</span>.compare !solutions <span class="kwa">in</span>
  printf <span class="str">&quot;</span><span class="ipl">%d</span> <span class="str">solutions found</span><span class="esc">\n\n</span><span class="str">&quot;</span> (<span class="kwc">List</span>.length sorted_solutions); 

  <span class="kwa">if</span> <span class="kwc">List</span>.length sorted_solutions &gt; <span class="num">0</span> <span class="kwa">then</span>
    <span class="kwa">begin</span>
    <span class="kwc">Board</span>.print (<span class="kwc">List</span>.nth sorted_solutions <span class="num">0</span>);
    <span class="kwc">Board</span>.print (<span class="kwc">List</span>.nth sorted_solutions (<span class="kwc">List</span>.length sorted_solutions - <span class="num">1</span>))
    <span class="kwa">end</span>;

