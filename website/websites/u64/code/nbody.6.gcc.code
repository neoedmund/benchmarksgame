<span class="com">/* The Computer Language Benchmarks Game</span>
<span class="com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * contributed by Christoph Bauer</span>
<span class="com"> * modified by Danny Angelo Carminati Grein</span>
<span class="com"> *  </span>
<span class="com"> */</span>

<span class="ppc">#include &lt;math.h&gt;</span>
<span class="ppc">#include &lt;stdio.h&gt;</span>
<span class="ppc">#include &lt;stdlib.h&gt;</span>

<span class="ppc">#define pi 3.141592653589793</span>
<span class="ppc">#define solar_mass (4 * pi * pi)</span>
<span class="ppc">#define days_per_year 365.24</span>

<span class="kwb">struct</span> planet {
  <span class="kwb">double</span> x, y, z;
  <span class="kwb">double</span> vx, vy, vz;
  <span class="kwb">double</span> mass;
};

<span class="kwb">void</span> <span class="kwd">advance</span>(<span class="kwb">int</span> nbodies, <span class="kwb">struct</span> planet * bodies, <span class="kwb">double</span> dt)
{
  <span class="kwb">int</span> i, j;

  <span class="kwa">for</span> (i = <span class="num">0</span>; i &lt; nbodies; i++) {
    <span class="kwb">struct</span> planet * b = &amp;(bodies[i]);
    <span class="kwa">for</span> (j = i + <span class="num">1</span>; j &lt; nbodies; j++) {
      <span class="kwb">struct</span> planet * b2 = &amp;(bodies[j]);
      <span class="kwb">double</span> dx = b-&gt;x - b2-&gt;x;
      <span class="kwb">double</span> dy = b-&gt;y - b2-&gt;y;
      <span class="kwb">double</span> dz = b-&gt;z - b2-&gt;z;
      <span class="kwb">double</span> distanced = dx * dx + dy * dy + dz * dz;
      <span class="kwb">double</span> distance = <span class="kwd">sqrt</span>(distanced);
      <span class="kwb">double</span> mag = dt / (distanced * distance);
      b-&gt;vx -= dx * b2-&gt;mass * mag;
      b-&gt;vy -= dy * b2-&gt;mass * mag;
      b-&gt;vz -= dz * b2-&gt;mass * mag;
      b2-&gt;vx += dx * b-&gt;mass * mag;
      b2-&gt;vy += dy * b-&gt;mass * mag;
      b2-&gt;vz += dz * b-&gt;mass * mag;
    }
  }
  <span class="kwa">for</span> (i = <span class="num">0</span>; i &lt; nbodies; i++) {
    <span class="kwb">struct</span> planet * b = &amp;(bodies[i]);
    b-&gt;x += dt * b-&gt;vx;
    b-&gt;y += dt * b-&gt;vy;
    b-&gt;z += dt * b-&gt;vz;
  }
}

<span class="kwb">double</span> <span class="kwd">energy</span>(<span class="kwb">int</span> nbodies, <span class="kwb">struct</span> planet * bodies)
{
  <span class="kwb">double</span> e;
  <span class="kwb">int</span> i, j;

  e = <span class="num">0.0</span>;
  <span class="kwa">for</span> (i = <span class="num">0</span>; i &lt; nbodies; i++) {
    <span class="kwb">struct</span> planet * b = &amp;(bodies[i]);
    e += <span class="num">0.5</span> * b-&gt;mass * (b-&gt;vx * b-&gt;vx + b-&gt;vy * b-&gt;vy + b-&gt;vz * b-&gt;vz);
    <span class="kwa">for</span> (j = i + <span class="num">1</span>; j &lt; nbodies; j++) {
      <span class="kwb">struct</span> planet * b2 = &amp;(bodies[j]);
      <span class="kwb">double</span> dx = b-&gt;x - b2-&gt;x;
      <span class="kwb">double</span> dy = b-&gt;y - b2-&gt;y;
      <span class="kwb">double</span> dz = b-&gt;z - b2-&gt;z;
      <span class="kwb">double</span> distance = <span class="kwd">sqrt</span>(dx * dx + dy * dy + dz * dz);
      e -= (b-&gt;mass * b2-&gt;mass) / distance;
    }
  }
  <span class="kwa">return</span> e;
}

<span class="kwb">void</span> <span class="kwd">offset_momentum</span>(<span class="kwb">int</span> nbodies, <span class="kwb">struct</span> planet * bodies)
{
  <span class="kwb">double</span> px = <span class="num">0.0</span>, py = <span class="num">0.0</span>, pz = <span class="num">0.0</span>;
  <span class="kwb">int</span> i;
  <span class="kwa">for</span> (i = <span class="num">0</span>; i &lt; nbodies; i++) {
    px += bodies[i].vx * bodies[i].mass;
    py += bodies[i].vy * bodies[i].mass;
    pz += bodies[i].vz * bodies[i].mass;
  }
  bodies[<span class="num">0</span>].vx = - px / solar_mass;
  bodies[<span class="num">0</span>].vy = - py / solar_mass;
  bodies[<span class="num">0</span>].vz = - pz / solar_mass;
}

<span class="ppc">#define NBODIES 5</span>
<span class="kwb">struct</span> planet bodies[NBODIES] = {
  {                               <span class="com">/* sun */</span>
    <span class="num">0</span>, <span class="num">0</span>, <span class="num">0</span>, <span class="num">0</span>, <span class="num">0</span>, <span class="num">0</span>, solar_mass
  },
  {                               <span class="com">/* jupiter */</span>
    <span class="num">4.84143144246472090e+00</span>,
    -<span class="num">1.16032004402742839e+00</span>,
    -<span class="num">1.03622044471123109e-01</span>,
    <span class="num">1.66007664274403694e-03</span> * days_per_year,
    <span class="num">7.69901118419740425e-03</span> * days_per_year,
    -<span class="num">6.90460016972063023e-05</span> * days_per_year,
    <span class="num">9.54791938424326609e-04</span> * solar_mass
  },
  {                               <span class="com">/* saturn */</span>
    <span class="num">8.34336671824457987e+00</span>,
    <span class="num">4.12479856412430479e+00</span>,
    -<span class="num">4.03523417114321381e-01</span>,
    -<span class="num">2.76742510726862411e-03</span> * days_per_year,
    <span class="num">4.99852801234917238e-03</span> * days_per_year,
    <span class="num">2.30417297573763929e-05</span> * days_per_year,
    <span class="num">2.85885980666130812e-04</span> * solar_mass
  },
  {                               <span class="com">/* uranus */</span>
    <span class="num">1.28943695621391310e+01</span>,
    -<span class="num">1.51111514016986312e+01</span>,
    -<span class="num">2.23307578892655734e-01</span>,
    <span class="num">2.96460137564761618e-03</span> * days_per_year,
    <span class="num">2.37847173959480950e-03</span> * days_per_year,
    -<span class="num">2.96589568540237556e-05</span> * days_per_year,
    <span class="num">4.36624404335156298e-05</span> * solar_mass
  },
  {                               <span class="com">/* neptune */</span>
    <span class="num">1.53796971148509165e+01</span>,
    -<span class="num">2.59193146099879641e+01</span>,
    <span class="num">1.79258772950371181e-01</span>,
    <span class="num">2.68067772490389322e-03</span> * days_per_year,
    <span class="num">1.62824170038242295e-03</span> * days_per_year,
    -<span class="num">9.51592254519715870e-05</span> * days_per_year,
    <span class="num">5.15138902046611451e-05</span> * solar_mass
  }
};

<span class="kwb">int</span> <span class="kwd">main</span>(<span class="kwb">int</span> argc, <span class="kwb">char</span> ** argv)
{
  <span class="kwb">int</span> n = <span class="kwd">atoi</span>(argv[<span class="num">1</span>]);
  <span class="kwb">int</span> i;

  <span class="kwd">offset_momentum</span>(NBODIES, bodies);
  <span class="kwd">printf</span> (<span class="str">&quot;%.9f</span><span class="esc">\n</span><span class="str">&quot;</span>, <span class="kwd">energy</span>(NBODIES, bodies));
  <span class="kwa">for</span> (i = <span class="num">1</span>; i &lt;= n; i++)
    <span class="kwd">advance</span>(NBODIES, bodies, <span class="num">0.01</span>);
  <span class="kwd">printf</span> (<span class="str">&quot;%.9f</span><span class="esc">\n</span><span class="str">&quot;</span>, <span class="kwd">energy</span>(NBODIES, bodies));
  <span class="kwa">return</span> <span class="num">0</span>;
}
