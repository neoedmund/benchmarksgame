<span class="com">/* The Computer Language Benchmarks Game</span>
<span class="com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Mark C. Lewis</span>
<span class="com">   modified slightly by Chad Whipkey</span>
<span class="com">   converted from java to c++,added sse support, by Branimir Maksimovic</span>
<span class="com">   converted from c++ to c, by Alexey Medvedchikov </span>
<span class="com">*/</span>

<span class="ppc">#include &lt;stdio.h&gt;</span>
<span class="ppc">#include &lt;math.h&gt;</span>
<span class="ppc">#include &lt;stdlib.h&gt;</span>
<span class="ppc">#include &lt;immintrin.h&gt;</span>

<span class="ppc">#define PI 3.141592653589793</span>
<span class="ppc">#define SOLAR_MASS ( 4 * PI * PI )</span>
<span class="ppc">#define DAYS_PER_YEAR 365.24</span>

<span class="kwb">struct</span> body {
   <span class="kwb">double</span> x[<span class="num">3</span>], fill, v[<span class="num">3</span>], mass;
};

<span class="kwb">static struct</span> body solar_bodies[] = {
   <span class="com">/* sun */</span>
   {
      .x = { <span class="num">0</span>., <span class="num">0</span>., <span class="num">0</span>. },
      .v = { <span class="num">0</span>., <span class="num">0</span>., <span class="num">0</span>. },
      .mass = SOLAR_MASS
   },
   <span class="com">/* jupiter */</span>
   {
      .x = { <span class="num">4.84143144246472090e+00</span>,
         -<span class="num">1.16032004402742839e+00</span>,
         -<span class="num">1.03622044471123109e-01</span> },
      .v = { <span class="num">1.66007664274403694e-03</span> * DAYS_PER_YEAR,
         <span class="num">7.69901118419740425e-03</span> * DAYS_PER_YEAR,
         -<span class="num">6.90460016972063023e-05</span> * DAYS_PER_YEAR },
      .mass = <span class="num">9.54791938424326609e-04</span> * SOLAR_MASS
   },
   <span class="com">/* saturn */</span>
   {
      .x = { <span class="num">8.34336671824457987e+00</span>,
         <span class="num">4.12479856412430479e+00</span>,
         -<span class="num">4.03523417114321381e-01</span> },
      .v = { -<span class="num">2.76742510726862411e-03</span> * DAYS_PER_YEAR,
         <span class="num">4.99852801234917238e-03</span> * DAYS_PER_YEAR,
         <span class="num">2.30417297573763929e-05</span> * DAYS_PER_YEAR },
      .mass = <span class="num">2.85885980666130812e-04</span> * SOLAR_MASS
   },
   <span class="com">/* uranus */</span>
   {
      .x = { <span class="num">1.28943695621391310e+01</span>,
         -<span class="num">1.51111514016986312e+01</span>,
         -<span class="num">2.23307578892655734e-01</span> },
      .v = { <span class="num">2.96460137564761618e-03</span> * DAYS_PER_YEAR,
         <span class="num">2.37847173959480950e-03</span> * DAYS_PER_YEAR,
         -<span class="num">2.96589568540237556e-05</span> * DAYS_PER_YEAR },
      .mass = <span class="num">4.36624404335156298e-05</span> * SOLAR_MASS
   },
   <span class="com">/* neptune */</span>
   {
      .x = { <span class="num">1.53796971148509165e+01</span>,
         -<span class="num">2.59193146099879641e+01</span>,
         <span class="num">1.79258772950371181e-01</span> },
      .v = { <span class="num">2.68067772490389322e-03</span> * DAYS_PER_YEAR,
         <span class="num">1.62824170038242295e-03</span> * DAYS_PER_YEAR,
         -<span class="num">9.51592254519715870e-05</span> * DAYS_PER_YEAR },
      .mass = <span class="num">5.15138902046611451e-05</span> * SOLAR_MASS
   }
};

<span class="kwb">static const int</span> BODIES_SIZE = <span class="kwa">sizeof</span>(solar_bodies) / <span class="kwa">sizeof</span>(solar_bodies[<span class="num">0</span>]);

<span class="kwb">void</span> <span class="kwd">offset_momentum</span>(<span class="kwb">struct</span> body *bodies, <span class="kwb">unsigned int</span> nbodies)
{
   <span class="kwb">unsigned int</span> i, k;
   <span class="kwa">for</span> (i = <span class="num">0</span>; i &lt; nbodies; ++i)
      <span class="kwa">for</span> (k = <span class="num">0</span>; k &lt; <span class="num">3</span>; ++k)
         bodies[<span class="num">0</span>].v[k] -= bodies[i].v[k] * bodies[i].mass
            / SOLAR_MASS;
}

<span class="kwb">void</span> <span class="kwd">bodies_advance</span>(<span class="kwb">struct</span> body *bodies, <span class="kwb">unsigned int</span> nbodies, <span class="kwb">double</span> dt)
{
   <span class="kwb">unsigned int</span> N = (nbodies - <span class="num">1</span>) * nbodies / <span class="num">2</span>;
   <span class="kwb">static struct</span> {
      <span class="kwb">double</span> dx[<span class="num">3</span>], fill;
   } r[<span class="num">1000</span>];
   <span class="kwb">static</span> <span class="kwd">__attribute__</span>((<span class="kwd">aligned</span>(<span class="num">16</span>))) <span class="kwb">double</span> mag[<span class="num">1000</span>];
   <span class="kwb">unsigned int</span> i, j, k, m;
   __m128d dx[<span class="num">3</span>], dsquared, distance, dmag;

   <span class="kwa">for</span>(k = <span class="num">0</span>, i = <span class="num">0</span>; i &lt; nbodies - <span class="num">1</span>; ++i)
      <span class="kwa">for</span>(j = i + <span class="num">1</span>; j &lt; nbodies; ++j, ++k)
         <span class="kwa">for</span> ( m = <span class="num">0</span>; m &lt; <span class="num">3</span>; ++m)
            r[k].dx[m] = bodies[i].x[m] - bodies[j].x[m];

   <span class="kwa">for</span> (i = <span class="num">0</span>; i &lt; N; i += <span class="num">2</span>) {
      <span class="kwa">for</span> (m = <span class="num">0</span>; m &lt; <span class="num">3</span>; ++m) {
         dx[m] = <span class="kwd">_mm_loadl_pd</span>(dx[m], &amp;r[i].dx[m]);
         dx[m] = <span class="kwd">_mm_loadh_pd</span>(dx[m], &amp;r[i+<span class="num">1</span>].dx[m]);
      }

      dsquared = dx[<span class="num">0</span>] * dx[<span class="num">0</span>] + dx[<span class="num">1</span>] * dx[<span class="num">1</span>] + dx[<span class="num">2</span>] * dx[<span class="num">2</span>];
      distance = <span class="kwd">_mm_cvtps_pd</span>(<span class="kwd">_mm_rsqrt_ps</span>(<span class="kwd">_mm_cvtpd_ps</span>(dsquared)));

      <span class="kwa">for</span> (j = <span class="num">0</span>; j &lt; <span class="num">2</span>; ++j)
         distance = distance * <span class="kwd">_mm_set1_pd</span>(<span class="num">1.5</span>)
            - ((<span class="kwd">_mm_set1_pd</span>(<span class="num">0.5</span>) * dsquared) * distance)
            * (distance * distance);

      dmag = <span class="kwd">_mm_set1_pd</span>(dt) / (dsquared) * distance;
      <span class="kwd">_mm_store_pd</span>(&amp;mag[i], dmag);
   }

   <span class="kwa">for</span> (i = <span class="num">0</span>, k = <span class="num">0</span>; i &lt; nbodies - <span class="num">1</span>; ++i)
      <span class="kwa">for</span> ( j = i + <span class="num">1</span>; j &lt; nbodies; ++j, ++k)
         <span class="kwa">for</span> ( m = <span class="num">0</span>; m &lt; <span class="num">3</span>; ++m) {
            bodies[i].v[m] -= r[k].dx[m] * bodies[j].mass
               * mag[k];
            bodies[j].v[m] += r[k].dx[m] * bodies[i].mass
               * mag[k];
         }

   <span class="kwa">for</span> (i = <span class="num">0</span>; i &lt; nbodies; ++i)
      <span class="kwa">for</span> ( m = <span class="num">0</span>; m &lt; <span class="num">3</span>; ++m)
         bodies[i].x[m] += dt * bodies[i].v[m];
}

<span class="kwb">double</span> <span class="kwd">bodies_energy</span>(<span class="kwb">struct</span> body *bodies, <span class="kwb">unsigned int</span> nbodies) {
   <span class="kwb">double</span> dx[<span class="num">3</span>], distance, e = <span class="num">0.0</span>;
   <span class="kwb">unsigned int</span> i, j, k;

   <span class="kwa">for</span> (i=<span class="num">0</span>; i &lt; nbodies; ++i) {
      e += bodies[i].mass * ( bodies[i].v[<span class="num">0</span>] * bodies[i].v[<span class="num">0</span>]
         + bodies[i].v[<span class="num">1</span>] * bodies[i].v[<span class="num">1</span>]
         + bodies[i].v[<span class="num">2</span>] * bodies[i].v[<span class="num">2</span>] ) / <span class="num">2</span>.;

      <span class="kwa">for</span> (j=i+<span class="num">1</span>; j &lt; nbodies; ++j) {
         <span class="kwa">for</span> (k = <span class="num">0</span>; k &lt; <span class="num">3</span>; ++k)
            dx[k] = bodies[i].x[k] - bodies[j].x[k];

         distance = <span class="kwd">sqrt</span>(dx[<span class="num">0</span>] * dx[<span class="num">0</span>] + dx[<span class="num">1</span>] * dx[<span class="num">1</span>] 
            + dx[<span class="num">2</span>] * dx[<span class="num">2</span>]);
         e -= (bodies[i].mass * bodies[j].mass) / distance;
      }
   }
   <span class="kwa">return</span> e;
}

<span class="kwb">int</span> <span class="kwd">main</span>(<span class="kwb">int</span> argc, <span class="kwb">char</span>** argv)
{
   <span class="kwb">int</span> i, n = <span class="kwd">atoi</span>(argv[<span class="num">1</span>]);
   <span class="kwd">offset_momentum</span>(solar_bodies, BODIES_SIZE);
   <span class="kwd">printf</span>(<span class="str">&quot;%.9f</span><span class="esc">\n</span><span class="str">&quot;</span>, <span class="kwd">bodies_energy</span>(solar_bodies, BODIES_SIZE));
   <span class="kwa">for</span> (i = <span class="num">0</span>; i &lt; n; ++i)
      <span class="kwd">bodies_advance</span>(solar_bodies, BODIES_SIZE, <span class="num">0.01</span>);
   <span class="kwd">printf</span>(<span class="str">&quot;%.9f</span><span class="esc">\n</span><span class="str">&quot;</span>, <span class="kwd">bodies_energy</span>(solar_bodies, BODIES_SIZE));
   <span class="kwa">return</span> <span class="num">0</span>;
}

