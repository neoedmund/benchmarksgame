<span class="slc">;;   The Computer Language Benchmarks Game</span>
<span class="slc">;;   http://benchmarksgame.alioth.debian.org/</span>

<span class="slc">;; contributed by Andy Fingerhut</span>
<span class="slc">;; refined by Rich Hickey</span>

(ns fasta
  (:gen-class))

(set! *warn-on-reflection* true)
(set! *unchecked-math* true)

(<span class="kwa">def</span> ^:const ^:long line-length <span class="num">60</span>)

(<span class="kwa">defn</span> make-repeat-fasta [#^java.io.BufferedOutputStream ostream
                         line-length id desc s n]
  (<span class="kwc">let</span> [descstr (str <span class="str">&quot;&gt;&quot;</span> id <span class="str">&quot; &quot;</span> desc <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span>)]
    (.write ostream (.getBytes descstr) <span class="num">0</span> (count descstr)))
  (<span class="kwc">let</span> [s-len (count s)
        line-length ^long line-length
        min-buf-len (+ s-len line-length)
        repeat-count (inc (quot min-buf-len s-len))
        buf (apply str (<span class="kwd">repeat</span> repeat-count s))
        <span class="slc">;; Precompute all byte arrays that we might want to write, one</span>
        <span class="slc">;; at each possible offset in the string s to be repeated.</span>
        line-strings (vec (<span class="kwd">map</span> (<span class="kwa">fn</span> [i]
                                 (.getBytes (str (subs buf i (+ i line-length))
                                                 <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span>)))
                               (<span class="kwd">range</span> <span class="num">0</span> s-len)))
        num-full-lines (quot n line-length)]
    (<span class="kwb">loop</span> [j <span class="num">0</span>
           s-offset <span class="num">0</span>]
      (<span class="kwc">if</span> (== j num-full-lines)
        <span class="slc">;; Write out the left over part of length n, if any.</span>
        (<span class="kwc">let</span> [remaining (rem n line-length)]
          (<span class="kwc">when</span> (not= <span class="num">0</span> remaining)
            (.write ostream
                    (.getBytes (str (subs buf s-offset (+ s-offset remaining))
                                    <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span>))
                    <span class="num">0</span> (inc remaining))))
        (do
          (.write ostream #^bytes (line-strings s-offset) <span class="num">0</span> (int (inc line-length)))
          (<span class="kwb">recur</span> (inc j) (rem
                          (+ s-offset line-length)
                          s-len)))))))

(definterface IPRNG
  (gen_random_BANG_ ^double [^double max-val]))

(<span class="kwa">def</span> ^:const IM <span class="num">139968</span>)
(<span class="kwa">def</span> ^:const IA <span class="num">3877</span>)
(<span class="kwa">def</span> ^:const IC <span class="num">29573</span>)
(<span class="kwa">def</span> ^:const ONE_OVER_IM (/ <span class="num">1.0</span> IM))

(deftype PRNG [^{:unsynchronized-mutable true :tag long} rand-state]
  IPRNG
  (gen-random! [this max-val]
      (<span class="kwc">let</span> [next-state (rem (+ (* rand-state IA) IC) IM)]
        (set! rand-state next-state)
        (* max-val next-state ONE_OVER_IM))))

(<span class="kwa">defn</span> fill-random! [#^bytes gene-bytes #^doubles gene-cdf n #^bytes buf ^fasta.PRNG my-prng]
  (<span class="kwc">let</span> [n ^long n]
    (<span class="kwb">loop</span> [i <span class="num">0</span>]
      (<span class="kwc">when</span> (&lt; i n)
        (<span class="kwc">let</span> [x (.gen-random! my-prng <span class="num">1.0</span>)]
          (<span class="kwb">loop</span> [j <span class="num">0</span>]
            (<span class="kwc">if</span> (&lt; x (aget gene-cdf j))
              (aset buf i (aget gene-bytes j))
              (<span class="kwb">recur</span> (inc j)))))
        (<span class="kwb">recur</span> (inc i))))))

(<span class="kwa">defn</span> make-random-fasta [#^java.io.BufferedOutputStream ostream
                         line-length id desc n #^bytes gene-bytes
                         #^doubles gene-cdf #^PRNG my-prng]
  (<span class="kwc">let</span> [descstr (str <span class="str">&quot;&gt;&quot;</span> id <span class="str">&quot; &quot;</span> desc <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span>)]
    (.write ostream (.getBytes descstr)))
  (<span class="kwc">let</span> [len-with-newline (inc line-length)
        num-full-lines (quot n line-length)
        line-buf (byte-array len-with-newline)]
    (aset line-buf line-length (byte (int <span class="esc">\n</span>ewline)))
    (<span class="kwb">dotimes</span> [i num-full-lines]
      (fill-random! gene-bytes gene-cdf line-length line-buf my-prng)
      (.write ostream line-buf (int <span class="num">0</span>) len-with-newline)
      )
    (<span class="kwc">let</span> [remaining-len (rem n line-length)]
      (<span class="kwc">when</span> (not= <span class="num">0</span> remaining-len)
        (fill-random! gene-bytes gene-cdf remaining-len line-buf my-prng)
        (.write ostream line-buf <span class="num">0</span> remaining-len)
        (.write ostream (int <span class="esc">\n</span>ewline)))))
  my-prng)

(<span class="kwa">def</span> alu (str <span class="str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span>
              <span class="str">&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span>
              <span class="str">&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span>
              <span class="str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span>
              <span class="str">&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span>
              <span class="str">&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span>
              <span class="str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span>))

(<span class="kwa">def</span> iub [[<span class="esc">\a</span> <span class="num">0.27</span>]
          [\c <span class="num">0.12</span>]
          [\g <span class="num">0.12</span>]
          [<span class="esc">\t</span> <span class="num">0.27</span>]
          [\B <span class="num">0.02</span>]
          [\D <span class="num">0.02</span>]
          [\H <span class="num">0.02</span>]
          [\K <span class="num">0.02</span>]
          [\M <span class="num">0.02</span>]
          [\N <span class="num">0.02</span>]
          [\R <span class="num">0.02</span>]
          [\S <span class="num">0.02</span>]
          [\V <span class="num">0.02</span>]
          [\W <span class="num">0.02</span>]
          [\Y <span class="num">0.02</span>]])

(<span class="kwa">def</span> homosapiens [[<span class="esc">\a</span> <span class="num">0.3029549426680</span>]
                  [\c <span class="num">0.1979883004921</span>]
                  [\g <span class="num">0.1975473066391</span>]
                  [<span class="esc">\t</span> <span class="num">0.3015094502008</span>]])

(<span class="kwa">defn</span> prefix-sums-helper [x coll]
  (lazy-seq
   (when-let [s (seq coll)]
     (<span class="kwc">let</span> [sum (+ x (<span class="kwd">first</span> s))]
       (<span class="kwd">cons</span> sum (prefix-sums-helper sum (<span class="kwd">rest</span> s)))))))

(<span class="kwa">defn</span> prefix-sums [coll]
  (prefix-sums-helper <span class="num">0</span> coll))

(<span class="kwa">defn</span> make-genelist [pdf-map]
  (<span class="kwc">let</span> [n (count pdf-map)
        bytes (byte-array n (<span class="kwd">map</span> (<span class="kwa">fn</span> [pair]
                                   (byte (int (<span class="kwd">first</span> pair))))
                                 pdf-map))
        cdf (double-array n (prefix-sums (<span class="kwd">map</span> #(nth % <span class="num">1</span>) pdf-map)))]
    [bytes cdf]))

(<span class="kwa">defn</span> -main [&amp; args]
  (<span class="kwc">let</span> [n (<span class="kwc">if</span> (and (&gt;= (count args) <span class="num">1</span>)
                   (re-matches #<span class="str">&quot;^\d+$&quot;</span> (nth args <span class="num">0</span>)))
            (. Integer valueOf (nth args <span class="num">0</span>) <span class="num">10</span>))
        ostream (java.io.BufferedOutputStream. System/out (* (inc line-length) <span class="num">1024</span>))
        [iub-bytes iub-cdf] (make-genelist iub)
        [homosapiens-bytes homosapiens-cdf] (make-genelist homosapiens)
        my-prng (PRNG. <span class="num">42</span>)]
    (make-repeat-fasta ostream line-length <span class="str">&quot;ONE&quot;</span> <span class="str">&quot;Homo sapiens alu&quot;</span> alu (* <span class="num">2</span> n))
    (<span class="kwc">let</span> [my-prng2
          (make-random-fasta ostream line-length <span class="str">&quot;TWO&quot;</span> <span class="str">&quot;IUB ambiguity codes&quot;</span>
                             (* <span class="num">3</span> n) iub-bytes iub-cdf my-prng)]
      (make-random-fasta ostream line-length <span class="str">&quot;THREE&quot;</span> <span class="str">&quot;Homo sapiens frequency&quot;</span>
                         (* <span class="num">5</span> n) homosapiens-bytes homosapiens-cdf my-prng2))
    (.flush ostream)))
