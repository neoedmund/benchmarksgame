#lang racket/base

<span class="slc">;; The Computer Language Benchmarks Game</span>
<span class="slc">;; http://benchmarksgame.alioth.debian.org/</span>

<span class="slc">;; Based on the MLton version of the benchmark by Scott Cruzen</span>
<span class="slc">;;; contributed by Matthew Flatt</span>

(<span class="kwa">require</span> racket/cmdline)

(<span class="kwa">define</span> (<span class="kwa">floor_ev</span> q r s t x)
  (<span class="kwa">quotient</span> (+ (* q x) r) (+ (* s x) t)))

(<span class="kwa">define</span> (<span class="kwa">comp</span> q r s t  q2 r2 s2 t2)
  (<span class="kwa">values</span> (+ (* q q2) (* r s2))
          (+ (* q r2) (* r t2))
          (+ (* s q2) (* t s2))
          (+ (* s r2) (* t t2))))

(<span class="kwa">define</span> (<span class="kwa">next</span> q r s t) (<span class="kwa">floor_ev</span> q r s t <span class="num">3</span>))
(<span class="kwa">define</span> (<span class="kwa">safe</span>? q r s t n) (= n (<span class="kwa">floor_ev</span> q r s t <span class="num">4</span>)))
(<span class="kwa">define</span> (<span class="kwa">prod</span> q r s t n) (<span class="kwa">comp</span> <span class="num">10</span> (* -<span class="num">10</span> n) <span class="num">0 1</span>  q r s t))
(<span class="kwa">define</span> (<span class="kwa">mk</span> q r s t k) (<span class="kwa">comp</span> q r s t k (* <span class="num">2</span> (<span class="kwa">add1</span> (* <span class="num">2</span> k))) <span class="num">0</span> (<span class="kwa">add1</span> (* <span class="num">2</span> k))))

(<span class="kwa">define</span> (<span class="kwa">digit</span> k  q r s t  n row col)
  (<span class="kwa">if</span> (&gt; n <span class="num">0</span>)
      (<span class="kwa">let</span> ([y (<span class="kwa">next</span> q r s t)])
        (<span class="kwa">if</span> (<span class="kwa">safe</span>? q r s t y)
            (<span class="kwa">let-values</span> ([(<span class="kwa">q</span> r s t) (<span class="kwa">prod</span> q r s t y)])
              (<span class="kwa">if</span> (= col <span class="num">10</span>)
                  (<span class="kwa">let</span> ([row (+ row <span class="num">10</span>)])
                    (<span class="kwa">printf</span> <span class="str">&quot;</span><span class="esc">\t</span><span class="str">:~a</span><span class="esc">\n</span><span class="str">~a&quot;</span> row y)
                    (<span class="kwa">digit</span> k q r s t (<span class="kwa">sub1</span> n) row <span class="num">1</span>))
                  (<span class="kwa">begin</span>
                    (<span class="kwa">printf</span> <span class="str">&quot;~a&quot;</span> y)
                    (<span class="kwa">digit</span> k q r s t (<span class="kwa">sub1</span> n) row (<span class="kwa">add1</span> col)))))
            (<span class="kwa">let-values</span> ([(<span class="kwa">q</span> r s t) (<span class="kwa">mk</span> q r s t k)])
              (<span class="kwa">digit</span> (<span class="kwa">add1</span> k) q r s t n row col))))
      (<span class="kwa">printf</span> <span class="str">&quot;~a</span><span class="esc">\t</span><span class="str">:~a</span><span class="esc">\n</span><span class="str">&quot;</span>
              (<span class="kwa">make-string</span> (<span class="kwa">-</span> <span class="num">10</span> col) #\space)
              (+ row col))))

(<span class="kwa">define</span> (<span class="kwa">digits</span> n)
  (<span class="kwa">digit</span> <span class="num">1  1 0 0 1</span>  n <span class="num">0 0</span>))

(<span class="kwa">digits</span> (<span class="kwa">command-line</span> #:args (<span class="kwa">n</span>) (<span class="kwa">string-</span>&gt;number n)))
