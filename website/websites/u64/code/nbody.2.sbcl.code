<span class="slc">;;   The Computer Language Benchmarks Game</span>
<span class="slc">;;   http://benchmarksgame.alioth.debian.org/</span>
<span class="slc">;;;</span>
<span class="slc">;;; contributed by Patrick Frankenberger</span>
<span class="slc">;;; modified by Juho Snellman 2005-11-18</span>
<span class="slc">;;;   * About 40% speedup on SBCL, 90% speedup on CMUCL</span>
<span class="slc">;;;   * Represent a body as a DEFSTRUCT with (:TYPE VECTOR DOUBLE-FLOAT), a</span>
<span class="slc">;;;     not as a structure that contains vectors</span>
<span class="slc">;;;   * Inline APPLYFORCES</span>
<span class="slc">;;;   * Replace (/ DT DISTANCE DISTANCE DISTANCE) with</span>
<span class="slc">;;;     (/ DT (* DISTANCE DISTANCE DISTANCE)), as is done in the other</span>
<span class="slc">;;;     implementations of this test.</span>
<span class="slc">;;;   * Add a couple of declarations</span>
<span class="slc">;;;   * Heavily rewritten for style (represent system as a list instead of</span>
<span class="slc">;;;     an array to make the nested iterations over it less clumsy, use</span>
<span class="slc">;;;     INCF/DECF where appropriate, break very long lines, etc)</span>
<span class="slc">;;; modified by Marko Kocic </span>
<span class="slc">;;;   * add optimization declarations</span>

(<span class="kwa">declaim</span> (<span class="kwa">optimize</span> (<span class="kwa">speed</span> <span class="num">3</span>)(<span class="kwa">safety</span> <span class="num">0</span>)(<span class="kwa">space</span> <span class="num">0</span>)(<span class="kwa">debug</span> <span class="num">0</span>)))

(<span class="kwa">defconstant</span> +days-per-year+ <span class="num">365.24</span>d0)
(<span class="kwa">defconstant</span> +solar-mass+ (* <span class="num">4</span>d0 pi pi))

(<span class="kwa">defstruct</span> (<span class="kwa">body</span> (:type (<span class="kwa">vector</span> double-float))
                 (:conc-name nil)
                 (:constructor make-body (<span class="kwa">x</span> y z vx vy vz mass)))
  x y z
  vx vy vz
  mass)
(<span class="kwa">deftype</span> body () '(<span class="kwa">vector</span> double-float <span class="num">7</span>))

(<span class="kwa">defparameter</span> *jupiter*
  (<span class="kwa">make-body</span> <span class="num">4.84143144246472090</span>d0
             -<span class="num">1.16032004402742839</span>d0
             -<span class="num">1.03622044471123109</span>d-1
             (* <span class="num">1.66007664274403694</span>d-3 +days-per-year+)
             (* <span class="num">7.69901118419740425</span>d-3 +days-per-year+)
             (* -<span class="num">6.90460016972063023</span>d-5  +days-per-year+)
             (* <span class="num">9.54791938424326609</span>d-4 +solar-mass+)))

(<span class="kwa">defparameter</span> *saturn*
  (<span class="kwa">make-body</span> <span class="num">8.34336671824457987</span>d0
             <span class="num">4.12479856412430479</span>d0
             -<span class="num">4.03523417114321381</span>d-1
             (* -<span class="num">2.76742510726862411</span>d-3 +days-per-year+)
             (* <span class="num">4.99852801234917238</span>d-3 +days-per-year+)
             (* <span class="num">2.30417297573763929</span>d-5 +days-per-year+)
             (* <span class="num">2.85885980666130812</span>d-4 +solar-mass+)))

(<span class="kwa">defparameter</span> *uranus*
  (<span class="kwa">make-body</span> <span class="num">1.28943695621391310</span>d1
             -<span class="num">1.51111514016986312</span>d1
             -<span class="num">2.23307578892655734</span>d-1
             (* <span class="num">2.96460137564761618</span>d-03 +days-per-year+)
             (* <span class="num">2.37847173959480950</span>d-03 +days-per-year+)
             (* -<span class="num">2.96589568540237556</span>d-05 +days-per-year+)
             (* <span class="num">4.36624404335156298</span>d-05 +solar-mass+)))

(<span class="kwa">defparameter</span> *neptune*
  (<span class="kwa">make-body</span> <span class="num">1.53796971148509165</span>d+<span class="num">01</span>
             -<span class="num">2.59193146099879641</span>d+<span class="num">01</span>
             <span class="num">1.79258772950371181</span>d-01
             (* <span class="num">2.68067772490389322</span>d-03 +days-per-year+)
             (* <span class="num">1.62824170038242295</span>d-03 +days-per-year+)
             (* -<span class="num">9.51592254519715870</span>d-05 +days-per-year+)
             (* <span class="num">5.15138902046611451</span>d-05 +solar-mass+)))

(<span class="kwa">defparameter</span> *sun*
  (<span class="kwa">make-body</span> <span class="num">0.0</span>d0 <span class="num">0.0</span>d0 <span class="num">0.0</span>d0 <span class="num">0.0</span>d0 <span class="num">0.0</span>d0 <span class="num">0.0</span>d0 +solar-mass+))

(<span class="kwa">declaim</span> (<span class="kwa">inline</span> applyforces))
(<span class="kwa">defun</span> applyforces (<span class="kwa">a</span> b dt)
  (<span class="kwa">declare</span> (<span class="kwa">type</span> body a b) (<span class="kwa">type</span> double-float dt))
  (<span class="kwa">let</span>* ((<span class="kwa">dx</span> (<span class="kwa">-</span> (<span class="kwa">x</span> a) (<span class="kwa">x</span> b)))
         (<span class="kwa">dy</span> (<span class="kwa">-</span> (<span class="kwa">y</span> a) (<span class="kwa">y</span> b)))
         (<span class="kwa">dz</span> (<span class="kwa">-</span> (<span class="kwa">z</span> a) (<span class="kwa">z</span> b)))
	 (<span class="kwa">distance</span> (<span class="kwa">sqrt</span> (+ (* dx dx) (* dy dy) (* dz dz))))
	 (<span class="kwa">mag</span> (/ dt (* distance distance distance)))
         (<span class="kwa">dxmag</span> (* dx mag))
         (<span class="kwa">dymag</span> (* dy mag))
         (<span class="kwa">dzmag</span> (* dz mag)))
    (<span class="kwa">decf</span> (<span class="kwa">vx</span> a) (* dxmag (<span class="kwa">mass</span> b)))
    (<span class="kwa">decf</span> (<span class="kwa">vy</span> a) (* dymag (<span class="kwa">mass</span> b)))
    (<span class="kwa">decf</span> (<span class="kwa">vz</span> a) (* dzmag (<span class="kwa">mass</span> b)))
    (<span class="kwa">incf</span> (<span class="kwa">vx</span> b) (* dxmag (<span class="kwa">mass</span> a)))
    (<span class="kwa">incf</span> (<span class="kwa">vy</span> b) (* dymag (<span class="kwa">mass</span> a)))
    (<span class="kwa">incf</span> (<span class="kwa">vz</span> b) (* dzmag (<span class="kwa">mass</span> a))))
  nil)

(<span class="kwa">defun</span> advance (<span class="kwa">system</span> dt)
  (<span class="kwa">declare</span> (<span class="kwa">double-float</span> dt))
  (<span class="kwa">loop</span> for (<span class="kwa">a</span> . rest) on system do
        (<span class="kwa">dolist</span> (<span class="kwa">b</span> rest)
          (<span class="kwa">applyforces</span> a b dt)))
  (<span class="kwa">dolist</span> (<span class="kwa">b</span> system)
    (<span class="kwa">incf</span> (<span class="kwa">x</span> b) (* dt (<span class="kwa">vx</span> b)))
    (<span class="kwa">incf</span> (<span class="kwa">y</span> b) (* dt (<span class="kwa">vy</span> b)))
    (<span class="kwa">incf</span> (<span class="kwa">z</span> b) (* dt (<span class="kwa">vz</span> b))))
  nil)

(<span class="kwa">defun</span> energy (<span class="kwa">system</span>)
  (<span class="kwa">let</span> ((<span class="kwa">e</span> <span class="num">0.0</span>d0))
    (<span class="kwa">declare</span> (<span class="kwa">double-float</span> e))
    (<span class="kwa">loop</span> for (<span class="kwa">a</span> . rest) on system do
          (<span class="kwa">incf</span> e (* <span class="num">0.5</span>d0
                     (<span class="kwa">mass</span> a)
                     (+ (* (<span class="kwa">vx</span> a) (<span class="kwa">vx</span> a))
                        (* (<span class="kwa">vy</span> a) (<span class="kwa">vy</span> a))
                        (* (<span class="kwa">vz</span> a) (<span class="kwa">vz</span> a)))))
          (<span class="kwa">dolist</span> (<span class="kwa">b</span> rest)
            (<span class="kwa">let</span>* ((<span class="kwa">dx</span> (<span class="kwa">-</span> (<span class="kwa">x</span> a) (<span class="kwa">x</span> b)))
                   (<span class="kwa">dy</span> (<span class="kwa">-</span> (<span class="kwa">y</span> a) (<span class="kwa">y</span> b)))
                   (<span class="kwa">dz</span> (<span class="kwa">-</span> (<span class="kwa">z</span> a) (<span class="kwa">z</span> b)))
                   (<span class="kwa">dist</span> (<span class="kwa">sqrt</span> (+ (* dx dx) (* dy dy) (* dz dz)))))
              (<span class="kwa">decf</span> e (/ (* (<span class="kwa">mass</span> a) (<span class="kwa">mass</span> b)) dist)))))
    e))

(<span class="kwa">defun</span> offset-momentum (<span class="kwa">system</span>)
  (<span class="kwa">let</span> ((<span class="kwa">px</span> <span class="num">0.0</span>d0)
	(<span class="kwa">py</span> <span class="num">0.0</span>d0)
	(<span class="kwa">pz</span> <span class="num">0.0</span>d0))
    (<span class="kwa">dolist</span> (<span class="kwa">p</span> system)
      (<span class="kwa">incf</span> px (* (<span class="kwa">vx</span> p) (<span class="kwa">mass</span> p)))
      (<span class="kwa">incf</span> py (* (<span class="kwa">vy</span> p) (<span class="kwa">mass</span> p)))
      (<span class="kwa">incf</span> pz (* (<span class="kwa">vz</span> p) (<span class="kwa">mass</span> p))))
    (<span class="kwa">setf</span> (<span class="kwa">vx</span> (<span class="kwa">car</span> system)) (/ (<span class="kwa">-</span> px) +solar-mass+)
          (<span class="kwa">vy</span> (<span class="kwa">car</span> system)) (/ (<span class="kwa">-</span> py) +solar-mass+)
          (<span class="kwa">vz</span> (<span class="kwa">car</span> system)) (/ (<span class="kwa">-</span> pz) +solar-mass+))
    nil))

(<span class="kwa">defun</span> nbody (<span class="kwa">n</span>)
  (<span class="kwa">declare</span> (<span class="kwa">fixnum</span> n))
  (<span class="kwa">let</span> ((<span class="kwa">system</span> (<span class="kwa">list</span> *sun* *jupiter* *saturn* *uranus* *neptune*)))
    (<span class="kwa">offset-momentum</span> system)
    (<span class="kwa">format</span> t <span class="str">&quot;~,9F~%&quot;</span> (<span class="kwa">energy</span> system))
    (<span class="kwa">dotimes</span> (<span class="kwa">i</span> n)
      (<span class="kwa">advance</span> system <span class="num">0.01</span>d0))
    (<span class="kwa">format</span> t <span class="str">&quot;~,9F~%&quot;</span> (<span class="kwa">energy</span> system))))

(<span class="kwa">defun</span> main ()
  (<span class="kwa">let</span> ((<span class="kwa">n</span> (<span class="kwa">parse-integer</span> (<span class="kwa">or</span> (<span class="kwa">car</span> (<span class="kwa">last</span> #+sbcl sb-ext:*posix-argv*
                                         #+cmu  extensions:*command-line-strings*
					 #+gcl  si::*command-args*)) <span class="str">&quot;1&quot;</span>))))
    (<span class="kwa">nbody</span> n)))
