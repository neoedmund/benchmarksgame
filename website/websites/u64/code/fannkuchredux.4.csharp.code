<span class="com">/*</span>
<span class="com"> * The Computer Language Benchmarks Game</span>
<span class="com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="com"> * </span>
<span class="com"> * contributed by Isaac Gouy, transliterated from Oleg Mazurov's Java program</span>
<span class="com"> * modified by Konstantin Safonov</span>
<span class="com">*/</span>
<span class="kwa">using</span> System;
<span class="kwa">internal static class</span> FannkuchRedux {
    <span class="kwa">public static</span> unsafe <span class="kwb">int</span>[] <span class="kwd">Fannkuch</span>( <span class="kwb">int</span> n ) {
        <span class="kwb">long</span>[] p = <span class="kwa">new</span> <span class="kwb">long</span>[n], q = <span class="kwa">new</span> <span class="kwb">long</span>[n], s = <span class="kwa">new</span> <span class="kwb">long</span>[n];
        <span class="kwb">int</span> sign = <span class="num">1</span>, maxflips = <span class="num">0</span>, sum = <span class="num">0</span>, m = n - <span class="num">1</span>;
        <span class="kwa">for</span> ( var i = <span class="num">0</span>; i &lt; n; i++ ) s[i] = q[i] = p[i] = i;
        <span class="kwd">fixed</span> (<span class="kwb">long</span>* pp = p, sp = s, qp = q) {
            var pp1 = pp + <span class="num">1</span>; var qp1 = qp + <span class="num">1</span>; var qpm1 = qp - <span class="num">1</span>; var ppe = pp + n;
            <span class="kwa">do</span> { <span class="slc">// Copy and flip.</span>
                var q0 = *pp; <span class="slc">// Cache 0th element.</span>
                <span class="kwa">if</span> ( q0 != <span class="num">0L</span> ) { <span class="slc">// Work on a copy.</span>
                    <span class="kwa">for</span> ( <span class="kwb">long</span>* qi = qp1, pi = pp1; pi &lt; ppe; ++qi, ++pi ) *qi = *pi;
                    var flips = <span class="num">1</span>;
                    <span class="kwa">do</span> {
                        var qpq0 = qp + q0; var qq = *qpq0;
                        <span class="kwa">if</span> ( qq == <span class="num">0L</span> ) { <span class="slc">// ... until 0th element is 0.</span>
                            sum = sum + sign * flips;<span class="slc">//need FMA here</span>
                            <span class="kwa">if</span> (flips &gt; maxflips) maxflips = flips;<span class="slc">// New maximum?</span>
                            <span class="kwa">break</span>;
                        }
                        *qpq0 = q0;
                        <span class="kwa">if</span> ( q0 &gt;= <span class="num">3L</span> ) {
                            var qpi = qp1; var qpj = qpm1 + q0;
                            <span class="kwa">do</span> { var t = *qpi; *qpi = *qpj; *qpj = t; ++qpi; --qpj; } <span class="kwa">while</span> ( qpi &lt; qpj );
                        }
                        q0 = qq;
                        flips++;
                    } <span class="kwa">while</span> ( <span class="kwa">true</span> );
                }
                <span class="slc">// Permute.</span>
                <span class="kwa">if</span> ( sign == <span class="num">1</span> ) {
                    var t = *pp1; *pp1 = *pp; *pp = t; sign = -<span class="num">1</span>; <span class="slc">// Rotate 0&lt;-1.</span>
                } <span class="kwa">else</span> {
                    var t = *pp1; *pp1 = *(pp+<span class="num">2</span>); *(pp+<span class="num">2</span>) = t; sign = <span class="num">1</span>; <span class="slc">// Rotate 0&lt;-1 and 0&lt;-1&lt;-2.</span>
                    <span class="kwa">for</span> ( var i = <span class="num">2</span>; i &lt; n; i++ ) {
                        var spi = sp + i;
                        var sx = *spi;
                        <span class="kwa">if</span> ( sx != <span class="num">0</span> ) { *spi = sx - <span class="num">1</span>; <span class="kwa">break</span>; }
                        <span class="slc">// Out of permutations.</span>
                        <span class="kwa">if</span> ( i == m ) <span class="kwa">return new</span>[] { sum, maxflips }; 
                        *spi = i;
                        <span class="slc">// Rotate 0&lt;-...&lt;-i+1.</span>
                        t = *pp; var pi = pp + i;
                        <span class="kwa">for</span> ( var j = pp; j &lt;= pi; ) { var ji = j; *j = *++ji; j=ji; }
                        *++pi = t;
                    }
                }
            } <span class="kwa">while</span> ( <span class="kwa">true</span> );
        }
    }
    <span class="kwa">private static</span> <span class="kwb">void</span> <span class="kwd">Main</span>( <span class="kwb">string</span>[] args ) {
        var n = ( args.Length &gt; <span class="num">0</span> ) ? Int32.<span class="kwd">Parse</span>( args[ <span class="num">0</span> ] ) : <span class="num">7</span>;
        var pf = <span class="kwd">Fannkuch</span>( n );
        Console.<span class="kwd">Write</span>( <span class="str">&quot;</span><span class="ipl">{0}</span><span class="str"></span><span class="esc">\n</span><span class="str">Pfannkuchen(</span><span class="ipl">{1}</span><span class="str">) =</span> <span class="ipl">{2}</span><span class="str"></span><span class="esc">\n</span><span class="str">&quot;</span>, pf[ <span class="num">0</span> ], n, pf[ <span class="num">1</span> ] );
    }
}
