<span class="slc">-- The Computer Language Benchmarks Game</span>
<span class="slc">-- http://benchmarksgame.alioth.debian.org/</span>
<span class="slc">-- contributed by Mike Pall</span>

<span class="kwa">local function</span> <span class="kwd">kfrequency</span>(seq, freq, k, frame)
  <span class="kwa">local</span> sub = <span class="kwb">string</span>.sub
  <span class="kwa">local</span> k1 = k - <span class="num">1</span>
  <span class="kwa">for</span> i=frame,<span class="kwb">string</span>.<span class="kwd">len</span>(seq)-k1,k <span class="kwa">do</span>
    <span class="kwa">local</span> c = <span class="kwd">sub</span>(seq, i, i+k1)
    freq[c] = freq[c] + <span class="num">1</span>
  <span class="kwa">end</span>
<span class="kwa">end</span>

<span class="kwa">local function</span> <span class="kwd">freqdefault</span>()
  <span class="kwa">return</span> <span class="num">0</span>
<span class="kwa">end</span>

<span class="kwa">local function</span> <span class="kwd">count</span>(seq, frag)
  <span class="kwa">local</span> k = <span class="kwb">string</span>.<span class="kwd">len</span>(frag)
  <span class="kwa">local</span> freq = <span class="kwd">setmetatable</span>({}, { __index = freqdefault })
  <span class="kwa">for</span> frame=<span class="num">1</span>,k <span class="kwa">do</span> <span class="kwd">kfrequency</span>(seq, freq, k, frame) <span class="kwa">end</span>
  io.<span class="kwb">write</span>(freq[frag] <span class="kwa">or</span> <span class="num">0</span>, <span class="str">&quot;</span><span class="esc">\t</span><span class="str">&quot;</span>, frag, <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span>)
<span class="kwa">end</span>

<span class="kwa">local function</span> <span class="kwd">frequency</span>(seq, k)
  <span class="kwa">local</span> freq = <span class="kwd">setmetatable</span>({}, { __index = freqdefault })
  <span class="kwa">for</span> frame=<span class="num">1</span>,k <span class="kwa">do</span> <span class="kwd">kfrequency</span>(seq, freq, k, frame) <span class="kwa">end</span>
  <span class="kwa">local</span> sfreq, sn = {}, <span class="num">1</span>
  <span class="kwa">for</span> c,v <span class="kwa">in</span> <span class="kwd">pairs</span>(freq) <span class="kwa">do</span> sfreq[sn] = c; sn = sn + <span class="num">1</span> <span class="kwa">end</span>
  <span class="kwb">table</span>.<span class="kwb">sort</span>(sfreq, <span class="kwa">function</span>(a, b)
    <span class="kwa">local</span> fa, fb = freq[a], freq[b]
    <span class="kwa">return</span> fa == fb <span class="kwa">and</span> a &gt; b <span class="kwa">or</span> fa &gt; fb
  <span class="kwa">end</span>)
  sum = <span class="kwb">string</span>.<span class="kwd">len</span>(seq)-k+<span class="num">1</span>
  <span class="kwa">for</span> _,c <span class="kwa">in</span> <span class="kwd">ipairs</span>(sfreq) <span class="kwa">do</span>
    io.<span class="kwb">write</span>(<span class="kwb">string</span>.<span class="kwb">format</span>(<span class="str">&quot;%s %0.3f</span><span class="esc">\n</span><span class="str">&quot;</span>, c, (freq[c]*<span class="num">100</span>)/sum))
  <span class="kwa">end</span>
  io.<span class="kwb">write</span>(<span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span>)
<span class="kwa">end</span>

<span class="kwa">local function</span> <span class="kwd">readseq</span>()
  <span class="kwa">local</span> sub = <span class="kwb">string</span>.sub
  <span class="kwa">for</span> line <span class="kwa">in</span> io.<span class="kwd">lines</span>() <span class="kwa">do</span>
    <span class="kwa">if</span> <span class="kwd">sub</span>(line, <span class="num">1</span>, <span class="num">1</span>) == <span class="str">&quot;&gt;&quot;</span> <span class="kwa">and</span> <span class="kwd">sub</span>(line, <span class="num">2</span>, <span class="num">6</span>) == <span class="str">&quot;THREE&quot;</span> <span class="kwa">then break end</span>
  <span class="kwa">end</span>
  <span class="kwa">local</span> lines, ln = {}, <span class="num">0</span>
  <span class="kwa">for</span> line <span class="kwa">in</span> io.<span class="kwd">lines</span>() <span class="kwa">do</span>
    <span class="kwa">local</span> c = <span class="kwd">sub</span>(line, <span class="num">1</span>, <span class="num">1</span>)
    <span class="kwa">if</span> c == <span class="str">&quot;&gt;&quot;</span> <span class="kwa">then</span>
      <span class="kwa">break</span>
    <span class="kwa">elseif</span> c ~= <span class="str">&quot;;&quot;</span> <span class="kwa">then</span>
      ln = ln + <span class="num">1</span>
      lines[ln] = line
    <span class="kwa">end</span>
  <span class="kwa">end</span>
  <span class="kwa">return</span> <span class="kwb">string</span>.<span class="kwd">upper</span>(<span class="kwb">table</span>.<span class="kwd">concat</span>(lines, <span class="str">&quot;&quot;</span>, <span class="num">1</span>, ln))
<span class="kwa">end</span>

<span class="kwa">local</span> seq = <span class="kwd">readseq</span>()
<span class="kwd">frequency</span>(seq, <span class="num">1</span>)
<span class="kwd">frequency</span>(seq, <span class="num">2</span>)
<span class="kwd">count</span>(seq, <span class="str">&quot;GGT&quot;</span>)
<span class="kwd">count</span>(seq, <span class="str">&quot;GGTA&quot;</span>)
<span class="kwd">count</span>(seq, <span class="str">&quot;GGTATT&quot;</span>)
<span class="kwd">count</span>(seq, <span class="str">&quot;GGTATTTTAATT&quot;</span>)
<span class="kwd">count</span>(seq, <span class="str">&quot;GGTATTTTAATTTATAGT&quot;</span>)
