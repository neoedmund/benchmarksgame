<span class="com">&quot;* The Computer Language Benchmarks Game</span>
<span class="com">    http://benchmarksgame.alioth.debian.org/</span>
<span class="com">    contributed by Paolo Bonzini </span>
<span class="com">    modified by Andres Valloud *&quot;</span>!

<span class="kwc">Stream</span> <span class="kwb">subclass:</span> <span class="kwd">#PiDigitSpigot</span>
    <span class="kwb">instanceVariableNames:</span> <span class="str">'numer accum denom k'</span>
    <span class="kwb">classVariableNames:</span> <span class="str">''</span>
    <span class="kwb">poolDictionaries:</span> <span class="str">''</span>
    <span class="kwb">category:</span> <span class="str">'Shootout'</span>!

!<span class="kwc">PiDigitSpigot</span> <span class="kwb">methodsFor:</span> <span class="str">'stream'</span>!
<span class="kwb">atEnd</span>
    ^<span class="kwa">false</span>!

<span class="kwb">next</span>
    <span class="kwd">| digit |</span>
    [ <span class="kwa">self</span> step. (digit :<span class="kwb">=</span> <span class="kwa">self</span> extract) isNil ] whileTrue.
    <span class="kwa">self</span> <span class="kwb">eliminate:</span> digit.
    ^digit! !

!<span class="kwc">PiDigitSpigot</span> <span class="kwb">methodsFor:</span> <span class="str">'private'</span>!
<span class="kwb">initialize</span>
    numer :<span class="kwb">=</span> denom :<span class="kwb">=</span> <span class="num">1</span>.
    k :<span class="kwb">=</span> accum :<span class="kwb">=</span> <span class="num">0</span>.!

<span class="kwb">extract</span>
    <span class="kwd">| tmp |</span>
    numer &gt; accum <span class="kwb">ifTrue:</span> [^<span class="kwa">nil</span>].
    tmp :<span class="kwb">=</span> numer <span class="kwb">+</span> numer <span class="kwb">+</span> numer <span class="kwb">+</span> accum.
    tmp <span class="esc">\\</span> denom <span class="kwb">&gt;=</span> (denom <span class="kwb">-</span> numer) <span class="kwb">ifTrue:</span> [^<span class="kwa">nil</span>].
    ^tmp <span class="kwb">//</span> denom!

<span class="kwb">eliminate:</span> digit
    accum :<span class="kwb">=</span> accum <span class="kwb">-</span> (denom <span class="kwb">*</span> digit).
    accum :<span class="kwb">=</span> accum <span class="kwb">*</span> <span class="num">10</span>.
    numer :<span class="kwb">=</span> numer <span class="kwb">*</span> <span class="num">10</span>!

<span class="kwb">step</span>
    <span class="kwd">| y2 |</span>
    k :<span class="kwb">=</span> k <span class="kwb">+</span> <span class="num">1</span>.
    y2 :<span class="kwb">=</span> k <span class="kwb">*</span> <span class="num">2</span> <span class="kwb">+</span> <span class="num">1</span>.
    accum :<span class="kwb">=</span> (numer <span class="kwb">+</span> numer <span class="kwb">+</span> accum) <span class="kwb">*</span> y2.
    numer :<span class="kwb">=</span> numer <span class="kwb">*</span> k.
    denom :<span class="kwb">=</span> denom <span class="kwb">*</span> y2.! !


!<span class="kwc">PiDigitSpigot</span> class <span class="kwb">methodsFor:</span> <span class="str">'instance creation'</span>!
<span class="kwb">new</span>
   ^<span class="kwa">super</span> basicNew initialize! !


!<span class="kwc">Tests</span> class <span class="kwb">methodsFor:</span> <span class="str">'benchmarking'</span>!
<span class="kwb">pidigitsTo:</span> v <span class="kwb">width:</span> width <span class="kwb">to:</span> output
   <span class="kwd">| n i pidigits |</span>
   n :<span class="kwb">=</span> v.
   i :<span class="kwb">=</span> <span class="num">0</span>.
   pidigits :<span class="kwb">=</span> <span class="kwc">PiDigitSpigot</span> new.
   [n &gt; <span class="num">0</span>] <span class="kwb">whileTrue:</span>
      [n &lt; width
         <span class="kwb">ifTrue:</span>
            [n <span class="kwb">timesRepeat:</span> [output <span class="kwb">nextPut:</span> (<span class="kwc">Character</span> <span class="kwb">digitValue:</span> pidigits next)].
            n <span class="kwb">to:</span> width <span class="kwb">do:</span> [<span class="kwd">:each</span> | output space].
            i :<span class="kwb">=</span> i <span class="kwb">+</span> n]
         <span class="kwb">ifFalse:</span>
            [width <span class="kwb">timesRepeat:</span> [output <span class="kwb">nextPut:</span> (<span class="kwc">Character</span> <span class="kwb">digitValue:</span> pidigits next)].
            i :<span class="kwb">=</span> i <span class="kwb">+</span> width].

      output tab; <span class="kwb">nextPut:</span> $:; <span class="kwb">print:</span> i; nl.

      n :<span class="kwb">=</span> n <span class="kwb">-</span> width]! !


!<span class="kwc">Tests</span> class <span class="kwb">methodsFor:</span> <span class="str">'benchmark scripts'</span>!
<span class="kwb">pidigits4</span>
   <span class="kwa">self</span> <span class="kwb">pidigitsTo:</span> <span class="kwa">self</span> arg <span class="kwb">width:</span> <span class="num">10</span> <span class="kwb">to:</span> <span class="kwa">self</span> stdout.
   ^<span class="str">''</span>! !
