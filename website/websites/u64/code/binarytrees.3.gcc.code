<span class="slc">// The Computer Language Benchmarks Game</span>
<span class="slc">// http://benchmarksgame.alioth.debian.org/</span>
<span class="slc">//</span>
<span class="slc">// Contributed by Jeremy Zerfas</span>
<span class="slc">// Based on the C++ program from Jon Harrop, Alex Mizrahi, and Bruno Coutinho.</span>

<span class="slc">// This controls the width of lines that are output by this program.</span>
<span class="ppc">#define MAXIMUM_LINE_WIDTH  60</span>

<span class="ppc">#include &lt;stdint.h&gt;</span>
<span class="ppc">#include &lt;stdlib.h&gt;</span>
<span class="ppc">#include &lt;stdio.h&gt;</span>

<span class="kwc">typedef</span> off_t off64_t; <span class="slc">// This is needed to keep APR happy on 32 bit systems.</span>
<span class="ppc">#include &lt;apr_pools.h&gt;</span>

<span class="slc">// intptr_t should be the native integer type on most sane systems.</span>
<span class="kwc">typedef</span> <span class="kwb">intptr_t</span> intnative_t;

<span class="kwc">typedef</span> <span class="kwb">struct</span> tree_node{
   <span class="kwb">struct</span> tree_node   * left_Node, * right_Node;
   <span class="kwb">int32_t</span>            value;
} tree_node;


<span class="slc">// Create a binary tree of depth tree_Depth in memory_Pool, set the root node's</span>
<span class="slc">// value to root_Node_Value, and finally return a pointer to the created binary</span>
<span class="slc">// tree.</span>
<span class="kwb">static</span> <span class="kwc">inline</span> tree_node * <span class="kwd">create_Tree</span>(<span class="kwb">const</span> intnative_t root_Node_Value,
  <span class="kwb">const</span> intnative_t tree_Depth, apr_pool_t * <span class="kwb">const</span> memory_Pool){
   tree_node * <span class="kwb">const</span> root_Node=<span class="kwd">apr_palloc</span>(memory_Pool, <span class="kwa">sizeof</span>(tree_node));

   <span class="slc">// If tree_Depth is one or more then recursively call create_Tree() in order</span>
   <span class="slc">// to create the left and right subtrees using 2*root_Node_Value-1 and</span>
   <span class="slc">// 2*root_Node_Value respectively as the root values for those subtrees.</span>
   <span class="kwa">if</span>(tree_Depth&gt;<span class="num">0</span>){
      root_Node-&gt;left_Node=<span class="kwd">create_Tree</span>(<span class="num">2</span>*root_Node_Value-<span class="num">1</span>, tree_Depth-<span class="num">1</span>,
        memory_Pool);
      root_Node-&gt;right_Node=<span class="kwd">create_Tree</span>(<span class="num">2</span>*root_Node_Value, tree_Depth-<span class="num">1</span>,
        memory_Pool);
   }<span class="kwa">else</span>
      root_Node-&gt;left_Node=root_Node-&gt;right_Node=NULL;

   root_Node-&gt;value=root_Node_Value;

   <span class="kwa">return</span> root_Node;
}


<span class="slc">// Compute and return the checksum for the binary tree that has root_Node as the</span>
<span class="slc">// root node.</span>
<span class="kwb">static</span> <span class="kwc">inline</span> intnative_t <span class="kwd">compute_Tree_Checksum</span>(
  <span class="kwb">const</span> tree_node * <span class="kwb">const</span> root_Node){
   <span class="slc">// If there are subtrees then recursively call compute_Tree_Checksum() on</span>
   <span class="slc">// them and factor their values into the checksum, otherwise just return</span>
   <span class="slc">// the value of root_Node.</span>
   <span class="kwa">if</span>(root_Node-&gt;left_Node)
      <span class="kwa">return</span> <span class="kwd">compute_Tree_Checksum</span>(root_Node-&gt;left_Node)-
        <span class="kwd">compute_Tree_Checksum</span>(root_Node-&gt;right_Node)+root_Node-&gt;value;
   <span class="kwa">else</span>
      <span class="kwa">return</span> root_Node-&gt;value;
}


<span class="kwb">int</span> <span class="kwd">main</span>(<span class="kwb">int</span> argc, <span class="kwb">char</span> ** argv){
   <span class="slc">// Set minimum_Tree_Depth to 4 and maximum_Tree_Depth to the maximum of what</span>
   <span class="slc">// was specified as the argument to the program and minimum_Tree_Depth+2.</span>
   <span class="kwb">const</span> intnative_t minimum_Tree_Depth=<span class="num">4</span>;
   intnative_t maximum_Tree_Depth=<span class="kwd">atoi</span>(argv[<span class="num">1</span>]);
   <span class="kwa">if</span>(maximum_Tree_Depth &lt; minimum_Tree_Depth+<span class="num">2</span>)
      maximum_Tree_Depth=minimum_Tree_Depth+<span class="num">2</span>;

   <span class="kwd">apr_initialize</span>();
   apr_pool_t * memory_Pool;

   <span class="slc">// Create a memory pool, create a binary tree of depth maximum_Tree_Depth+1,</span>
   <span class="slc">// compute the checksum of the binary tree, print the statistics, and then</span>
   <span class="slc">// delete the memory pool.</span>
   <span class="kwd">apr_pool_create_unmanaged</span>(&amp;memory_Pool);
   tree_node * stretch_Tree=<span class="kwd">create_Tree</span>(<span class="num">0</span>, maximum_Tree_Depth+<span class="num">1</span>, memory_Pool);
   <span class="kwd">printf</span>(<span class="str">&quot;stretch tree of depth %jd</span><span class="esc">\t</span> <span class="str">check: %jd</span><span class="esc">\n</span><span class="str">&quot;</span>,
     (<span class="kwb">intmax_t</span>)maximum_Tree_Depth+<span class="num">1</span>,
     (<span class="kwb">intmax_t</span>)<span class="kwd">compute_Tree_Checksum</span>(stretch_Tree));
   <span class="kwd">apr_pool_destroy</span>(memory_Pool);

   <span class="slc">// Create a memory pool and then create a long-lived binary tree of depth</span>
   <span class="slc">// maximum_Tree_Depth which will be left alone for a while while</span>
   <span class="slc">// more binary trees get allocated and deallocaited as required by the</span>
   <span class="slc">// rules. We'll finish working with this later.</span>
   <span class="kwd">apr_pool_create_unmanaged</span>(&amp;memory_Pool);
   tree_node * long_Lived_Tree=<span class="kwd">create_Tree</span>(<span class="num">0</span>, maximum_Tree_Depth, memory_Pool);

   <span class="slc">// Create a lot of binary trees in parallel of depths ranging from</span>
   <span class="slc">// minimum_Tree_Depth to maximum_Tree_Depth, compute and tally up all their</span>
   <span class="slc">// checksums, destroy the trees, and then record the statistics to</span>
   <span class="slc">// output_Buffer[] so they can be displayed in order later.</span>
   <span class="kwb">char</span> output_Buffer[maximum_Tree_Depth+<span class="num">1</span>][MAXIMUM_LINE_WIDTH+<span class="num">1</span>];
   intnative_t current_Tree_Depth;
   <span class="ppc">#pragma omp parallel for</span>
   <span class="kwa">for</span>(current_Tree_Depth=minimum_Tree_Depth;
     current_Tree_Depth&lt;=maximum_Tree_Depth; current_Tree_Depth+=<span class="num">2</span>){
      intnative_t iterations=<span class="num">1</span>&lt;&lt;(maximum_Tree_Depth-current_Tree_Depth+
        minimum_Tree_Depth);

      <span class="slc">// Create a memory pool for this thread to use.</span>
      apr_pool_t * thread_Memory_Pool;
      <span class="kwd">apr_pool_create_unmanaged</span>(&amp;thread_Memory_Pool);

      intnative_t i=<span class="num">1</span>, total_Trees_Checksum=<span class="num">0</span>;
      <span class="kwa">for</span>(; i&lt;=iterations; ++i){
         <span class="slc">// Create two binary trees of depth current_Tree_Depth but with one</span>
         <span class="slc">// having a root node value of i and the other a root node value of</span>
         <span class="slc">// -1.</span>
         tree_node * <span class="kwb">const</span> tree_1=<span class="kwd">create_Tree</span>(i, current_Tree_Depth,
           thread_Memory_Pool);
         tree_node * <span class="kwb">const</span> tree_2=<span class="kwd">create_Tree</span>(-i, current_Tree_Depth,
           thread_Memory_Pool);

         <span class="slc">// Compute the checksums for both trees and add them to</span>
         <span class="slc">// total_Trees_Checksum.</span>
         total_Trees_Checksum+=<span class="kwd">compute_Tree_Checksum</span>(tree_1)+
           <span class="kwd">compute_Tree_Checksum</span>(tree_2);

         <span class="kwd">apr_pool_clear</span>(thread_Memory_Pool);
      }

      <span class="kwd">apr_pool_destroy</span>(thread_Memory_Pool);

      <span class="slc">// Record the statistics for the trees of depth current_Tree_Depth.</span>
      <span class="kwd">sprintf</span>(output_Buffer[current_Tree_Depth],
        <span class="str">&quot;%jd</span><span class="esc">\t</span> <span class="str">trees of depth %jd</span><span class="esc">\t</span> <span class="str">check: %jd</span><span class="esc">\n</span><span class="str">&quot;</span>, (<span class="kwb">intmax_t</span>)<span class="num">2</span>*iterations,
        (<span class="kwb">intmax_t</span>)current_Tree_Depth, (<span class="kwb">intmax_t</span>)total_Trees_Checksum);
   }

   <span class="slc">// Print the statistics for all of the various tree depths.</span>
   <span class="kwa">for</span>(current_Tree_Depth=minimum_Tree_Depth;
     current_Tree_Depth&lt;=maximum_Tree_Depth; current_Tree_Depth+=<span class="num">2</span>)
      <span class="kwd">printf</span>(<span class="str">&quot;%s&quot;</span>, output_Buffer[current_Tree_Depth]);

   <span class="slc">// Compute the checksum of the long-lived binary tree that we created</span>
   <span class="slc">// earlier, print the statistics, and then delete the memory pool.</span>
   <span class="kwd">printf</span>(<span class="str">&quot;long lived tree of depth %jd</span><span class="esc">\t</span> <span class="str">check: %jd</span><span class="esc">\n</span><span class="str">&quot;</span>,
     (<span class="kwb">intmax_t</span>)maximum_Tree_Depth,
     (<span class="kwb">intmax_t</span>)<span class="kwd">compute_Tree_Checksum</span>(long_Lived_Tree));
   <span class="kwd">apr_pool_destroy</span>(memory_Pool);

   <span class="kwd">apr_terminate</span>();
   <span class="kwa">return</span> <span class="num">0</span>;
}
