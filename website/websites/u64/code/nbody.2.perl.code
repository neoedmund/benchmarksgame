<span class="slc"># The Computer Language Benchmarks Game</span>
<span class="slc"># http://benchmarksgame.alioth.debian.org/</span>
<span class="slc">#</span>
<span class="slc"># contributed by Christoph Bauer</span>
<span class="slc"># converted into Perl by MÃ¡rton Papp</span>
<span class="slc"># fixed and cleaned up by Danny Sauer</span>
<span class="slc"># optimized by Jesse Millikan</span>
<span class="slc"># optimized by Reini Urban</span>

<span class="kwa">use</span> constant PI            =&gt; <span class="num">3.141592653589793</span>;
<span class="kwa">use</span> constant SOLAR_MASS    =&gt; (<span class="num">4</span> * PI * PI);
<span class="kwa">use</span> constant DAYS_PER_YEAR =&gt; <span class="num">365.24</span>;

<span class="kwa">sub</span> energy;
<span class="kwa">sub</span> advance($);
<span class="kwa">sub</span> offset_momentum;

<span class="kwc">my</span> (<span class="kwb">&#64;xs</span>, <span class="kwb">&#64;ys</span>, <span class="kwb">&#64;zs</span>, <span class="kwb">&#64;vxs</span>, <span class="kwb">&#64;vys</span>, <span class="kwb">&#64;vzs</span>, <span class="kwb">&#64;mass</span>, <span class="kwb">$last</span>);
<span class="kwc">my</span> (<span class="kwb">$energy</span>, <span class="kwb">$offset_momentum</span>, <span class="kwb">$advance</span>);
<span class="kwa">BEGIN</span> {
<span class="slc"># Global lexicals for arrays.</span>
<span class="slc"># Almost every iteration is a range, so I keep the last index rather than a count.</span>

<span class="slc"># &#64;ns = ( sun, jupiter, saturn, uranus, neptune )</span>
<span class="kwb">&#64;xs</span> = (<span class="num">0</span>, <span class="num">4.84143144246472090e+00</span>, <span class="num">8.34336671824457987e+00</span>, <span class="num">1.28943695621391310e+01</span>, <span class="num">1.53796971148509165e+01</span>);
<span class="kwb">&#64;ys</span> = (<span class="num">0</span>, -<span class="num">1.16032004402742839e+00</span>, <span class="num">4.12479856412430479e+00</span>, -<span class="num">1.51111514016986312e+01</span>, -<span class="num">2.59193146099879641e+01</span>);
<span class="kwb">&#64;zs</span> = (<span class="num">0</span>, -<span class="num">1.03622044471123109e-01</span>, -<span class="num">4.03523417114321381e-01</span>, -<span class="num">2.23307578892655734e-01</span>, <span class="num">1.79258772950371181e-01</span>);
<span class="kwb">&#64;vxs</span> = <span class="kwc">map</span> {<span class="kwb">$_</span> * DAYS_PER_YEAR}
  (<span class="num">0</span>, <span class="num">1.66007664274403694e-03</span>, -<span class="num">2.76742510726862411e-03</span>, <span class="num">2.96460137564761618e-03</span>, <span class="num">2.68067772490389322e-03</span>);
<span class="kwb">&#64;vys</span> = <span class="kwc">map</span> {<span class="kwb">$_</span> * DAYS_PER_YEAR}
  (<span class="num">0</span>, <span class="num">7.69901118419740425e-03</span>, <span class="num">4.99852801234917238e-03</span>, <span class="num">2.37847173959480950e-03</span>, <span class="num">1.62824170038242295e-03</span>);
<span class="kwb">&#64;vzs</span> = <span class="kwc">map</span> {<span class="kwb">$_</span> * DAYS_PER_YEAR}
  (<span class="num">0</span>, -<span class="num">6.90460016972063023e-05</span>, <span class="num">2.30417297573763929e-05</span>, -<span class="num">2.96589568540237556e-05</span>, -<span class="num">9.51592254519715870e-05</span>);
<span class="kwb">&#64;mass</span> = <span class="kwc">map</span> {<span class="kwb">$_</span> * SOLAR_MASS}
  (<span class="num">1</span>, <span class="num">9.54791938424326609e-04</span>, <span class="num">2.85885980666130812e-04</span>, <span class="num">4.36624404335156298e-05</span>, <span class="num">5.15138902046611451e-05</span>);
<span class="kwb">$last</span> = <span class="kwb">$#xs</span>;

<span class="slc"># Optimize array accesses: $a[const] are optimized to AELEMFAST, $a[$lexical] not.</span>
<span class="slc"># So unroll the loops in macro-like fashion (2x times faster). We do it in a BEGIN block,</span>
<span class="slc"># so perlcc can also benefit (again 2x faster).</span>
<span class="kwa">sub</span> qv {
  <span class="kwc">my</span> <span class="kwb">$s</span> = <span class="kwc">shift</span>;
  <span class="kwc">my</span> <span class="kwb">$env</span> = <span class="kwc">shift</span>;
  <span class="slc"># expand our local loop vars</span>
  <span class="kwb">$s</span> =~ <span class="kwd">s/(\$\w+?)\b/exists($env-&gt;{$1})?$env-&gt;{$1}:$1/sge</span>;
  <span class="kwb">$s</span>
}

<span class="kwb">$energy</span> = <span class="str">'</span>
<span class="str">sub energy</span>
<span class="str">{</span>
<span class="str">  my</span> <span class="ipl">$e</span> <span class="str">= 0.0;</span>
<span class="str">  my (</span><span class="ipl">$dx</span><span class="str">,</span> <span class="ipl">$dy</span><span class="str">,</span> <span class="ipl">$dz</span><span class="str">,</span> <span class="ipl">$distance</span><span class="str">);'</span>;
  <span class="kwa">for</span> <span class="kwc">my</span> <span class="kwb">$i</span> (<span class="num">0</span> .. <span class="kwb">$last</span>) {
    <span class="kwc">my</span> <span class="kwb">$env</span> = {<span class="str">'</span><span class="ipl">$i</span><span class="str">'</span>=&gt;<span class="kwb">$i</span>,<span class="str">'</span><span class="ipl">$last</span><span class="str">'</span>=&gt;<span class="kwb">$last</span>};
    <span class="kwb">$energy</span> .= qv(<span class="str">'</span>
<span class="str">    # outer-loop</span> <span class="ipl">$i</span><span class="str">..4</span>
<span class="str"></span>    <span class="ipl">$e</span> <span class="str">+= 0.5 *</span> <span class="ipl">$mass</span><span class="str">[</span><span class="ipl">$i</span><span class="str">] *</span>
<span class="str">          (</span><span class="ipl">$vxs</span><span class="str">[</span><span class="ipl">$i</span><span class="str">] *</span> <span class="ipl">$vxs</span><span class="str">[</span><span class="ipl">$i</span><span class="str">] +</span> <span class="ipl">$vys</span><span class="str">[</span><span class="ipl">$i</span><span class="str">] *</span> <span class="ipl">$vys</span><span class="str">[</span><span class="ipl">$i</span><span class="str">] +</span> <span class="ipl">$vzs</span><span class="str">[</span><span class="ipl">$i</span><span class="str">] *</span> <span class="ipl">$vzs</span><span class="str">[</span><span class="ipl">$i</span><span class="str">]);'</span>, <span class="kwb">$env</span>);
    <span class="kwa">for</span> (<span class="kwc">my</span> <span class="kwb">$j</span> = <span class="kwb">$i</span> + <span class="num">1</span>; <span class="kwb">$j</span> &lt; <span class="kwb">$last</span> + <span class="num">1</span>; <span class="kwb">$j</span>++) {
      <span class="kwb">$env</span>-&gt;{<span class="str">'</span><span class="ipl">$j</span><span class="str">'</span>} = <span class="kwb">$j</span>;
      <span class="kwb">$energy</span> .= qv(<span class="str">'</span>
<span class="str">      # inner-loop</span> <span class="ipl">$j</span><span class="str">..4</span>
<span class="str"></span>      <span class="ipl">$dx</span> <span class="str">=</span> <span class="ipl">$xs</span><span class="str">[</span><span class="ipl">$i</span><span class="str">] -</span> <span class="ipl">$xs</span><span class="str">[</span><span class="ipl">$j</span><span class="str">];</span>
<span class="str"></span>      <span class="ipl">$dy</span> <span class="str">=</span> <span class="ipl">$ys</span><span class="str">[</span><span class="ipl">$i</span><span class="str">] -</span> <span class="ipl">$ys</span><span class="str">[</span><span class="ipl">$j</span><span class="str">];</span>
<span class="str"></span>      <span class="ipl">$dz</span> <span class="str">=</span> <span class="ipl">$zs</span><span class="str">[</span><span class="ipl">$i</span><span class="str">] -</span> <span class="ipl">$zs</span><span class="str">[</span><span class="ipl">$j</span><span class="str">];</span>
<span class="str"></span>      <span class="ipl">$distance</span> <span class="str">= sqrt(</span><span class="ipl">$dx</span> <span class="str">*</span> <span class="ipl">$dx</span> <span class="str">+</span> <span class="ipl">$dy</span> <span class="str">*</span> <span class="ipl">$dy</span> <span class="str">+</span> <span class="ipl">$dz</span> <span class="str">*</span> <span class="ipl">$dz</span><span class="str">);</span>
<span class="str"></span>      <span class="ipl">$e</span> <span class="str">-= (</span><span class="ipl">$mass</span><span class="str">[</span><span class="ipl">$i</span><span class="str">] *</span> <span class="ipl">$mass</span><span class="str">[</span><span class="ipl">$j</span><span class="str">]) /</span> <span class="ipl">$distance</span><span class="str">;'</span>, <span class="kwb">$env</span>);
    }
  }
  <span class="kwb">$energy</span> .= <span class="str">'</span>
<span class="str">  return</span> <span class="ipl">$e</span><span class="str">;</span>
<span class="str">}'</span>;
<span class="kwc">eval</span> <span class="kwb">$energy</span>; <span class="kwc">die</span> <span class="kwa">if</span> $&#64;;

<span class="kwb">$advance</span> = <span class="str">'</span>
<span class="str">sub advance($)</span>
<span class="str">{</span>
<span class="str">  my</span> <span class="ipl">$dt</span> <span class="str">=</span> <span class="ipl">$_</span><span class="str">[0];</span>
<span class="str">  my (</span><span class="ipl">$mm</span><span class="str">,</span> <span class="ipl">$mm2</span><span class="str">,</span> <span class="ipl">$j</span><span class="str">,</span> <span class="ipl">$dx</span><span class="str">,</span> <span class="ipl">$dy</span><span class="str">,</span> <span class="ipl">$dz</span><span class="str">,</span> <span class="ipl">$distance</span><span class="str">,</span> <span class="ipl">$mag</span><span class="str">);'</span>;
  <span class="kwa">for</span> <span class="kwc">my</span> <span class="kwb">$i</span> (<span class="num">0</span>..<span class="kwb">$last</span>) {
    <span class="kwc">my</span> <span class="kwb">$env</span> = {<span class="str">'</span><span class="ipl">$i</span><span class="str">'</span>=&gt;<span class="kwb">$i</span>};
    <span class="kwa">for</span> (<span class="kwc">my</span> <span class="kwb">$j</span> = <span class="kwb">$i</span> + <span class="num">1</span>; <span class="kwb">$j</span> &lt; <span class="kwb">$last</span> + <span class="num">1</span>; <span class="kwb">$j</span>++) {
      <span class="kwb">$env</span>-&gt;{<span class="str">'</span><span class="ipl">$j</span><span class="str">'</span>} = <span class="kwb">$j</span>;
      <span class="kwb">$advance</span> .= qv(<span class="str">'</span>
<span class="str">      # outer-loop</span> <span class="ipl">$i</span><span class="str">..4</span>
<span class="str">      # inner-loop</span> <span class="ipl">$j</span><span class="str">..4</span>
<span class="str"></span>      <span class="ipl">$dx</span> <span class="str">=</span> <span class="ipl">$xs</span><span class="str">[</span><span class="ipl">$i</span><span class="str">] -</span> <span class="ipl">$xs</span><span class="str">[</span><span class="ipl">$j</span><span class="str">];</span>
<span class="str"></span>      <span class="ipl">$dy</span> <span class="str">=</span> <span class="ipl">$ys</span><span class="str">[</span><span class="ipl">$i</span><span class="str">] -</span> <span class="ipl">$ys</span><span class="str">[</span><span class="ipl">$j</span><span class="str">];</span>
<span class="str"></span>      <span class="ipl">$dz</span> <span class="str">=</span> <span class="ipl">$zs</span><span class="str">[</span><span class="ipl">$i</span><span class="str">] -</span> <span class="ipl">$zs</span><span class="str">[</span><span class="ipl">$j</span><span class="str">];</span>
<span class="str"></span>      <span class="ipl">$distance</span> <span class="str">= sqrt(</span><span class="ipl">$dx</span> <span class="str">*</span> <span class="ipl">$dx</span> <span class="str">+</span> <span class="ipl">$dy</span> <span class="str">*</span> <span class="ipl">$dy</span> <span class="str">+</span> <span class="ipl">$dz</span> <span class="str">*</span> <span class="ipl">$dz</span><span class="str">);</span>
<span class="str"></span>      <span class="ipl">$mag</span> <span class="str">=</span> <span class="ipl">$dt</span> <span class="str">/ (</span><span class="ipl">$distance</span> <span class="str">*</span> <span class="ipl">$distance</span> <span class="str">*</span> <span class="ipl">$distance</span><span class="str">);</span>
<span class="str"></span>      <span class="ipl">$mm</span>  <span class="str">=</span> <span class="ipl">$mass</span><span class="str">[</span><span class="ipl">$i</span><span class="str">] *</span> <span class="ipl">$mag</span><span class="str">;</span>
<span class="str"></span>      <span class="ipl">$mm2</span> <span class="str">=</span> <span class="ipl">$mass</span><span class="str">[</span><span class="ipl">$j</span><span class="str">] *</span> <span class="ipl">$mag</span><span class="str">;</span>
<span class="str"></span>      <span class="ipl">$vxs</span><span class="str">[</span><span class="ipl">$i</span><span class="str">] -=</span> <span class="ipl">$dx</span> <span class="str">*</span> <span class="ipl">$mm2</span><span class="str">;</span>
<span class="str"></span>      <span class="ipl">$vxs</span><span class="str">[</span><span class="ipl">$j</span><span class="str">] +=</span> <span class="ipl">$dx</span> <span class="str">*</span> <span class="ipl">$mm</span><span class="str">;</span>
<span class="str"></span>      <span class="ipl">$vys</span><span class="str">[</span><span class="ipl">$i</span><span class="str">] -=</span> <span class="ipl">$dy</span> <span class="str">*</span> <span class="ipl">$mm2</span><span class="str">;</span>
<span class="str"></span>      <span class="ipl">$vys</span><span class="str">[</span><span class="ipl">$j</span><span class="str">] +=</span> <span class="ipl">$dy</span> <span class="str">*</span> <span class="ipl">$mm</span><span class="str">;</span>
<span class="str"></span>      <span class="ipl">$vzs</span><span class="str">[</span><span class="ipl">$i</span><span class="str">] -=</span> <span class="ipl">$dz</span> <span class="str">*</span> <span class="ipl">$mm2</span><span class="str">;</span>
<span class="str"></span>      <span class="ipl">$vzs</span><span class="str">[</span><span class="ipl">$j</span><span class="str">] +=</span> <span class="ipl">$dz</span> <span class="str">*</span> <span class="ipl">$mm</span><span class="str">;'</span>, <span class="kwb">$env</span>);
    }
  }
  <span class="slc"># We're done with planet $i at this point</span>
  <span class="kwa">for</span> <span class="kwc">my</span> <span class="kwb">$i</span> (<span class="num">0</span>..<span class="kwb">$last</span>) {
    <span class="kwc">my</span> <span class="kwb">$env</span> = {<span class="str">'</span><span class="ipl">$i</span><span class="str">'</span>=&gt;<span class="kwb">$i</span>};
    <span class="kwb">$advance</span> .= qv(<span class="str">'</span>
<span class="str"></span>    <span class="ipl">$xs</span><span class="str">[</span><span class="ipl">$i</span><span class="str">] +=</span> <span class="ipl">$dt</span> <span class="str">*</span> <span class="ipl">$vxs</span><span class="str">[</span><span class="ipl">$i</span><span class="str">];</span>
<span class="str"></span>    <span class="ipl">$ys</span><span class="str">[</span><span class="ipl">$i</span><span class="str">] +=</span> <span class="ipl">$dt</span> <span class="str">*</span> <span class="ipl">$vys</span><span class="str">[</span><span class="ipl">$i</span><span class="str">];</span>
<span class="str"></span>    <span class="ipl">$zs</span><span class="str">[</span><span class="ipl">$i</span><span class="str">] +=</span> <span class="ipl">$dt</span> <span class="str">*</span> <span class="ipl">$vzs</span><span class="str">[</span><span class="ipl">$i</span><span class="str">];'</span>, <span class="kwb">$env</span>);
  }
  <span class="kwb">$advance</span> .= <span class="str">'</span>
<span class="str">}'</span>;
<span class="kwc">eval</span> <span class="kwb">$advance</span>; <span class="kwc">die</span> <span class="kwa">if</span> $&#64;;

<span class="kwb">$offset_momentum</span> = <span class="str">';</span>
<span class="str">sub offset_momentum</span>
<span class="str">{</span>
<span class="str">  my</span> <span class="ipl">$px</span> <span class="str">= 0.0; </span>
<span class="str">  my</span> <span class="ipl">$py</span> <span class="str">= 0.0;</span>
<span class="str">  my</span> <span class="ipl">$pz</span> <span class="str">= 0.0;</span>
<span class="str">  my</span> <span class="ipl">$mass</span><span class="str">;</span>
<span class="str">'</span>;
<span class="kwa">for</span> <span class="kwc">my</span> <span class="kwb">$i</span> (<span class="num">0</span> .. <span class="kwb">$last</span>) {
  <span class="kwc">my</span> <span class="kwb">$env</span> = {<span class="str">'</span><span class="ipl">$i</span><span class="str">'</span>=&gt;<span class="kwb">$i</span>};
  <span class="kwb">$offset_momentum</span> .= qv(<span class="str">'</span>
<span class="str"></span>    <span class="ipl">$mass</span> <span class="str">=</span> <span class="ipl">$mass</span><span class="str">[</span><span class="ipl">$i</span><span class="str">];</span>
<span class="str"></span>    <span class="ipl">$px</span> <span class="str">+=</span> <span class="ipl">$vxs</span><span class="str">[</span><span class="ipl">$i</span><span class="str">] *</span> <span class="ipl">$mass</span><span class="str">;</span>
<span class="str"></span>    <span class="ipl">$py</span> <span class="str">+=</span> <span class="ipl">$vys</span><span class="str">[</span><span class="ipl">$i</span><span class="str">] *</span> <span class="ipl">$mass</span><span class="str">;</span>
<span class="str"></span>    <span class="ipl">$pz</span> <span class="str">+=</span> <span class="ipl">$vzs</span><span class="str">[</span><span class="ipl">$i</span><span class="str">] *</span> <span class="ipl">$mass</span><span class="str">;'</span>, <span class="kwb">$env</span>);
}
<span class="kwb">$offset_momentum</span> .= <span class="str">'</span>
<span class="str"></span>  <span class="ipl">$vxs</span><span class="str">[0] = -</span> <span class="ipl">$px</span> <span class="str">/ SOLAR_MASS;</span>
<span class="str"></span>  <span class="ipl">$vys</span><span class="str">[0] = -</span> <span class="ipl">$py</span> <span class="str">/ SOLAR_MASS;</span>
<span class="str"></span>  <span class="ipl">$vzs</span><span class="str">[0] = -</span> <span class="ipl">$pz</span> <span class="str">/ SOLAR_MASS;</span>
<span class="str">}'</span>;
<span class="kwc">eval</span> <span class="kwb">$offset_momentum</span>; <span class="kwc">die</span> <span class="kwa">if</span> $&#64;;

} <span class="slc">#BEGIN</span>

offset_momentum();
<span class="kwc">printf</span> (<span class="str">&quot;%.9f</span><span class="esc">\n</span><span class="str">&quot;</span>, energy());

<span class="kwc">my</span> <span class="kwb">$n</span> = <span class="kwb">$ARGV</span>[<span class="num">0</span>];
<span class="kwb">$n</span> =~ <span class="kwd">s/[,_]//g</span>; <span class="slc"># allow 50_000_000 or 50,000,000</span>

<span class="slc"># This does not, in fact, consume N*4 bytes of memory</span>
<span class="kwa">for</span> (<span class="num">1</span> .. <span class="kwb">$n</span>) {
  advance(<span class="num">0.01</span>);
}

<span class="kwc">printf</span> (<span class="str">&quot;%.9f</span><span class="esc">\n</span><span class="str">&quot;</span>, energy());
