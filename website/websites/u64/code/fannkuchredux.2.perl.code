<span class="slc"># The Computer Language Benchmarks Game</span>
<span class="slc">#  http://benchmarksgame.alioth.debian.org/</span>
<span class="slc">#</span>
<span class="slc">#  contributed by Mykola Zubach</span>

<span class="kwa">use</span> strict;
<span class="kwa">use</span> threads;
<span class="kwa">use</span> integer;

<span class="kwc">my</span>(<span class="kwb">$max_flips</span>, <span class="kwb">$chksum</span>, <span class="kwb">$sign</span>, <span class="kwb">$n</span>, <span class="kwb">$p</span>, <span class="kwb">$count</span>, <span class="kwb">&#64;threads</span>, <span class="kwb">$thr</span>, <span class="kwb">$t_chksum</span>, <span class="kwb">$t_max_flips</span>);

<span class="kwa">sub</span> count_flips($) {
    <span class="kwc">my</span> <span class="kwb">$p</span> = <span class="kwc">shift</span>;
    <span class="kwc">my</span> <span class="kwb">$flips</span> = <span class="num">0</span>;
    <span class="kwc">my</span>(<span class="kwb">$first</span>);

<span class="slc"># debug permutation order:</span>
<span class="slc">#print unpack('c*', $p), &quot;\n&quot;;</span>
    <span class="kwa">while</span>(<span class="kwb">$first</span> = <span class="kwc">vec</span>(<span class="kwb">$p</span>, <span class="num">0</span>, <span class="num">8</span>)) {
        <span class="kwb">$first</span> ++;
        <span class="kwb">$flips</span> ++;
        <span class="kwc">substr</span>(<span class="kwb">$p</span>, <span class="num">0</span>, <span class="kwb">$first</span>, <span class="kwc">reverse</span>(<span class="kwc">substr</span>(<span class="kwb">$p</span>, <span class="num">0</span>, <span class="kwb">$first</span>)));
    }
    <span class="kwb">$max_flips</span> = <span class="kwb">$flips</span> <span class="kwa">if</span> <span class="kwb">$flips</span> &gt; <span class="kwb">$max_flips</span>;
    <span class="kwb">$chksum</span> += <span class="kwb">$sign</span> * <span class="kwb">$flips</span>;
    <span class="kwb">$sign</span> = -<span class="kwb">$sign</span>;
}

<span class="kwa">sub</span> fannkuchredux($$) {
    <span class="kwc">my</span> <span class="kwb">$p</span> = <span class="kwc">shift</span>;
    <span class="kwc">my</span> <span class="kwb">$rotate_len</span> = <span class="kwc">shift</span>;

<span class="slc"># optimize case when rotation is equivalent to byte-swapping</span>
    <span class="kwa">if</span>(<span class="kwb">$rotate_len</span> == <span class="num">3</span>) {
        count_flips(<span class="kwb">$p</span>);
        <span class="kwc">substr</span>(<span class="kwb">$p</span>, <span class="num">0</span>, <span class="num">2</span>, <span class="kwc">reverse</span>(<span class="kwc">substr</span>(<span class="kwb">$p</span>, <span class="num">0</span>, <span class="num">2</span>)));
        count_flips(<span class="kwb">$p</span>);
        <span class="kwc">substr</span>(<span class="kwb">$p</span>, <span class="num">1</span>, <span class="num">2</span>, <span class="kwc">reverse</span>(<span class="kwc">substr</span>(<span class="kwb">$p</span>, <span class="num">1</span>, <span class="num">2</span>)));
        count_flips(<span class="kwb">$p</span>);
        <span class="kwc">substr</span>(<span class="kwb">$p</span>, <span class="num">0</span>, <span class="num">2</span>, <span class="kwc">reverse</span>(<span class="kwc">substr</span>(<span class="kwb">$p</span>, <span class="num">0</span>, <span class="num">2</span>)));
        count_flips(<span class="kwb">$p</span>);
        <span class="kwc">substr</span>(<span class="kwb">$p</span>, <span class="num">1</span>, <span class="num">2</span>, <span class="kwc">reverse</span>(<span class="kwc">substr</span>(<span class="kwb">$p</span>, <span class="num">1</span>, <span class="num">2</span>)));
        count_flips(<span class="kwb">$p</span>);
        <span class="kwc">substr</span>(<span class="kwb">$p</span>, <span class="num">0</span>, <span class="num">2</span>, <span class="kwc">reverse</span>(<span class="kwc">substr</span>(<span class="kwb">$p</span>, <span class="num">0</span>, <span class="num">2</span>)));
        count_flips(<span class="kwb">$p</span>);
        <span class="kwa">return</span>(<span class="kwb">$chksum</span>, <span class="kwb">$max_flips</span>);
    } <span class="kwa">elsif</span>(<span class="kwb">$rotate_len</span> == <span class="num">2</span>) {
        count_flips(<span class="kwb">$p</span>);
        <span class="kwc">substr</span>(<span class="kwb">$p</span>, <span class="num">0</span>, <span class="num">2</span>, <span class="kwc">reverse</span>(<span class="kwc">substr</span>(<span class="kwb">$p</span>, <span class="num">0</span>, <span class="num">2</span>)));
        count_flips(<span class="kwb">$p</span>);
        <span class="kwa">return</span>(<span class="kwb">$chksum</span>, <span class="kwb">$max_flips</span>);
    } <span class="kwa">elsif</span>(<span class="kwb">$rotate_len</span> == <span class="num">1</span>) {
        count_flips(<span class="kwb">$p</span>);
        <span class="kwa">return</span>(<span class="kwb">$chksum</span>, <span class="kwb">$max_flips</span>);
    }

    <span class="kwb">$rotate_len</span> --;
    <span class="kwc">my</span> <span class="kwb">$count</span> = <span class="kwb">$rotate_len</span>;
    <span class="kwa">for</span>(;;) {
        fannkuchredux(<span class="kwb">$p</span>, <span class="kwb">$rotate_len</span>);
        <span class="kwb">$count</span> --;
        <span class="kwa">last if</span> <span class="kwb">$count</span> &lt; <span class="num">0</span>;	<span class="slc"># skip unneccessary rotation</span>
        <span class="kwc">substr</span>(<span class="kwb">$p</span>, <span class="num">0</span>, <span class="kwb">$rotate_len</span> + <span class="num">1</span>) = <span class="kwc">substr</span>(<span class="kwb">$p</span>, <span class="num">1</span>, <span class="kwb">$rotate_len</span>) . <span class="kwc">substr</span>(<span class="kwb">$p</span>, <span class="num">0</span>, <span class="num">1</span>);
    }
    <span class="kwa">return</span>(<span class="kwb">$chksum</span>, <span class="kwb">$max_flips</span>);
}

<span class="slc">## MAIN()</span>

<span class="kwb">$n</span> = <span class="kwc">shift</span>;
<span class="kwb">$p</span> = <span class="kwc">pack</span>(<span class="str">'c*'</span>, (<span class="num">0</span> .. <span class="kwb">$n</span> - <span class="num">1</span>));
<span class="kwb">$sign</span> = <span class="num">1</span>;

<span class="kwb">$count</span> = <span class="kwb">$n</span>;
<span class="kwa">while</span>(<span class="kwb">$count</span> &gt; <span class="num">0</span>) {
    <span class="kwc">push</span> <span class="kwb">&#64;threads</span>, threads-&gt;<span class="kwd">create</span>(\&amp;fannkuchredux, <span class="kwb">$p</span>, <span class="kwb">$n</span>-<span class="num">1</span>);
    <span class="kwb">$p</span> = <span class="kwc">substr</span>(<span class="kwb">$p</span>, <span class="num">1</span>, <span class="kwb">$n</span>-<span class="num">1</span>) . <span class="kwc">substr</span>(<span class="kwb">$p</span>, <span class="num">0</span>, <span class="num">1</span>);
    <span class="kwb">$count</span> --;
}

<span class="kwa">foreach</span> <span class="kwb">$thr</span> (<span class="kwb">&#64;threads</span>) {
    (<span class="kwb">$t_chksum</span>, <span class="kwb">$t_max_flips</span>) = <span class="kwb">$thr</span>-&gt;<span class="kwc">join</span>();
    <span class="kwb">$chksum</span> += <span class="kwb">$t_chksum</span>;
    <span class="kwb">$max_flips</span> = <span class="kwb">$t_max_flips</span> <span class="kwa">if</span> <span class="kwb">$max_flips</span> &lt; <span class="kwb">$t_max_flips</span>;
}

<span class="kwc">print</span> <span class="str">&quot;</span><span class="ipl">$chksum</span><span class="str"></span><span class="esc">\n</span><span class="str">&quot;</span>;
<span class="kwc">print</span> <span class="str">&quot;Pfannkuchen(</span><span class="ipl">$n</span><span class="str">) =</span> <span class="ipl">$max_flips</span><span class="str"></span><span class="esc">\n</span><span class="str">&quot;</span>;
