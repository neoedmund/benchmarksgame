<span class="slc">! The Computer Language Benchmarks Game</span>
<span class="slc">! http://benchmarksgame.alioth.debian.org/</span>
<span class="slc">!</span>
<span class="slc">! contributed by Steve Decker, modified from the version by Simon Geard</span>
<span class="slc">! compilation:</span>
<span class="slc">!   g95 -O3 reverse.f90</span>
<span class="slc">!   ifort -ipo -O3 -static reverse.f90</span>

<span class="kwa">program</span> revcomp
  <span class="kwa">implicit none</span>

  <span class="kwa">character</span>, <span class="kwa">parameter</span> :: EndStr = <span class="str">&quot;&gt;&quot;</span>
  <span class="kwa">integer</span>,   <span class="kwa">parameter</span> :: LineWidth = <span class="num">60</span>

  <span class="kwa">character</span>(len=LineWidth), <span class="kwa">dimension</span>(:), allocatable :: <span class="kwa">data</span>, w
  <span class="kwa">logical</span>                  :: insection = .false.
  <span class="kwa">integer</span>                  :: stat, bcount
  <span class="kwa">character</span>(len=LineWidth) :: line, title

  <span class="slc">! Read and process</span>
  <span class="kwd">allocate</span>(<span class="kwa">data</span>(<span class="num">100</span>))  <span class="slc">! Allocate enough lines so that we don't have to grow the array for the test</span>
  readFile: <span class="kwa">do</span>
     <span class="kwa">read</span>(*, <span class="str">&quot;(a)&quot;</span>, iostat=stat) line
     <span class="kwa">if</span> (stat /= <span class="num">0</span>) exit readFile
     <span class="kwa">if</span> (<span class="kwd">line</span>(<span class="num">1</span>:<span class="num">1</span>) == EndStr) <span class="kwa">then</span>
        <span class="kwa">if</span> (insection) <span class="kwa">then</span>
           <span class="kwa">write</span>(*, <span class="str">&quot;(a)&quot;</span>) <span class="kwd">trim</span>(title)
           <span class="kwa">call</span> printReverseFasta
        <span class="kwa">else</span>
           insection = .true.
        <span class="kwa">end if</span>
        title = line
        bcount = <span class="num">0</span>
        cycle readFile
     <span class="kwa">end if</span>
     bcount = bcount + <span class="num">1</span>
     <span class="kwa">if</span> (bcount &gt; <span class="kwd">size</span>(<span class="kwa">data</span>)) <span class="kwa">then</span> <span class="slc">! Included for completeness - it shouldn't be called in the test</span>
        <span class="kwd">allocate</span>(<span class="kwd">w</span>(<span class="kwd">size</span>(<span class="kwa">data</span>)))
        w = <span class="kwa">data</span>
        <span class="kwd">deallocate</span>(<span class="kwa">data</span>)
        <span class="kwd">allocate</span>(<span class="kwa">data</span>(<span class="num">2</span>*<span class="kwd">size</span>(w)))
        <span class="kwa">data</span>(<span class="num">1</span>:<span class="kwd">size</span>(w)) = w
        <span class="kwd">deallocate</span>(w)
     <span class="kwa">end if</span>
     <span class="kwa">data</span>(bcount) = line
  <span class="kwa">end do</span> readFile

  <span class="kwa">write</span>(*, <span class="str">&quot;(a)&quot;</span>) <span class="kwd">trim</span>(title)
  <span class="kwa">call</span> printReverseFasta
  
<span class="kwa">contains</span>

  <span class="kwa">subroutine</span> printReverseFasta
    <span class="slc">! Output the data in reverse order and with the complement</span>
    <span class="kwa">character</span>, <span class="kwa">dimension</span>(<span class="num">65</span>:<span class="num">121</span>), <span class="kwa">parameter</span> :: Complement = (/ <span class="str">&quot;T&quot;</span>, <span class="str">&quot;V&quot;</span>, <span class="str">&quot;G&quot;</span>, &amp;
         <span class="str">&quot;H&quot;</span>, <span class="str">&quot;E&quot;</span>, <span class="str">&quot;F&quot;</span>, <span class="str">&quot;C&quot;</span>, <span class="str">&quot;D&quot;</span>, <span class="str">&quot;I&quot;</span>, <span class="str">&quot;J&quot;</span>, <span class="str">&quot;M&quot;</span>, <span class="str">&quot;L&quot;</span>, <span class="str">&quot;K&quot;</span>, <span class="str">&quot;N&quot;</span>, <span class="str">&quot;O&quot;</span>, <span class="str">&quot;P&quot;</span>,  &amp;
         <span class="str">&quot;Q&quot;</span>, <span class="str">&quot;Y&quot;</span>, <span class="str">&quot;S&quot;</span>, <span class="str">&quot;A&quot;</span>, <span class="str">&quot;A&quot;</span>, <span class="str">&quot;B&quot;</span>, <span class="str">&quot;W&quot;</span>, <span class="str">&quot;X&quot;</span>, <span class="str">&quot;R&quot;</span>, (<span class="str">&quot; &quot;</span>, stat = <span class="num">90</span>, <span class="num">96</span>),  &amp;
         <span class="str">&quot;T&quot;</span>, <span class="str">&quot;V&quot;</span>, <span class="str">&quot;G&quot;</span>, <span class="str">&quot;H&quot;</span>, <span class="str">&quot;E&quot;</span>, <span class="str">&quot;F&quot;</span>, <span class="str">&quot;C&quot;</span>, <span class="str">&quot;D&quot;</span>, <span class="str">&quot;I&quot;</span>, <span class="str">&quot;J&quot;</span>, <span class="str">&quot;M&quot;</span>, <span class="str">&quot;L&quot;</span>, <span class="str">&quot;K&quot;</span>,  &amp;
         <span class="str">&quot;N&quot;</span>, <span class="str">&quot;O&quot;</span>, <span class="str">&quot;P&quot;</span>, <span class="str">&quot;Q&quot;</span>, <span class="str">&quot;Y&quot;</span>, <span class="str">&quot;S&quot;</span>, <span class="str">&quot;A&quot;</span>, <span class="str">&quot;A&quot;</span>, <span class="str">&quot;B&quot;</span>, <span class="str">&quot;W&quot;</span>, <span class="str">&quot;X&quot;</span>, <span class="str">&quot;R&quot;</span> /)

    <span class="kwa">integer</span> :: fLine, fChar, bLine, bChar
    <span class="kwa">character</span> :: c

    fLine = <span class="num">1</span>
    fChar = <span class="num">1</span>
    bLine = bcount
    bChar = <span class="kwd">len_trim</span>(<span class="kwa">data</span>(bLine))
    <span class="kwa">do</span>
       <span class="kwa">if</span> (fLine &gt; bLine .or. fLine == bLine .and. fChar &gt;= bChar) exit
       c = <span class="kwa">data</span>(fLine)(fChar:fChar)
       <span class="kwa">data</span>(fLine)(fChar:fChar) = <span class="kwd">Complement</span>(<span class="kwd">iachar</span>(<span class="kwa">data</span>(bLine)(bChar:bChar)))
       <span class="kwa">data</span>(bLine)(bChar:bChar) = <span class="kwd">Complement</span>(<span class="kwd">iachar</span>(c))
       fChar = fChar + <span class="num">1</span>
       <span class="kwa">if</span> (fChar &gt; LineWidth) <span class="kwa">then</span>
          fChar = <span class="num">1</span>
          fLine = fLine + <span class="num">1</span>
       <span class="kwa">end if</span>
       bChar = bChar - <span class="num">1</span>
       <span class="kwa">if</span> (bChar == <span class="num">0</span>) <span class="kwa">then</span>
          bChar = LineWidth
          bLine = bLine - <span class="num">1</span>
       <span class="kwa">end if</span>
    <span class="kwa">end do</span>
    <span class="kwa">if</span> (fLine == bLine .and. fChar == bChar)  &amp;
         <span class="kwa">data</span>(fLine)(fChar:fChar) = <span class="kwd">Complement</span>(<span class="kwd">iachar</span>(<span class="kwa">data</span>(fLine)(fChar:fChar)))
    <span class="kwa">do</span> fLine = <span class="num">1</span>, bcount-<span class="num">1</span>
       <span class="kwa">write</span>(*, <span class="str">&quot;(a)&quot;</span>) <span class="kwa">data</span>(fLine)
    <span class="kwa">end do</span>
    <span class="kwa">write</span>(*, <span class="str">&quot;(a)&quot;</span>) <span class="kwd">trim</span>(<span class="kwa">data</span>(bcount))
  <span class="kwa">end subroutine</span> printReverseFasta
<span class="kwa">end program</span> revcomp
