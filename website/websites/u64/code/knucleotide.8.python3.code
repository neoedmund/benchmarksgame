<span class="slc"># The Computer Language Benchmarks Game</span>
<span class="slc"># http://benchmarksgame.alioth.debian.org/</span>
<span class="slc">#</span>
<span class="slc"># submitted by Ian Osgood</span>
<span class="slc"># modified by Sokolov Yura</span>
<span class="slc"># modified by bearophile</span>
<span class="slc"># modified by xfm for parallelization</span>
<span class="slc"># modified by Justin Peel </span>

<span class="kwa">from</span> sys <span class="kwa">import</span> stdin
<span class="kwa">from</span> collections <span class="kwa">import</span> defaultdict
<span class="kwa">from</span> multiprocessing <span class="kwa">import</span> Pool

<span class="kwa">def</span> <span class="kwd">gen_freq</span>(frame) :
    <span class="kwa">global</span> sequence
    frequences = <span class="kwd">defaultdict</span>(<span class="kwb">int</span>)
    <span class="kwa">if</span> frame != <span class="num">1</span>:
        <span class="kwa">for</span> ii <span class="kwa">in</span> <span class="kwb">range</span>(<span class="kwb">len</span>(sequence)-frame+<span class="num">1</span>) :
            frequences[sequence[ii:ii+frame]] += <span class="num">1</span>
    <span class="kwa">else</span>:
        <span class="kwa">for</span> nucleo <span class="kwa">in</span> sequence:
            frequences[nucleo] += <span class="num">1</span>
    <span class="kwa">return</span> frequences


<span class="kwa">def</span> <span class="kwd">sort_seq</span>(length):
    frequences = <span class="kwd">gen_freq</span>(length)
    n= <span class="kwb">sum</span>(frequences.<span class="kwd">values</span>())

    l = <span class="kwb">sorted</span>(<span class="kwb">list</span>(frequences.<span class="kwd">items</span>()), reverse=<span class="kwa">True</span>, key=<span class="kwa">lambda</span> seq_freq: (seq_freq[<span class="num">1</span>],seq_freq[<span class="num">0</span>]))

    <span class="kwa">return</span> <span class="str">'</span><span class="esc">\n</span><span class="str">'</span>.<span class="kwd">join</span>(<span class="str">&quot;</span><span class="ipl">%s %</span><span class="str">.3f&quot;</span> % (st, <span class="num">100.0</span>*fr/n) <span class="kwa">for</span> st,fr <span class="kwa">in</span> l)


<span class="kwa">def</span> <span class="kwd">find_seq</span>(s):
    t = <span class="kwd">gen_freq</span>(<span class="kwb">len</span>(s))
    <span class="kwa">return</span> (s,t.<span class="kwd">get</span>(s,<span class="num">0</span>))

<span class="kwa">def</span> <span class="kwd">prepare</span>(f=stdin) :
    <span class="kwa">for</span> line <span class="kwa">in</span> f:
        <span class="kwa">if</span> line[<span class="num">0</span>] <span class="kwa">in</span> <span class="str">&quot;&gt;;&quot;</span>:
            <span class="kwa">if</span> line[<span class="num">1</span>:<span class="num">3</span>] == <span class="str">&quot;TH&quot;</span>:
                <span class="kwa">break</span>

    seq = []
    app = seq.append
    <span class="kwa">for</span> line <span class="kwa">in</span> f:
        <span class="kwa">if</span> line[<span class="num">0</span>] <span class="kwa">in</span> <span class="str">&quot;&gt;;&quot;</span>:
            <span class="kwa">break</span>
        <span class="kwd">app</span>( line )
    <span class="kwa">return</span> <span class="str">&quot;&quot;</span>.<span class="kwd">join</span>(seq).<span class="kwd">upper</span>().<span class="kwd">replace</span>(<span class="str">'</span><span class="esc">\n</span><span class="str">'</span>,<span class="str">''</span>)

<span class="kwa">def</span> <span class="kwd">init</span>(arg):
    <span class="kwa">global</span> sequence
    sequence = arg

<span class="kwa">def</span> <span class="kwd">main</span>():
    <span class="kwa">global</span> sequence
    sequence = <span class="kwd">prepare</span>()
    p=<span class="kwd">Pool</span>()

    
    res2 = p.<span class="kwd">map_async</span>(find_seq,<span class="kwb">reversed</span>(<span class="str">&quot;GGT GGTA GGTATT GGTATTTTAATT GGTATTTTAATTTATAGT&quot;</span>.<span class="kwd">split</span>()))
    res1 = p.<span class="kwd">map_async</span>(sort_seq,(<span class="num">1</span>,<span class="num">2</span>))
    
    <span class="kwa">for</span> s <span class="kwa">in</span> res1.<span class="kwd">get</span>() : <span class="kwa">print</span> (s+<span class="str">'</span><span class="esc">\n</span><span class="str">'</span>)
    res2 = <span class="kwb">reversed</span>([r <span class="kwa">for</span> r <span class="kwa">in</span> res2.<span class="kwd">get</span>()])
    <span class="kwa">print</span> (<span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span>.<span class="kwd">join</span>(<span class="str">&quot;{1:d}</span><span class="esc">\t</span><span class="str">{0}&quot;</span>.<span class="kwd">format</span>(*s) <span class="kwa">for</span> s <span class="kwa">in</span> res2))

<span class="kwa">if</span> __name__==<span class="str">'__main__'</span> :
    <span class="kwd">main</span>()
