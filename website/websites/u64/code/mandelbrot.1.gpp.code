<span class="com">/*   The Computer Language Benchmarks Game</span>
<span class="com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Paolo Bonzini</span>
<span class="com">   further optimized by Jason Garrett-Glaser</span>
<span class="com">   OpenMP by The Anh Tran</span>
<span class="com">*/</span>

<span class="ppc">#include &lt;cassert&gt;</span>
<span class="ppc">#include &lt;cstdio&gt;</span>
<span class="ppc">#include &lt;cstdlib&gt;</span>
<span class="ppc">#include &lt;algorithm&gt;</span>
<span class="ppc">#include &lt;sched.h&gt;</span>
<span class="ppc">#include &lt;memory.h&gt;</span>

<span class="slc">// need &quot;-fopenmp&quot; flag when compile</span>
<span class="ppc">#include &lt;omp.h&gt;</span>

<span class="ppc">#define L2_CACHE_LINE   64</span>
<span class="ppc">#define BYTE_A_TIME      L2_CACHE_LINE</span>
<span class="ppc">#define COLUMN_FETCH    (BYTE_A_TIME * 8)</span>


<span class="kwc">typedef</span> <span class="kwb">double</span>   v2d   <span class="kwd">__attribute__</span> ((<span class="kwd">vector_size</span>(<span class="num">16</span>))); <span class="slc">// vector of two doubles</span>

<span class="kwb">const</span> v2d v10   = { <span class="num">1.0</span>, <span class="num">1.0</span> };
<span class="kwb">const</span> v2d v15   = { <span class="num">1.5</span>, <span class="num">1.5</span> };
<span class="kwb">const</span> v2d v40   = { <span class="num">4.0</span>, <span class="num">4.0</span> };

v2d inv_2n;   <span class="slc">// {2.0/N, 2.0/N}</span>
v2d inv_4n;   <span class="slc">// {4.0/N, 4.0/N}</span>


<span class="kwb">int</span> 
<span class="kwd">GetThreadCount</span>()
{
   cpu_set_t cs;
   <span class="kwd">CPU_ZERO</span>(&amp;cs);
   <span class="kwd">sched_getaffinity</span>(<span class="num">0</span>, <span class="kwa">sizeof</span>(cs), &amp;cs);

   <span class="kwb">int</span> count = <span class="num">0</span>;
   <span class="kwa">for</span> (<span class="kwb">int</span> i = <span class="num">0</span>; i &lt; CPU_SETSIZE; ++i)
   {
      <span class="kwa">if</span> (<span class="kwd">CPU_ISSET</span>(i, &amp;cs))
         ++count;
   }
   <span class="kwa">return</span> count;
}


<span class="kwb">struct</span> MB_Element
{
<span class="kwc">private</span>:
   v2d   Crv, Civ, Zrv, Ziv, Trv, Tiv;
   
<span class="kwc">public</span>:
   <span class="slc">// Z1 is point [x, y],   Z2 is point [x+1, y]</span>
   <span class="slc">// r = 3 &lt;=&gt; |Z2| &lt;= 4   |Z1| &lt;= 4</span>
   <span class="slc">// r = 2 &lt;=&gt; |Z2| &gt; 4   |Z1| &lt;= 4</span>
   <span class="slc">// r = 1 &lt;=&gt; |Z2| &lt;= 4   |Z1| &gt; 4</span>
   <span class="slc">// r = 0 &lt;=&gt; |Z2| &gt; 4    |Z1| &gt; 4</span>
   <span class="kwb">int</span> result;
   
   <span class="slc">// construct 2 elements from C.real &amp; C.img</span>
   <span class="slc">// C.real = Coordinate.x * 2 / N -1.5</span>
   <span class="slc">// C.img = Coordinate.y * 2 / N -1.0</span>
   <span class="kwd">MB_Element</span>(<span class="kwb">int</span> r, v2d cimg)
   {
      <span class="kwb">double</span> tmp[<span class="num">2</span>] = {r+<span class="num">1</span>, r};
      Crv = <span class="kwd">__builtin_ia32_loadupd</span>(tmp);
      
      Crv = Crv * inv_2n - v15;
      Civ = cimg;

      Zrv = Crv;
      Ziv = cimg;

      Trv = Crv * Crv;
      Tiv = cimg * cimg;

      result = <span class="num">3</span>; <span class="slc">// assume that 2 elements belong to MB set</span>
   }

   <span class="slc">// construct 2 elements, next to passed MB_Element object</span>
   <span class="slc">// Passed object: Tuple(Z1 = {x, y}, Z2 = {x+1, y})</span>
   <span class="slc">// Newly construct object: Tuple({x+2, y}, {x+3, y})</span>
   <span class="kwd">MB_Element</span>(MB_Element <span class="kwb">const</span>&amp; o)
   {
      Crv = o.Crv + inv_4n;   <span class="slc">// c2 = (c1+2)*N = c1*N + 2*N</span>
      Civ = o.Civ;
      
      Zrv = Crv;
      Ziv = o.Ziv;
      
      Trv = Crv * Crv;
      Tiv = o.Tiv;
      
      result = <span class="num">3</span>;
   }

   <span class="kwb">int</span>
   <span class="kwd">eval</span>()
   {
      v2d ZZ = Zrv * Ziv;
      Zrv = Trv - Tiv + Crv;
      Ziv = ZZ + ZZ + Civ;
      Trv = Zrv * Zrv;
      Tiv = Ziv * Ziv;

      <span class="slc">// delta = (Trv + Tiv) &lt;= 4.0 ? 0xff : 0x00</span>
      v2d delta = (v2d)<span class="kwd">__builtin_ia32_cmplepd</span>( (Trv + Tiv), v40 );
      <span class="slc">// mask-out elements that goes outside MB set</span>
      result &amp;= <span class="kwd">__builtin_ia32_movmskpd</span>(delta);

      <span class="kwa">return</span> result;
   }
};

<span class="kwb">void</span> 
<span class="kwd">mandelbrot</span>(<span class="kwb">int</span> N, <span class="kwb">char</span>* data)
{
   <span class="slc">// counter of each line, how many columns are processed</span>
   <span class="kwd">__attribute__</span> ((<span class="kwd">aligned</span>(L2_CACHE_LINE))) <span class="kwb">int</span> jobs[N];
   <span class="kwd">memset</span>(jobs, <span class="num">0</span>, <span class="kwa">sizeof</span>(jobs));

   <span class="ppc">#pragma omp parallel default(shared) firstprivate(data) num_threads(GetThreadCount())</span>
   {
      <span class="slc">// foreach line</span>
      <span class="kwa">for</span> (<span class="kwb">int</span> y = <span class="num">0</span>; y &lt; N; ++y, data += (N &gt;&gt; <span class="num">3</span>)) 
      {
         <span class="slc">// Calculate C.img = y*2/N -1.0</span>
         v2d Civ = {y, y};
         Civ = Civ * inv_2n - v10;

         <span class="slc">// Divide task for each thread here:</span>
         <span class="slc">// claim that me (this thread) will handle K-not-yet-process columns</span>
         <span class="slc">// K/8 bytes output should fit cache line size.</span>
         <span class="kwb">int</span> x;
         <span class="kwa">while</span> ((x = <span class="kwd">__sync_fetch_and_add</span>(jobs + y, COLUMN_FETCH)) &lt; N)
         {
            <span class="kwb">int</span> limit = std::<span class="kwd">min</span>(x +COLUMN_FETCH, N);
            <span class="slc">// unroll loop, evaluate 8 columns at once</span>
            <span class="kwa">for</span> (; x &lt; limit; x += <span class="num">8</span>)
            {
               <span class="slc">// each MB_Element represents 2 mandelbrot points</span>
               MB_Element   <span class="kwd">e1</span>(x, Civ), <span class="kwd">e2</span>(e1), <span class="kwd">e3</span>(e2), <span class="kwd">e4</span>(e3);
               
               <span class="kwb">int</span> i = <span class="num">1</span>;
               <span class="kwa">while</span> ( (e1.result || e2.result || e3.result || e4.result) 
                     &amp;&amp; (i++ &lt; <span class="num">50</span>) )
               {
                  e1.<span class="kwd">eval</span>();
                  e2.<span class="kwd">eval</span>();
                  e3.<span class="kwd">eval</span>();
                  e4.<span class="kwd">eval</span>();
               }   
               
               <span class="kwb">int</span> byte_acc = (e1.result &lt;&lt; <span class="num">6</span>)|(e2.result &lt;&lt; <span class="num">4</span>)|(e3.result &lt;&lt; <span class="num">2</span>)|e4.result;
               data[x &gt;&gt; <span class="num">3</span>] = <span class="kwa">static_cast</span>&lt;<span class="kwb">char</span>&gt;(byte_acc);
            } <span class="slc">// end foreach (column)</span>
         }
      } <span class="slc">// end foreach (line)</span>
   } <span class="slc">// end parallel region</span>
}


<span class="kwb">int</span> 
<span class="kwd">main</span> (<span class="kwb">int</span> argc, <span class="kwb">char</span> **argv)
{
   <span class="kwb">int</span> N = (argc == <span class="num">2</span>) ? <span class="kwd">atoi</span>(argv[<span class="num">1</span>]) : <span class="num">200</span>;
   <span class="kwa">assert</span>((N % <span class="num">8</span>) == <span class="num">0</span>);

   <span class="kwd">printf</span>(<span class="str">&quot;P4</span><span class="esc">\n</span><span class="str">%d %d</span><span class="esc">\n</span><span class="str">&quot;</span>, N, N);
   <span class="kwb">int</span> width_bytes = N &gt;&gt; <span class="num">3</span>;

   {
      <span class="kwb">double</span> t[<span class="num">2</span>];
      t[<span class="num">0</span>] = t[<span class="num">1</span>] = <span class="num">2.0</span> / N;
      inv_2n = <span class="kwd">__builtin_ia32_loadupd</span>(t);
      inv_4n = inv_2n + inv_2n;   <span class="slc">// 4.0/N</span>
   }

   <span class="kwb">char</span>* data = <span class="num">0</span>;
   <span class="kwa">assert</span>(   <span class="kwd">posix_memalign</span>(<span class="kwa">reinterpret_cast</span>&lt;<span class="kwb">void</span>**&gt;(&amp;data), L2_CACHE_LINE, width_bytes * N)
         == <span class="num">0</span>);

   <span class="kwd">mandelbrot</span>(N, data);

   <span class="kwd">fwrite</span>( data, width_bytes, N, stdout);
   <span class="kwd">free</span>(data);

   <span class="kwa">return</span> <span class="num">0</span>;
}

