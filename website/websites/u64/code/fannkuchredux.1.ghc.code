<span class="com">{-  The Computer Language Benchmarks Game</span>
<span class="com">    http://benchmarksgame.alioth.debian.org/</span>
<span class="com">    contributed by Miha Vučkovič</span>
<span class="com">-}</span>

<span class="kwd">import</span> System.Environment
<span class="kwd">import</span> Control.Applicative

flop (<span class="num">2</span>:x1:t) = x1:<span class="num">2</span>:t
flop (<span class="num">3</span>:x1:x2:t) = x2:x1:<span class="num">3</span>:t
flop (<span class="num">4</span>:x1:x2:x3:t) = x3:x2:x1:<span class="num">4</span>:t
flop (<span class="num">5</span>:x1:x2:x3:x4:t) = x4:x3:x2:x1:<span class="num">5</span>:t
flop (<span class="num">6</span>:x1:x2:x3:x4:x5:t) = x5:x4:x3:x2:x1:<span class="num">6</span>:t
flop (<span class="num">7</span>:x1:x2:x3:x4:x5:x6:t) = x6:x5:x4:x3:x2:x1:<span class="num">7</span>:t

flop lst&#64;(h:_) = r <span class="kwd">where</span>
	(t, r) = flop' h (lst, t)
	flop' <span class="num">0</span> (t, r) = (t, r)
	flop' n ((h:t), r) = flop' (n-<span class="num">1</span>) (t, h:r)

flopS (<span class="num">1</span>:_) = <span class="num">0</span>
flopS lst = <span class="num">1</span> + flopS (flop lst)

rotate n (h:t) = rotate' (n-<span class="num">1</span>) t <span class="kwd">where</span>
	rotate' <span class="num">0</span> l = h:l
	rotate' n (f:t) = f:(rotate' (n-<span class="num">1</span>) t)

checksum i f
   | <span class="kwc">mod</span> i <span class="num">2</span> == <span class="num">0</span> = f
   | <span class="kwa">True</span> = -f

pfold r [] = r
pfold (ac, af) ((c, f):t)  = <span class="kwc">seq</span> sc $ <span class="kwc">seq</span> sf $ pfold (sc, sf) t <span class="kwd">where</span> 
	sc = ac+c
	sf = <span class="kwc">max</span> af f

permut n = <span class="kwc">foldr</span> perm [[<span class="num">1</span>..n]] [<span class="num">2</span>..n] <span class="kwd">where</span>
   perm x lst = <span class="kwc">concat</span> [<span class="kwc">take</span> x $ <span class="kwc">iterate</span> (rotate x) l | l &lt;- lst]

main = <span class="kwd">do</span>
   n &lt;- <span class="kwc">read</span>.<span class="kwc">head</span> &lt;$&gt; <span class="kwc">getArgs</span>
   <span class="kwd">let</span> (chksm, mflops) = pfold (<span class="num">0</span>,<span class="num">0</span>) $ <span class="kwc">map</span> (\(i, p) -&gt; <span class="kwd">let</span> flops = flopS p <span class="kwd">in</span> (checksum i flops, flops)) $ <span class="kwc">zip</span> [<span class="num">0</span>..] (permut n)
   <span class="kwc">putStrLn</span> $ (<span class="kwc">show</span> chksm) ++ <span class="str">&quot;</span><span class="esc">\n</span><span class="str">Pfannkuchen(&quot;</span> ++ (<span class="kwc">show</span> n) ++ <span class="str">&quot;) = &quot;</span> ++ (<span class="kwc">show</span> $ mflops)
