#lang racket/base

<span class="slc">;; The Computer Language Benchmarks Game</span>
<span class="slc">;; http://benchmarksgame.alioth.debian.org/</span>
<span class="slc">;;</span>
<span class="slc">;; Imperative-style implementation based on the SBCL implementation by</span>
<span class="slc">;; Patrick Frankenberger and Juho Snellman, but using only native Scheme</span>
<span class="slc">;; idioms like 'named let' and 'do' special form.</span>
<span class="slc">;;</span>
<span class="slc">;; Contributed by Anthony Borla, then converted for Racket</span>
<span class="slc">;; by Matthew Flatt and Brent Fulgham</span>
<span class="slc">;; Made unsafe and optimized by Sam TH</span>
#|
Correct output N = <span class="num">1000</span> is

-<span class="num">0.169075164</span>
-<span class="num">0.169087605</span>
|#

(<span class="kwa">require</span> racket/cmdline racket/require 
         (<span class="kwa">only-in</span> racket/flonum flvector)
	 (<span class="kwa">for-syntax</span> racket/base)
	 (<span class="kwa">filtered-in</span>
	  (<span class="kwa">lambda</span> (<span class="kwa">name</span>)
	    (<span class="kwa">regexp-replace</span>
	     #rx<span class="str">&quot;unsafe-fl&quot;</span> name <span class="str">&quot;fl&quot;</span>))
	  racket/unsafe/ops))

<span class="slc">;; ------------------------------</span>
<span class="slc">;; define planetary masses, initial positions &amp; velocity</span>

(<span class="kwa">define</span> +pi+ <span class="num">3.141592653589793</span>) <span class="slc">;; define locally to enable inlining</span>
(<span class="kwa">define</span> +days-per-year+ <span class="num">365.24</span>)

(<span class="kwa">define</span> +solar-mass+ (* <span class="num">4</span> +pi+ +pi+))

(<span class="kwa">define</span> +dt+ <span class="num">0.01</span>)

(<span class="kwa">define</span> make-body flvector)
(<span class="kwa">define-syntax-rule</span> (<span class="kwa">deffield</span> n getter setter)
  (<span class="kwa">begin</span> (<span class="kwa">define-syntax-rule</span> (<span class="kwa">getter</span> b) (<span class="kwa">flvector-ref</span> b n))
         (<span class="kwa">define-syntax-rule</span> (<span class="kwa">setter</span> b x) (<span class="kwa">flvector-set</span>! b n x))))
(<span class="kwa">deffield</span> <span class="num">0</span> body-x set-body-x!)
(<span class="kwa">deffield</span> <span class="num">1</span> body-y set-body-y!)
(<span class="kwa">deffield</span> <span class="num">2</span> body-z set-body-z!)
(<span class="kwa">deffield</span> <span class="num">3</span> body-vx set-body-vx!)
(<span class="kwa">deffield</span> <span class="num">4</span> body-vy set-body-vy!)
(<span class="kwa">deffield</span> <span class="num">5</span> body-vz set-body-vz!)
(<span class="kwa">deffield</span> <span class="num">6</span> body-mass set-body-mass!)

(<span class="kwa">define</span> *sun*
  (<span class="kwa">make-body</span> <span class="num">0.0 0.0 0.0 0.0 0.0 0.0</span> +solar-mass+))

(<span class="kwa">define</span> *jupiter*
  (<span class="kwa">make-body</span> <span class="num">4.84143144246472090</span>
             -<span class="num">1.16032004402742839</span>
             -<span class="num">1.03622044471123109e-1</span>
             (<span class="kwa">fl</span>* <span class="num">1.66007664274403694e-3</span> +days-per-year+)
             (<span class="kwa">fl</span>* <span class="num">7.69901118419740425e-3</span> +days-per-year+)
             (<span class="kwa">fl</span>* -<span class="num">6.90460016972063023e-5</span> +days-per-year+)
             (<span class="kwa">fl</span>* <span class="num">9.54791938424326609e-4</span> +solar-mass+)))

(<span class="kwa">define</span> *saturn*
  (<span class="kwa">make-body</span> <span class="num">8.34336671824457987</span>
             <span class="num">4.12479856412430479</span>
             -<span class="num">4.03523417114321381e-1</span>
             (<span class="kwa">fl</span>* -<span class="num">2.76742510726862411e-3</span> +days-per-year+)
             (<span class="kwa">fl</span>* <span class="num">4.99852801234917238e-3</span> +days-per-year+)
             (<span class="kwa">fl</span>* <span class="num">2.30417297573763929e-5</span> +days-per-year+)
             (<span class="kwa">fl</span>* <span class="num">2.85885980666130812e-4</span> +solar-mass+)))

(<span class="kwa">define</span> *uranus*
  (<span class="kwa">make-body</span> <span class="num">1.28943695621391310</span>e1
             -<span class="num">1.51111514016986312</span>e1
             -<span class="num">2.23307578892655734e-1</span>
             (<span class="kwa">fl</span>* <span class="num">2.96460137564761618e-03</span> +days-per-year+)
             (<span class="kwa">fl</span>* <span class="num">2.37847173959480950e-03</span> +days-per-year+)
             (<span class="kwa">fl</span>* -<span class="num">2.96589568540237556e-05</span> +days-per-year+)
             (<span class="kwa">fl</span>*  <span class="num">4.36624404335156298e-05</span> +solar-mass+)))

(<span class="kwa">define</span> *neptune*
  (<span class="kwa">make-body</span> <span class="num">1.53796971148509165e+01</span>
             -<span class="num">2.59193146099879641e+01</span>
             <span class="num">1.79258772950371181e-01</span>
             (<span class="kwa">fl</span>* <span class="num">2.68067772490389322e-03</span> +days-per-year+)
             (<span class="kwa">fl</span>* <span class="num">1.62824170038242295e-03</span> +days-per-year+)
             (<span class="kwa">fl</span>* -<span class="num">9.51592254519715870e-05</span> +days-per-year+)
             (<span class="kwa">fl</span>* <span class="num">5.15138902046611451e-05</span> +solar-mass+)))

(<span class="kwa">define</span> *system* (<span class="kwa">vector</span> *sun* *jupiter* *saturn* *uranus* *neptune*))
(<span class="kwa">define</span> *system-size* <span class="num">5</span>)
<span class="slc">;; -------------------------------</span>
(<span class="kwa">define</span> (<span class="kwa">offset-momentum</span>)
  (<span class="kwa">let</span> loop-i ([i <span class="num">0</span>] [px <span class="num">0.0</span>] [py <span class="num">0.0</span>] [pz <span class="num">0.0</span>])
    (<span class="kwa">if</span> (<span class="kwa">unsafe-fx</span>= i *system-size*)
      (<span class="kwa">begin</span>
        (<span class="kwa">set-body-vx</span>! (<span class="kwa">unsafe-vector-ref</span> *system* <span class="num">0</span>) (<span class="kwa">fl</span>/ (<span class="kwa">fl-</span> <span class="num">0.0</span> px) +solar-mass+))
        (<span class="kwa">set-body-vy</span>! (<span class="kwa">unsafe-vector-ref</span> *system* <span class="num">0</span>) (<span class="kwa">fl</span>/ (<span class="kwa">fl-</span> <span class="num">0.0</span> py) +solar-mass+))
        (<span class="kwa">set-body-vz</span>! (<span class="kwa">unsafe-vector-ref</span> *system* <span class="num">0</span>) (<span class="kwa">fl</span>/ (<span class="kwa">fl-</span> <span class="num">0.0</span> pz) +solar-mass+)))
      (<span class="kwa">let</span> ([i1 (<span class="kwa">unsafe-vector-ref</span> *system* i)])
        (<span class="kwa">loop-i</span> (<span class="kwa">unsafe-fx</span>+ i <span class="num">1</span>)
                (<span class="kwa">fl</span>+ px (<span class="kwa">fl</span>* (<span class="kwa">body-vx</span> i1) (<span class="kwa">body-mass</span> i1)))
                (<span class="kwa">fl</span>+ py (<span class="kwa">fl</span>* (<span class="kwa">body-vy</span> i1) (<span class="kwa">body-mass</span> i1)))
                (<span class="kwa">fl</span>+ pz (<span class="kwa">fl</span>* (<span class="kwa">body-vz</span> i1) (<span class="kwa">body-mass</span> i1))))))))

<span class="slc">;; -------------------------------</span>
(<span class="kwa">define</span> (<span class="kwa">energy</span>)
  (<span class="kwa">let</span> loop-o ([o <span class="num">0</span>] [e <span class="num">0.0</span>])
    (<span class="kwa">if</span> (<span class="kwa">unsafe-fx</span>= o *system-size*)
      e
      (<span class="kwa">let</span>* ([o1 (<span class="kwa">unsafe-vector-ref</span> *system* o)]
             [e (<span class="kwa">fl</span>+ e (<span class="kwa">fl</span>* (<span class="kwa">fl</span>* <span class="num">0.5</span> (<span class="kwa">body-mass</span> o1))
                        (<span class="kwa">fl</span>+ (<span class="kwa">fl</span>+ (<span class="kwa">fl</span>* (<span class="kwa">body-vx</span> o1) (<span class="kwa">body-vx</span> o1))
                              (<span class="kwa">fl</span>* (<span class="kwa">body-vy</span> o1) (<span class="kwa">body-vy</span> o1)))
                           (<span class="kwa">fl</span>* (<span class="kwa">body-vz</span> o1) (<span class="kwa">body-vz</span> o1)))))])
        (<span class="kwa">let</span> loop-i ([i (<span class="kwa">unsafe-fx</span>+ o <span class="num">1</span>)] [e e])
          (<span class="kwa">if</span> (<span class="kwa">unsafe-fx</span>= i *system-size*)
            (<span class="kwa">loop-o</span> (<span class="kwa">unsafe-fx</span>+ o <span class="num">1</span>) e)
            (<span class="kwa">let</span>* ([i1   (<span class="kwa">unsafe-vector-ref</span> *system* i)]
                   [dx   (<span class="kwa">fl-</span> (<span class="kwa">body-x</span> o1) (<span class="kwa">body-x</span> i1))]
                   [dy   (<span class="kwa">fl-</span> (<span class="kwa">body-y</span> o1) (<span class="kwa">body-y</span> i1))]
                   [dz   (<span class="kwa">fl-</span> (<span class="kwa">body-z</span> o1) (<span class="kwa">body-z</span> i1))]
                   [dist (<span class="kwa">flsqrt</span> (<span class="kwa">fl</span>+ (<span class="kwa">fl</span>+ (<span class="kwa">fl</span>* dx dx) (<span class="kwa">fl</span>* dy dy)) (<span class="kwa">fl</span>* dz dz)))]
                   [e    (<span class="kwa">fl-</span> e (<span class="kwa">fl</span>/ (<span class="kwa">fl</span>* (<span class="kwa">body-mass</span> o1) (<span class="kwa">body-mass</span> i1)) dist))])
              (<span class="kwa">loop-i</span> (<span class="kwa">unsafe-fx</span>+ i <span class="num">1</span>) e))))))))

<span class="slc">;; -------------------------------</span>
(<span class="kwa">define</span> (<span class="kwa">advance</span>)
  (<span class="kwa">let</span> loop-o ([o <span class="num">0</span>])
    (<span class="kwa">unless</span> (<span class="kwa">unsafe-fx</span>= o *system-size*)
      (<span class="kwa">let</span>* ([o1 (<span class="kwa">unsafe-vector-ref</span> *system* o)])
        (<span class="kwa">let</span> loop-i ([i  (<span class="kwa">unsafe-fx</span>+ o <span class="num">1</span>)]
                     [vx (<span class="kwa">body-vx</span> o1)]
                     [vy (<span class="kwa">body-vy</span> o1)]
                     [vz (<span class="kwa">body-vz</span> o1)])
          (<span class="kwa">if</span> (<span class="kwa">unsafe-fx</span>&lt; i *system-size*)
            (<span class="kwa">let</span>* ([i1    (<span class="kwa">unsafe-vector-ref</span> *system* i)]
                   [dx    (<span class="kwa">fl-</span> (<span class="kwa">body-x</span> o1) (<span class="kwa">body-x</span> i1))]
                   [dy    (<span class="kwa">fl-</span> (<span class="kwa">body-y</span> o1) (<span class="kwa">body-y</span> i1))]
                   [dz    (<span class="kwa">fl-</span> (<span class="kwa">body-z</span> o1) (<span class="kwa">body-z</span> i1))]
                   [dist2 (<span class="kwa">fl</span>+ (<span class="kwa">fl</span>+ (<span class="kwa">fl</span>* dx dx) (<span class="kwa">fl</span>* dy dy)) (<span class="kwa">fl</span>* dz dz))]
                   [mag   (<span class="kwa">fl</span>/ +dt+ (<span class="kwa">fl</span>* dist2 (<span class="kwa">flsqrt</span> dist2)))]
                   [dxmag (<span class="kwa">fl</span>* dx mag)]
                   [dymag (<span class="kwa">fl</span>* dy mag)]
                   [dzmag (<span class="kwa">fl</span>* dz mag)]
                   [om (<span class="kwa">body-mass</span> o1)]
                   [im (<span class="kwa">body-mass</span> i1)])
              (<span class="kwa">set-body-vx</span>! i1 (<span class="kwa">fl</span>+ (<span class="kwa">body-vx</span> i1) (<span class="kwa">fl</span>* dxmag om)))
              (<span class="kwa">set-body-vy</span>! i1 (<span class="kwa">fl</span>+ (<span class="kwa">body-vy</span> i1) (<span class="kwa">fl</span>* dymag om)))
              (<span class="kwa">set-body-vz</span>! i1 (<span class="kwa">fl</span>+ (<span class="kwa">body-vz</span> i1) (<span class="kwa">fl</span>* dzmag om)))
              (<span class="kwa">loop-i</span> (<span class="kwa">unsafe-fx</span>+ i <span class="num">1</span>)
                      (<span class="kwa">fl-</span> vx (<span class="kwa">fl</span>* dxmag im))
                      (<span class="kwa">fl-</span> vy (<span class="kwa">fl</span>* dymag im))
                      (<span class="kwa">fl-</span> vz (<span class="kwa">fl</span>* dzmag im))))
            (<span class="kwa">begin</span> (<span class="kwa">set-body-vx</span>! o1 vx)
                   (<span class="kwa">set-body-vy</span>! o1 vy)
                   (<span class="kwa">set-body-vz</span>! o1 vz)
                   (<span class="kwa">set-body-x</span>! o1 (<span class="kwa">fl</span>+ (<span class="kwa">body-x</span> o1) (<span class="kwa">fl</span>* +dt+ vx)))
                   (<span class="kwa">set-body-y</span>! o1 (<span class="kwa">fl</span>+ (<span class="kwa">body-y</span> o1) (<span class="kwa">fl</span>* +dt+ vy)))
                   (<span class="kwa">set-body-z</span>! o1 (<span class="kwa">fl</span>+ (<span class="kwa">body-z</span> o1) (<span class="kwa">fl</span>* +dt+ vz)))))))
      (<span class="kwa">loop-o</span> (<span class="kwa">unsafe-fx</span>+ o <span class="num">1</span>)))))

<span class="slc">;; -------------------------------</span>

(<span class="kwa">let</span> ([n (<span class="kwa">command-line</span> #:args (<span class="kwa">n</span>) (<span class="kwa">string-</span>&gt;number n))])
  (<span class="kwa">offset-momentum</span>)
  (<span class="kwa">printf</span> <span class="str">&quot;~a</span><span class="esc">\n</span><span class="str">&quot;</span> (<span class="kwa">real-</span>&gt;decimal-string (<span class="kwa">energy</span>) <span class="num">9</span>))
  (<span class="kwa">for</span> ([i (<span class="kwa">in-range</span> n)]) (<span class="kwa">advance</span>))
  (<span class="kwa">printf</span> <span class="str">&quot;~a</span><span class="esc">\n</span><span class="str">&quot;</span> (<span class="kwa">real-</span>&gt;decimal-string (<span class="kwa">energy</span>) <span class="num">9</span>)))
