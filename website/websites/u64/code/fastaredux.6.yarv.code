<span class="slc"># The Computer Language Benchmarks Game</span>
<span class="slc"># http://benchmarksgame.alioth.debian.org/</span>
<span class="slc"># Contributed by Sokolov Yura</span>
<span class="slc"># Modified by Rick Branson</span>
<span class="slc"># Modified by YAGUCHI Yuya</span>

<span class="kwb">$last</span> = <span class="num">42.0</span>

GR_IM = <span class="num">139968.0</span>
GR_IA = <span class="num">3877.0</span>
GR_IC = <span class="num">29573.0</span>

alu =
   <span class="str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span>+
   <span class="str">&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span>+
   <span class="str">&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span>+
   <span class="str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span>+
   <span class="str">&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span>+
   <span class="str">&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span>+
   <span class="str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span>

iub = [
    [<span class="str">&quot;a&quot;</span>, <span class="num">0.27</span>],
    [<span class="str">&quot;c&quot;</span>, <span class="num">0.12</span>],
    [<span class="str">&quot;g&quot;</span>, <span class="num">0.12</span>],
    [<span class="str">&quot;t&quot;</span>, <span class="num">0.27</span>],

    [<span class="str">&quot;B&quot;</span>, <span class="num">0.02</span>],
    [<span class="str">&quot;D&quot;</span>, <span class="num">0.02</span>],
    [<span class="str">&quot;H&quot;</span>, <span class="num">0.02</span>],
    [<span class="str">&quot;K&quot;</span>, <span class="num">0.02</span>],
    [<span class="str">&quot;M&quot;</span>, <span class="num">0.02</span>],
    [<span class="str">&quot;N&quot;</span>, <span class="num">0.02</span>],
    [<span class="str">&quot;R&quot;</span>, <span class="num">0.02</span>],
    [<span class="str">&quot;S&quot;</span>, <span class="num">0.02</span>],
    [<span class="str">&quot;V&quot;</span>, <span class="num">0.02</span>],
    [<span class="str">&quot;W&quot;</span>, <span class="num">0.02</span>],
    [<span class="str">&quot;Y&quot;</span>, <span class="num">0.02</span>],
]

homosapiens = [
    [<span class="str">&quot;a&quot;</span>, <span class="num">0.3029549426680</span>],
    [<span class="str">&quot;c&quot;</span>, <span class="num">0.1979883004921</span>],
    [<span class="str">&quot;g&quot;</span>, <span class="num">0.1975473066391</span>],
    [<span class="str">&quot;t&quot;</span>, <span class="num">0.3015094502008</span>],
]

<span class="kwa">def</span> <span class="kwd">make_repeat_fasta</span>(src, n<span class="opt">)</span>
    v = <span class="kwa">nil</span>
    width = <span class="num">60</span>
    l = src.length
    s = src * ((n / l<span class="opt">)</span> + <span class="num">1</span><span class="opt">)</span>
    s.slice!(n, l<span class="opt">)</span>
    <span class="kwd">puts</span> (s.<span class="kwd">scan</span>(<span class="kwc">/.{1,#{width}}/</span><span class="opt">)</span>.<span class="kwd">join</span>(<span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span><span class="opt">))</span>
<span class="kwa">end</span>

<span class="kwa">def</span> <span class="kwd">make_random_fasta</span>(table, n<span class="opt">)</span>
    rand = <span class="kwa">nil</span>
    width = <span class="num">60</span>
    chunk = <span class="num">1</span> * width
    prob = <span class="num">0.0</span>
    rwidth = (<span class="num">1</span>..width<span class="opt">)</span>
    table.each{|v| v[1]= (prob += v[1])}

    collector = <span class="str">&quot;rand = ($last = ($last * GR_IA + GR_IC)</span> % GR_IM<span class="opt">)</span> / GR_IM<span class="esc">\n</span><span class="str">&quot;</span>
<span class="str">    table.each do |va, vb|</span>
<span class="str">      collector += &quot;</span><span class="kwa">next</span> <span class="slc">#{va.inspect} if #{vb.inspect} &gt; rand\n&quot;</span>
    <span class="kwa">end</span>

    <span class="kwa">eval</span> <span class="str">&lt;&lt;-EOF</span>
<span class="str">      (1..(n/width)</span><span class="opt">)</span>.each <span class="kwa">do</span> |i|
        puts rwidth.collect{#{collector}}.join
      <span class="kwa">end</span>
      <span class="kwa">if</span> n%width != <span class="num">0</span>
        <span class="kwd">puts</span> (<span class="num">1</span>..(n%width<span class="opt">))</span>.collect{#{collector}}.join
      <span class="kwa">end</span>
    EOF
<span class="kwa">end</span>

n = (<span class="kwc">ARGV</span>[<span class="num">0</span>] <span class="kwa">or</span> <span class="num">27</span><span class="opt">)</span>.to_i

puts <span class="str">&quot;&gt;ONE Homo sapiens alu&quot;</span>
<span class="kwd">make_repeat_fasta</span>(alu, n*<span class="num">2</span><span class="opt">)</span>

puts <span class="str">&quot;&gt;TWO IUB ambiguity codes&quot;</span>
<span class="kwd">make_random_fasta</span>(iub, n*<span class="num">3</span><span class="opt">)</span>

puts <span class="str">&quot;&gt;THREE Homo sapiens frequency&quot;</span>
<span class="kwd">make_random_fasta</span>(homosapiens, n*<span class="num">5</span><span class="opt">)</span>

