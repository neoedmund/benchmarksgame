<span class="com">&quot;* The Computer Language Benchmarks Game</span>
<span class="com">    http://benchmarksgame.alioth.debian.org/</span>
<span class="com">    contributed by Isaac Gouy</span>
<span class="com">    modified by Eliot Miranda *&quot;</span>!

<span class="kwc">Object</span> <span class="kwb">subclass:</span> <span class="kwd">#RandomNumber</span>
   <span class="kwb">instanceVariableNames:</span> <span class="str">'seed scale'</span>
   <span class="kwb">classVariableNames:</span> <span class="str">'FModulus Increment Modulus Multiplier'</span>
   <span class="kwb">poolDictionaries:</span> <span class="str">''</span>
   <span class="kwb">category:</span> <span class="str">'Shootout'</span>!

<span class="kwc">ReadStream</span> <span class="kwb">subclass:</span> <span class="kwd">#RepeatStream</span>
   <span class="kwb">instanceVariableNames:</span> <span class="str">'repeatPtr repeatLimit'</span>
   <span class="kwb">classVariableNames:</span> <span class="str">''</span>
   <span class="kwb">poolDictionaries:</span> <span class="str">''</span>
   <span class="kwb">category:</span> <span class="str">'Shootout'</span>!

<span class="kwc">RepeatStream</span> <span class="kwb">subclass:</span> <span class="kwd">#RandomStream</span>
   <span class="kwb">instanceVariableNames:</span> <span class="str">'random percentages'</span>
   <span class="kwb">classVariableNames:</span> <span class="str">''</span>
   <span class="kwb">poolDictionaries:</span> <span class="str">''</span>
   <span class="kwb">category:</span> <span class="str">'Shootout'</span>!

!<span class="kwc">RandomNumber</span> <span class="kwb">methodsFor:</span> <span class="str">'private'</span>!
<span class="kwb">to:</span> anInteger
   seed :<span class="kwb">=</span> <span class="num">42</span>.
   scale :<span class="kwb">=</span> anInteger! !

!<span class="kwc">RandomNumber</span> <span class="kwb">methodsFor:</span> <span class="str">'accessing'</span>!
<span class="kwb">next</span>
   seed :<span class="kwb">=</span> (seed <span class="kwb">*</span> <span class="kwc">Multiplier</span> <span class="kwb">+</span> <span class="kwc">Increment</span>) <span class="esc">\\</span> <span class="kwc">Modulus</span>.
   ^(seed <span class="kwb">*</span> scale) <span class="kwb">/</span> <span class="kwc">FModulus</span>! !


!<span class="kwc">RandomNumber</span> class <span class="kwb">methodsFor:</span> <span class="str">'class initialization'</span>!
<span class="kwb">initialize</span>
   <span class="kwc">FModulus</span> :<span class="kwb">=</span> <span class="num">139968.0</span>d0.
   <span class="kwc">Increment</span> :<span class="kwb">=</span> <span class="num">29573</span>.
   <span class="kwc">Modulus</span> :<span class="kwb">=</span> <span class="num">139968</span>.
   <span class="kwc">Multiplier</span> :<span class="kwb">=</span> <span class="num">3877</span>.! !

!<span class="kwc">RandomNumber</span> class <span class="kwb">methodsFor:</span> <span class="str">'initialize-release'</span>!
<span class="kwb">to:</span> anInteger
   ^<span class="kwa">self</span> basicNew <span class="kwb">to:</span> anInteger! !


!<span class="kwc">RepeatStream</span> <span class="kwb">methodsFor:</span> <span class="str">'accessing'</span>!
<span class="kwb">next</span>
   position <span class="kwb">&gt;=</span> readLimit <span class="kwb">ifTrue:</span> [ <span class="kwa">self</span> <span class="kwb">position:</span> <span class="num">0</span> ].
   repeatPtr :<span class="kwb">=</span> repeatPtr <span class="kwb">+</span> <span class="num">1</span>.
   ^collection <span class="kwb">at:</span> (position :<span class="kwb">=</span> position <span class="kwb">+</span> <span class="num">1</span>)! !

!<span class="kwc">RepeatStream</span> <span class="kwb">methodsFor:</span> <span class="str">'testing'</span>!
<span class="kwb">atEnd</span>
   ^repeatPtr <span class="kwb">&gt;=</span> repeatLimit! !

!<span class="kwc">RepeatStream</span> <span class="kwb">methodsFor:</span> <span class="str">'initialize-release'</span>!
<span class="kwb">to:</span> anInteger
   repeatPtr :<span class="kwb">=</span> <span class="num">0</span>.
   repeatLimit :<span class="kwb">=</span> anInteger! !


!<span class="kwc">RandomStream</span> <span class="kwb">methodsFor:</span> <span class="str">'accessing'</span>!
<span class="kwb">next</span>
   <span class="kwd">| r |</span>
   r :<span class="kwb">=</span> random next.
   repeatPtr :<span class="kwb">=</span> repeatPtr <span class="kwb">+</span> <span class="num">1</span>.
   <span class="num">1</span> <span class="kwb">to:</span> percentages size <span class="kwb">do:</span> [<span class="kwd">:i</span>|
      (r &lt; (percentages <span class="kwb">at:</span> i)) <span class="kwb">ifTrue:</span> [^collection <span class="kwb">at:</span> i]]! !

!<span class="kwc">RandomStream</span> <span class="kwb">methodsFor:</span> <span class="str">'accessing'</span>!
<span class="kwb">random:</span> aRandomNumber
<span class="com">&quot;* Share the random number generator so we can get the expected results. *&quot;</span>
   random :<span class="kwb">=</span> aRandomNumber! !

!<span class="kwc">RandomStream</span> <span class="kwb">methodsFor:</span> <span class="str">'initialize-release'</span>!
<span class="kwb">on:</span> aCollection
   <span class="kwd">| size cp |</span>
   repeatPtr :<span class="kwb">=</span> <span class="num">0</span>.
   random :<span class="kwb">=</span> <span class="kwc">RandomNumber</span> <span class="kwb">to:</span> <span class="num">1.0</span>d0.
   size :<span class="kwb">=</span> aCollection size.
   percentages :<span class="kwb">=</span> <span class="kwc">Array</span> <span class="kwb">new:</span> size.
   collection :<span class="kwb">=</span> <span class="kwc">Array</span> <span class="kwb">new:</span> size.
   cp :<span class="kwb">=</span> <span class="num">0.0</span>d0.
   <span class="num">1</span> <span class="kwb">to:</span> size <span class="kwb">do:</span> [<span class="kwd">:i</span>|
      collection <span class="kwb">at:</span> i <span class="kwb">put:</span> (aCollection <span class="kwb">at:</span> i) first.
      percentages <span class="kwb">at:</span> i <span class="kwb">put:</span> (cp :<span class="kwb">=</span> cp <span class="kwb">+</span> (aCollection <span class="kwb">at:</span> i) last).
   ]! !


!<span class="kwc">RepeatStream</span> class <span class="kwb">methodsFor:</span> <span class="str">'instance creation'</span>!
<span class="kwb">to:</span> anInteger <span class="kwb">on:</span> aCollection
   ^(<span class="kwa">super</span> <span class="kwb">on:</span> aCollection) <span class="kwb">to:</span> anInteger! !


!<span class="kwc">Tests</span> class <span class="kwb">methodsFor:</span> <span class="str">'benchmarking'</span>!
<span class="kwb">writeFasta:</span> aString <span class="kwb">from:</span> inStream <span class="kwb">to:</span> outStream <span class="kwb">lineLength:</span> lineLength
   <span class="kwd">| i |</span>
   outStream <span class="kwb">nextPut:</span> $&gt;; <span class="kwb">nextPutAll:</span> aString; nl.
   i :<span class="kwb">=</span> <span class="num">0</span>.
   [inStream atEnd] <span class="kwb">whileFalse:</span>
      [i <span class="kwb">==</span> lineLength <span class="kwb">ifTrue:</span> [outStream nl. i :<span class="kwb">=</span> <span class="num">0</span>].
      outStream <span class="kwb">nextPut:</span> inStream next.
      i :<span class="kwb">=</span> i <span class="kwb">+</span> <span class="num">1</span>].
   outStream nl! !

!<span class="kwc">Tests</span> class <span class="kwb">methodsFor:</span> <span class="str">'benchmarking'</span>!
<span class="kwb">fasta:</span> n <span class="kwb">to:</span> out
   <span class="kwd">| r lineLength |</span>
   lineLength :<span class="kwb">=</span> <span class="num">60</span>.
   <span class="kwa">self</span>
      <span class="kwb">writeFasta:</span> <span class="str">'ONE Homo sapiens alu'</span>
      <span class="kwb">from:</span>
         ( <span class="kwc">RepeatStream</span>
            <span class="kwb">to:</span> n<span class="kwb">*</span><span class="num">2</span>
            <span class="kwb">on:</span><span class="str">'GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG'</span>,
               <span class="str">'GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA'</span>,
               <span class="str">'CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT'</span>,
               <span class="str">'ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA'</span>,
               <span class="str">'GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG'</span>,
               <span class="str">'AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC'</span>,
               <span class="str">'AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA'</span> )
      <span class="kwb">to:</span> out
      <span class="kwb">lineLength:</span> lineLength.

   r :<span class="kwb">=</span> <span class="kwc">RandomNumber</span> <span class="kwb">to:</span> <span class="num">1</span>. <span class="com">&quot;Shared random sequence&quot;</span>

   <span class="kwa">self</span>
      <span class="kwb">writeFasta:</span> <span class="str">'TWO IUB ambiguity codes'</span>
      <span class="kwb">from:</span>
         (( <span class="kwc">RandomStream</span>
            <span class="kwb">to:</span> n<span class="kwb">*</span><span class="num">3</span>
            <span class="kwb">on:</span> #(   #(<span class="num">$a 0.27</span>d0)
                  #(<span class="num">$c 0.12</span>d0)
                  #(<span class="num">$g 0.12</span>d0)
                  #(<span class="num">$t 0.27</span>d0)

                  #(<span class="num">$B 0.02</span>d0)
                  #(<span class="num">$D 0.02</span>d0)
                  #(<span class="num">$H 0.02</span>d0)
                  #(<span class="num">$K 0.02</span>d0)
                  #(<span class="num">$M 0.02</span>d0)
                  #(<span class="num">$N 0.02</span>d0)
                  #(<span class="num">$R 0.02</span>d0)
                  #(<span class="num">$S 0.02</span>d0)
                  #(<span class="num">$V 0.02</span>d0)
                  #(<span class="num">$W 0.02</span>d0)
                  #(<span class="num">$Y 0.02</span>d0)))
         <span class="kwb">random:</span> r;
         yourself)
      <span class="kwb">to:</span> out
      <span class="kwb">lineLength:</span> lineLength.

   <span class="kwa">self</span>
      <span class="kwb">writeFasta:</span> <span class="str">'THREE Homo sapiens frequency'</span>
      <span class="kwb">from:</span>
         (( <span class="kwc">RandomStream</span>
            <span class="kwb">to:</span> n<span class="kwb">*</span><span class="num">5</span>
            <span class="kwb">on:</span> #(   #(<span class="num">$a 0.3029549426680</span>d0)
                  #(<span class="num">$c 0.1979883004921</span>d0)
                  #(<span class="num">$g 0.1975473066391</span>d0)
                  #(<span class="num">$t 0.3015094502008</span>d0)))
            <span class="kwb">random:</span> r;
            yourself)
      <span class="kwb">to:</span> out
      <span class="kwb">lineLength:</span> lineLength.

   out flush. ! !


!<span class="kwc">Tests</span> class <span class="kwb">methodsFor:</span> <span class="str">'benchmark scripts'</span>!
<span class="kwb">fasta</span>
   <span class="kwa">self</span> <span class="kwb">fasta:</span> <span class="kwa">self</span> arg <span class="kwb">to:</span> <span class="kwa">self</span> stdoutSpecial.
   ^<span class="str">''</span>! !


<span class="kwc">RandomNumber</span> initialize!
