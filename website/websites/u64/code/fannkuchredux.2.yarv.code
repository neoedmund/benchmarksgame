<span class="slc"># The Computer Language Benchmarks Game</span>
<span class="slc"># http://benchmarksgame.alioth.debian.org/</span>
<span class="slc"># Contributed by Wesley Moxam</span>
<span class="slc"># Modified by Sokolov Yura aka funny_falcon</span>
<span class="slc"># Parallelised by Scott Leggett</span>

<span class="kwa">module</span> MiniParallel
    <span class="kwa">class</span> Worker
        <span class="kwa">def</span> <span class="kwd">initialize</span>(read, write<span class="opt">)</span>
            <span class="kwb">&#64;read</span>, <span class="kwb">&#64;write</span> = read, write
        <span class="kwa">end</span>

        <span class="kwa">def</span> close_pipes
            <span class="kwb">&#64;read</span>.close
            <span class="kwb">&#64;write</span>.close
        <span class="kwa">end</span>

        <span class="kwa">def</span> <span class="kwd">work</span>(index<span class="opt">)</span>
            Marshal.<span class="kwd">dump</span>(index, <span class="kwb">&#64;write</span><span class="opt">)</span>
            Marshal.<span class="kwd">load</span>(<span class="kwb">&#64;read</span><span class="opt">)</span>
        <span class="kwa">end</span>
    <span class="kwa">end</span>

    <span class="kwa">def self</span>.<span class="kwd">map</span>(array, &amp;block<span class="opt">)</span>
        <span class="kwd">work_in_processes</span>(
            array,
            [array.size, core_count].min,
            &amp;block
        <span class="opt">)</span>
    <span class="kwa">end</span>

    <span class="kwa">def self</span>.core_count
        &#64;<span class="kwb">&#64;core_count</span> ||= IO.<span class="kwd">read</span>(<span class="str">&quot;/proc/cpuinfo&quot;</span><span class="opt">)</span>.<span class="kwd">scan</span>(<span class="kwc">/^processor/</span><span class="opt">)</span>.size
    <span class="kwa">end</span>

    private

    <span class="kwa">def self</span>.<span class="kwd">work_in_processes</span>(array, count, &amp;block<span class="opt">)</span>
        index = -<span class="num">1</span>
        results, threads = [], []

        workers = <span class="kwd">create_workers</span>(array, count, &amp;block<span class="opt">)</span>

        workers.each <span class="kwa">do</span> |worker|
            threads &lt;&lt; Thread.new <span class="kwa">do</span>
                <span class="kwa">loop do</span>
                    Thread.exclusive{ index += 1 }
                    <span class="kwa">break if</span> index &gt;= array.size
                    results[index] = worker.<span class="kwd">work</span>(index<span class="opt">)</span>
                <span class="kwa">end</span>
                worker.close_pipes
            <span class="kwa">end</span>
        <span class="kwa">end</span>

        threads.<span class="kwd">each</span>(&amp;<span class="kwc">:join</span><span class="opt">)</span>
        Process.waitall

        results
    <span class="kwa">end</span>

    <span class="kwa">def self</span>.<span class="kwd">create_workers</span>(array, count, &amp;block<span class="opt">)</span>
        workers = []
        count.times <span class="kwa">do</span>
            workers &lt;&lt; <span class="kwd">create_worker</span>(array, workers, &amp;block<span class="opt">)</span>
        <span class="kwa">end</span>
        workers
    <span class="kwa">end</span>

    <span class="kwa">def self</span>.<span class="kwd">create_worker</span>(array, started_workers, &amp;block<span class="opt">)</span>
        child_read, parent_write = IO.pipe
        parent_read, child_write = IO.pipe

        Process.fork <span class="kwa">do</span>
            started_workers.<span class="kwd">each</span>(&amp;<span class="kwc">:close_pipes</span><span class="opt">)</span>

            parent_write.close
            parent_read.close

            <span class="kwd">process_incoming_jobs</span>(child_read, child_write, array, &amp;block<span class="opt">)</span>

            child_read.close
            child_write.close
        <span class="kwa">end</span>

        child_read.close
        child_write.close

        Worker.<span class="kwd">new</span>(parent_read, parent_write<span class="opt">)</span>
    <span class="kwa">end</span>

    <span class="kwa">def self</span>.<span class="kwd">process_incoming_jobs</span>(read, write, array, &amp;block<span class="opt">)</span>
        <span class="kwa">until</span> read.eof?
            index = Marshal.<span class="kwd">load</span>(read<span class="opt">)</span>
            Marshal.<span class="kwd">dump</span>(block.<span class="kwd">call</span>(array[index]<span class="opt">)</span>, write<span class="opt">)</span>
        <span class="kwa">end</span>
    <span class="kwa">end</span>
<span class="kwa">end</span>

<span class="kwa">class</span> Fannkuch

    <span class="kwa">def</span> <span class="kwd">initialize</span>(n, start, max_perms<span class="opt">)</span>
        <span class="kwb">&#64;n</span> = n
        <span class="kwb">&#64;p</span> = (<span class="num">0</span>..n<span class="opt">)</span>.to_a
        <span class="kwb">&#64;s</span> = <span class="kwb">&#64;p</span>.dup
        <span class="kwb">&#64;q</span> = <span class="kwb">&#64;p</span>.dup
        <span class="kwb">&#64;sign</span> = <span class="num">1</span>
        <span class="kwb">&#64;sum</span> = <span class="kwb">&#64;maxflips</span> = <span class="num">0</span>
        <span class="kwb">&#64;max_perms</span> = max_perms
        <span class="kwb">&#64;perm_count</span> = -start
        start.times{permute}
    <span class="kwa">end</span>

    <span class="kwa">def</span> flip
        <span class="kwa">loop do</span>
            <span class="kwa">if</span> <span class="kwb">&#64;perm_count</span> == <span class="kwb">&#64;max_perms</span>
                <span class="kwa">return</span> [<span class="kwb">&#64;sum</span>, <span class="kwb">&#64;maxflips</span>]
            <span class="kwa">end</span>
            <span class="kwa">if</span> (q1 = <span class="kwb">&#64;p</span>[<span class="num">1</span>]<span class="opt">)</span> != <span class="num">1</span>
                <span class="kwb">&#64;q</span>[<span class="num">0</span>..-<span class="num">1</span>] = <span class="kwb">&#64;p</span>
                flips = <span class="num">1</span>
                <span class="kwa">until</span> (qq = <span class="kwb">&#64;q</span>[q1]<span class="opt">)</span> == <span class="num">1</span>
                    <span class="kwb">&#64;q</span>[q1] = q1
                    <span class="kwa">if</span> q1 &gt;= <span class="num">4</span>
                        i, j = <span class="num">2</span>, q1 - <span class="num">1</span>
                        <span class="kwa">while</span> i &lt; j
                            <span class="kwb">&#64;q</span>[i], <span class="kwb">&#64;q</span>[j] = <span class="kwb">&#64;q</span>[j], <span class="kwb">&#64;q</span>[i]
                            i += <span class="num">1</span>
                            j -= <span class="num">1</span>
                        <span class="kwa">end</span>
                    <span class="kwa">end</span>
                    q1 = qq
                    flips += <span class="num">1</span>
                <span class="kwa">end</span>
                <span class="kwb">&#64;sum</span> += <span class="kwb">&#64;sign</span> * flips
                <span class="kwb">&#64;maxflips</span> = flips <span class="kwa">if</span> flips &gt; <span class="kwb">&#64;maxflips</span> <span class="slc"># New maximum?</span>
            <span class="kwa">end</span>
            permute
        <span class="kwa">end</span>
    <span class="kwa">end</span>

    <span class="kwa">def</span> permute
        <span class="kwb">&#64;perm_count</span> += <span class="num">1</span>

        <span class="kwa">if</span> <span class="kwb">&#64;sign</span> == <span class="num">1</span>
            <span class="slc"># Rotate 1&lt;-2.</span>

            <span class="kwb">&#64;p</span>[<span class="num">1</span>], <span class="kwb">&#64;p</span>[<span class="num">2</span>] = <span class="kwb">&#64;p</span>[<span class="num">2</span>], <span class="kwb">&#64;p</span>[<span class="num">1</span>]
            <span class="kwb">&#64;sign</span> = -<span class="num">1</span>
        <span class="kwa">else</span>
            <span class="slc"># Rotate 1&lt;-2 and 1&lt;-2&lt;-3.</span>

            <span class="kwb">&#64;p</span>[<span class="num">2</span>], <span class="kwb">&#64;p</span>[<span class="num">3</span>] = <span class="kwb">&#64;p</span>[<span class="num">3</span>], <span class="kwb">&#64;p</span>[<span class="num">2</span>]
            <span class="kwb">&#64;sign</span> = <span class="num">1</span>
            i = <span class="num">3</span>
            <span class="kwa">while</span> i &lt;= <span class="kwb">&#64;n</span> &amp;&amp; <span class="kwb">&#64;s</span>[i] == <span class="num">1</span>
                <span class="kwb">&#64;s</span>[i] = i
                <span class="slc"># Rotate 1&lt;-...&lt;-i+1.</span>

                t = <span class="kwb">&#64;p</span>.<span class="kwd">delete_at</span>(<span class="num">1</span><span class="opt">)</span>
                i += <span class="num">1</span>
                <span class="kwb">&#64;p</span>.<span class="kwd">insert</span>(i, t<span class="opt">)</span>
            <span class="kwa">end</span>
            <span class="kwb">&#64;s</span>[i] -= <span class="num">1</span>  <span class="kwa">if</span> i &lt;= <span class="kwb">&#64;n</span>
        <span class="kwa">end</span>
    <span class="kwa">end</span>
<span class="kwa">end</span>

abort <span class="str">&quot;Usage:</span> <span class="ipl">#{__FILE__}</span> <span class="str">n</span><span class="esc">\n</span><span class="str">(n &gt; 6)</span><span class="str">&quot; if (n = ARGV[0].to_i)</span> &lt; <span class="num">6</span>

core_count = MiniParallel.core_count
chunk_size = (<span class="num">1</span>..n<span class="opt">)</span>.<span class="kwd">reduce</span>(:*<span class="opt">)</span> / core_count

sum, flips =
    <span class="kwa">if</span> core_count &gt; <span class="num">1</span>
        <span class="slc"># adjust job sizes to even out workload</span>
        weights = <span class="kwa">if</span> core_count &gt; <span class="num">1</span>
                      weights = []
                      (core_count/<span class="num">2</span><span class="opt">)</span>.times <span class="kwa">do</span> |i|
                          weights &lt;&lt; i * <span class="num">0.1</span> + <span class="num">0.05</span>
                      <span class="kwa">end</span>
                      weights = weights.reverse + weights.map{|i|-i}
                  <span class="kwa">else</span>
                      [<span class="num">0</span>]
                  <span class="kwa">end</span>

        <span class="slc"># Generate start position for each chunk</span>
        chunks = core_count.times.<span class="kwd">zip</span>(weights<span class="opt">)</span>.map <span class="kwa">do</span> |count, weight|
            [count * chunk_size +
             (count &gt; <span class="num">0</span> ? (weights[<span class="num">0</span>,count].<span class="kwd">reduce</span>(:+<span class="opt">)</span> * chunk_size<span class="opt">)</span>.round : <span class="num">0</span><span class="opt">)</span>,
             chunk_size + (weight * chunk_size<span class="opt">)</span>.round]
        <span class="kwa">end</span>

        chunk_results =
            <span class="kwa">if</span> <span class="kwc">RUBY_PLATFORM</span> == <span class="str">'java'</span>
                chunk_collector = []
                threads = []
                chunks.each.with_index <span class="kwa">do</span> |(start,weighted_size<span class="opt">)</span>,i|
                    threads &lt;&lt; Thread.new <span class="kwa">do</span>
                        chunk_collector[i] = Fannkuch.<span class="kwd">new</span>(n,start,weighted_size<span class="opt">)</span>.flip
                    <span class="kwa">end</span>
                <span class="kwa">end</span>
                threads.all?(&amp;<span class="kwc">:join</span><span class="opt">)</span>
                chunk_collector
            <span class="kwa">else</span>
                MiniParallel.<span class="kwd">map</span>(chunks<span class="opt">)</span> <span class="kwa">do</span> |start, weighted_size|
                    Fannkuch.<span class="kwd">new</span>(n,start,weighted_size<span class="opt">)</span>.flip
                <span class="kwa">end</span>
            <span class="kwa">end</span>

        chunk_results.reduce <span class="kwa">do</span> |memo, (cksum, fmax<span class="opt">)</span>|
            [memo[<span class="num">0</span>] + cksum, [memo[<span class="num">1</span>], fmax].max]
        <span class="kwa">end</span>
    <span class="kwa">else</span>
        Fannkuch.<span class="kwd">new</span>(n,<span class="num">0</span>,chunk_size<span class="opt">)</span>.flip
    <span class="kwa">end</span>

printf <span class="str">&quot;%d</span><span class="esc">\n</span><span class="str">Pfannkuchen(%d)</span> = %d<span class="esc">\n</span><span class="str">&quot;, sum, n, flips</span>
