<span class="slc">;;   The Computer Language Benchmarks Game</span>
<span class="slc">;;   http://benchmarksgame.alioth.debian.org/</span>
<span class="slc">;;; Contributed by Gustavo Henrique Milar√©</span>

<span class="slc">;;; This file was fetched from http://shootout.alioth.debian.org/ and modified.</span>
<span class="slc">;;; These are the original creators:</span>

<span class="slc">;;; contributed by Ralph Richard Cook</span>
<span class="slc">;;; Optimizations by Nicolas Neuss</span>
<span class="slc">;;; Includes code from the 'random' benchmark</span>
<span class="slc">;;; Credits from the 'random' benchmark:</span>
<span class="slc">;;; Chih-Chung Chang contributed better declarations to improve performance</span>
<span class="slc">;;; Multi-lisp modifications by Brent Fulgham</span>

(<span class="kwa">defconstant</span> +im+     <span class="num">139968</span>)
(<span class="kwa">defconstant</span> +ia+       <span class="num">3877</span>)
(<span class="kwa">defconstant</span> +ic+     <span class="num">29573</span>)

(<span class="kwa">defparameter</span> *last-random* <span class="num">42</span>)

(<span class="kwa">declaim</span> (<span class="kwa">inline</span> gen-random))

(<span class="kwa">defun</span> gen-random (<span class="kwa">max</span>)
  (<span class="kwa">declare</span> (<span class="kwa">type</span> (<span class="kwa">unsigned-byte</span> <span class="num">30</span>) *last-random*))
  (<span class="kwa">declare</span> (<span class="kwa">double-float</span> max))
  (<span class="kwa">setq</span> *last-random* (<span class="kwa">mod</span> (+ (<span class="kwa">the</span> (<span class="kwa">unsigned-byte</span> <span class="num">31</span>)
				(* *last-random* +ia+))
			      +ic+)
			   +im+))
  (/ (* max *last-random*) +im+))

(<span class="kwa">defconstant</span> +line-length+ <span class="num">60</span>)

(<span class="kwa">defstruct</span> (<span class="kwa">freq</span> (:predicate freqp))
  (<span class="kwa">c</span> #\x :type base-char)
  (<span class="kwa">p</span> <span class="num">0.0</span>d0 :type double-float))

(<span class="kwa">declaim</span> (<span class="kwa">base-string</span> *alu*))

(<span class="kwa">defparameter</span> *alu* (<span class="kwa">concatenate</span> 'base-string
  <span class="str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span>
  <span class="str">&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span>
  <span class="str">&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span>
  <span class="str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span>
  <span class="str">&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span>
  <span class="str">&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span>
  <span class="str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span>))

(<span class="kwa">declaim</span> (<span class="kwa">simple-vector</span> *iub* *homo-sapiens*))

(<span class="kwa">defparameter</span> *iub*
  (<span class="kwa">vector</span>
   (<span class="kwa">make-freq</span> :c #<span class="esc">\a</span> :p <span class="num">0.27</span>d0)
   (<span class="kwa">make-freq</span> :c #\c :p <span class="num">0.12</span>d0)
   (<span class="kwa">make-freq</span> :c #\g :p <span class="num">0.12</span>d0)
   (<span class="kwa">make-freq</span> :c #<span class="esc">\t</span> :p <span class="num">0.27</span>d0)

   (<span class="kwa">make-freq</span> :c #\B :p <span class="num">0.02</span>d0)
   (<span class="kwa">make-freq</span> :c #\D :p <span class="num">0.02</span>d0)
   (<span class="kwa">make-freq</span> :c #\H :p <span class="num">0.02</span>d0)
   (<span class="kwa">make-freq</span> :c #\K :p <span class="num">0.02</span>d0)
   (<span class="kwa">make-freq</span> :c #\M :p <span class="num">0.02</span>d0)
   (<span class="kwa">make-freq</span> :c #\N :p <span class="num">0.02</span>d0)
   (<span class="kwa">make-freq</span> :c #\R :p <span class="num">0.02</span>d0)
   (<span class="kwa">make-freq</span> :c #\S :p <span class="num">0.02</span>d0)
   (<span class="kwa">make-freq</span> :c #\V :p <span class="num">0.02</span>d0)
   (<span class="kwa">make-freq</span> :c #\W :p <span class="num">0.02</span>d0)
   (<span class="kwa">make-freq</span> :c #\Y :p <span class="num">0.02</span>d0)))

(<span class="kwa">defparameter</span> *homo-sapiens*
  (<span class="kwa">vector</span>
   (<span class="kwa">make-freq</span> :c #<span class="esc">\a</span> :p <span class="num">0.3029549426680</span>d0)
   (<span class="kwa">make-freq</span> :c #\c :p <span class="num">0.1979883004921</span>d0)
   (<span class="kwa">make-freq</span> :c #\g :p <span class="num">0.1975473066391</span>d0)
   (<span class="kwa">make-freq</span> :c #<span class="esc">\t</span> :p <span class="num">0.3015094502008</span>d0)))

(<span class="kwa">defun</span> make-cumulative (<span class="kwa">freqs</span>)
  (<span class="kwa">let</span> ((<span class="kwa">cp</span> <span class="num">0.0</span>d0))
    (<span class="kwa">declare</span> (<span class="kwa">double-float</span> cp)
	     (<span class="kwa">simple-vector</span> freqs))
    (<span class="kwa">dotimes</span> (<span class="kwa">i</span> (<span class="kwa">length</span> freqs))
      (<span class="kwa">incf</span> cp (<span class="kwa">freq-p</span> (<span class="kwa">aref</span> freqs i)))
      (<span class="kwa">setf</span> (<span class="kwa">freq-p</span> (<span class="kwa">aref</span> freqs i)) cp))))

(<span class="kwa">declaim</span> (<span class="kwa">inline</span> select-random))

#+nil
(<span class="kwa">defun</span> select-random (<span class="kwa">freqs</span> len)
  (<span class="kwa">declare</span> (<span class="kwa">fixnum</span> len) (<span class="kwa">simple-vector</span> freqs))
  (<span class="kwa">let</span> ((<span class="kwa">r</span> (<span class="kwa">gen-random</span> <span class="num">1.0</span>d0)))
    (<span class="kwa">declare</span> (<span class="kwa">double-float</span> r))
    (<span class="kwa">dotimes</span> (<span class="kwa">i</span> len)
      (<span class="kwa">when</span> (&lt; r (<span class="kwa">freq-p</span> (<span class="kwa">aref</span> freqs i)))
        (<span class="kwa">return-from</span> select-random (<span class="kwa">freq-c</span> (<span class="kwa">aref</span> freqs i)))))
    (<span class="kwa">freq-c</span> (<span class="kwa">aref</span> freqs (<span class="kwa">1-</span> len)))))

(<span class="kwa">defun</span> select-random (<span class="kwa">freqs</span> len)
  (<span class="kwa">declare</span> (<span class="kwa">fixnum</span> len) (<span class="kwa">simple-vector</span> freqs))
  (<span class="kwa">let</span> ((<span class="kwa">r</span> (<span class="kwa">gen-random</span> <span class="num">1.0</span>d0))
	(<span class="kwa">first</span> (<span class="kwa">aref</span> freqs <span class="num">0</span>)))
    (<span class="kwa">declare</span> (<span class="kwa">double-float</span> r))
    (<span class="kwa">if</span> (&lt; r (<span class="kwa">freq-p</span> first))
	(<span class="kwa">freq-c</span> first)
	(<span class="kwa">do</span>* ((<span class="kwa">lo</span> <span class="num">0</span>)
	      (<span class="kwa">hi</span> (<span class="kwa">1-</span> len))
	      (<span class="kwa">mid</span> (<span class="kwa">truncate</span> (+ lo hi) <span class="num">2</span>) (<span class="kwa">truncate</span> (+ lo hi) <span class="num">2</span>))
	      (<span class="kwa">freq</span> (<span class="kwa">aref</span> freqs mid) (<span class="kwa">aref</span> freqs mid)))
	     ((&gt;= lo mid) (<span class="kwa">freq-c</span> (<span class="kwa">aref</span> freqs hi)))
	  (<span class="kwa">declare</span> (<span class="kwa">fixnum</span> lo hi mid))
	  (<span class="kwa">if</span> (&lt; r (<span class="kwa">freq-p</span> freq))
	      (<span class="kwa">setf</span> hi mid)
	      (<span class="kwa">setf</span> lo mid))))))

(<span class="kwa">defconstant</span> +buffer-size+ <span class="num">30000</span>)

(<span class="kwa">defun</span> make-random-fasta (<span class="kwa">id</span> desc freqs freqs-length n line-length)
  (<span class="kwa">declare</span> (<span class="kwa">fixnum</span> freqs-length n line-length)
	   (<span class="kwa">string</span> id desc))
  (<span class="kwa">let</span> ((<span class="kwa">buf</span> (<span class="kwa">make-string</span> +buffer-size+ :element-type 'base-char :initial-element #\Space))
        (<span class="kwa">index</span> <span class="num">0</span>))
    (<span class="kwa">declare</span> (<span class="kwa">fixnum</span> index)
	     (<span class="kwa">base-string</span> buf))
    (<span class="kwa">format</span> t <span class="str">&quot;&gt;~a ~a~%&quot;</span> id desc)
    (<span class="kwa">do</span>* ((<span class="kwa">chars-remaining</span> n (<span class="kwa">-</span> chars-remaining current-line-length))
          (<span class="kwa">current-line-length</span> <span class="num">0</span>))
         ((&lt;= chars-remaining <span class="num">0</span>) nil)
      (<span class="kwa">declare</span> (<span class="kwa">fixnum</span> chars-remaining current-line-length))
      (<span class="kwa">setf</span> current-line-length (<span class="kwa">min</span> chars-remaining line-length))
      (<span class="kwa">when</span> (&lt; (<span class="kwa">-</span> +buffer-size+ index) current-line-length)
        (<span class="kwa">write-sequence</span> buf *standard-output* :end index)
        (<span class="kwa">setf</span> index <span class="num">0</span>))
      (<span class="kwa">dotimes</span> (<span class="kwa">i</span> current-line-length)
        (<span class="kwa">declare</span> (<span class="kwa">fixnum</span> i))
        (<span class="kwa">setf</span> (<span class="kwa">aref</span> buf index) (<span class="kwa">select-random</span> freqs freqs-length))
        (<span class="kwa">incf</span> index))
      (<span class="kwa">setf</span> (<span class="kwa">aref</span> buf index) #\Newline)
      (<span class="kwa">incf</span> index))
    (<span class="kwa">when</span> (&gt; index <span class="num">0</span>)
      (<span class="kwa">write-sequence</span> buf *standard-output* :end index))))


(<span class="kwa">defun</span> make-repeat-fasta (<span class="kwa">id</span> desc s n line-length)
  (<span class="kwa">declare</span> (<span class="kwa">fixnum</span> n line-length)
	   (<span class="kwa">string</span> id desc s))
  (<span class="kwa">let</span> ((<span class="kwa">s-start</span> <span class="num">0</span>)               <span class="slc">; this won't change</span>
        (<span class="kwa">s-end</span> (<span class="kwa">length</span> s))        <span class="slc">; this won't change</span>
        (<span class="kwa">w-start</span> <span class="num">0</span>)               <span class="slc">; this will cycle around</span>
        (<span class="kwa">w-end</span> <span class="num">0</span>)                 <span class="slc">; this will cycle around</span>
        (<span class="kwa">current-line-length</span> <span class="num">0</span>))  <span class="slc">; line-length or less for the last line</span>
    (<span class="kwa">declare</span> (<span class="kwa">fixnum</span> s-start s-end w-start w-end current-line-length))
    (<span class="kwa">format</span> t <span class="str">&quot;&gt;~a ~a~%&quot;</span> id desc)
    (<span class="kwa">do</span> ((<span class="kwa">chars-remaining</span> n (<span class="kwa">-</span> chars-remaining current-line-length)))
        ((&lt;= chars-remaining <span class="num">0</span>) nil)
      (<span class="kwa">declare</span> (<span class="kwa">fixnum</span> chars-remaining))
      (<span class="kwa">setf</span> current-line-length (<span class="kwa">min</span> chars-remaining line-length))
      (<span class="kwa">setf</span> w-end (+ w-start current-line-length))
      (<span class="kwa">when</span> (&gt; w-end s-end)
	(<span class="kwa">decf</span> w-end s-end))
      (<span class="kwa">if</span> (&gt; w-end w-start)
          (<span class="kwa">write-sequence</span> s *standard-output* :start w-start :end w-end)
	(<span class="kwa">progn</span>
	  (<span class="kwa">write-sequence</span> s *standard-output* :start w-start :end s-end)
	  (<span class="kwa">write-sequence</span> s *standard-output* :start s-start :end w-end)))
      (<span class="kwa">write-char</span> #\Newline)
      (<span class="kwa">setf</span> w-start w-end))))


(<span class="kwa">defun</span> main ()
  (<span class="kwa">let</span> ((<span class="kwa">n</span> (<span class="kwa">or</span> (<span class="kwa">ignore-errors</span>
		 (<span class="kwa">parse-integer</span> (<span class="kwa">car</span> (<span class="kwa">last</span> #+sbcl sb-ext:*posix-argv*
					   #+cmu  extensions:*command-line-strings*
					   #+gcl  si::*command-args*
					   #+clisp nil))))
	       <span class="num">1000</span>)))
    (<span class="kwa">declare</span> (<span class="kwa">fixnum</span> n))

    (<span class="kwa">make-cumulative</span> *iub*)
    (<span class="kwa">make-cumulative</span> *homo-sapiens*)

    (<span class="kwa">make-repeat-fasta</span> <span class="str">&quot;ONE&quot;</span> <span class="str">&quot;Homo sapiens alu&quot;</span>
		       *alu* (<span class="kwa">the</span> fixnum (* n <span class="num">2</span>)) +line-length+)
    (<span class="kwa">make-random-fasta</span> <span class="str">&quot;TWO&quot;</span> <span class="str">&quot;IUB ambiguity codes&quot;</span>
		       *iub* (<span class="kwa">length</span> *iub*) (<span class="kwa">the</span> fixnum (* n <span class="num">3</span>)) +line-length+)
    (<span class="kwa">make-random-fasta</span> <span class="str">&quot;THREE&quot;</span>  <span class="str">&quot;Homo sapiens frequency&quot;</span>
		       *homo-sapiens* (<span class="kwa">length</span> *homo-sapiens*)
		       (<span class="kwa">the</span> fixnum (* n <span class="num">5</span>)) +line-length+)))
