<span class="slc">% The Computer Language Benchmarks Game</span>
<span class="slc">% http://benchmarksgame.alioth.debian.org/</span>
<span class="slc">%  </span>
<span class="slc">%   contributed by Mark Scandariato</span>
<span class="slc">%</span>
<span class="slc">%   erl -noshell -noinput -run pidigits main 7 </span>


<span class="opt">-</span><span class="kwd">module</span><span class="opt">(</span>pidigits<span class="opt">).</span>
<span class="opt">-</span><span class="kwd">export</span><span class="opt">([</span>main<span class="opt">/</span><span class="num">1</span><span class="opt">]).</span>

<span class="slc">% conversion</span>
<span class="kwd">is_safe</span><span class="opt">(</span>Z<span class="opt">,</span> N<span class="opt">) -&gt;</span> N <span class="opt">==</span> <span class="kwd">extr</span><span class="opt">(</span>Z<span class="opt">,</span> <span class="num">4</span><span class="opt">).</span>
<span class="kwd">next</span><span class="opt">(</span>Z<span class="opt">)       -&gt;</span> <span class="kwd">extr</span><span class="opt">(</span>Z<span class="opt">,</span> <span class="num">3</span><span class="opt">).</span>
<span class="kwd">prod</span><span class="opt">(</span>Z<span class="opt">,</span> N<span class="opt">)    -&gt;</span> <span class="kwd">comp</span><span class="opt">({</span><span class="num">10</span><span class="opt">, -</span><span class="num">10</span><span class="opt">*</span>N<span class="opt">,</span> <span class="num">0</span><span class="opt">,</span> <span class="num">1</span><span class="opt">},</span> Z<span class="opt">).</span>
<span class="kwd">cons</span><span class="opt">(</span>Z<span class="opt">,</span> Zp<span class="opt">)   -&gt;</span> <span class="kwd">comp</span><span class="opt">(</span>Z<span class="opt">,</span> Zp<span class="opt">).</span>

<span class="slc">% LFT</span>
<span class="opt">-</span><span class="kwd">define</span><span class="opt">(</span>unit<span class="opt">, {</span><span class="num">1</span><span class="opt">,</span><span class="num">0</span><span class="opt">,</span><span class="num">0</span><span class="opt">,</span><span class="num">1</span><span class="opt">}).</span>
<span class="kwd">comp</span><span class="opt">({</span>Q<span class="opt">,</span>R<span class="opt">,</span>S<span class="opt">,</span>T<span class="opt">}, {</span>Qp<span class="opt">,</span> Rp<span class="opt">,</span> Sp<span class="opt">,</span> Tp<span class="opt">}) -&gt;</span>
    <span class="opt">{</span>Q<span class="opt">*</span>Qp <span class="opt">+</span> R<span class="opt">*</span>Sp<span class="opt">,</span> Q<span class="opt">*</span>Rp <span class="opt">+</span> R<span class="opt">*</span>Tp<span class="opt">,</span> S<span class="opt">*</span>Qp <span class="opt">+</span> T<span class="opt">*</span>Sp<span class="opt">,</span> S<span class="opt">*</span>Rp <span class="opt">+</span> T<span class="opt">*</span>Tp<span class="opt">}.</span>
<span class="kwd">extr</span><span class="opt">({</span>Q<span class="opt">,</span>R<span class="opt">,</span>S<span class="opt">,</span>T<span class="opt">},</span> X<span class="opt">) -&gt; (</span>Q <span class="opt">*</span> X <span class="opt">+</span> R<span class="opt">)</span> <span class="kwd">div</span> <span class="opt">(</span>S <span class="opt">*</span> X <span class="opt">+</span> T<span class="opt">).</span>

<span class="kwd">lft</span><span class="opt">(</span>K<span class="opt">) -&gt; {</span>K<span class="opt">,</span> <span class="num">4</span><span class="opt">*</span>K<span class="opt">+</span><span class="num">2</span><span class="opt">,</span> <span class="num">0</span><span class="opt">,</span> <span class="num">2</span><span class="opt">*</span>K<span class="opt">+</span><span class="num">1</span><span class="opt">}.</span>

<span class="kwd">stream</span><span class="opt">(</span>N<span class="opt">) -&gt;</span> <span class="kwd">stream</span><span class="opt">(</span>N<span class="opt">,</span> <span class="num">0</span><span class="opt">,</span> <span class="num">1</span><span class="opt">,</span> ?unit<span class="opt">, []).</span>
<span class="kwd">stream</span><span class="opt">(</span>N<span class="opt">,</span> N<span class="opt">,</span> _<span class="opt">,</span> _<span class="opt">,</span> P<span class="opt">) -&gt;</span> <span class="kwd">print</span><span class="opt">(</span>N<span class="opt">,</span>P<span class="opt">);</span>
<span class="kwd">stream</span><span class="opt">(</span>N<span class="opt">,</span> C<span class="opt">,</span> K<span class="opt">,</span> Z<span class="opt">,</span> P<span class="opt">) -&gt;</span>
    Y <span class="opt">=</span> <span class="kwd">next</span><span class="opt">(</span>Z<span class="opt">),</span>
    <span class="kwa">case</span> <span class="kwd">is_safe</span><span class="opt">(</span>Z<span class="opt">,</span> Y<span class="opt">)</span> <span class="kwa">of</span>
        true  <span class="opt">-&gt;</span>
            <span class="kwd">stream</span><span class="opt">(</span>N<span class="opt">,</span> C<span class="opt">+</span><span class="num">1</span><span class="opt">,</span> K<span class="opt">,</span> <span class="kwd">prod</span><span class="opt">(</span>Z<span class="opt">,</span>Y<span class="opt">),</span> <span class="kwd">update</span><span class="opt">(</span>C<span class="opt">,</span>Y<span class="opt">,</span>P<span class="opt">));</span>
        false <span class="opt">-&gt;</span>
            <span class="kwd">stream</span><span class="opt">(</span>N<span class="opt">,</span> C<span class="opt">,</span> K<span class="opt">+</span><span class="num">1</span><span class="opt">,</span> <span class="kwd">cons</span><span class="opt">(</span>Z<span class="opt">,</span> <span class="kwd">lft</span><span class="opt">(</span>K<span class="opt">)),</span> P<span class="opt">)</span>
    <span class="kwa">end</span><span class="opt">.</span>


<span class="kwd">update</span><span class="opt">(</span>C<span class="opt">,</span> D<span class="opt">,</span> P<span class="opt">)</span> <span class="kwa">when</span> C rem <span class="num">10</span> <span class="opt">==</span> <span class="num">0</span><span class="opt">,</span> C <span class="opt">&gt;</span> <span class="num">0</span> <span class="opt">-&gt;</span>
    <span class="kwd">print</span><span class="opt">(</span>C<span class="opt">,</span> P<span class="opt">),</span>
    <span class="opt">[</span>D<span class="opt">];</span>

<span class="kwd">update</span><span class="opt">(</span>_<span class="opt">,</span> D<span class="opt">,</span> P<span class="opt">) -&gt; [</span>D<span class="opt">|</span>P<span class="opt">].</span>


<span class="kwd">print</span><span class="opt">(</span>C<span class="opt">,</span> P<span class="opt">) -&gt;</span> <span class="kwd">do_print</span><span class="opt">(</span>C<span class="opt">,</span> <span class="kwc">lists</span><span class="opt">:</span><span class="kwd">reverse</span><span class="opt">(</span>P<span class="opt">)).</span>


<span class="kwd">do_print</span><span class="opt">(</span>C<span class="opt">, [])</span> <span class="kwa">when</span> C rem <span class="num">10</span> <span class="opt">==</span> <span class="num">0</span> <span class="opt">-&gt;</span> <span class="kwc">io</span><span class="opt">:</span><span class="kwd">fwrite</span><span class="opt">(</span><span class="str">&quot;</span><span class="esc">\t</span><span class="str">:~p~n&quot;</span><span class="opt">, [</span>C<span class="opt">]);</span>
<span class="kwd">do_print</span><span class="opt">(</span>C<span class="opt">, []) -&gt;</span> <span class="kwc">io</span><span class="opt">:</span><span class="kwd">fwrite</span><span class="opt">(</span><span class="str">&quot;~*.1c:~p~n&quot;</span><span class="opt">, [</span><span class="num">10</span> <span class="opt">-</span> C rem <span class="num">10</span><span class="opt">,</span> $<span class="esc">\t</span><span class="opt">,</span> C<span class="opt">]);</span>
<span class="kwd">do_print</span><span class="opt">(</span>C<span class="opt">, [</span>H<span class="opt">|</span>T<span class="opt">]) -&gt;</span> <span class="kwc">io</span><span class="opt">:</span><span class="kwd">fwrite</span><span class="opt">(</span><span class="str">&quot;~p&quot;</span><span class="opt">, [</span>H<span class="opt">]),</span> <span class="kwd">do_print</span><span class="opt">(</span>C<span class="opt">,</span> T<span class="opt">).</span>


<span class="kwd">main</span><span class="opt">([</span>Arg<span class="opt">]) -&gt;</span>
    N <span class="opt">=</span> <span class="kwb">list_to_integer</span><span class="opt">(</span>Arg<span class="opt">),</span>
    <span class="kwd">main</span><span class="opt">(</span>N<span class="opt">),</span>
    <span class="kwc">erlang</span><span class="opt">:</span><span class="kwb">halt</span><span class="opt">(</span><span class="num">0</span><span class="opt">);</span>

<span class="kwd">main</span><span class="opt">(</span>N<span class="opt">)</span> <span class="kwa">when</span> N <span class="opt">&gt;</span> <span class="num">1</span> <span class="opt">-&gt;</span> <span class="kwd">stream</span><span class="opt">(</span>N<span class="opt">).</span>
