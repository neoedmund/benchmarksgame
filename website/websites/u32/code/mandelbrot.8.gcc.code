<span class="slc">// The Computer Language Benchmarks Game</span>
<span class="slc">// http://benchmarksgame.alioth.debian.org/</span>
<span class="slc">//</span>
<span class="slc">// Contributed by Jeremy Zerfas</span>
<span class="slc">// Partially based on code by Elam Kolenovic and Sean Stanek</span>

<span class="ppc">#include &lt;stdint.h&gt;</span>
<span class="ppc">#include &lt;stdlib.h&gt;</span>
<span class="ppc">#include &lt;stdio.h&gt;</span>

<span class="ppc">#define LIMIT_SQUARED   4.0</span>
<span class="ppc">#define MAX_ITERATIONS   50</span>

<span class="kwb">int</span> <span class="kwd">main</span>(<span class="kwb">int</span> argc, <span class="kwb">char</span> ** argv){
   <span class="slc">// Ensure image_Width_And_Height are multiples of 8.</span>
   <span class="kwb">const intmax_t</span> image_Width_And_Height=(<span class="kwd">atoi</span>(argv[<span class="num">1</span>])+<span class="num">7</span>)/<span class="num">8</span>*<span class="num">8</span>;

   <span class="slc">// The image will be black and white with one bit for each pixel. Bits with</span>
   <span class="slc">// a value of zero are white pixels which are the ones that &quot;escape&quot; from</span>
   <span class="slc">// the Mandelbrot set. We'll be working on one line at a time and each line</span>
   <span class="slc">// will be made up of pixel groups that are eight pixels in size so each</span>
   <span class="slc">// pixel group will be one byte. This allows for some more optimizations to</span>
   <span class="slc">// be done.</span>
   <span class="kwb">const intmax_t</span> pixel_Groups_Per_Line=image_Width_And_Height/<span class="num">8</span>;
   <span class="kwb">uint8_t</span> * <span class="kwb">const</span> pixels=<span class="kwd">malloc</span>(image_Width_And_Height*
     image_Width_And_Height/<span class="num">8</span>);

   <span class="slc">// Precompute the initial real and imaginary values for each x and y</span>
   <span class="slc">// coordinate in the image.</span>
   <span class="kwb">double</span> initial_r[image_Width_And_Height], initial_i[image_Width_And_Height];
   <span class="kwb">const double</span> two_Over_Image_Width_And_Height=<span class="num">2.0</span>/image_Width_And_Height;
<span class="ppc">#pragma omp parallel for</span>
   <span class="kwa">for</span>(<span class="kwb">intmax_t</span> xy=<span class="num">0</span>; xy&lt;image_Width_And_Height; xy++){
      initial_r[xy]=xy*two_Over_Image_Width_And_Height - <span class="num">1.5</span>;
      initial_i[xy]=xy*two_Over_Image_Width_And_Height - <span class="num">1.0</span>;
   }

<span class="ppc">#pragma omp parallel for schedule(guided)</span>
   <span class="kwa">for</span>(<span class="kwb">intmax_t</span> y=<span class="num">0</span>; y&lt;image_Width_And_Height; y++){
      <span class="kwb">const double</span> prefetched_Initial_i=initial_i[y];
      <span class="kwb">uint8_t</span> * <span class="kwb">const</span> line_Pixel_Groups=&amp;pixels[y*pixel_Groups_Per_Line];
      <span class="kwa">for</span>(<span class="kwb">intmax_t</span> x_Major=<span class="num">0</span>; x_Major&lt;image_Width_And_Height; x_Major+=<span class="num">8</span>){

         <span class="slc">// pixel_Group_r and pixel_Group_i will store real and imaginary</span>
         <span class="slc">// values for each pixel in the current pixel group as we perform</span>
         <span class="slc">// iterations. Set their initial values here.</span>
         <span class="kwb">double</span> pixel_Group_r[<span class="num">8</span>], pixel_Group_i[<span class="num">8</span>];
         <span class="kwb">const double</span> * <span class="kwb">const</span> current_Pixel_Group_Initial_r=
           &amp;initial_r[x_Major];
         <span class="kwa">for</span>(<span class="kwb">intmax_t</span> x_Minor=<span class="num">0</span>; x_Minor&lt;<span class="num">8</span>; ++x_Minor){
            pixel_Group_r[x_Minor]=current_Pixel_Group_Initial_r[x_Minor];
            pixel_Group_i[x_Minor]=prefetched_Initial_i;
         }

         <span class="slc">// If any pixels from the previous pixel group escaped then we are</span>
         <span class="slc">// likely outside the Mandelbrot set or near the edge of it so</span>
         <span class="slc">// check whether pixels escape during each iteration. If no pixels</span>
         <span class="slc">// from the previous pixel group escaped then the pixels for the</span>
         <span class="slc">// current pixel group are likely to be in the Mandelbrot set so</span>
         <span class="slc">// we'll just perform all iterations and do one final check at the</span>
         <span class="slc">// end to see if any of the pixels escaped. </span>
         <span class="kwb">static uint8_t</span> any_Pixels_Escape=<span class="num">1</span>;
         <span class="kwb">uint8_t</span> eight_Pixels;
         <span class="kwa">if</span>(any_Pixels_Escape){
            <span class="slc">// Assume all pixels are in the Mandelbrot set initially.</span>
            eight_Pixels=<span class="num">0xff</span>;

            <span class="kwb">intmax_t</span> iteration=MAX_ITERATIONS;
            <span class="kwa">do</span>{
               <span class="kwb">uint8_t</span> current_Pixel_Bitmask=<span class="num">0x80</span>;
               <span class="kwa">for</span>(<span class="kwb">intmax_t</span> x_Minor=<span class="num">0</span>; x_Minor&lt;<span class="num">8</span>; x_Minor++){
                  <span class="slc">// Only process the pixels that are still in the</span>
                  <span class="slc">// Mandelbrot set.</span>
                  <span class="kwa">if</span>(eight_Pixels &amp; current_Pixel_Bitmask){
                     <span class="kwb">const double</span> r=pixel_Group_r[x_Minor];
                     <span class="kwb">const double</span> i=pixel_Group_i[x_Minor];

                     pixel_Group_i[x_Minor]=<span class="num">2.0</span>*r*i +
                       prefetched_Initial_i;
                     pixel_Group_r[x_Minor]=r*r - i*i +
                       current_Pixel_Group_Initial_r[x_Minor];

                     <span class="slc">// Clear the bit for the pixel if it escapes from</span>
                     <span class="slc">// the Mandelbrot set.</span>
                     <span class="kwa">if</span>(r*r + i*i&gt;LIMIT_SQUARED)
                        eight_Pixels ^= current_Pixel_Bitmask;
                  }

                  current_Pixel_Bitmask&gt;&gt;=<span class="num">1</span>;
               }
            }<span class="kwa">while</span>(eight_Pixels &amp;&amp; --iteration);
         }<span class="kwa">else</span>{
            <span class="slc">// One more iteration is done further below which is why</span>
            <span class="slc">// MAX_ITERATIONS-1 iterations are done here instead of</span>
            <span class="slc">// MAX_ITERATIONS.</span>
            <span class="kwa">for</span>(<span class="kwb">intmax_t</span> iteration=<span class="num">0</span>; iteration&lt;MAX_ITERATIONS-<span class="num">1</span>;
              iteration++){
               <span class="kwa">for</span>(<span class="kwb">intmax_t</span> x_Minor=<span class="num">0</span>; x_Minor&lt;<span class="num">8</span>; x_Minor++){
                  <span class="kwb">const double</span> r=pixel_Group_r[x_Minor];
                  <span class="kwb">const double</span> i=pixel_Group_i[x_Minor];

                  pixel_Group_i[x_Minor]=<span class="num">2.0</span>*i*r + prefetched_Initial_i;
                  pixel_Group_r[x_Minor]=r*r - i*i +
                    current_Pixel_Group_Initial_r[x_Minor];
               }
            }

            <span class="slc">// Assume all pixels escape initially.</span>
            eight_Pixels=<span class="num">0x00</span>;

            <span class="kwb">uint8_t</span> current_Pixel_Bitmask=<span class="num">0x80</span>;
            <span class="kwa">for</span>(<span class="kwb">intmax_t</span> x_Minor=<span class="num">0</span>; x_Minor&lt;<span class="num">8</span>; x_Minor++){
               <span class="kwb">const double</span> r=pixel_Group_r[x_Minor];
               <span class="kwb">const double</span> i=pixel_Group_i[x_Minor];

               <span class="slc">// Set the bit for pixels that are still in the Mandelbrot</span>
               <span class="slc">// set.</span>
               <span class="kwa">if</span>(r*r + i*i&lt;=LIMIT_SQUARED)
                  eight_Pixels|=current_Pixel_Bitmask;

               current_Pixel_Bitmask&gt;&gt;=<span class="num">1</span>;
            }
         }

         line_Pixel_Groups[x_Major&gt;&gt;<span class="num">3</span>]=eight_Pixels;
         any_Pixels_Escape=eight_Pixels!=<span class="num">0xff</span>;
      }
   }

   <span class="slc">// Output the image to stdout.</span>
   <span class="kwd">printf</span>(<span class="str">&quot;P4</span><span class="esc">\n</span><span class="str">%ju %ju</span><span class="esc">\n</span><span class="str">&quot;</span>, image_Width_And_Height, image_Width_And_Height);
   <span class="kwd">fwrite</span>(pixels, image_Width_And_Height*image_Width_And_Height/<span class="num">8</span>, <span class="num">1</span>, stdout);

   <span class="kwd">free</span>(pixels);

   <span class="kwa">return</span> <span class="num">0</span>;
}
