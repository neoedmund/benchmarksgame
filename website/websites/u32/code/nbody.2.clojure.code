<span class="slc">;;   The Computer Language Benchmarks Game</span>
<span class="slc">;;   http://benchmarksgame.alioth.debian.org/</span>

<span class="slc">;; adapted from Java #2</span>
<span class="slc">;; contributed by Alex Miller</span>

(ns nbody
  (:gen-class))

(set! *warn-on-reflection* true)
(set! *unchecked-math* true)

<span class="slc">;; Body = double[x y z vx vy vz mass]</span>
<span class="slc">;; System = double[][]</span>

(<span class="kwa">defn</span> init-system []
  (<span class="kwc">let</span> [solar-mass (* <span class="num">3.141592653589793 3.141592653589793 4.0</span>)
        days-per-year <span class="num">365.24</span>
        sun (double-array [<span class="num">0.0 0.0 0.0 0.0 0.0 0.0</span> solar-mass])
        jupiter (double-array [<span class="num">4.84143144246472090e+00</span>
                               -<span class="num">1.16032004402742839e+00</span>
                               -<span class="num">1.03622044471123109e-01</span>
                               (* <span class="num">1.66007664274403694e-03</span> days-per-year)
                               (* <span class="num">7.69901118419740425e-03</span> days-per-year)
                               (* -<span class="num">6.90460016972063023e-05</span> days-per-year)
                               (* <span class="num">9.54791938424326609e-04</span> solar-mass)])
        saturn  (double-array [<span class="num">8.34336671824457987e+00</span>
                               <span class="num">4.12479856412430479e+00</span>
                               -<span class="num">4.03523417114321381e-01</span>
                               (* -<span class="num">2.76742510726862411e-03</span> days-per-year)
                               (* <span class="num">4.99852801234917238e-03</span> days-per-year)
                               (* <span class="num">2.30417297573763929e-05</span> days-per-year)
                               (* <span class="num">2.85885980666130812e-04</span> solar-mass)])
        uranus (double-array [<span class="num">1.28943695621391310e+01</span>
                              -<span class="num">1.51111514016986312e+01</span>
                              -<span class="num">2.23307578892655734e-01</span>
                              (* <span class="num">2.96460137564761618e-03</span> days-per-year)
                              (* <span class="num">2.37847173959480950e-03</span> days-per-year)
                              (* -<span class="num">2.96589568540237556e-05</span> days-per-year)
                              (* <span class="num">4.36624404335156298e-05</span> solar-mass)])
        neptune (double-array [<span class="num">1.53796971148509165e+01</span>
                               -<span class="num">2.59193146099879641e+01</span>
                               <span class="num">1.79258772950371181e-01</span>
                               (* <span class="num">2.68067772490389322e-03</span> days-per-year)
                               (* <span class="num">1.62824170038242295e-03</span> days-per-year)
                               (* -<span class="num">9.51592254519715870e-05</span> days-per-year)
                               (* <span class="num">5.15138902046611451e-05</span> solar-mass)])
        bodies (object-array [sun jupiter saturn uranus neptune])]
    (<span class="kwb">loop</span> [px <span class="num">0.0</span>
           py <span class="num">0.0</span>
           pz <span class="num">0.0</span>
           i <span class="num">0</span>]
      (<span class="kwc">if</span> (&lt; i (alength bodies))
        (<span class="kwc">let</span> [b ^doubles (aget bodies i)
              bmass (aget b <span class="num">6</span>)]
          (<span class="kwb">recur</span> (+ px (* (aget b <span class="num">3</span>) bmass))
                 (+ py (* (aget b <span class="num">4</span>) bmass))
                 (+ pz (* (aget b <span class="num">5</span>) bmass))
                 (inc i)))
        (do
          (aset sun <span class="num">3</span> (/ (- <span class="num">0</span> px) solar-mass))
          (aset sun <span class="num">4</span> (/ (- <span class="num">0</span> py) solar-mass))
          (aset sun <span class="num">5</span> (/ (- <span class="num">0</span> pz) solar-mass))
          bodies)))))

(<span class="kwa">defn</span> energy ^double [^objects system]
  (<span class="kwc">let</span> [n (alength system)
        X (int <span class="num">0</span>)
        Y (int <span class="num">1</span>)
        Z (int <span class="num">2</span>)
        VX (int <span class="num">3</span>)
        VY (int <span class="num">4</span>)
        VZ (int <span class="num">5</span>)
        MASS (int <span class="num">6</span>)]
    (<span class="kwb">loop</span> [i <span class="num">0</span>
           j <span class="num">0</span>
           e <span class="num">0.0</span>]
      (<span class="kwc">if</span> (&lt; i n)
        (<span class="kwc">if</span> (= j <span class="num">0</span>)
          (<span class="kwc">let</span> [ib ^doubles (aget system i)
                bvx (aget ib VX)
                bvy (aget ib VY)
                bvz (aget ib VZ)]
            (<span class="kwb">recur</span> i (inc i) (+ e (* <span class="num">0.5</span> (aget ib MASS)
                                     (+ (* bvx bvx)
                                        (* bvy bvy)
                                        (* bvz bvz))))))
          (<span class="kwc">if</span> (&lt; j n)
            (<span class="kwc">let</span> [ib ^doubles (aget system i)
                  jb ^doubles (aget system j)
                  dx (- (aget ib X) (aget jb X))
                  dy (- (aget ib Y) (aget jb Y))
                  dz (- (aget ib Z) (aget jb Z))
                  dist (Math/sqrt (+ (* dx dx) (* dy dy) (* dz dz)))]
              (<span class="kwb">recur</span> i (inc j) (- e (/ (* (aget ib MASS) (aget jb MASS)) dist))))
            (<span class="kwb">recur</span> (inc i) <span class="num">0</span> e)))
        e))))

(<span class="kwa">defn</span> advance [^objects system ^double dt]
  (<span class="kwc">let</span> [n (long (alength system))
        X (int <span class="num">0</span>)
        Y (int <span class="num">1</span>)
        Z (int <span class="num">2</span>)
        VX (int <span class="num">3</span>)
        VY (int <span class="num">4</span>)
        VZ (int <span class="num">5</span>)
        MASS (int <span class="num">6</span>)]
    (<span class="kwb">loop</span> [i <span class="num">0</span>
           j <span class="num">1</span>]
      (<span class="kwc">if</span> (&lt; i n)
        (<span class="kwc">if</span> (&lt; j n)
          (<span class="kwc">let</span> [ib ^doubles (aget system i)
                jb ^doubles (aget system j)
                dx (- (aget ib X) (aget jb X))
                dy (- (aget ib Y) (aget jb Y))
                dz (- (aget ib Z) (aget jb Z))
                dsq (+ (* dx dx) (* dy dy) (* dz dz))
                dist (Math/sqrt dsq)
                mag (/ dt (* dsq dist))
                imassmag (* (aget ib MASS) mag)
                jmassmag (* (aget jb MASS) mag)]
            (aset ib VX (- (aget ib VX) (* dx jmassmag)))
            (aset ib VY (- (aget ib VY) (* dy jmassmag)))
            (aset ib VZ (- (aget ib VZ) (* dz jmassmag)))
            (aset jb VX (+ (aget jb VX) (* dx imassmag)))
            (aset jb VY (+ (aget jb VY) (* dy imassmag)))
            (aset jb VZ (+ (aget jb VZ) (* dz imassmag)))
            (<span class="kwb">recur</span> i (inc j)))
          (<span class="kwb">recur</span> (inc i) (+ i <span class="num">2</span>)))
        (<span class="kwb">loop</span> [k <span class="num">0</span>]
          (<span class="kwc">when</span> (&lt; k n)
            (<span class="kwc">let</span> [b ^doubles (aget system k)]
              (aset b X (+ (aget b X) (* dt (aget b VX))))
              (aset b Y (+ (aget b Y) (* dt (aget b VY))))
              (aset b Z (+ (aget b Z) (* dt (aget b VZ))))
              (<span class="kwb">recur</span> (inc k)))))))))

(<span class="kwa">defn</span> -main [&amp; args]
  (<span class="kwc">let</span> [n (long (<span class="kwc">if</span> (pos? (count args)) (Long/parseLong (<span class="kwd">first</span> args)) <span class="num">10</span>))
        system ^objects (init-system)]    
    (printf <span class="str">&quot;%.9f</span><span class="esc">\n</span><span class="str">&quot;</span> (energy system))
    (<span class="kwb">loop</span> [i <span class="num">0</span>]
      (<span class="kwc">if</span> (&lt; i n)
        (do
          (advance system <span class="num">0.01</span>)
          (<span class="kwb">recur</span> (inc i)))
        (do
          (printf <span class="str">&quot;%.9f</span><span class="esc">\n</span><span class="str">&quot;</span> (energy system))
          (flush))))))
