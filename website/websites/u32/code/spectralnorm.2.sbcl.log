
Fri, 04 Sep 2015 22:13:50 GMT

MAKE:
cp: ‘spectralnorm.sbcl-2.sbcl’ and ‘./spectralnorm.sbcl-2.sbcl’ are the same file
SBCL built with: /usr/local/bin/sbcl --userinit /dev/null --batch --eval '(load "spectralnorm.sbcl-2.sbcl_compile")'
### START spectralnorm.sbcl-2.sbcl_compile
(handler-bind ((sb-ext:defconstant-uneql      (lambda (c) (abort c))))      (load (compile-file "spectralnorm.sbcl-2.sbcl" ))) (save-lisp-and-die "sbcl.core" :purify t)
### END spectralnorm.sbcl-2.sbcl_compile

; compiling file "/home/dunham/benchmarksgame/bench/spectralnorm/spectralnorm.sbcl-2.sbcl" (written 24 JAN 2013 02:01:16 PM):
; compiling (DECLAIM (OPTIMIZE # ...))
; compiling (DEFMACRO EVAL-A ...)
; compiling (DEFUN EVAL-AT-TIMES-U ...)
; compiling (DEFUN EVAL-A-TIMES-U ...)
; compiling (DEFUN EXECUTE-PARALLEL ...)
; compiling (DEFUN EVAL-ATA-TIMES-U ...)
; compiling (DEFUN MAIN ...)
; file: /home/dunham/benchmarksgame/bench/spectralnorm/spectralnorm.sbcl-2.sbcl
; in: DEFUN MAIN
;     (/ VBV VV)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
;   The second argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
;   The second argument is a NUMBER, not a REAL.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a SINGLE-FLOAT.
;   The second argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
;   The second argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
;   The second argument is a NUMBER, not a REAL.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a DOUBLE-FLOAT.
;   The second argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
; note: unable to
;   convert x/2^k to shift
; due to type uncertainty:
;   The first argument is a NUMBER, not a INTEGER.
;   The second argument is a NUMBER, not a INTEGER.

;     (INCF VBV (* (AREF U I) (AREF V I)))
; --> SETQ THE 
; ==>
;   (+ (* (AREF U I) (AREF V I)) VBV)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The second argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The second argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).

;     (INCF VV (* (AREF V I) (AREF V I)))
; --> SETQ THE 
; ==>
;   (+ (* (AREF V I) (AREF V I)) VV)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The second argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The second argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).

;     (* (- (* 2 N) 1) (- (* 2 N) 2))
; 
; note: forced to do GENERIC-* (cost 30)
;       unable to do inline fixnum arithmetic (cost 4) because:
;       The first argument is a (INTEGER -1073741825 1073741821), not a FIXNUM.
;       The second argument is a (INTEGER -1073741826 1073741820), not a FIXNUM.
;       The result is a (VALUES
;                        (INTEGER -1152921503533105146 1152921507828072450)
;                        &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 5) because:
;       The result is a (VALUES
;                        (INTEGER -1152921503533105146 1152921507828072450)
;                        &OPTIONAL), not a (VALUES (SIGNED-BYTE 32) &REST T).
;       etc.

;     (INCF VBV (* (AREF U I) (AREF V I)))
; --> SETQ THE 
; ==>
;   (+ (* (AREF U I) (AREF V I)) VBV)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline float arithmetic (cost 2) because:
;       The second argument is a NUMBER, not a DOUBLE-FLOAT.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES DOUBLE-FLOAT
;                                                                &REST T).

;     (INCF VV (* (AREF V I) (AREF V I)))
; --> SETQ THE 
; ==>
;   (+ (* (AREF V I) (AREF V I)) VV)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline float arithmetic (cost 2) because:
;       The second argument is a NUMBER, not a DOUBLE-FLOAT.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES DOUBLE-FLOAT
;                                                                &REST T).

;     (/ VBV VV)
; 
; note: forced to do static-fun Two-arg-/ (cost 53)
;       unable to do inline float arithmetic (cost 12) because:
;       The first argument is a NUMBER, not a DOUBLE-FLOAT.
;       The second argument is a NUMBER, not a DOUBLE-FLOAT.

;     (* (- (* 2 N) 1) (- (* 2 N) 2))
; 
; note: doing signed word to integer coercion (cost 20), for:
;       the first argument of GENERIC-*
; 
; note: doing signed word to integer coercion (cost 20), for:
;       the second argument of GENERIC-*

;     (INCF VBV (* (AREF U I) (AREF V I)))
; --> SETQ THE 
; ==>
;   (+ (* (AREF U I) (AREF V I)) VBV)
; 
; note: doing float to pointer coercion (cost 13), for:
;       the first argument of GENERIC-+

;     (INCF VV (* (AREF V I) (AREF V I)))
; --> SETQ THE 
; ==>
;   (+ (* (AREF V I) (AREF V I)) VV)
; 
; note: doing float to pointer coercion (cost 13), for:
;       the first argument of GENERIC-+

;     (FORMAT T "~11,9F~%" (SQRT (THE (DOUBLE-FLOAT 0.0d0) (/ VBV VV))))
; --> FORMAT LAMBDA FUNCTION BLOCK LET 
; ==>
;   (SB-FORMAT::FORMAT-FIXED STREAM #:FORMAT-ARG141 #:FVAR808 #:FVAR809 #:FVAR810
;                            #:FVAR811 #:FVAR812 NIL)
; 
; note: doing float to pointer coercion (cost 13)
; 
; compilation unit finished
;   printed 20 notes


; /home/dunham/benchmarksgame_onecore/spectralnorm/tmp/spectralnorm.sbcl-2.fasl written
; compilation finished in 0:00:00.041
[undoing binding stack and other enclosing state... done]
[saving current Lisp image into sbcl.core:
writing 3600 bytes from the read-only space at 0x1000000
writing 2272 bytes from the static space at 0x1100000
writing 30322688 bytes from the dynamic space at 0x9000000
done]
### START spectralnorm.sbcl-2.sbcl_run
(main) (quit)
### END spectralnorm.sbcl-2.sbcl_run

0.69s to complete and log all make actions

COMMAND LINE:
/usr/local/bin/sbcl   --noinform --core sbcl.core --userinit /dev/null --load spectralnorm.sbcl-2.sbcl_run 5500

PROGRAM OUTPUT:
1.274224153
