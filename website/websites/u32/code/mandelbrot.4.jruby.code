<span class="slc"># The Computer Language Benchmarks Game</span>
<span class="slc"># http://benchmarksgame.alioth.debian.org</span>
<span class="slc">#</span>
<span class="slc"># Contributed by Aaron Tavistock</span>

<span class="kwa">require</span> <span class="str">'thread'</span>

<span class="kwa">class</span> ThreadPool
  
  <span class="kwa">def</span> initialize
    <span class="kwb">&#64;work</span> = Queue.new
    <span class="kwb">&#64;pool</span> = Array.<span class="kwd">new</span>(cpu_count<span class="opt">)</span> <span class="kwa">do</span> |i|
      Thread.new <span class="kwa">do</span>
        Thread.current[<span class="kwc">:id</span>] = i
        <span class="kwd">catch</span>(<span class="kwc">:exit</span><span class="opt">)</span> <span class="kwa">do</span>
          <span class="kwa">while</span>(<span class="kwa">true</span><span class="opt">)</span> <span class="kwa">do</span>
            work, args = <span class="kwb">&#64;work</span>.pop
            work.<span class="kwd">call</span>(*args<span class="opt">)</span>
          <span class="kwa">end</span>
        <span class="kwa">end</span>
      <span class="kwa">end</span>
    <span class="kwa">end</span>      
  <span class="kwa">end</span>
  
  <span class="kwa">def</span> <span class="kwd">schedule</span>(*args, &amp;block<span class="opt">)</span>
    <span class="kwb">&#64;work</span> &lt;&lt; [block, args]
  <span class="kwa">end</span>
  
  <span class="kwa">def</span> shutdown
    <span class="kwb">&#64;pool</span>.size.times <span class="kwa">do</span>
      schedule { throw :exit }
    <span class="kwa">end</span>
    <span class="kwb">&#64;pool</span>.each <span class="kwa">do</span> |t|
      t.join
    <span class="kwa">end</span>
  <span class="kwa">end</span> 
  
  private 
  
  <span class="kwa">def</span> cpu_count
    <span class="kwa">begin</span>
      <span class="kwa">if</span> File.readable?(<span class="str">'/proc/cpuinfo'</span><span class="opt">)</span> <span class="slc"># Linux</span>
        %x[cat <span class="kwc">/proc/</span>cpuinfo | grep -c processor].chomp.to_i
      <span class="kwa">elsif</span> File.executable?(<span class="str">'/usr/sbin/sysctl')  # OS/X</span>
<span class="str">        %x[/usr/sbin/sysctl -n hw.ncpu].chomp.to_i</span>
<span class="str">      else </span>
<span class="str">        1</span>
<span class="str">      end</span>
<span class="str">    rescue</span>
<span class="str">      1</span>
<span class="str">    end</span>
<span class="str">  end</span>
<span class="str">  </span>
<span class="str">end</span>
<span class="str"></span>
<span class="str">class Mandel</span>
<span class="str">  </span>
<span class="str">  attr_reader :output</span>
<span class="str">  </span>
<span class="str">  def initialize(size)</span>
    <span class="kwb">&#64;size</span> = size.to_i
    <span class="kwb">&#64;workers</span> = ThreadPool.new
    <span class="kwb">&#64;output</span> = Array.<span class="kwd">new</span>(<span class="kwb">&#64;size</span><span class="opt">)</span>
  <span class="kwa">end</span>

  <span class="kwa">def</span> process
    <span class="kwb">&#64;size</span>.times <span class="kwa">do</span> |row|
      <span class="kwb">&#64;workers</span>.<span class="kwd">schedule</span>(row<span class="opt">)</span> <span class="kwa">do</span> |y|        
        ci = (<span class="num">2.0</span> * y.to_f / <span class="kwb">&#64;size</span>.to_f <span class="opt">)</span> - <span class="num">1.0</span>
        <span class="kwb">&#64;output</span>[y] = <span class="kwd">render_row</span>(ci, <span class="kwb">&#64;size</span><span class="opt">)</span>
      <span class="kwa">end</span>
    <span class="kwa">end</span>
    <span class="kwb">&#64;workers</span>.shutdown
  <span class="kwa">end</span>
  
  <span class="kwa">def self</span>.<span class="kwd">render</span>(size<span class="opt">)</span>
    m = Mandel.<span class="kwd">new</span>(size<span class="opt">)</span>
    m.process
    print <span class="str">&quot;</span><span class="ipl">#{m.header}</span><span class="str"></span><span class="esc">\n</span><span class="str"></span><span class="ipl">#{m.output.join}</span><span class="str">&quot;</span>
  <span class="kwa">end</span>
  
  <span class="kwa">def</span> header
    <span class="str">&quot;P4</span><span class="esc">\n</span><span class="str"></span><span class="ipl">#{&#64;size}</span> <span class="str"></span><span class="ipl">#{&#64;size}</span><span class="str">&quot;</span>
  <span class="kwa">end</span>

  private
  
  <span class="kwa">def</span> <span class="kwd">render_row</span>(ci, size<span class="opt">)</span>
    row_bits = Array.<span class="kwd">new</span>(size<span class="opt">)</span> <span class="kwa">do</span> |col|
      cr = (<span class="num">2.0</span> * col.to_f / size.to_f<span class="opt">)</span> - <span class="num">1.5</span>
      [cr, ci]
    <span class="kwa">end</span>
  
    row = []
    row_bits.<span class="kwd">each_slice</span>(<span class="num">8</span><span class="opt">)</span> <span class="kwa">do</span> |bits|
      row &lt;&lt; <span class="kwd">render_byte</span>(bits<span class="opt">)</span>
    <span class="kwa">end</span>
    row.join
  <span class="kwa">end</span>

  <span class="kwa">def</span> <span class="kwd">render_byte</span>(bit_data<span class="opt">)</span>
    byte_acc = <span class="num">0</span>
    bit_data.each <span class="kwa">do</span> |cr_ci|
      byte_acc = (byte_acc &lt;&lt; <span class="num">1</span><span class="opt">)</span> | <span class="kwd">get_bit_or</span>(*cr_ci<span class="opt">)</span>
    <span class="kwa">end</span>
    <span class="kwa">if</span> remaining_bits = bit_data.size - <span class="num">8</span>
      byte_acc &lt;&lt;= remaining_bits
    <span class="kwa">end</span>
    byte_acc.chr
  <span class="kwa">end</span>

  <span class="kwa">def</span> <span class="kwd">get_bit_or</span>(cr, ci<span class="opt">)</span>
    zrzr = <span class="num">0.0</span>
    zizi = <span class="num">0.0</span>
    zrzi = <span class="num">0.0</span>

    count = <span class="num">50</span>
    <span class="kwa">while</span> count &gt; <span class="num">0</span>
      
      zr = zrzr - zizi + cr
      zi = <span class="num">2.0</span> * zrzi + ci

      <span class="slc"># preserve recalculation</span>
      zrzr = zr*zr
      zizi = zi*zi
      zrzi = zr*zi

      <span class="kwa">return</span> <span class="num">0b0</span> <span class="kwa">if</span> zrzr + zizi &gt; <span class="num">4.0</span>
        
      count -= <span class="num">1</span>
    <span class="kwa">end</span>

    <span class="num">0b1</span>
  <span class="kwa">end</span>

<span class="kwa">end</span>

Mandel.<span class="kwd">render</span>(<span class="kwc">ARGV</span>.shift<span class="opt">)</span>
