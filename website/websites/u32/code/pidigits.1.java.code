<span class="com">/* The Computer Language Benchmarks Game</span>
<span class="com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="com"> </span>
<span class="com">   contributed by Isaac Gouy</span>
<span class="com">*/</span>

<span class="kwa">import</span> java.math.BigInteger;

<span class="kwa">public class</span> pidigits {
   <span class="kwa">static final</span> <span class="kwb">int</span> L = <span class="num">10</span>;

   <span class="kwa">public static</span> <span class="kwb">void</span> <span class="kwd">main</span>(String args[]) { 
      <span class="kwb">int</span> n = Integer.<span class="kwd">parseInt</span>(args[<span class="num">0</span>]);
      <span class="kwb">int</span> j = <span class="num">0</span>;
   
      PiDigitSpigot digits = <span class="kwa">new</span> <span class="kwd">PiDigitSpigot</span>();
      
      <span class="kwa">while</span> (n &gt; <span class="num">0</span>){
         <span class="kwa">if</span> (n &gt;= L){
            <span class="kwa">for</span> (<span class="kwb">int</span> i=<span class="num">0</span>; i&lt;L; i++) System.out.<span class="kwd">print</span>( digits.<span class="kwd">next</span>() );
            j += L;
         } <span class="kwa">else</span> {
            <span class="kwa">for</span> (<span class="kwb">int</span> i=<span class="num">0</span>; i&lt;n; i++) System.out.<span class="kwd">print</span>( digits.<span class="kwd">next</span>() );
            <span class="kwa">for</span> (<span class="kwb">int</span> i=n; i&lt;L; i++) System.out.<span class="kwd">print</span>(<span class="str">&quot; &quot;</span>);  
            j += n;   
         }
         System.out.<span class="kwd">print</span>(<span class="str">&quot;</span><span class="esc">\t</span><span class="str">:&quot;</span>); System.out.<span class="kwd">println</span>(j);
         n -= L;           
      }               
   }
}


<span class="kwa">class</span> PiDigitSpigot {
   Transformation z, x, inverse;            
       
   <span class="kwa">public</span> <span class="kwd">PiDigitSpigot</span>(){
      z = <span class="kwa">new</span> <span class="kwd">Transformation</span>(<span class="num">1</span>,<span class="num">0</span>,<span class="num">0</span>,<span class="num">1</span>);
      x = <span class="kwa">new</span> <span class="kwd">Transformation</span>(<span class="num">0</span>,<span class="num">0</span>,<span class="num">0</span>,<span class="num">0</span>);
      inverse = <span class="kwa">new</span> <span class="kwd">Transformation</span>(<span class="num">0</span>,<span class="num">0</span>,<span class="num">0</span>,<span class="num">0</span>);
   }   
   
   <span class="kwa">public</span> <span class="kwb">int</span> <span class="kwd">next</span>(){
      <span class="kwb">int</span> y = <span class="kwd">digit</span>();
      <span class="kwa">if</span> (<span class="kwd">isSafe</span>(y)){ 
         z = <span class="kwd">produce</span>(y); <span class="kwa">return</span> y;
      } <span class="kwa">else</span> {
         z = <span class="kwd">consume</span>( x.<span class="kwd">next</span>() ); <span class="kwa">return</span> <span class="kwd">next</span>();   
      }
   }    
      
   <span class="kwa">public</span> <span class="kwb">int</span> <span class="kwd">digit</span>(){
      <span class="kwa">return</span> z.<span class="kwd">extract</span>(<span class="num">3</span>);
   }        
   
   <span class="kwa">public</span> <span class="kwb">boolean</span> <span class="kwd">isSafe</span>(<span class="kwb">int</span> digit){
      <span class="kwa">return</span> digit == z.<span class="kwd">extract</span>(<span class="num">4</span>);
   }   
   
   <span class="kwa">public</span> Transformation <span class="kwd">produce</span>(<span class="kwb">int</span> i){
      <span class="kwa">return</span> ( inverse.<span class="kwd">qrst</span>(<span class="num">10</span>,-<span class="num">10</span>*i,<span class="num">0</span>,<span class="num">1</span>) ).<span class="kwd">compose</span>(z);
   }     
      
   <span class="kwa">public</span> Transformation <span class="kwd">consume</span>(Transformation a){
      <span class="kwa">return</span> z.<span class="kwd">compose</span>(a);
   }                   
} 


<span class="kwa">class</span> Transformation {
   BigInteger q, r, s, t;
   <span class="kwb">int</span> k;              
       
   <span class="kwa">public</span> <span class="kwd">Transformation</span>(<span class="kwb">int</span> q, <span class="kwb">int</span> r, <span class="kwb">int</span> s, <span class="kwb">int</span> t){
      <span class="kwa">this</span>.q = BigInteger.<span class="kwd">valueOf</span>(q);
      <span class="kwa">this</span>.r = BigInteger.<span class="kwd">valueOf</span>(r);
      <span class="kwa">this</span>.s = BigInteger.<span class="kwd">valueOf</span>(s);
      <span class="kwa">this</span>.t = BigInteger.<span class="kwd">valueOf</span>(t);                  
      k = <span class="num">0</span>;
   }
   
   <span class="kwa">public</span> <span class="kwd">Transformation</span>(BigInteger q, BigInteger r, BigInteger s, BigInteger t){
      <span class="kwa">this</span>.q = q;
      <span class="kwa">this</span>.r = r;
      <span class="kwa">this</span>.s = s;
      <span class="kwa">this</span>.t = t;                  
      k = <span class="num">0</span>;
   }        
   
   <span class="kwa">public</span> Transformation <span class="kwd">next</span>(){
      k++;
      q = BigInteger.<span class="kwd">valueOf</span>(k);
      r = BigInteger.<span class="kwd">valueOf</span>(<span class="num">4</span> * k + <span class="num">2</span>);
      s = BigInteger.<span class="kwd">valueOf</span>(<span class="num">0</span>);
      t = BigInteger.<span class="kwd">valueOf</span>(<span class="num">2</span> * k + <span class="num">1</span>); 
      <span class="kwa">return this</span>;                 
   }      
   
   <span class="kwa">public</span> <span class="kwb">int</span> <span class="kwd">extract</span>(<span class="kwb">int</span> j){
      BigInteger bigj = BigInteger.<span class="kwd">valueOf</span>(j);
      BigInteger numerator = (q.<span class="kwd">multiply</span>(bigj)).<span class="kwd">add</span>(r);
      BigInteger denominator = (s.<span class="kwd">multiply</span>(bigj)).<span class="kwd">add</span>(t);                  
      <span class="kwa">return</span> ( numerator.<span class="kwd">divide</span>(denominator) ).<span class="kwd">intValue</span>();                    
   }     
   
   <span class="kwa">public</span> Transformation <span class="kwd">qrst</span>(<span class="kwb">int</span> q, <span class="kwb">int</span> r, <span class="kwb">int</span> s, <span class="kwb">int</span> t){
      <span class="kwa">this</span>.q = BigInteger.<span class="kwd">valueOf</span>(q);
      <span class="kwa">this</span>.r = BigInteger.<span class="kwd">valueOf</span>(r);
      <span class="kwa">this</span>.s = BigInteger.<span class="kwd">valueOf</span>(s);
      <span class="kwa">this</span>.t = BigInteger.<span class="kwd">valueOf</span>(t); 
      k = <span class="num">0</span>;  
      <span class="kwa">return this</span>;                             
   }         
  
   <span class="kwa">public</span> Transformation <span class="kwd">compose</span>(Transformation a){      
      <span class="kwa">return new</span> <span class="kwd">Transformation</span>(
         q.<span class="kwd">multiply</span>(a.q)
         ,(q.<span class="kwd">multiply</span>(a.r)).<span class="kwd">add</span>( (r.<span class="kwd">multiply</span>(a.t)) ) 
         ,(s.<span class="kwd">multiply</span>(a.q)).<span class="kwd">add</span>( (t.<span class="kwd">multiply</span>(a.s)) ) 
         ,(s.<span class="kwd">multiply</span>(a.r)).<span class="kwd">add</span>( (t.<span class="kwd">multiply</span>(a.t)) )                   
         );                    
   }          
}


  
