<span class="com">/* The Computer Language Benchmarks Game</span>
<span class="com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="com">   contributed by Isaac Gouy */</span>

<span class="kwa">function</span> <span class="kwd">TreeNode</span>(left,right,item){
   <span class="kwa">this</span>.left = left;
   <span class="kwa">this</span>.right = right;
   <span class="kwa">this</span>.item = item;
}

TreeNode.<span class="kwa">prototype</span>.itemCheck = <span class="kwa">function</span>(){
   <span class="kwa">if</span> (<span class="kwa">this</span>.left==<span class="kwa">null</span>) <span class="kwa">return this</span>.item;
   <span class="kwa">else return this</span>.item + <span class="kwa">this</span>.left.<span class="kwd">itemCheck</span>() - <span class="kwa">this</span>.right.<span class="kwd">itemCheck</span>();
}

<span class="kwa">function</span> <span class="kwd">bottomUpTree</span>(item,depth){
   <span class="kwa">if</span> (depth&gt;<span class="num">0</span>){
      <span class="kwa">return new</span> <span class="kwd">TreeNode</span>(
          <span class="kwd">bottomUpTree</span>(<span class="num">2</span>*item-<span class="num">1</span>, depth-<span class="num">1</span>)
         ,<span class="kwd">bottomUpTree</span>(<span class="num">2</span>*item, depth-<span class="num">1</span>)
         ,item
      );
   }
   <span class="kwa">else</span> {
      <span class="kwa">return new</span> <span class="kwd">TreeNode</span>(<span class="kwa">null</span>,<span class="kwa">null</span>,item);
   }
}


<span class="kwa">var</span> minDepth = <span class="num">4</span>;
<span class="kwa">var</span> n = arguments[<span class="num">0</span>];
<span class="kwa">var</span> maxDepth = Math.<span class="kwd">max</span>(minDepth + <span class="num">2</span>, n);
<span class="kwa">var</span> stretchDepth = maxDepth + <span class="num">1</span>;

<span class="kwa">var</span> check = <span class="kwd">bottomUpTree</span>(<span class="num">0</span>,stretchDepth).<span class="kwd">itemCheck</span>();
<span class="kwd">print</span>(<span class="str">&quot;stretch tree of depth &quot;</span> + stretchDepth + <span class="str">&quot;</span><span class="esc">\t</span> <span class="str">check: &quot;</span> + check);

<span class="kwa">var</span> longLivedTree = <span class="kwd">bottomUpTree</span>(<span class="num">0</span>,maxDepth);
<span class="kwa">for</span> (<span class="kwa">var</span> depth=minDepth; depth&lt;=maxDepth; depth+=<span class="num">2</span>){
   <span class="kwa">var</span> iterations = <span class="num">1</span> &lt;&lt; (maxDepth - depth + minDepth);

   check = <span class="num">0</span>;
   <span class="kwa">for</span> (<span class="kwa">var</span> i=<span class="num">1</span>; i&lt;=iterations; i++){
      check += <span class="kwd">bottomUpTree</span>(i,depth).<span class="kwd">itemCheck</span>();
      check += <span class="kwd">bottomUpTree</span>(-i,depth).<span class="kwd">itemCheck</span>();
   }
   <span class="kwd">print</span>(iterations*<span class="num">2</span> + <span class="str">&quot;</span><span class="esc">\t</span> <span class="str">trees of depth &quot;</span> + depth + <span class="str">&quot;</span><span class="esc">\t</span> <span class="str">check: &quot;</span> + check);
}

<span class="kwd">print</span>(<span class="str">&quot;long lived tree of depth &quot;</span> + maxDepth + <span class="str">&quot;</span><span class="esc">\t</span> <span class="str">check: &quot;</span> 
   + longLivedTree.<span class="kwd">itemCheck</span>());
