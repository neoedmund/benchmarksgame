<span class="slc">;; The Computer Language Benchmarks Game</span>
<span class="slc">;; http://benchmarksgame.alioth.debian.org/</span>
<span class="slc">;;</span>
<span class="slc">;; adapted from the Java and Python versions by Robert Brown 2006-10-06</span>

(<span class="kwa">defconstant</span> +digits-per-line+ <span class="num">10</span>)
(<span class="kwa">defconstant</span> +default-stop-digits+ <span class="str">&quot;1000&quot;</span>)

(<span class="kwa">defun</span> make-digit-generator ()
  (<span class="kwa">declare</span> (<span class="kwa">optimize</span> (<span class="kwa">speed</span> <span class="num">3</span>) (<span class="kwa">debug</span> <span class="num">0</span>) (<span class="kwa">space</span> <span class="num">0</span>) (<span class="kwa">safety</span> <span class="num">0</span>)))
  (<span class="kwa">let</span> ((<span class="kwa">zq</span> <span class="num">1</span>)
        (<span class="kwa">zr</span> <span class="num">0</span>)
        (<span class="kwa">zt</span> <span class="num">1</span>)
        (<span class="kwa">k</span> <span class="num">0</span>)
        (<span class="kwa">4k</span>+<span class="num">2 2</span>)
        (<span class="kwa">2k</span>+<span class="num">1 1</span>))
    (<span class="kwa">declare</span> (<span class="kwa">type</span> integer zq zr zt)
             (<span class="kwa">type</span> fixnum k <span class="num">4</span>k+<span class="num">2 2</span>k+<span class="num">1</span>))
    (<span class="kwa">labels</span> ((<span class="kwa">extract</span> (<span class="kwa">j</span>)
               (<span class="kwa">the</span> (<span class="kwa">integer</span> <span class="num">0 9</span>) (<span class="kwa">floor</span> (+ (* zq j) zr) zt)))
             (<span class="kwa">compose</span> (<span class="kwa">aq</span> ar at bq br bt)
               (<span class="kwa">setq</span> zq (* aq bq)
                     zr (+ (* aq br) (* ar bt))
                     zt (* at bt))))
      #'(<span class="kwa">lambda</span> ()
          (<span class="kwa">let</span> ((<span class="kwa">y</span> (<span class="kwa">extract</span> <span class="num">3</span>)))
            (<span class="kwa">declare</span> (<span class="kwa">type</span> (<span class="kwa">integer</span> <span class="num">0 9</span>) y))
            (<span class="kwa">loop</span> while (<span class="kwa">not</span> (= y (<span class="kwa">extract</span> <span class="num">4</span>)))
                  do (<span class="kwa">compose</span> zq zr zt (<span class="kwa">incf</span> k) (<span class="kwa">incf</span> <span class="num">4</span>k+<span class="num">2 4</span>) (<span class="kwa">incf</span> <span class="num">2</span>k+<span class="num">1 2</span>))
                     (<span class="kwa">setf</span> y (<span class="kwa">extract</span> <span class="num">3</span>)))
            (<span class="kwa">compose</span> <span class="num">10</span> (* -<span class="num">10</span> y) <span class="num">1</span> zq zr zt)
            y)))))

(<span class="kwa">defun</span> spigot (<span class="kwa">digits</span>)
  (<span class="kwa">declare</span> (<span class="kwa">type</span> fixnum digits))
  (<span class="kwa">let</span> ((<span class="kwa">digits-printed</span> <span class="num">0</span>)
        (<span class="kwa">next-digit</span> (<span class="kwa">make-digit-generator</span>)))
    (<span class="kwa">loop</span> while (<span class="kwa">plusp</span> digits)
          do (<span class="kwa">if</span> (&gt;= digits +digits-per-line+)
                 (<span class="kwa">progn</span> (<span class="kwa">loop</span> repeat +digits-per-line+
                              do (<span class="kwa">format</span> t <span class="str">&quot;~d&quot;</span> (<span class="kwa">funcall</span> next-digit)))
                        (<span class="kwa">incf</span> digits-printed +digits-per-line+))
                 (<span class="kwa">progn</span> (<span class="kwa">loop</span> repeat digits
                              do (<span class="kwa">format</span> t <span class="str">&quot;~d&quot;</span> (<span class="kwa">funcall</span> next-digit)))
                        (<span class="kwa">loop</span> repeat (<span class="kwa">-</span> +digits-per-line+ digits)
                              do (<span class="kwa">format</span> t <span class="str">&quot; &quot;</span>))
                        (<span class="kwa">incf</span> digits-printed digits)))
             (<span class="kwa">format</span> t <span class="str">&quot;~a:~d~%&quot;</span> #\Tab digits-printed)
             (<span class="kwa">decf</span> digits +digits-per-line+))))


(<span class="kwa">defun</span> main (&amp;optional
	     (<span class="kwa">n</span> (<span class="kwa">parse-integer</span>
                 (<span class="kwa">or</span> (<span class="kwa">car</span> (<span class="kwa">last</span> #+sbcl sb-ext:*posix-argv*
                                #+cmu extensions:*command-line-strings*
                                #+gcl si::*command-args*))
                     +default-stop-digits+))))
    (<span class="kwa">spigot</span> n))
