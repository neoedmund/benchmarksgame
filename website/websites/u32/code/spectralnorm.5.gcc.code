<span class="com">/* The Computer Language Benchmarks Game</span>
<span class="com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * contributed by Ledrug</span>
<span class="com"> * algorithm is a straight copy from Steve Decker et al's Fortran code</span>
<span class="com"> * with GCC SSE2 intrinsics</span>
<span class="com"> */</span>

<span class="ppc">#include &lt;stdio.h&gt;</span>
<span class="ppc">#include &lt;stdlib.h&gt;</span>
<span class="ppc">#include &lt;math.h&gt;</span>
<span class="ppc">#include &lt;malloc.h&gt;</span>
<span class="ppc">#include &lt;emmintrin.h&gt;</span>

<span class="kwc">inline</span> <span class="kwb">double</span> <span class="kwd">A</span>(<span class="kwb">int</span> i, <span class="kwb">int</span> j) {
   <span class="kwa">return</span> ((i+j) * (i+j+<span class="num">1</span>) / <span class="num">2</span> + i + <span class="num">1</span>);
}

<span class="kwb">double</span> <span class="kwd">dot</span>(<span class="kwb">double</span> * v, <span class="kwb">double</span> * u, <span class="kwb">int</span> n) {
   <span class="kwb">int</span> i;
   <span class="kwb">double</span> sum = <span class="num">0</span>;
   <span class="kwa">for</span> (i = <span class="num">0</span>; i &lt; n; i++)
      sum += v[i] * u[i];
   <span class="kwa">return</span> sum;
}

<span class="kwb">void</span> <span class="kwd">mult_Av</span>(<span class="kwb">double</span> * v, <span class="kwb">double</span> * out, <span class="kwb">const int</span> n) {
   <span class="kwb">int</span> i;

<span class="ppc">#pragma omp parallel for</span>
   <span class="kwa">for</span> (i = <span class="num">0</span>; i &lt; n; i++) {
      __m128d sum = <span class="kwd">_mm_setzero_pd</span>();

      <span class="kwb">int</span> j;
      <span class="kwa">for</span> (j = <span class="num">0</span>; j &lt; n; j += <span class="num">2</span>) {
         __m128d b = <span class="kwd">_mm_set_pd</span>(v[j],v[j+<span class="num">1</span>]);
         __m128d a = <span class="kwd">_mm_set_pd</span>(<span class="kwd">A</span>(i,j), <span class="kwd">A</span>(i,j+<span class="num">1</span>));
         sum = <span class="kwd">_mm_add_pd</span>(sum, <span class="kwd">_mm_div_pd</span>(b, a));
      }
      out[i] = sum[<span class="num">0</span>] + sum[<span class="num">1</span>];
   }
}

<span class="kwb">void</span> <span class="kwd">mult_Atv</span>(<span class="kwb">double</span> * v, <span class="kwb">double</span> * out, <span class="kwb">const int</span> n) {
   <span class="kwb">int</span> i;

<span class="ppc">#pragma omp parallel for</span>
   <span class="kwa">for</span> (i = <span class="num">0</span>; i &lt; n; i++) {
      __m128d sum = <span class="kwd">_mm_setzero_pd</span>();

      <span class="kwb">int</span> j;
      <span class="kwa">for</span> (j = <span class="num">0</span>; j &lt; n; j += <span class="num">2</span>) {
         __m128d b = <span class="kwd">_mm_set_pd</span>(v[j], v[j+<span class="num">1</span>]);
         __m128d a = <span class="kwd">_mm_set_pd</span>(<span class="kwd">A</span>(j,i), <span class="kwd">A</span>(j+<span class="num">1</span>,i));
         sum = <span class="kwd">_mm_add_pd</span>(sum, <span class="kwd">_mm_div_pd</span>(b, a));
      }
      out[i] = sum[<span class="num">0</span>] + sum[<span class="num">1</span>];
   }
}

<span class="kwb">double</span> *tmp;
<span class="kwb">void</span> <span class="kwd">mult_AtAv</span>(<span class="kwb">double</span> *v, <span class="kwb">double</span> *out, <span class="kwb">const int</span> n) {
   <span class="kwd">mult_Av</span>(v, tmp, n);
   <span class="kwd">mult_Atv</span>(tmp, out, n);
}

<span class="kwb">int</span> <span class="kwd">main</span>(<span class="kwb">int</span> argc, <span class="kwb">char</span>**argv) {
   <span class="kwb">int</span> n = <span class="kwd">atoi</span>(argv[<span class="num">1</span>]);
   <span class="kwa">if</span> (n &lt;= <span class="num">0</span>) n = <span class="num">2000</span>;
   <span class="kwa">if</span> (n &amp; <span class="num">1</span>) n++;   <span class="slc">// make it multiple of two</span>

   <span class="kwb">double</span> *u, *v;
   u = <span class="kwd">memalign</span>(<span class="num">16</span>, n * <span class="kwa">sizeof</span>(<span class="kwb">double</span>));
   v = <span class="kwd">memalign</span>(<span class="num">16</span>, n * <span class="kwa">sizeof</span>(<span class="kwb">double</span>));
   tmp = <span class="kwd">memalign</span>(<span class="num">16</span>, n * <span class="kwa">sizeof</span>(<span class="kwb">double</span>));

   <span class="kwb">int</span> i;
   <span class="kwa">for</span> (i = <span class="num">0</span>; i &lt; n; i++) u[i] = <span class="num">1</span>;
   <span class="kwa">for</span> (i = <span class="num">0</span>; i &lt; <span class="num">10</span>; i++) {
      <span class="kwd">mult_AtAv</span>(u, v, n);
      <span class="kwd">mult_AtAv</span>(v, u, n);
   }

   <span class="kwd">printf</span>(<span class="str">&quot;%.9f</span><span class="esc">\n</span><span class="str">&quot;</span>, <span class="kwd">sqrt</span>(<span class="kwd">dot</span>(u,v, n) / <span class="kwd">dot</span>(v,v,n)));

   <span class="kwa">return</span> <span class="num">0</span>;
}
