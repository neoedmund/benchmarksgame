<span class="com">/* The Computer Language Benchmarks Game</span>
<span class="com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Isaac Gouy</span>
<span class="com">   converted to Java by Oleg Mazurov</span>
<span class="com">*/</span>

<span class="kwa">public class</span> fannkuchredux
{
   <span class="kwa">public static</span> <span class="kwb">int</span> <span class="kwd">fannkuch</span>(<span class="kwb">int</span> n) {
      <span class="kwb">int</span>[] perm = <span class="kwa">new</span> <span class="kwb">int</span>[n];
      <span class="kwb">int</span>[] perm1 = <span class="kwa">new</span> <span class="kwb">int</span>[n];
      <span class="kwb">int</span>[] count = <span class="kwa">new</span> <span class="kwb">int</span>[n];
      <span class="kwb">int</span> maxFlipsCount = <span class="num">0</span>;
      <span class="kwb">int</span> permCount = <span class="num">0</span>;
      <span class="kwb">int</span> checksum = <span class="num">0</span>;

      <span class="kwa">for</span>(<span class="kwb">int</span> i=<span class="num">0</span>; i&lt;n; i++) perm1[i] = i;
      <span class="kwb">int</span> r = n;

      <span class="kwa">while</span> (true) {

         <span class="kwa">while</span> (r != <span class="num">1</span>){ count[r-<span class="num">1</span>] = r; r--; }

         <span class="kwa">for</span>(<span class="kwb">int</span> i=<span class="num">0</span>; i&lt;n; i++) perm[i] = perm1[i];
         <span class="kwb">int</span> flipsCount = <span class="num">0</span>;
         <span class="kwb">int</span> k;

         <span class="kwa">while</span> ( !((k=perm[<span class="num">0</span>]) == <span class="num">0</span>) ) {
            <span class="kwb">int</span> k2 = (k+<span class="num">1</span>) &gt;&gt; <span class="num">1</span>;
            <span class="kwa">for</span>(<span class="kwb">int</span> i=<span class="num">0</span>; i&lt;k2; i++) {
               <span class="kwb">int</span> temp = perm[i]; perm[i] = perm[k-i]; perm[k-i] = temp;
            }
            flipsCount++;
         }

         maxFlipsCount = Math.<span class="kwd">max</span>(maxFlipsCount, flipsCount);
         checksum += permCount%<span class="num">2</span> == <span class="num">0</span> ? flipsCount : -flipsCount;

         <span class="slc">// Use incremental change to generate another permutation</span>
         <span class="kwa">while</span> (true) {
            <span class="kwa">if</span> (r == n) {
	       System.out.<span class="kwd">println</span>( checksum );
	       <span class="kwa">return</span> maxFlipsCount;
	    }
            <span class="kwb">int</span> perm0 = perm1[<span class="num">0</span>];
            <span class="kwb">int</span> i = <span class="num">0</span>;
            <span class="kwa">while</span> (i &lt; r) {
               <span class="kwb">int</span> j = i + <span class="num">1</span>;
               perm1[i] = perm1[j];
               i = j;
            }
            perm1[r] = perm0;

            count[r] = count[r] - <span class="num">1</span>;
            <span class="kwa">if</span> (count[r] &gt; <span class="num">0</span>) <span class="kwa">break</span>;
            r++;
         }

         permCount++;
      }
   }

   <span class="kwa">public static</span> <span class="kwb">void</span> <span class="kwd">main</span>(String[] args){
      <span class="kwb">int</span> n = <span class="num">7</span>;
      <span class="kwa">if</span> (args.length &gt; <span class="num">0</span>) n = Integer.<span class="kwd">parseInt</span>(args[<span class="num">0</span>]);
      System.out.<span class="kwd">println</span>(<span class="str">&quot;Pfannkuchen(&quot;</span>+n+<span class="str">&quot;) = &quot;</span>+<span class="kwd">fannkuch</span>(n));
   }
}
