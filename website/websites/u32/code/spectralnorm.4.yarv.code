<span class="slc"># The Computer Language Benchmarks Game</span>
<span class="slc"># http://benchmarksgame.alioth.debian.org</span>
<span class="slc"># Contributed by Sokolov Yura</span>
<span class="slc"># Modified by Chris Houhoulis (April 2013):</span>
<span class="slc">#   - made loops uglier to avoid the unnecessary overhead of blocks</span>
<span class="slc">#   - nicer naming for readability</span>



ARRAY_LENGTH = <span class="kwc">ARGV</span>[<span class="num">0</span>].to_i

u = Array.<span class="kwd">new</span>(ARRAY_LENGTH, <span class="num">1</span><span class="opt">)</span>
v = []

<span class="kwa">def</span> <span class="kwd">eval_A</span>(i,j<span class="opt">)</span>
  <span class="num">1.0</span><span class="kwc">/((i+j)*(i+j+1)/</span><span class="num">2</span>+i+<span class="num">1</span><span class="opt">)</span>
<span class="kwa">end</span>

<span class="kwa">def</span> <span class="kwd">vector_times_array</span>(vector<span class="opt">)</span>
  arr, i = [], <span class="num">0</span>
  <span class="kwa">while</span> i &lt; ARRAY_LENGTH
    sum, j = <span class="num">0</span>, <span class="num">0</span>
    <span class="kwa">while</span> j &lt; ARRAY_LENGTH
      sum += <span class="kwd">eval_A</span>(i,j<span class="opt">)</span> * vector[j]
      j += <span class="num">1</span>
    <span class="kwa">end</span>
    arr &lt;&lt; sum
    i += <span class="num">1</span>
  <span class="kwa">end</span>
  arr
<span class="kwa">end</span>

<span class="kwa">def</span> <span class="kwd">vector_times_array_transposed</span>(vector<span class="opt">)</span>
  arr, i = [], <span class="num">0</span>
  <span class="kwa">while</span> i &lt; ARRAY_LENGTH
    sum, j = <span class="num">0</span>, <span class="num">0</span>
    <span class="kwa">while</span> j &lt; ARRAY_LENGTH
      sum += <span class="kwd">eval_A</span>(j,i<span class="opt">)</span> * vector[j]
      j += <span class="num">1</span>
    <span class="kwa">end</span>
    arr &lt;&lt; sum
    i += <span class="num">1</span>
  <span class="kwa">end</span>
  arr
<span class="kwa">end</span>

<span class="kwa">def</span> <span class="kwd">vector_times_array_times_array_transposed</span>(vector<span class="opt">)</span>
  <span class="kwd">vector_times_array_transposed</span>(<span class="kwd">vector_times_array</span>(vector<span class="opt">))</span>
<span class="kwa">end</span>

<span class="num">10</span>.times <span class="kwa">do</span>
  v = <span class="kwd">vector_times_array_times_array_transposed</span>(u<span class="opt">)</span>
  u = <span class="kwd">vector_times_array_times_array_transposed</span>(v<span class="opt">)</span>
<span class="kwa">end</span>

vBv, vv, i = <span class="num">0</span>, <span class="num">0</span>, <span class="num">0</span>
<span class="kwa">while</span> i &lt; ARRAY_LENGTH
  vBv += u[i]*v[i]
  vv += v[i]*v[i]
  i += <span class="num">1</span>
<span class="kwa">end</span>

print <span class="str">&quot;%0.9f&quot;</span> % (Math.<span class="kwd">sqrt</span>(vBv/vv<span class="opt">))</span>, <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span>
