<span class="com">/* The Computer Language Benchmarks Game</span>
<span class="com">http://benchmarksgame.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">converted to C++ from D by Rafal Rusin</span>
<span class="com">modified by Vaclav Haisman</span>
<span class="com">modified by The Anh to compile with g++ 4.3.2</span>
<span class="com"></span>
<span class="com">compile: g++ -O3 -Wall -march=native -msse2 -o fasta fasta.cpp</span>
<span class="com">*/</span>

<span class="ppc">#include &lt;stdio.h&gt;</span>
<span class="ppc">#include &lt;stdlib.h&gt;</span>
<span class="ppc">#include &lt;algorithm&gt;</span>
<span class="ppc">#include &lt;memory&gt;</span>
<span class="ppc">#include &lt;vector&gt;</span>
<span class="ppc">#include &lt;numeric&gt;</span>
<span class="ppc">#include &lt;functional&gt;</span>

<span class="kwa">using namespace</span> std;

<span class="kwb">static int const</span> IM = <span class="num">139968</span>, IA = <span class="num">3877</span>, IC = <span class="num">29573</span>;
<span class="kwb">static int</span> last = <span class="num">42</span>;

<span class="kwb">static</span> <span class="kwc">inline</span>
<span class="kwb">double</span>
<span class="kwd">genRandom</span>(<span class="kwb">double</span> max)
{
   <span class="kwa">return</span>(max * (last = (last * IA + IC) % IM) / IM);
}

<span class="kwb">struct</span> IUB
{
   <span class="kwb">char</span> c;
   <span class="kwb">double</span> p;
};

<span class="kwb">struct</span> IUB_accum : <span class="kwc">public</span> std::binary_function&lt;IUB <span class="kwb">const</span> &amp;, IUB, IUB&gt;
{
   result_type
      <span class="kwc">operator</span> () (first_argument_type a, second_argument_type b) <span class="kwb">const</span>
   {
      b.p += a.p;
      <span class="kwa">return</span> b;
   }
};

<span class="kwc">template</span> &lt;typename Iter&gt;
<span class="kwb">static</span> <span class="kwc">inline</span>
<span class="kwb">void</span>
<span class="kwd">makeCumulative</span>(Iter <span class="kwb">const</span> start, Iter <span class="kwb">const</span> end)
{
   <span class="kwd">partial_sum</span> (start, end, start, <span class="kwd">IUB_accum</span> ());
}

<span class="kwb">static const char</span> alu[] =
<span class="str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span>
<span class="str">&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span>
<span class="str">&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span>
<span class="str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span>
<span class="str">&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span>
<span class="str">&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span>
<span class="str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span>;

<span class="kwb">static const unsigned</span> length = <span class="num">60</span>, alu_size = <span class="kwa">sizeof</span>(alu) - <span class="num">1</span>;

<span class="kwb">static</span> <span class="kwc">inline</span>
<span class="kwb">void</span>
<span class="kwd">makeRepeatFasta</span>(<span class="kwb">char const</span> * <span class="kwb">const</span> id, <span class="kwb">char const</span> * <span class="kwb">const</span> desc, <span class="kwb">unsigned</span> n)
{
   <span class="kwd">printf</span>(<span class="str">&quot;&gt;%s %s</span><span class="esc">\n</span><span class="str">&quot;</span>, id, desc);
   <span class="kwb">char</span> line[length+<span class="num">1</span>];
   <span class="kwb">unsigned</span> alu_index = <span class="num">0</span>;
   <span class="kwa">while</span>(n &gt; <span class="num">0</span>)
   {
      <span class="kwb">unsigned const</span> m = <span class="kwd">min</span> (n, length);
      line[m] = <span class="str">'</span><span class="esc">\n</span><span class="str">'</span>;
      n -= m;
      <span class="kwb">unsigned</span> line_index = <span class="num">0</span>;
      <span class="kwa">while</span> (m - line_index != <span class="num">0</span>)
      {
         <span class="kwb">unsigned const</span> copy_count = <span class="kwd">min</span> (m - line_index, alu_size - alu_index);
         <span class="kwd">copy</span> (alu + alu_index, alu + alu_index + copy_count, line + line_index);
         alu_index += copy_count;
         line_index += copy_count;
         <span class="kwa">if</span> (alu_index == alu_size)
            alu_index = <span class="num">0</span>;
      }
      <span class="kwd">fwrite_unlocked</span> (line, <span class="num">1</span>, m + <span class="num">1</span>, stdout);
   }
}

<span class="kwc">template</span> &lt;typename Iter&gt;
<span class="kwb">static</span> <span class="kwc">inline</span>
<span class="kwb">void</span>
<span class="kwd">makeRandomFasta</span>(<span class="kwb">char const</span> * <span class="kwb">const</span> id, <span class="kwb">char const</span> * <span class="kwb">const</span> desc, <span class="kwb">unsigned</span> n, Iter start, Iter end)
{
   <span class="kwd">printf</span>(<span class="str">&quot;&gt;%s %s</span><span class="esc">\n</span><span class="str">&quot;</span>, id, desc);
   <span class="kwd">makeCumulative</span>(start, end);
   <span class="kwb">char</span> line[length + <span class="num">1</span>];
   <span class="kwa">while</span>(n &gt; <span class="num">0</span>)
   {
      <span class="kwb">unsigned const</span> m = <span class="kwd">min</span> (n, length);
      n -= m;
      <span class="kwa">for</span>(<span class="kwb">size_t</span> j = <span class="num">0</span>; j &lt; m; ++j)
      {
         <span class="kwb">double const</span> rval = <span class="kwd">genRandom</span>(<span class="num">1</span>);
         Iter it;
         <span class="kwa">for</span> (it = start; it != end; ++it)
         {
            <span class="kwa">if</span> (rval &lt; it-&gt;p)
               <span class="kwa">break</span>;
         }
         line[j] = it-&gt;c;
      }
      line[m] = <span class="str">'</span><span class="esc">\n</span><span class="str">'</span>;
      <span class="kwd">fwrite_unlocked</span> (line, <span class="num">1</span>, m + <span class="num">1</span>, stdout);
   }
}

<span class="kwb">static</span> IUB iub[] =
{
   { <span class="str">'a'</span>, <span class="num">0.27</span> },
   { <span class="str">'c'</span>, <span class="num">0.12</span> },
   { <span class="str">'g'</span>, <span class="num">0.12</span> },
   { <span class="str">'t'</span>, <span class="num">0.27</span> },

   { <span class="str">'B'</span>, <span class="num">0.02</span> },
   { <span class="str">'D'</span>, <span class="num">0.02</span> },
   { <span class="str">'H'</span>, <span class="num">0.02</span> },
   { <span class="str">'K'</span>, <span class="num">0.02</span> },
   { <span class="str">'M'</span>, <span class="num">0.02</span> },
   { <span class="str">'N'</span>, <span class="num">0.02</span> },
   { <span class="str">'R'</span>, <span class="num">0.02</span> },
   { <span class="str">'S'</span>, <span class="num">0.02</span> },
   { <span class="str">'V'</span>, <span class="num">0.02</span> },
   { <span class="str">'W'</span>, <span class="num">0.02</span> },
   { <span class="str">'Y'</span>, <span class="num">0.02</span> }
};

<span class="kwb">static</span> IUB homosapiens[] =
{
   { <span class="str">'a'</span>, <span class="num">0.3029549426680</span> },
   { <span class="str">'c'</span>, <span class="num">0.1979883004921</span> },
   { <span class="str">'g'</span>, <span class="num">0.1975473066391</span> },
   { <span class="str">'t'</span>, <span class="num">0.3015094502008</span> }
};

<span class="kwb">int</span> <span class="kwd">main</span>(<span class="kwb">int</span> argc, <span class="kwb">char</span> *argv[])
{
   <span class="kwb">unsigned const</span> n = argc &gt; <span class="num">1</span> ? <span class="kwd">atoi</span>(argv[<span class="num">1</span>]) : <span class="num">1</span>;

   <span class="kwd">makeRepeatFasta</span>(<span class="str">&quot;ONE&quot;</span>, <span class="str">&quot;Homo sapiens alu&quot;</span>, n*<span class="num">2</span>);
   <span class="kwd">makeRandomFasta</span>(<span class="str">&quot;TWO&quot;</span>, <span class="str">&quot;IUB ambiguity codes&quot;</span>, n*<span class="num">3</span>, iub,
      iub + <span class="kwa">sizeof</span> (iub) / <span class="kwa">sizeof</span> (IUB));
   <span class="kwd">makeRandomFasta</span>(<span class="str">&quot;THREE&quot;</span>, <span class="str">&quot;Homo sapiens frequency&quot;</span>, n*<span class="num">5</span>, homosapiens,
      homosapiens + <span class="kwa">sizeof</span> (homosapiens) / <span class="kwa">sizeof</span> (IUB));
}


