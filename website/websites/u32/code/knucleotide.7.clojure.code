<span class="slc">;;   The Computer Language Benchmarks Game</span>
<span class="slc">;;   http://benchmarksgame.alioth.debian.org/</span>

<span class="slc">;; contributed by Andy Fingerhut</span>
<span class="slc">;; modified by Marko Kocic</span>
<span class="slc">;; modified by Mike Anderson to make better use of primitive operations</span>
<span class="slc">;; modified by Andy Fingerhut for lower CPU use and high parallelism</span>

<span class="slc">;; Ideas for future enhancement: Better parallelism: Do completion of</span>
<span class="slc">;; DNA string reading while beginning hash table creation in parallel.</span>
<span class="slc">;; Lower memory use: Read DNA string as bytes instead of Java chars.</span>

(ns knucleotide
  (:import java.util.concurrent.ExecutorService
           java.util.concurrent.Executors)
  (:gen-class))

(set! *warn-on-reflection* true)


<span class="slc">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span>
<span class="slc">;; This is a copy of part of Amit Rathore's Medusa package, which</span>
<span class="slc">;; allows you to submit a bunch of Clojure expressions to run to a</span>
<span class="slc">;; thread pool with a fixed size.  No more than that many threads will</span>
<span class="slc">;; ever run at once, but Medusa tries to keep that many threads going</span>
<span class="slc">;; at all times, as long as there are things to do that have been</span>
<span class="slc">;; submitted.  This is unlike Clojure's built-in pmap, which often</span>
<span class="slc">;; runs fewer threads in parallel if the run time of the jobs differs</span>
<span class="slc">;; significantly from each other.</span>
<span class="slc">;;</span>
<span class="slc">;; git clone http://github.com/amitrathore/clj-utils.git</span>
<span class="slc">;; git clone http://github.com/amitrathore/medusa.git</span>
<span class="slc">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span>

(<span class="kwa">def</span> THREADPOOL)

(<span class="kwa">def</span> running-futures (ref {}))

(<span class="kwa">defn</span> create-runonce [function]
  (<span class="kwc">let</span> [sentinel (Object.)
        result (atom sentinel)] 
    (<span class="kwa">fn</span> [&amp; args]
      (locking sentinel 
        (<span class="kwc">if</span> (= &#64;result sentinel)
          (reset! result (apply function args)) 
          &#64;result)))))

(<span class="kwa">defmacro</span> defrunonce [fn-name args &amp; body]
  `(<span class="kwa">def</span> ~fn-name (create-runonce (<span class="kwa">fn</span> ~args ~&#64;body))))

(defrunonce init-medusa [pool-size]
  (<span class="kwa">def</span> THREADPOOL (Executors/newFixedThreadPool pool-size)))

(<span class="kwa">defn</span> claim-thread [future-id]
  (<span class="kwc">let</span> [thread-info {:thread (Thread/currentThread) :future-id future-id
                     :started (System/currentTimeMillis)}]
    (dosync (alter running-futures assoc future-id thread-info))))

(<span class="kwa">defn</span> mark-completion [future-id]
  (dosync (alter running-futures dissoc future-id)))

(<span class="kwa">defn</span> medusa-future-thunk [future-id thunk]
  (<span class="kwc">let</span> [^Callable work (<span class="kwa">fn</span> []
                         (claim-thread future-id)
                         (<span class="kwc">let</span> [val (thunk)]
                           (mark-completion future-id)
                           val))]
    (.submit ^ExecutorService THREADPOOL work)))

(<span class="kwa">defn</span> random-uuid []
  (str (java.util.UUID/randomUUID)))

(<span class="kwa">defmacro</span> medusa-future [&amp; body]
  `(medusa-future-thunk (random-uuid) (<span class="kwa">fn</span> [] (do ~&#64;body))))

(<span class="kwa">defn</span> medusa-pmap [num-threads f coll]
  (<span class="kwc">if</span> (== num-threads <span class="num">1</span>)
    (<span class="kwd">map</span> f coll)
    (do
      (init-medusa num-threads)
      (<span class="kwc">let</span> [seq-of-futures (doall (<span class="kwd">map</span> #(medusa-future (f %)) coll))]
        (<span class="kwd">map</span> (<span class="kwa">fn</span> [java-future] (.get ^java.util.concurrent.Future java-future))
             seq-of-futures)))))

(<span class="kwa">defn</span> shutdown-medusa []
  (.shutdown ^ExecutorService THREADPOOL))

<span class="slc">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span>
<span class="slc">;; This is the end of the subset of Medusa code.</span>
<span class="slc">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span>


(<span class="kwa">defmacro</span> key-type [num]
  `(long ~num))

(definterface IFragment
  (set_key_BANG_ [^long k])
  (^long get_key [])
  (inc_BANG_ [])
  (add_BANG_ [^int n])
  (^int get_count []))


(deftype Fragment [^{:unsynchronized-mutable true :tag long} key
                       ^{:unsynchronized-mutable true :tag int} cnt]
  Object
  <span class="slc">;; TBD: Is there a way to return an int hashCode that is a truncated</span>
  <span class="slc">;; version of the long value key without using bit-and?  Simply</span>
  <span class="slc">;; using (int key) throws an exception if key is larger than</span>
  <span class="slc">;; Integer/MAX_VALUE, e.g. (int Long/MAX_VALUE).</span>
  (^int hashCode [this]
    (int (bit-and key Integer/MAX_VALUE)))
  (^boolean equals [this ^Object o]
    (<span class="kwc">let</span> [^Fragment f o]
      (== key (.key f))))

  IFragment
  (set-key! [this ^long k]
    (set! key k))
  (get-key [this] key)
  (inc! [this]
    (set! cnt (unchecked-inc-int cnt)))
  (add! [this ^int n]
    (set! cnt (unchecked-add-int cnt n)))
  (get-count [this] cnt))

 

<span class="slc">;; Return true when the line l is a FASTA description line</span>

(<span class="kwa">defn</span> fasta-description-line [l]
  (= \&gt; (<span class="kwd">first</span> (seq l))))


<span class="slc">;; Return true when the line l is a FASTA description line that begins</span>
<span class="slc">;; with the string desc-str.</span>

(<span class="kwa">defn</span> fasta-description-line-beginning [desc-str l]
  (and (fasta-description-line l)
       (= desc-str (subs l <span class="num">1</span> (min (count l) (inc (count desc-str)))))))


<span class="slc">;; Take a sequence of lines from a FASTA format file, and a string</span>
<span class="slc">;; desc-str.  Look for a FASTA record with a description that begins</span>
<span class="slc">;; with desc-str, and if one is found, return its DNA sequence as a</span>
<span class="slc">;; single (potentially quite long) string.  If input file is big,</span>
<span class="slc">;; you'll save lots of memory if you call this function in a with-open</span>
<span class="slc">;; for the file, and don't hold on to the head of the lines parameter.</span>

(<span class="kwa">defn</span> fasta-dna-str-with-desc-beginning [desc-str lines]
  (when-let [x (<span class="kwd">drop-while</span>
		(<span class="kwa">fn</span> [l] (not (fasta-description-line-beginning desc-str l)))
		lines)]
    (when-let [x (seq x)]
      (<span class="kwc">let</span> [y (<span class="kwd">take-while</span> (<span class="kwa">fn</span> [l] (not (fasta-description-line l)))
                          (<span class="kwd">map</span> (<span class="kwa">fn</span> [#^java.lang.String s] (.toUpperCase s))
                               (<span class="kwd">rest</span> x)))]
        (apply str y)))))


(<span class="kwa">def</span> dna-char-to-code-val-map {\A <span class="num">0</span>, \C <span class="num">1</span>, \T <span class="num">2</span>, \G <span class="num">3</span>})
(<span class="kwa">def</span> code-val-to-dna-char {<span class="num">0</span> \A, <span class="num">1</span> \C, <span class="num">2</span> \T, <span class="num">3</span> \G})

(<span class="kwa">defmacro</span> dna-char-to-code-val [ch]
  `(<span class="kwc">case</span> ~ch
     ~&#64;(flatten (seq dna-char-to-code-val-map))))

<span class="slc">;; In the hash map 'tally' in tally-dna-subs-with-len, it is more</span>
<span class="slc">;; straightforward to use a Clojure string (same as a Java string) as</span>
<span class="slc">;; the key, but such a key is significantly bigger than it needs to</span>
<span class="slc">;; be, increasing memory and time required to hash the value.  By</span>
<span class="slc">;; converting a string of A, C, T, and G characters down to an integer</span>
<span class="slc">;; that contains only 2 bits for each character, we make a value that</span>
<span class="slc">;; is significantly smaller and faster to use as a key in the map.</span>

<span class="slc">;;    most                 least</span>
<span class="slc">;; significant          significant</span>
<span class="slc">;; bits of int          bits of int</span>
<span class="slc">;;  |                         |</span>
<span class="slc">;;  V                         V</span>
<span class="slc">;; code code code ....  code code</span>
<span class="slc">;;  ^                         ^</span>
<span class="slc">;;  |                         |</span>
<span class="slc">;; code for               code for</span>
<span class="slc">;; *latest*               *earliest*</span>
<span class="slc">;; char in                char in</span>
<span class="slc">;; sequence               sequence</span>

<span class="slc">;; Note: Given Clojure 1.2's implementation of bit-shift-left/right</span>
<span class="slc">;; operations, when the value being shifted is larger than a 32-bit</span>
<span class="slc">;; int, they are faster when the shift amount is a compile time</span>
<span class="slc">;; constant.</span>

(<span class="kwa">defn</span> ^:static dna-str-to-key 
  (^long [^String s] (dna-str-to-key s <span class="num">0</span> (count s)))
  (^long [^String s ^long start ^long length]
    <span class="slc">;; Accessing a local let binding is much faster than accessing a var</span>
    (<span class="kwb">loop</span> [key (long <span class="num">0</span>)
           offset (int (+ start length -<span class="num">1</span>))]
      (<span class="kwc">if</span> (&lt; offset start)
        key
        (<span class="kwc">let</span> [c (.charAt s offset)
              code (int (dna-char-to-code-val c))
              new-key (+ (bit-shift-left key <span class="num">2</span>) code)]
          (<span class="kwb">recur</span> new-key (dec offset)))))))


(<span class="kwa">defn</span> key-to-dna-str [^Fragment f len]
  (<span class="kwc">let</span> [k (.get-key f)]
    (apply str (<span class="kwd">map</span> code-val-to-dna-char
                    (<span class="kwd">map</span> (<span class="kwa">fn</span> [pos] (bit-and <span class="num">3</span> (bit-shift-right k pos)))
                         (<span class="kwd">range</span> <span class="num">0</span> (* <span class="num">2</span> len) <span class="num">2</span>))))))

<span class="slc">;; required function : &quot;to update a hashtable of k-nucleotide keys and</span>
<span class="slc">;; count values, for a particular reading-frame&quot;</span>

(<span class="kwa">defn</span> tally-dna-subs-with-len [len dna-str start-offset end-offset]
  (<span class="kwc">let</span> [len (int len)
        start-offset (int start-offset)
        dna-str ^String dna-str
        mask-width (* <span class="num">2</span> len)
        mask (key-type (dec (bit-shift-left <span class="num">1</span> mask-width)))]
    (<span class="kwb">loop</span> [offset (int end-offset)
           key (key-type (dna-str-to-key dna-str offset len))
           tally (<span class="kwc">let</span> [h (java.util.HashMap.)
                       one (Fragment. (long key) (int <span class="num">1</span>))]
                   (.put h one one)
                   h)
           fragment (Fragment. (long <span class="num">0</span>) (int <span class="num">1</span>))]
      (<span class="kwc">if</span> (&lt;= offset start-offset)
        tally
        (<span class="kwc">let</span> [new-offset (unchecked-dec offset)
              new-first-char-code (dna-char-to-code-val
                                   (.charAt dna-str new-offset))
              new-key (key-type (bit-and mask (unchecked-add (bit-shift-left key <span class="num">2</span>)
                                                             new-first-char-code)))]
          (.set-key! fragment new-key)
          (if-let [^Fragment cur-fragment (get tally fragment)]
            (do
              (.inc! cur-fragment)
              (<span class="kwb">recur</span> new-offset new-key tally fragment))
            (do
              (<span class="kwc">let</span> [new-fragment (Fragment. (long <span class="num">0</span>) (int <span class="num">1</span>))]
                (.put tally fragment fragment)
                (<span class="kwb">recur</span> new-offset new-key tally new-fragment)))))))))


(<span class="kwa">defn</span> ^:static getcnt ^long [^Fragment tc]
  (.get-count tc))

(<span class="kwa">defn</span> ^:static tally-total [tally]
  (<span class="kwb">loop</span> [acc (long <span class="num">0</span>)
         s (vals tally)]
    (if-let [v (<span class="kwd">first</span> s)]
      (<span class="kwb">recur</span> (+ acc (getcnt v)) (next s))
      acc)))

(<span class="kwa">defn</span> all-tally-to-str [tally fn-key-to-str]
  (with-out-str
    (<span class="kwc">let</span> [total (tally-total tally)
          cmp-keys (<span class="kwa">fn</span> [k1 k2]
                     <span class="slc">;; Return negative integer if k1 should come earlier</span>
                     <span class="slc">;; in the sort order than k2, 0 if they are equal,</span>
                     <span class="slc">;; otherwise a positive integer.</span>
                     (<span class="kwc">let</span> [cnt1 (int (getcnt (get tally k1)))
                           cnt2 (int (getcnt (get tally k2)))]
                       (<span class="kwc">if</span> (not= cnt1 cnt2)
                         (- cnt2 cnt1)
                         (<span class="kwc">let</span> [^String s1 (fn-key-to-str k1)
                               ^String s2 (fn-key-to-str k2)]
                           (.compareTo s1 s2)))))]
      (<span class="kwb">doseq</span> [k (<span class="kwd">sort</span> cmp-keys (keys tally))]
        (printf <span class="str">&quot;%s %.3f</span><span class="esc">\n</span><span class="str">&quot;</span> (fn-key-to-str k)
                (double (* <span class="num">100</span> (/ (getcnt (get tally k)) total))))))))


(<span class="kwa">defn</span> one-tally-to-str [dna-str tallies]
  (<span class="kwc">let</span> [zerotc (Fragment. <span class="num">0 0</span>)
        ^Fragment f (Fragment. (long (dna-str-to-key dna-str)) <span class="num">0</span>)]
    (format <span class="str">&quot;%d</span><span class="esc">\t</span><span class="str">%s&quot;</span> (reduce + (<span class="kwd">map</span> #(getcnt (get % f zerotc))
                                    tallies))
            dna-str)))


(<span class="kwa">defn</span> piece-sizes [total-units n-pieces]
  (<span class="kwc">let</span> [min-units-per-piece (quot total-units n-pieces)
        n-pieces-with-1-extra (mod total-units n-pieces)]
    (<span class="kwd">take</span> n-pieces (<span class="kwd">concat</span> (<span class="kwd">repeat</span> n-pieces-with-1-extra
                                   (inc min-units-per-piece))
                           (<span class="kwd">repeat</span> min-units-per-piece)))))


(<span class="kwa">defn</span> break-work-into-pieces [{:keys [kind n-pieces] :as m} dna-str]
  (<span class="kwc">let</span> [substr-len (<span class="kwc">if</span> (= kind :tally-all) (:substr-len m) (count (:substr m)))
        n-substrs (inc (- (count dna-str) substr-len))
        sizes (piece-sizes n-substrs n-pieces)
        start-end-offsets (<span class="kwd">map</span> (<span class="kwa">fn</span> [[a b]] [a (dec b)])
                               (partition <span class="num">2 1</span> (<span class="kwd">cons</span> <span class="num">0</span> (reductions + sizes))))]
    (assert (= n-substrs (reduce + sizes)))
    (<span class="kwb">for</span> [[start end+<span class="num">1</span>] (partition <span class="num">2 1</span> (<span class="kwd">cons</span> <span class="num">0</span> (reductions + sizes)))]
      (assoc m :substr-len substr-len
             :dna-str dna-str
             :start-offset start
             :end-offset (dec end+<span class="num">1</span>)))))


(<span class="kwa">defn</span> do-one-piece [{:keys [substr-len dna-str start-offset end-offset] :as m}]
  (assoc m :tally-table (tally-dna-subs-with-len substr-len dna-str
                          start-offset end-offset)))

<span class="slc">;; Like merge-with, except it only works for the HashMaps with</span>
<span class="slc">;; Fragments as key/value pairs.  It mutates the first HashMap given</span>
<span class="slc">;; in place, and potentially some of the Fragments in all of the</span>
<span class="slc">;; hashmaps.</span>
(<span class="kwa">defn</span> add-tally-hashmaps! [hmaps]
  (<span class="kwc">let</span> [merge-entry (<span class="kwa">fn</span> [^java.util.HashMap hm e]
                      (<span class="kwc">let</span> [k (key e) v (val e)]
                        (<span class="kwc">if</span> (contains? hm k)
                          (<span class="kwc">let</span> [^Fragment cur-fragment (get hm k)
                                n (int (getcnt v))]
                            (.add! cur-fragment n))
                          (.put hm k v)))
                      hm)
        merge2 (<span class="kwa">fn</span> [hm1 hm2]
                 (reduce merge-entry hm1 (seq hm2)))]
    (reduce merge2 hmaps)))


<span class="slc">;; Combine pieces with same :substr-len into one final result</span>
<span class="slc">;;</span>
<span class="slc">;; For :tally-all, this should combine multiple tally tables into one</span>
<span class="slc">;; combined table, then print out the contents of the table.</span>
<span class="slc">;;</span>
<span class="slc">;; For :tally-one, this should extract out the counts for the one</span>
<span class="slc">;; desired string from each table, sum them, and print that result.</span>
<span class="slc">;; TBD: Is it within the rules to do that, or must it produce as an</span>
<span class="slc">;; intermediate result one hash table that is the sum of all of the</span>
<span class="slc">;; partial hash tables?</span>
(<span class="kwa">defn</span> combine-pieces [pieces]
  (<span class="kwc">let</span> [p (<span class="kwd">first</span> pieces)
        kind (:kind p)
        substr-len (:substr-len p)]
    (<span class="kwc">case</span> kind
      :tally-all {:substr-len substr-len
                  :output (all-tally-to-str
                           (add-tally-hashmaps! (<span class="kwd">map</span> :tally-table pieces))
                           (<span class="kwa">fn</span> [k] (key-to-dna-str k substr-len)))}
      :tally-one {:substr-len substr-len
                  :output (one-tally-to-str (:substr p)
                                            (<span class="kwd">map</span> :tally-table pieces))})))


(<span class="kwa">defn</span> run [br]  
  (<span class="kwc">let</span> [n-threads (.. Runtime getRuntime availableProcessors)
        dna-str (fasta-dna-str-with-desc-beginning <span class="str">&quot;THREE&quot;</span> (line-seq br))
        work-pieces-todo
        (<span class="kwd">mapcat</span> #(break-work-into-pieces % dna-str)
                [{:kind :tally-all :n-pieces <span class="num">1</span> :substr-len <span class="num">1</span>}
                 {:kind :tally-all :n-pieces <span class="num">1</span> :substr-len <span class="num">2</span>}
                 {:kind :tally-one :n-pieces <span class="num">2</span> :substr <span class="str">&quot;GGT&quot;</span>}
                 {:kind :tally-one :n-pieces <span class="num">2</span> :substr <span class="str">&quot;GGTA&quot;</span>}
                 {:kind :tally-one :n-pieces <span class="num">3</span> :substr <span class="str">&quot;GGTATT&quot;</span>}
                 {:kind :tally-one :n-pieces <span class="num">3</span> :substr <span class="str">&quot;GGTATTTTAATT&quot;</span>}
                 {:kind :tally-one :n-pieces <span class="num">4</span> :substr <span class="str">&quot;GGTATTTTAATTTATAGT&quot;</span>}])
        work-pieces-done (medusa-pmap n-threads do-one-piece work-pieces-todo)
        grouped-results (partition-by :substr-len work-pieces-done)
        combined-results (pmap combine-pieces grouped-results)
        results (<span class="kwd">sort-by</span> :substr-len combined-results)]
    (<span class="kwb">doseq</span> [r results]
      (println (:output r))
      (flush))))

(<span class="kwa">defn</span> -main [&amp; args]
  (with-open [br (java.io.BufferedReader. *in*)]
    (run br))  
  (shutdown-agents)
  (shutdown-medusa))
