<span class="com">/* The Computer Language Benchmarks Game</span>
<span class="com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Mark C. Lewis</span>
<span class="com">   modified slightly by Chad Whipkey</span>
<span class="com">   converted from java to c++,added sse support, by Branimir Maksimovic </span>
<span class="com">*/</span>

<span class="ppc">#include &lt;cstdio&gt;</span>
<span class="ppc">#include &lt;cmath&gt;</span>
<span class="ppc">#include &lt;cstdlib&gt;</span>
<span class="ppc">#include &lt;vector&gt;</span>
<span class="ppc">#include &lt;immintrin.h&gt;</span>

<span class="kwb">static const double</span> PI = <span class="num">3.141592653589793</span>;
<span class="kwb">static const double</span> SOLAR_MASS = <span class="num">4</span> * PI * PI;
<span class="kwb">static const double</span> DAYS_PER_YEAR = <span class="num">365.24</span>;


<span class="kwc">class</span> Body {

   <span class="kwc">public</span>: <span class="kwb">double</span> x, y, z, filler, vx, vy, vz, mass;

   <span class="kwc">public</span>: <span class="kwd">Body</span>(){}

   <span class="kwb">static</span> Body&amp; <span class="kwd">jupiter</span>(){
      <span class="kwb">static</span> Body p;
      p.x = <span class="num">4.84143144246472090e+00</span>;
      p.y = -<span class="num">1.16032004402742839e+00</span>;
      p.z = -<span class="num">1.03622044471123109e-01</span>;
      p.vx = <span class="num">1.66007664274403694e-03</span> * DAYS_PER_YEAR;
      p.vy = <span class="num">7.69901118419740425e-03</span> * DAYS_PER_YEAR;
      p.vz = -<span class="num">6.90460016972063023e-05</span> * DAYS_PER_YEAR;
      p.mass = <span class="num">9.54791938424326609e-04</span> * SOLAR_MASS;
      <span class="kwa">return</span> p;
   }

   <span class="kwb">static</span> Body&amp; <span class="kwd">saturn</span>(){
      <span class="kwb">static</span> Body p;
      p.x = <span class="num">8.34336671824457987e+00</span>;
      p.y = <span class="num">4.12479856412430479e+00</span>;
      p.z = -<span class="num">4.03523417114321381e-01</span>;
      p.vx = -<span class="num">2.76742510726862411e-03</span> * DAYS_PER_YEAR;
      p.vy = <span class="num">4.99852801234917238e-03</span> * DAYS_PER_YEAR;
      p.vz = <span class="num">2.30417297573763929e-05</span> * DAYS_PER_YEAR;
      p.mass = <span class="num">2.85885980666130812e-04</span> * SOLAR_MASS;
      <span class="kwa">return</span> p;
   }

   <span class="kwb">static</span> Body&amp; <span class="kwd">uranus</span>(){
      <span class="kwb">static</span> Body p;
      p.x = <span class="num">1.28943695621391310e+01</span>;
      p.y = -<span class="num">1.51111514016986312e+01</span>;
      p.z = -<span class="num">2.23307578892655734e-01</span>;
      p.vx = <span class="num">2.96460137564761618e-03</span> * DAYS_PER_YEAR;
      p.vy = <span class="num">2.37847173959480950e-03</span> * DAYS_PER_YEAR;
      p.vz = -<span class="num">2.96589568540237556e-05</span> * DAYS_PER_YEAR;
      p.mass = <span class="num">4.36624404335156298e-05</span> * SOLAR_MASS;
      <span class="kwa">return</span> p;
   }

   <span class="kwb">static</span> Body&amp; <span class="kwd">neptune</span>(){
      <span class="kwb">static</span> Body p;
      p.x = <span class="num">1.53796971148509165e+01</span>;
      p.y = -<span class="num">2.59193146099879641e+01</span>;
      p.z = <span class="num">1.79258772950371181e-01</span>;
      p.vx = <span class="num">2.68067772490389322e-03</span> * DAYS_PER_YEAR;
      p.vy = <span class="num">1.62824170038242295e-03</span> * DAYS_PER_YEAR;
      p.vz = -<span class="num">9.51592254519715870e-05</span> * DAYS_PER_YEAR;
      p.mass = <span class="num">5.15138902046611451e-05</span> * SOLAR_MASS;
      <span class="kwa">return</span> p;
   }

   <span class="kwb">static</span> Body&amp; <span class="kwd">sun</span>(){
      <span class="kwb">static</span> Body p;
      p.mass = SOLAR_MASS;
      <span class="kwa">return</span> p;
   }

   Body&amp; <span class="kwd">offsetMomentum</span>(<span class="kwb">double</span> px, <span class="kwb">double</span> py, <span class="kwb">double</span> pz){
      vx = -px / SOLAR_MASS;
      vy = -py / SOLAR_MASS;
      vz = -pz / SOLAR_MASS;
      <span class="kwa">return</span> *<span class="kwa">this</span>;
   }
};

<span class="kwc">template</span> &lt;typename T, std::<span class="kwb">size_t</span> N = <span class="num">16</span>&gt;
<span class="kwc">class</span> AlignmentAllocator {
<span class="kwc">public</span>:
  <span class="kwc">typedef</span> T value_type;
  <span class="kwc">typedef</span> std::<span class="kwb">size_t</span> size_type;
  <span class="kwc">typedef</span> std::<span class="kwb">ptrdiff_t</span> difference_type;

  <span class="kwc">typedef</span> T * pointer;
  <span class="kwc">typedef</span> <span class="kwb">const</span> T * const_pointer;

  <span class="kwc">typedef</span> T &amp; reference;
  <span class="kwc">typedef</span> <span class="kwb">const</span> T &amp; const_reference;

  <span class="kwc">public</span>:
  <span class="kwc">inline</span> <span class="kwd">AlignmentAllocator</span> () <span class="kwa">throw</span> () { }

  <span class="kwc">template</span> &lt;typename T2&gt;
  <span class="kwc">inline</span> <span class="kwd">AlignmentAllocator</span> (<span class="kwb">const</span> AlignmentAllocator&lt;T2, N&gt; &amp;) <span class="kwa">throw</span> () { }

  <span class="kwc">inline</span> ~<span class="kwd">AlignmentAllocator</span> () <span class="kwa">throw</span> () { }

  <span class="kwc">inline</span> pointer <span class="kwd">adress</span> (reference r) {
    <span class="kwa">return</span> &amp;r;
  }

  <span class="kwc">inline</span> const_pointer <span class="kwd">adress</span> (const_reference r) <span class="kwb">const</span> {
    <span class="kwa">return</span> &amp;r;
  }

  <span class="kwc">inline</span> pointer <span class="kwd">allocate</span> (size_type n) {
     <span class="kwa">return</span> (pointer)<span class="kwd">_mm_malloc</span>(n*<span class="kwa">sizeof</span>(value_type), N);
  }

  <span class="kwc">inline</span> <span class="kwb">void</span> <span class="kwd">deallocate</span> (pointer p, size_type) {
    <span class="kwd">_mm_free</span> (p);
  }

  <span class="kwc">inline</span> <span class="kwb">void</span> <span class="kwd">construct</span> (pointer p, <span class="kwb">const</span> value_type &amp; wert) {
     <span class="kwa">new</span> (p) <span class="kwd">value_type</span> (wert);
  }

  <span class="kwc">inline</span> <span class="kwb">void</span> <span class="kwd">destroy</span> (pointer p) {
    p-&gt;~<span class="kwd">value_type</span> ();
  }

  <span class="kwc">inline</span> size_type <span class="kwd">max_size</span> () <span class="kwb">const</span> <span class="kwa">throw</span> () {
    <span class="kwa">return</span> <span class="kwd">size_type</span> (-<span class="num">1</span>) / <span class="kwa">sizeof</span> (value_type);
  }

  <span class="kwc">template</span> &lt;typename T2&gt;
  <span class="kwb">struct</span> rebind {
    <span class="kwc">typedef</span> AlignmentAllocator&lt;T2, N&gt; other;
  };

  <span class="kwb">bool</span> <span class="kwc">operator</span>!=(<span class="kwb">const</span> AlignmentAllocator&lt;T,N&gt;&amp; other) <span class="kwb">const</span>  {
    <span class="kwa">return</span> !(*<span class="kwa">this</span> == other);
  }

  <span class="slc">// Returns true if and only if storage allocated from *this</span>
  <span class="slc">// can be deallocated from other, and vice versa.</span>
  <span class="slc">// Always returns true for stateless allocators.</span>
  <span class="kwb">bool</span> <span class="kwc">operator</span>==(<span class="kwb">const</span> AlignmentAllocator&lt;T,N&gt;&amp; other) <span class="kwb">const</span> {
    <span class="kwa">return true</span>;
  }
};

<span class="kwc">class</span> NBodySystem {
	<span class="kwc">private</span>: std::vector&lt;Body,AlignmentAllocator&lt;Body,<span class="num">4096</span>&gt; &gt; bodies;

	<span class="kwc">public</span>: <span class="kwd">NBodySystem</span>()
    :  bodies {
            Body::<span class="kwd">sun</span>(),
            Body::<span class="kwd">jupiter</span>(),
            Body::<span class="kwd">saturn</span>(),
            Body::<span class="kwd">uranus</span>(),
            Body::<span class="kwd">neptune</span>()
         }
	{
      <span class="kwb">double</span> px = <span class="num">0.0</span>;
      <span class="kwb">double</span> py = <span class="num">0.0</span>;
      <span class="kwb">double</span> pz = <span class="num">0.0</span>;
      <span class="kwa">for</span>(<span class="kwb">unsigned</span> i=<span class="num">0</span>; i &lt; bodies.<span class="kwd">size</span>(); ++i) {
         px += bodies[i].vx * bodies[i].mass;
         py += bodies[i].vy * bodies[i].mass;
         pz += bodies[i].vz * bodies[i].mass;
      }
      bodies[<span class="num">0</span>].<span class="kwd">offsetMomentum</span>(px,py,pz);
   }

   <span class="kwc">public</span>: <span class="kwb">void</span> <span class="kwd">advance</span>(<span class="kwb">double</span> dt) {
	<span class="kwb">unsigned</span> N = (bodies.<span class="kwd">size</span>()-<span class="num">1</span>)*bodies.<span class="kwd">size</span>()/<span class="num">2</span>;
	<span class="kwb">struct</span> R{
		<span class="kwb">double</span> dx,dy,dz,filler;
	};
	__m128d ddt = <span class="kwd">_mm_set1_pd</span>(dt);

	<span class="kwb">static</span> <span class="kwd">__attribute__</span>((<span class="kwd">aligned</span>(<span class="num">16</span>))) R r[<span class="num">1000</span>];
	<span class="kwb">static</span> <span class="kwd">__attribute__</span>((<span class="kwd">aligned</span>(<span class="num">16</span>))) <span class="kwb">double</span> mag[<span class="num">1000</span>];

      <span class="kwa">for</span>(<span class="kwb">unsigned</span> i=<span class="num">0</span>,k=<span class="num">0</span>; i &lt; bodies.<span class="kwd">size</span>()-<span class="num">1</span>; ++i) {
            Body&amp; iBody = bodies[i];
			__m128d idx = <span class="kwd">_mm_load_pd</span>(&amp;iBody.x);
         <span class="kwa">for</span>(<span class="kwb">unsigned</span> j=i+<span class="num">1</span>; j &lt; bodies.<span class="kwd">size</span>(); ++j,++k) {
			__m128d jdx = <span class="kwd">_mm_load_pd</span>(&amp;bodies[j].x);
			<span class="kwd">_mm_store_pd</span>(&amp;r[k].dx,idx-jdx);
			r[k].dz = iBody.z - bodies[j].z;
         }
      }

      <span class="kwa">for</span>(<span class="kwb">unsigned</span> i=<span class="num">0</span>; i &lt; N; i+=<span class="num">2</span>) {
		  __m128d dx,dy,dz;
		  dx = <span class="kwd">_mm_loadl_pd</span>(dx,&amp;r[i].dx);
		  dy = <span class="kwd">_mm_loadl_pd</span>(dy,&amp;r[i].dy);
		  dz = <span class="kwd">_mm_loadl_pd</span>(dz,&amp;r[i].dz);
		  
		  dx = <span class="kwd">_mm_loadh_pd</span>(dx,&amp;r[i+<span class="num">1</span>].dx);
		  dy = <span class="kwd">_mm_loadh_pd</span>(dy,&amp;r[i+<span class="num">1</span>].dy);
		  dz = <span class="kwd">_mm_loadh_pd</span>(dz,&amp;r[i+<span class="num">1</span>].dz);
		  
		  
		  __m128d dSquared = dx*dx + dy*dy + dz*dz;

		  __m128d distance = 
		  <span class="kwd">_mm_cvtps_pd</span>(<span class="kwd">_mm_rsqrt_ps</span>(<span class="kwd">_mm_cvtpd_ps</span>(dSquared)));
		  <span class="kwa">for</span>(<span class="kwb">unsigned</span> j=<span class="num">0</span>;j&lt;<span class="num">2</span>;++j)
		  {
			  distance = distance * <span class="kwd">_mm_set1_pd</span>(<span class="num">1.5</span>) - 
			  ((<span class="kwd">_mm_set1_pd</span>(<span class="num">0.5</span>) * dSquared) * distance) *
			  (distance * distance);
		  }

		  __m128d dmag = ddt/(dSquared) * distance;
		  <span class="kwd">_mm_store_pd</span>(&amp;mag[i],dmag);
      }

      <span class="kwa">for</span>(<span class="kwb">unsigned</span> i=<span class="num">0</span>,k=<span class="num">0</span>; i &lt; bodies.<span class="kwd">size</span>()-<span class="num">1</span>; ++i) {
            Body&amp; iBody = bodies[i];

         <span class="kwa">for</span>(<span class="kwb">unsigned</span> j=i+<span class="num">1</span>; j &lt; bodies.<span class="kwd">size</span>(); ++j,++k) {
				__m128d jmass = <span class="kwd">_mm_set1_pd</span>(bodies[j].mass);
				__m128d kmag = <span class="kwd">_mm_set1_pd</span>(mag[k]);

				__m128d jkmm = jmass * kmag;
				
				__m128d kdx = <span class="kwd">_mm_load_pd</span>(&amp;r[k].dx);

				__m128d ivx = <span class="kwd">_mm_load_pd</span>(&amp;iBody.vx);
				
				<span class="kwd">_mm_store_pd</span>(&amp;iBody.vx, ivx - kdx*jkmm);
				
				iBody.vz -= r[k].dz * bodies[j].mass * mag[k];
				
				__m128d imass = <span class="kwd">_mm_set1_pd</span>(iBody.mass);
				
				jkmm = imass * kmag;
				
				__m128d jvx = <span class="kwd">_mm_load_pd</span>(&amp;bodies[j].vx);
				
				<span class="kwd">_mm_store_pd</span>(&amp;bodies[j].vx, jvx + kdx * jkmm);
				
				bodies[j].vz += r[k].dz * iBody.mass * mag[k];
         }
      }

        <span class="kwa">for</span> (<span class="kwb">unsigned</span> i = <span class="num">0</span>; i &lt; bodies.<span class="kwd">size</span>(); ++i) {
		 __m128d ix = <span class="kwd">_mm_load_pd</span>(&amp;bodies[i].x);
		 __m128d ivx = <span class="kwd">_mm_load_pd</span>(&amp;bodies[i].vx);
		 <span class="kwd">_mm_store_pd</span>(&amp;bodies[i].x, ix + ddt * ivx);
         bodies[i].z += dt * bodies[i].vz;
      }
   }

   <span class="kwc">public</span>: <span class="kwb">double</span> <span class="kwd">energy</span>(){
      <span class="kwb">double</span> dx, dy, dz, distance;
      <span class="kwb">double</span> e = <span class="num">0.0</span>;

      <span class="kwa">for</span> (<span class="kwb">unsigned</span> i=<span class="num">0</span>; i &lt; bodies.<span class="kwd">size</span>(); ++i) {
            Body&amp; iBody = bodies[i];
            e += <span class="num">0.5</span> * iBody.mass *
                 ( iBody.vx * iBody.vx
                   + iBody.vy * iBody.vy
                   + iBody.vz * iBody.vz );

         <span class="kwa">for</span> (<span class="kwb">unsigned</span> j=i+<span class="num">1</span>; j &lt; bodies.<span class="kwd">size</span>(); ++j) {
                Body&amp; jBody = bodies[j];
                dx = iBody.x - jBody.x;
            dy = iBody.y - jBody.y;
            dz = iBody.z - jBody.z;

            distance = <span class="kwd">sqrt</span>(dx*dx + dy*dy + dz*dz);
            e -= (iBody.mass * jBody.mass) / distance;
         }
      }
      <span class="kwa">return</span> e;
   }
};


<span class="kwb">int</span> <span class="kwd">main</span>(<span class="kwb">int</span> argc, <span class="kwb">char</span>** argv) {
        <span class="kwb">int</span> n = <span class="kwd">atoi</span>(argv[<span class="num">1</span>]);

        NBodySystem bodies;
        <span class="kwd">printf</span>(<span class="str">&quot;%.9f</span><span class="esc">\n</span><span class="str">&quot;</span>, bodies.<span class="kwd">energy</span>());
        <span class="kwa">for</span> (<span class="kwb">int</span> i=<span class="num">0</span>; i&lt;n; ++i)
           bodies.<span class="kwd">advance</span>(<span class="num">0.01</span>);
        <span class="kwd">printf</span>(<span class="str">&quot;%.9f</span><span class="esc">\n</span><span class="str">&quot;</span>, bodies.<span class="kwd">energy</span>());
    }

