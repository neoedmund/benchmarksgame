<span class="com">/* The Computer Language Benchmarks Game</span>
<span class="com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   converted to C++ from D by Rafal Rusin</span>
<span class="com">   modified by Vaclav Haisman</span>
<span class="com">   modified by The Anh to compile with g++ 4.3.2</span>
<span class="com">   modified by Branimir Maksimovic</span>
<span class="com">   modified by Kim Walisch</span>
<span class="com">*/</span>

<span class="ppc">#include &lt;cstdio&gt;</span>
<span class="ppc">#include &lt;cstdlib&gt;</span>
<span class="ppc">#include &lt;cstring&gt;</span>
<span class="ppc">#include &lt;algorithm&gt;</span>
<span class="ppc">#include &lt;vector&gt;</span>

<span class="kwa">namespace</span> {

<span class="kwb">const char</span> alu[] =
  <span class="str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span>
  <span class="str">&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span>
  <span class="str">&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span>
  <span class="str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span>
  <span class="str">&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span>
  <span class="str">&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span>
  <span class="str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span>;

<span class="kwb">const int</span> LENGTH = <span class="num">60</span>;

<span class="kwb">struct</span> IUB
{
  <span class="kwb">float</span> p;
  <span class="kwb">char</span> c;
};

std::vector&lt;IUB&gt; iub =
{
  { <span class="num">0.27</span>, <span class="str">'a'</span> },
  { <span class="num">0.12</span>, <span class="str">'c'</span> },
  { <span class="num">0.12</span>, <span class="str">'g'</span> },
  { <span class="num">0.27</span>, <span class="str">'t'</span> },
  { <span class="num">0.02</span>, <span class="str">'B'</span> },
  { <span class="num">0.02</span>, <span class="str">'D'</span> },
  { <span class="num">0.02</span>, <span class="str">'H'</span> },
  { <span class="num">0.02</span>, <span class="str">'K'</span> },
  { <span class="num">0.02</span>, <span class="str">'M'</span> },
  { <span class="num">0.02</span>, <span class="str">'N'</span> },
  { <span class="num">0.02</span>, <span class="str">'R'</span> },
  { <span class="num">0.02</span>, <span class="str">'S'</span> },
  { <span class="num">0.02</span>, <span class="str">'V'</span> },
  { <span class="num">0.02</span>, <span class="str">'W'</span> },
  { <span class="num">0.02</span>, <span class="str">'Y'</span> }
};

std::vector&lt;IUB&gt; homosapiens =
{
  { <span class="num">0.3029549426680</span>, <span class="str">'a'</span> },
  { <span class="num">0.1979883004921</span>, <span class="str">'c'</span> },
  { <span class="num">0.1975473066391</span>, <span class="str">'g'</span> },
  { <span class="num">0.3015094502008</span>, <span class="str">'t'</span> }
};

<span class="kwc">inline</span> <span class="kwb">float</span> <span class="kwd">gen_random</span>(<span class="kwb">float</span> max = <span class="num">1.0</span>f)
{
  <span class="kwb">static const int</span> IM = <span class="num">139968</span>, IA = <span class="num">3877</span>, IC = <span class="num">29573</span>;
  <span class="kwb">static int</span> last = <span class="num">42</span>;
  last = (last * IA + IC) % IM;
  <span class="kwa">return</span> max * last * (<span class="num">1.0</span>f / IM);
}

<span class="kwc">class</span> Repeat {
<span class="kwc">public</span>:
  <span class="kwd">Repeat</span>(<span class="kwb">const char</span>* alu)
    : <span class="kwd">alu</span>(alu), <span class="kwd">size</span>(std::<span class="kwd">strlen</span>(alu)), <span class="kwd">i</span>(<span class="num">0</span>)
  { }
  <span class="kwb">char</span> <span class="kwc">operator</span>()()
  {
    <span class="kwa">if</span> (i &gt;= size)
      i = <span class="num">0</span>;
    <span class="kwa">return</span> alu[i++];
  }
<span class="kwc">private</span>:
  <span class="kwb">const char</span>* alu;
  <span class="kwb">const</span> std::<span class="kwb">size_t</span> size;
  std::<span class="kwb">size_t</span> i;
};

<span class="kwc">class</span> Random {
<span class="kwc">public</span>:
  <span class="kwd">Random</span>(<span class="kwb">const</span> std::vector&lt;IUB&gt;&amp; i)
    : <span class="kwd">i</span>(i)
  { }
  <span class="kwb">char</span> <span class="kwc">operator</span>()()
  {
    <span class="kwb">const float</span> p = <span class="kwd">gen_random</span>(<span class="num">1.0</span>f);
    <span class="kwb">const</span> std::<span class="kwb">size_t</span> count = std::<span class="kwd">count_if</span>(i.<span class="kwd">begin</span>(), i.<span class="kwd">end</span>(),
        [p] (IUB i) { <span class="kwa">return</span> p &gt;= i.p; });
    <span class="kwa">return</span> i[count].c;
  }
<span class="kwc">private</span>:
  <span class="kwb">const</span> std::vector&lt;IUB&gt;&amp; i;
};

<span class="kwb">void</span> <span class="kwd">make_cumulative</span>(std::vector&lt;IUB&gt;&amp; i)
{
  std::<span class="kwd">partial_sum</span>(i.<span class="kwd">begin</span>(), i.<span class="kwd">end</span>(), i.<span class="kwd">begin</span>(),
      [] (IUB l, IUB r) -&gt; IUB { r.p += l.p; <span class="kwa">return</span> r; });
}

<span class="kwc">template</span> &lt;<span class="kwc">class</span> F&gt;
<span class="kwb">void</span> <span class="kwd">make</span>(<span class="kwb">const char</span>* id, <span class="kwb">const char</span>* desc, <span class="kwb">int</span> n, F functor)
{
  std::<span class="kwd">printf</span>(<span class="str">&quot;&gt;%s %s</span><span class="esc">\n</span><span class="str">&quot;</span>, id, desc);
  <span class="kwb">char</span> line[LENGTH + <span class="num">1</span>] = { <span class="num">0</span> };
  <span class="kwb">int</span> i = <span class="num">0</span>;
  <span class="kwa">while</span> (n-- &gt; <span class="num">0</span>)
  {
    line[i++] = <span class="kwd">functor</span>();
    <span class="kwa">if</span> (i &gt;= LENGTH)
    {
      std::<span class="kwd">puts</span>(line);
      i = <span class="num">0</span>;
    }
  }
  line[i] = <span class="num">0</span>;
  <span class="kwa">if</span> (std::<span class="kwd">strlen</span>(line) != <span class="num">0</span>)
    std::<span class="kwd">puts</span>(line);
}

} <span class="slc">// end namespace</span>

<span class="kwb">int</span> <span class="kwd">main</span>(<span class="kwb">int</span> argc, <span class="kwb">char</span> *argv[])
{
   <span class="kwb">const int</span> n = argc &gt; <span class="num">1</span> ? <span class="kwd">atoi</span>(argv[<span class="num">1</span>]) : <span class="num">1</span>;

   <span class="kwd">make_cumulative</span>(iub);
   <span class="kwd">make_cumulative</span>(homosapiens);

   <span class="kwd">make</span>(<span class="str">&quot;ONE&quot;</span>  , <span class="str">&quot;Homo sapiens alu&quot;</span>      , n * <span class="num">2</span>, <span class="kwd">Repeat</span>(alu));
   <span class="kwd">make</span>(<span class="str">&quot;TWO&quot;</span>  , <span class="str">&quot;IUB ambiguity codes&quot;</span>   , n * <span class="num">3</span>, <span class="kwd">Random</span>(iub));
   <span class="kwd">make</span>(<span class="str">&quot;THREE&quot;</span>, <span class="str">&quot;Homo sapiens frequency&quot;</span>, n * <span class="num">5</span>, <span class="kwd">Random</span>(homosapiens));
}
