<span class="slc">;; The Computer Language Benchmarks Game</span>
<span class="slc">;; http://benchmarksgame.alioth.debian.org/</span>
<span class="slc">;; contributed by Mike Pall</span>
<span class="slc">;; java port by Stefan Krause</span>
<span class="slc">;; clojure port by Koji Yusa</span>
<span class="slc">;; this code uses jgmplib library</span>
<span class="slc">;; perf improvements by Alex Miller (fixing reflection and prims)</span>

(set! *warn-on-reflection* true)
(set! *unchecked-math* true)

(ns pidigits
  (:gen-class)
  (:import (clojure.asm Opcodes Type Label ClassWriter)))

(definterface IGmpInteger
  (^long getPointer [])
  (^void set [^int value])
  (^void mul [^pidigits.IGmpInteger src ^int value])
  (^void add [^pidigits.IGmpInteger op1 ^pidigits.IGmpInteger op2])
  (^void div [^pidigits.IGmpInteger op1 ^pidigits.IGmpInteger op2])
  (^int intValue [])
  (^double doubleValue))

<span class="slc">;; disassembled GmpInteger</span>
(<span class="kwa">defn</span> makeGmpInteger []
  (<span class="kwc">let</span> [cw (ClassWriter. <span class="num">0</span>)]
    (.visit cw Opcodes/V1_7 (bit-or Opcodes/ACC_PUBLIC Opcodes/ACC_SUPER) <span class="str">&quot;GmpInteger&quot;</span> nil <span class="str">&quot;java/lang/Object&quot;</span> (into-array String [<span class="str">&quot;pidigits/IGmpInteger&quot;</span>] ))
    (doto (.visitField cw Opcodes/ACC_PRIVATE <span class="str">&quot;pointer&quot;</span> <span class="str">&quot;J&quot;</span> nil nil)
      (.visitEnd))
    (<span class="kwc">let</span> [l0 (Label.) l3 (Label.)]
      (doto (.visitMethod cw Opcodes/ACC_PUBLIC <span class="str">&quot;&lt;init&gt;&quot;</span> <span class="str">&quot;()V&quot;</span> nil nil)
        (.visitCode)
        (.visitLabel l0)
        (.visitVarInsn Opcodes/ALOAD <span class="num">0</span>)
        (.visitMethodInsn Opcodes/INVOKESPECIAL <span class="str">&quot;java/lang/Object&quot;</span> <span class="str">&quot;&lt;init&gt;&quot;</span> <span class="str">&quot;()V&quot;</span>)
        (.visitVarInsn Opcodes/ALOAD <span class="num">0</span>)
        (.visitMethodInsn Opcodes/INVOKESPECIAL <span class="str">&quot;GmpInteger&quot;</span> <span class="str">&quot;mpz_init&quot;</span> <span class="str">&quot;()V&quot;</span>)
        (.visitInsn Opcodes/RETURN)
        (.visitLabel l3)
        (.visitLocalVariable <span class="str">&quot;this&quot;</span> <span class="str">&quot;LGmpInteger;&quot;</span> nil, l0 l3 <span class="num">0</span>)
        (.visitMaxs <span class="num">1 1</span>)
        (.visitEnd)))
    (<span class="kwc">let</span> [l0 (Label.) l3 (Label.)]
      (doto (.visitMethod cw Opcodes/ACC_PUBLIC <span class="str">&quot;&lt;init&gt;&quot;</span> <span class="str">&quot;(I)V&quot;</span> nil nil)
        (.visitCode)
        (.visitLabel l0)
        (.visitVarInsn Opcodes/ALOAD <span class="num">0</span>)
        (.visitMethodInsn Opcodes/INVOKESPECIAL <span class="str">&quot;GmpInteger&quot;</span> <span class="str">&quot;&lt;init&gt;&quot;</span> <span class="str">&quot;()V&quot;</span>)
        (.visitVarInsn Opcodes/ALOAD <span class="num">0</span>)
        (.visitFieldInsn Opcodes/GETFIELD <span class="str">&quot;GmpInteger&quot;</span> <span class="str">&quot;pointer&quot;</span> <span class="str">&quot;J&quot;</span>)
        (.visitVarInsn Opcodes/ILOAD <span class="num">1</span>)
        (.visitMethodInsn Opcodes/INVOKESTATIC <span class="str">&quot;GmpInteger&quot;</span> <span class="str">&quot;mpz_set_si&quot;</span> <span class="str">&quot;(JI)V&quot;</span>)
        (.visitInsn Opcodes/RETURN)
        (.visitLabel l3)
        (.visitLocalVariable <span class="str">&quot;this&quot;</span> <span class="str">&quot;LGmpInteger;&quot;</span> nil l0 l3 <span class="num">0</span>)
        (.visitLocalVariable <span class="str">&quot;value&quot;</span>  <span class="str">&quot;I&quot;</span> nil l0 l3 <span class="num">1</span>)
        (.visitMaxs <span class="num">3 2</span>)
        (.visitEnd)))
    (<span class="kwc">let</span> [l0 (Label.) l1 (Label.)]
      (doto (.visitMethod cw Opcodes/ACC_PUBLIC <span class="str">&quot;set&quot;</span> <span class="str">&quot;(I)V&quot;</span> nil nil)
        (.visitCode)
        (.visitLabel l0)
        (.visitVarInsn Opcodes/ALOAD <span class="num">0</span>)
        (.visitFieldInsn Opcodes/GETFIELD <span class="str">&quot;GmpInteger&quot;</span> <span class="str">&quot;pointer&quot;</span> <span class="str">&quot;J&quot;</span>)
        (.visitVarInsn Opcodes/ILOAD <span class="num">1</span>)
        (.visitMethodInsn Opcodes/INVOKESTATIC <span class="str">&quot;GmpInteger&quot;</span> <span class="str">&quot;mpz_set_si&quot;</span> <span class="str">&quot;(JI)V&quot;</span>)
        (.visitInsn Opcodes/RETURN)
        (.visitLabel l1)
        (.visitLocalVariable <span class="str">&quot;this&quot;</span> <span class="str">&quot;LGmpInteger;&quot;</span> nil l0 l1 <span class="num">0</span>)
        (.visitLocalVariable <span class="str">&quot;value&quot;</span> <span class="str">&quot;I&quot;</span> nil l0 l1 <span class="num">1</span>)
        (.visitMaxs <span class="num">3 2</span>)
        (.visitEnd)))
    (<span class="kwc">let</span> [l0 (Label.) l1 (Label.)]
      (doto (.visitMethod cw Opcodes/ACC_PUBLIC <span class="str">&quot;mul&quot;</span> <span class="str">&quot;(Lpidigits/IGmpInteger;I)V&quot;</span> nil nil)
        (.visitCode)
        (.visitLabel l0)
        (.visitVarInsn Opcodes/ALOAD <span class="num">0</span>)
        (.visitFieldInsn Opcodes/GETFIELD <span class="str">&quot;GmpInteger&quot;</span> <span class="str">&quot;pointer&quot;</span> <span class="str">&quot;J&quot;</span>)
        (.visitVarInsn Opcodes/ALOAD <span class="num">1</span>)
        (.visitMethodInsn Opcodes/INVOKEINTERFACE <span class="str">&quot;pidigits/IGmpInteger&quot;</span> <span class="str">&quot;getPointer&quot;</span> <span class="str">&quot;()J&quot;</span>)
        (.visitVarInsn Opcodes/ILOAD <span class="num">2</span>)
        (.visitMethodInsn Opcodes/INVOKESTATIC <span class="str">&quot;GmpInteger&quot;</span> <span class="str">&quot;mpz_mul_si&quot;</span> <span class="str">&quot;(JJI)V&quot;</span>)
        (.visitInsn Opcodes/RETURN)
        (.visitLabel l1)
        (.visitLocalVariable <span class="str">&quot;this&quot;</span> <span class="str">&quot;LGmpInteger;&quot;</span> nil l0 l1 <span class="num">0</span>)
        (.visitLocalVariable <span class="str">&quot;src&quot;</span> <span class="str">&quot;Lpidigits/IGmpInteger;&quot;</span> nil l0 l1 <span class="num">1</span>)
        (.visitLocalVariable <span class="str">&quot;val&quot;</span> <span class="str">&quot;I&quot;</span> nil l0 l1 <span class="num">2</span>)
        (.visitMaxs <span class="num">5 3</span>)
        (.visitEnd)))
    (<span class="kwc">let</span> [l0 (Label.) l1 (Label.)]
      (doto (.visitMethod cw Opcodes/ACC_PUBLIC <span class="str">&quot;add&quot;</span> <span class="str">&quot;(Lpidigits/IGmpInteger;Lpidigits/IGmpInteger;)V&quot;</span> nil nil)
        (.visitCode)
        (.visitLabel l0)
        (.visitVarInsn Opcodes/ALOAD <span class="num">0</span>)
        (.visitFieldInsn Opcodes/GETFIELD <span class="str">&quot;GmpInteger&quot;</span> <span class="str">&quot;pointer&quot;</span> <span class="str">&quot;J&quot;</span>)
        (.visitVarInsn Opcodes/ALOAD <span class="num">1</span>)
        (.visitMethodInsn Opcodes/INVOKEINTERFACE <span class="str">&quot;pidigits/IGmpInteger&quot;</span> <span class="str">&quot;getPointer&quot;</span> <span class="str">&quot;()J&quot;</span>)
        (.visitVarInsn Opcodes/ALOAD <span class="num">2</span>)
        (.visitMethodInsn Opcodes/INVOKEINTERFACE <span class="str">&quot;pidigits/IGmpInteger&quot;</span> <span class="str">&quot;getPointer&quot;</span> <span class="str">&quot;()J&quot;</span>)
        (.visitMethodInsn Opcodes/INVOKESTATIC <span class="str">&quot;GmpInteger&quot;</span> <span class="str">&quot;mpz_add&quot;</span> <span class="str">&quot;(JJJ)V&quot;</span>)
        (.visitInsn Opcodes/RETURN)
        (.visitLabel l1)
        (.visitLocalVariable <span class="str">&quot;this&quot;</span> <span class="str">&quot;LGmpInteger;&quot;</span> nil l0 l1 <span class="num">0</span>)
        (.visitLocalVariable <span class="str">&quot;op1&quot;</span> <span class="str">&quot;Lpidigits/IGmpInteger;&quot;</span> nil l0 l1 <span class="num">1</span>)
        (.visitLocalVariable <span class="str">&quot;op2&quot;</span> <span class="str">&quot;Lpidigits/IGmpInteger;&quot;</span> nil l0 l1 <span class="num">2</span>)
        (.visitMaxs <span class="num">6 3</span>)
        (.visitEnd)))
    (<span class="kwc">let</span> [l0 (Label.) l1 (Label.)]
      (doto (.visitMethod cw Opcodes/ACC_PUBLIC <span class="str">&quot;div&quot;</span> <span class="str">&quot;(Lpidigits/IGmpInteger;Lpidigits/IGmpInteger;)V&quot;</span> nil nil)
        (.visitCode)
        (.visitLabel l0)
        (.visitVarInsn Opcodes/ALOAD <span class="num">0</span>)
        (.visitFieldInsn Opcodes/GETFIELD <span class="str">&quot;GmpInteger&quot;</span> <span class="str">&quot;pointer&quot;</span> <span class="str">&quot;J&quot;</span>)
        (.visitVarInsn Opcodes/ALOAD <span class="num">1</span>)
        (.visitMethodInsn Opcodes/INVOKEINTERFACE <span class="str">&quot;pidigits/IGmpInteger&quot;</span> <span class="str">&quot;getPointer&quot;</span> <span class="str">&quot;()J&quot;</span>)
        (.visitVarInsn Opcodes/ALOAD <span class="num">2</span>)
        (.visitMethodInsn Opcodes/INVOKEINTERFACE <span class="str">&quot;pidigits/IGmpInteger&quot;</span> <span class="str">&quot;getPointer&quot;</span> <span class="str">&quot;()J&quot;</span>)
        (.visitMethodInsn Opcodes/INVOKESTATIC <span class="str">&quot;GmpInteger&quot;</span> <span class="str">&quot;mpz_tdiv_q&quot;</span> <span class="str">&quot;(JJJ)V&quot;</span>)
        (.visitInsn Opcodes/RETURN)
        (.visitLabel l1)
        (.visitLocalVariable <span class="str">&quot;this&quot;</span> <span class="str">&quot;LGmpInteger;&quot;</span> nil l0 l1 <span class="num">0</span>)
        (.visitLocalVariable <span class="str">&quot;op1&quot;</span> <span class="str">&quot;Lpidigits/IGmpInteger;&quot;</span> nil l0 l1 <span class="num">1</span>)
        (.visitLocalVariable <span class="str">&quot;op2&quot;</span> <span class="str">&quot;Lpidigits/IGmpInteger;&quot;</span> nil l0 l1 <span class="num">2</span>)
        (.visitMaxs <span class="num">6 3</span>)
        (.visitEnd)))
    (<span class="kwc">let</span> [l0 (Label.) l1 (Label.)]
      (doto (.visitMethod cw Opcodes/ACC_PUBLIC <span class="str">&quot;intValue&quot;</span> <span class="str">&quot;()I&quot;</span> nil nil)
        (.visitCode)
        (.visitLabel l0)
        (.visitVarInsn Opcodes/ALOAD <span class="num">0</span>)
        (.visitFieldInsn Opcodes/GETFIELD <span class="str">&quot;GmpInteger&quot;</span> <span class="str">&quot;pointer&quot;</span> <span class="str">&quot;J&quot;</span>)
        (.visitMethodInsn Opcodes/INVOKESTATIC <span class="str">&quot;GmpInteger&quot;</span> <span class="str">&quot;mpz_get_si&quot;</span> <span class="str">&quot;(J)I&quot;</span>)
        (.visitInsn Opcodes/IRETURN)
        (.visitLabel l1)
        (.visitLocalVariable <span class="str">&quot;this&quot;</span> <span class="str">&quot;LGmpInteger;&quot;</span> nil l0 l1 <span class="num">0</span>)
        (.visitMaxs <span class="num">2 1</span>)
        (.visitEnd)))
    (<span class="kwc">let</span> [l0 (Label.) l1 (Label.)]
      (doto (.visitMethod cw Opcodes/ACC_PUBLIC <span class="str">&quot;doubleValue&quot;</span> <span class="str">&quot;()D&quot;</span> nil nil)
        (.visitCode)
        (.visitLabel l0)
        (.visitVarInsn Opcodes/ALOAD <span class="num">0</span>)
        (.visitFieldInsn Opcodes/GETFIELD <span class="str">&quot;GmpInteger&quot;</span> <span class="str">&quot;pointer&quot;</span> <span class="str">&quot;J&quot;</span>)
        (.visitMethodInsn Opcodes/INVOKESTATIC <span class="str">&quot;GmpInteger&quot;</span> <span class="str">&quot;mpz_get_d&quot;</span> <span class="str">&quot;(J)D&quot;</span>)
        (.visitInsn Opcodes/DRETURN)
        (.visitLabel l1)
        (.visitLocalVariable <span class="str">&quot;this&quot;</span> <span class="str">&quot;LGmpInteger;&quot;</span> nil l0 l1 <span class="num">0</span>)
        (.visitMaxs <span class="num">2 1</span>)
        (.visitEnd)))
    (<span class="kwc">let</span> [l0 (Label.) l2 (Label.)]
      (doto (.visitMethod cw Opcodes/ACC_PROTECTED <span class="str">&quot;finalize&quot;</span> <span class="str">&quot;()V&quot;</span> nil nil)
        (.visitCode)
        (.visitLabel l0)
        (.visitVarInsn Opcodes/ALOAD <span class="num">0</span>)
        (.visitVarInsn Opcodes/ALOAD <span class="num">0</span>)
        (.visitFieldInsn Opcodes/GETFIELD <span class="str">&quot;GmpInteger&quot;</span> <span class="str">&quot;pointer&quot;</span> <span class="str">&quot;J&quot;</span>)
        (.visitMethodInsn Opcodes/INVOKESPECIAL <span class="str">&quot;GmpInteger&quot;</span> <span class="str">&quot;mpz_clear&quot;</span> <span class="str">&quot;(J)V&quot;</span>)
        (.visitInsn Opcodes/RETURN)
        (.visitLabel l2)
        (.visitLocalVariable <span class="str">&quot;this&quot;</span> <span class="str">&quot;LGmpInteger;&quot;</span> nil l0 l2 <span class="num">0</span>)
        (.visitMaxs <span class="num">3 1</span>)
        (.visitEnd)))
    (<span class="kwc">let</span> [l0 (Label.) l2 (Label.)]
      (doto (.visitMethod cw Opcodes/ACC_PUBLIC <span class="str">&quot;getPointer&quot;</span> <span class="str">&quot;()J&quot;</span> nil nil)
        (.visitCode)
        (.visitLabel l0)
        (.visitVarInsn Opcodes/ALOAD <span class="num">0</span>)
        (.visitFieldInsn Opcodes/GETFIELD <span class="str">&quot;GmpInteger&quot;</span> <span class="str">&quot;pointer&quot;</span> <span class="str">&quot;J&quot;</span>)
        (.visitInsn Opcodes/LRETURN)
        (.visitLabel l2)
        (.visitLocalVariable <span class="str">&quot;this&quot;</span> <span class="str">&quot;LGmpInteger;&quot;</span> nil l0 l2 <span class="num">0</span>)
        (.visitMaxs <span class="num">2 1</span>)
        (.visitEnd)))  
    (doto (.visitMethod cw (bit-or Opcodes/ACC_PRIVATE Opcodes/ACC_NATIVE) <span class="str">&quot;mpz_init&quot;</span> <span class="str">&quot;()V&quot;</span> nil nil)
      (.visitEnd))
    (doto (.visitMethod cw (bit-or Opcodes/ACC_PRIVATE Opcodes/ACC_NATIVE) <span class="str">&quot;mpz_clear&quot;</span> <span class="str">&quot;(J)V&quot;</span> nil nil)
      (.visitEnd))
    (doto (.visitMethod cw (bit-or Opcodes/ACC_PRIVATE Opcodes/ACC_STATIC Opcodes/ACC_NATIVE) <span class="str">&quot;mpz_mul_si&quot;</span> <span class="str">&quot;(JJI)V&quot;</span> nil nil)
      (.visitEnd))
    (doto (.visitMethod cw (bit-or Opcodes/ACC_PRIVATE Opcodes/ACC_STATIC Opcodes/ACC_NATIVE) <span class="str">&quot;mpz_add&quot;</span> <span class="str">&quot;(JJJ)V&quot;</span> nil nil)
      (.visitEnd))
    (doto (.visitMethod cw (bit-or Opcodes/ACC_PRIVATE Opcodes/ACC_STATIC Opcodes/ACC_NATIVE) <span class="str">&quot;mpz_tdiv_q&quot;</span> <span class="str">&quot;(JJJ)V&quot;</span> nil nil)
      (.visitEnd))
    (doto (.visitMethod cw (bit-or Opcodes/ACC_PRIVATE Opcodes/ACC_STATIC Opcodes/ACC_NATIVE) <span class="str">&quot;mpz_set_si&quot;</span> <span class="str">&quot;(JI)V&quot;</span> nil nil)
      (.visitEnd))
    (doto (.visitMethod cw (bit-or Opcodes/ACC_PRIVATE Opcodes/ACC_STATIC Opcodes/ACC_NATIVE) <span class="str">&quot;mpz_get_si&quot;</span> <span class="str">&quot;(J)I&quot;</span> nil nil)
      (.visitEnd))
    (doto (.visitMethod cw (bit-or Opcodes/ACC_PRIVATE Opcodes/ACC_STATIC Opcodes/ACC_NATIVE) <span class="str">&quot;mpz_get_d&quot;</span> <span class="str">&quot;(J)D&quot;</span> nil nil)
      (.visitEnd))
    (<span class="kwc">let</span> [l0 (Label.) l1 (Label.)]
      (doto (.visitMethod cw Opcodes/ACC_STATIC <span class="str">&quot;&lt;clinit&gt;&quot;</span> <span class="str">&quot;()V&quot;</span> nil nil)
        (.visitCode)
        (.visitLabel l0)
        (.visitLdcInsn <span class="str">&quot;jgmplib&quot;</span>)
        (.visitMethodInsn Opcodes/INVOKESTATIC <span class="str">&quot;java/lang/System&quot;</span> <span class="str">&quot;loadLibrary&quot;</span> <span class="str">&quot;(Ljava/lang/String;)V&quot;</span>)
        (.visitLabel l1)
        (.visitInsn Opcodes/RETURN)
        (.visitMaxs <span class="num">1 0</span>)
        (.visitEnd)))
    (.visitEnd cw)
    (.toByteArray cw)))

(<span class="kwc">let</span> [ba ^bytes (makeGmpInteger)
      dcl (clojure.lang.DynamicClassLoader. (.getClassLoader pidigits.IGmpInteger))
      GmpInt ^Class (.defineClass dcl <span class="str">&quot;GmpInteger&quot;</span> ba nil)]
  (try
  (<span class="kwa">def</span> q (.newInstance GmpInt))
  (<span class="kwa">def</span> r (.newInstance GmpInt))
  (<span class="kwa">def</span> s (.newInstance GmpInt))
  (<span class="kwa">def</span> t (.newInstance GmpInt))
  (<span class="kwa">def</span> u (.newInstance GmpInt))
  (<span class="kwa">def</span> v (.newInstance GmpInt))
  (<span class="kwa">def</span> w (.newInstance GmpInt))
  (catch Throwable t nil)))

(<span class="kwa">def</span> strbuf (StringBuilder. <span class="num">20</span>))

<span class="slc">;; Extract one digit.</span>
(<span class="kwa">defn</span> ^long extract [^long j]
  (.mul ^pidigits.IGmpInteger u ^pidigits.IGmpInteger q j)
  (.add ^pidigits.IGmpInteger u ^pidigits.IGmpInteger u ^pidigits.IGmpInteger r)
  (.mul ^pidigits.IGmpInteger v ^pidigits.IGmpInteger s j)
  (.add ^pidigits.IGmpInteger v ^pidigits.IGmpInteger v ^pidigits.IGmpInteger t)
  (.div ^pidigits.IGmpInteger w ^pidigits.IGmpInteger u ^pidigits.IGmpInteger v)
  (.intValue ^pidigits.IGmpInteger w))

<span class="slc">;; Print one digit. Returns 1 for the last digit.</span>
(<span class="kwa">defn</span> prdigit [^long y ^long i ^long n]
  (<span class="kwc">let</span> [strbuf ^StringBuilder strbuf]
    (.append strbuf y)
    (<span class="kwc">when</span> (or (= (mod i <span class="num">10</span>) <span class="num">0</span>) (= i n))
      (<span class="kwc">when</span> (not= (mod i <span class="num">10</span>) <span class="num">0</span>)
        (.append strbuf (apply str (<span class="kwd">repeat</span> (- <span class="num">10</span> (mod i <span class="num">10</span>)) <span class="str">&quot; &quot;</span>))))
      (.append strbuf <span class="str">&quot;</span><span class="esc">\t</span><span class="str">:&quot;</span>)
      (.append strbuf i)
      (println (.toString strbuf))
      (.setLength strbuf <span class="num">0</span>))
    (= i n)))

<span class="slc">;; Generate successive digits of PI.</span>
(<span class="kwa">defn</span> ^long digits [^long n]
  (do
    (.set ^pidigits.IGmpInteger q <span class="num">1</span>)
    (.set ^pidigits.IGmpInteger r <span class="num">0</span>)
    (.set ^pidigits.IGmpInteger s <span class="num">0</span>)
    (.set ^pidigits.IGmpInteger t <span class="num">1</span>)
    (.set ^pidigits.IGmpInteger u <span class="num">0</span>)
    (.set ^pidigits.IGmpInteger v <span class="num">0</span>)
    (.set ^pidigits.IGmpInteger w <span class="num">0</span>)
    (<span class="kwb">loop</span> [k <span class="num">1</span> i <span class="num">1</span>]
      (<span class="kwc">let</span> [y (extract <span class="num">3</span>)]
        (<span class="kwc">if</span> (= y (extract <span class="num">4</span>))
          (<span class="kwc">if</span> (prdigit y i n)
            k
            (do 
              (.mul ^pidigits.IGmpInteger u ^pidigits.IGmpInteger r <span class="num">0</span>)
              (.mul ^pidigits.IGmpInteger r ^pidigits.IGmpInteger r <span class="num">10</span>)
              (.mul ^pidigits.IGmpInteger v ^pidigits.IGmpInteger t (* -<span class="num">10</span> y))
              (.add ^pidigits.IGmpInteger r ^pidigits.IGmpInteger r ^pidigits.IGmpInteger v)
              (.mul ^pidigits.IGmpInteger t ^pidigits.IGmpInteger t <span class="num">1</span>)
              (.add ^pidigits.IGmpInteger t ^pidigits.IGmpInteger t ^pidigits.IGmpInteger u)
              (.mul ^pidigits.IGmpInteger s ^pidigits.IGmpInteger s <span class="num">1</span>)
              (.mul ^pidigits.IGmpInteger u ^pidigits.IGmpInteger q <span class="num">0</span>)
              (.add ^pidigits.IGmpInteger s ^pidigits.IGmpInteger s ^pidigits.IGmpInteger u)
              (.mul ^pidigits.IGmpInteger q ^pidigits.IGmpInteger q <span class="num">10</span>)
              (<span class="kwb">recur</span> k (inc i))))
          (<span class="kwc">let</span> [br (+ (* <span class="num">4</span> k) <span class="num">2</span>)
                bt (+ (* <span class="num">2</span> k) <span class="num">1</span>)]
            (.mul ^pidigits.IGmpInteger r ^pidigits.IGmpInteger r bt)
            (.mul ^pidigits.IGmpInteger u ^pidigits.IGmpInteger q br)
            (.add ^pidigits.IGmpInteger r ^pidigits.IGmpInteger r ^pidigits.IGmpInteger u)
            (.mul ^pidigits.IGmpInteger u ^pidigits.IGmpInteger t <span class="num">0</span>)
            (.mul ^pidigits.IGmpInteger t ^pidigits.IGmpInteger t bt)
            (.mul ^pidigits.IGmpInteger v ^pidigits.IGmpInteger s br)
            (.add ^pidigits.IGmpInteger t ^pidigits.IGmpInteger t ^pidigits.IGmpInteger v)
            (.mul ^pidigits.IGmpInteger s ^pidigits.IGmpInteger s k)
            (.add ^pidigits.IGmpInteger s ^pidigits.IGmpInteger s ^pidigits.IGmpInteger u)
            (.mul ^pidigits.IGmpInteger q ^pidigits.IGmpInteger q k)
            (<span class="kwb">recur</span> (inc k) i)))))))

(<span class="kwa">defn</span> -main [&amp; args]
  (<span class="kwc">let</span> [n (long (try (Long/parseLong (<span class="kwd">first</span> args))
                  (catch NumberFormatException e <span class="num">27</span>)))]
    (digits n))
  (flush))
