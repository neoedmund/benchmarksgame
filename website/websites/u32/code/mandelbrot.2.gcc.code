<span class="com">/* The Computer Language Benchmarks Game</span>
<span class="com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Greg Buchholz</span>
<span class="com">   </span>
<span class="com">   for the debian (AMD) machine...</span>
<span class="com">   compile flags:  -O3 -ffast-math -march=athlon-xp -funroll-loops</span>
<span class="com"></span>
<span class="com">   for the gp4 (Intel) machine...</span>
<span class="com">   compile flags:  -O3 -ffast-math -march=pentium4 -funroll-loops</span>
<span class="com">*/</span>

<span class="ppc">#include&lt;stdio.h&gt;</span>

<span class="kwb">int</span> <span class="kwd">main</span> (<span class="kwb">int</span> argc, <span class="kwb">char</span> **argv)
{
    <span class="kwb">int</span> w, h, bit_num = <span class="num">0</span>;
    <span class="kwb">char</span> byte_acc = <span class="num">0</span>;
    <span class="kwb">int</span> i, iter = <span class="num">50</span>;
    <span class="kwb">double</span> x, y, limit = <span class="num">2.0</span>;
    <span class="kwb">double</span> Zr, Zi, Cr, Ci, Tr, Ti;
    
    w = h = <span class="kwd">atoi</span>(argv[<span class="num">1</span>]);

    <span class="kwd">printf</span>(<span class="str">&quot;P4</span><span class="esc">\n</span><span class="str">%d %d</span><span class="esc">\n</span><span class="str">&quot;</span>,w,h);

    <span class="kwa">for</span>(y=<span class="num">0</span>;y&lt;h;++y) 
    {
        <span class="kwa">for</span>(x=<span class="num">0</span>;x&lt;w;++x)
        {
            Zr = Zi = Tr = Ti = <span class="num">0.0</span>;
            Cr = (<span class="num">2.0</span>*x/w - <span class="num">1.5</span>); Ci=(<span class="num">2.0</span>*y/h - <span class="num">1.0</span>);
        
            <span class="kwa">for</span> (i=<span class="num">0</span>;i&lt;iter &amp;&amp; (Tr+Ti &lt;= limit*limit);++i)
            {
                Zi = <span class="num">2.0</span>*Zr*Zi + Ci;
                Zr = Tr - Ti + Cr;
                Tr = Zr * Zr;
                Ti = Zi * Zi;
            }
       
            byte_acc &lt;&lt;= <span class="num">1</span>; 
            <span class="kwa">if</span>(Tr+Ti &lt;= limit*limit) byte_acc |= <span class="num">0x01</span>;
                
            ++bit_num; 

            <span class="kwa">if</span>(bit_num == <span class="num">8</span>)
            {
                <span class="kwd">putc</span>(byte_acc,stdout);
                byte_acc = <span class="num">0</span>;
                bit_num = <span class="num">0</span>;
            }
            <span class="kwa">else if</span>(x == w-<span class="num">1</span>)
            {
                byte_acc &lt;&lt;= (<span class="num">8</span>-w%<span class="num">8</span>);
                <span class="kwd">putc</span>(byte_acc,stdout);
                byte_acc = <span class="num">0</span>;
                bit_num = <span class="num">0</span>;
            }
        }
    }	
}

