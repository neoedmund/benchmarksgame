<span class="slc"># The Computer Language Benchmarks Game</span>
<span class="slc"># http://benchmarksgame.alioth.debian.org/</span>
<span class="slc">#</span>
<span class="slc">#   contributed by Robert Bradshaw</span>
<span class="slc">#      modified by Ruud H.G.van Tol</span>
<span class="slc">#      modified by Emanuele Zeppieri</span>

<span class="kwa">use</span> strict;

<span class="kwa">use</span> Math::BigInt lib =&gt; <span class="str">'GMP'</span>;

<span class="kwc">die</span> <span class="str">'Math::BigInt::GMP missing!'</span>
    <span class="kwa">if</span> Math::BigInt-&gt;<span class="kwd">config</span>-&gt;{lib} <span class="kwc">ne</span> <span class="str">'Math::BigInt::GMP'</span>;

<span class="kwc">my</span> <span class="kwb">$z0</span> = Math::BigInt-&gt;<span class="kwd">new</span>(<span class="num">1</span>);
<span class="kwc">my</span> <span class="kwb">$z1</span> = Math::BigInt-&gt;<span class="kwd">new</span>(<span class="num">0</span>);
<span class="kwc">my</span> <span class="kwb">$z2</span> = Math::BigInt-&gt;<span class="kwd">new</span>(<span class="num">1</span>);

<span class="kwa">sub</span> extract_digit { <span class="kwa">return</span> <span class="kwc">scalar</span>( (<span class="kwb">$z0</span> * <span class="kwb">$_</span>[<span class="num">0</span>] + <span class="kwb">$z1</span>) / <span class="kwb">$z2</span> ) }

<span class="kwa">sub</span> compose {
    <span class="kwa">if</span> ( <span class="kwc">defined</span> <span class="kwb">$_</span>[<span class="num">3</span>] ) {
        <span class="kwb">$z1</span>-&gt;<span class="kwd">bmul</span>( <span class="kwb">$_</span>[<span class="num">0</span>] )-&gt;<span class="kwd">badd</span>( <span class="kwb">$_</span>[<span class="num">1</span>] * <span class="kwb">$z2</span> )
    } <span class="kwa">else</span> {
        <span class="kwb">$z1</span>-&gt;<span class="kwd">bmul</span>( <span class="kwb">$_</span>[<span class="num">2</span>] )-&gt;<span class="kwd">badd</span>( <span class="kwb">$_</span>[<span class="num">1</span>] * <span class="kwb">$z0</span> )
    }
    <span class="kwb">$z0</span>-&gt;<span class="kwd">bmul</span>( <span class="kwb">$_</span>[<span class="num">0</span>] );
    <span class="kwb">$z2</span>-&gt;<span class="kwd">bmul</span>( <span class="kwb">$_</span>[<span class="num">2</span>] );
    <span class="kwa">return</span>
}

<span class="kwc">my</span> <span class="kwb">$n</span> = <span class="kwb">$ARGV</span>[<span class="num">0</span>];
($,, $\) = (<span class="str">&quot;</span><span class="esc">\t</span><span class="str">&quot;</span>, <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span>);
<span class="kwc">my</span> (<span class="kwb">$i</span>, <span class="kwb">$s</span>, <span class="kwb">$d</span>); <span class="kwc">my</span> <span class="kwb">$k</span> = <span class="num">0</span>;

<span class="slc"># main loop</span>
<span class="kwa">for</span> <span class="kwb">$i</span> (<span class="num">1</span>..<span class="kwb">$n</span>) {
    <span class="kwa">while</span> (
        <span class="kwb">$z0</span>-&gt;<span class="kwd">bcmp</span>(<span class="kwb">$z2</span>) == <span class="num">1</span> || ( <span class="kwb">$d</span> = extract_digit(<span class="num">3</span>) ) != extract_digit(<span class="num">4</span>)
    ) {
        <span class="slc"># y not safe</span>
        <span class="kwb">$k</span>++; compose(<span class="kwb">$k</span>, <span class="num">4</span>*<span class="kwb">$k</span>+<span class="num">2</span>, <span class="num">2</span>*<span class="kwb">$k</span>+<span class="num">1</span>)
    }
    compose(<span class="num">10</span>, -<span class="num">10</span>*<span class="kwb">$d</span>, <span class="num">1</span>, <span class="num">1</span>);
    <span class="kwb">$s</span> .= <span class="kwb">$d</span>;

    <span class="kwa">unless</span> ( <span class="kwb">$i</span> % <span class="num">10</span> ) { <span class="kwc">print</span> <span class="kwb">$s</span>, <span class="str">&quot;:</span><span class="ipl">$i</span><span class="str">&quot;</span>; <span class="kwc">undef</span> <span class="kwb">$s</span> }
}

<span class="kwb">$s</span> .= <span class="str">' '</span> x (<span class="num">10</span>-<span class="kwb">$i</span>) <span class="kwa">if</span> <span class="kwb">$i</span> = <span class="kwb">$n</span> % <span class="num">10</span>;

<span class="kwc">print</span> <span class="kwb">$s</span>, <span class="str">&quot;:</span><span class="ipl">$n</span><span class="str">&quot;</span> <span class="kwa">if</span> <span class="kwb">$s</span>
