<span class="slc">! The Computer Language Benchmarks Game</span>
<span class="slc">! http://benchmarksgame.alioth.debian.org/</span>
<span class="slc">!</span>
<span class="slc">! Simon Geard, 6/1/05</span>
<span class="slc">! Modified by Waldemar Spomer, 10/1/09: openmp, one I/O</span>

<span class="kwa">program</span> mandelbrot
	<span class="kwa">use</span> omp_lib
	<span class="kwa">implicit none</span>
	<span class="kwa">integer</span> N, x, y, bit_num, i, incr, width_bytes
	<span class="kwa">integer</span>(kind=<span class="num">1</span>) byte_acc, state, mask, res, maskbita, maskbitb
	<span class="kwa">integer</span>(kind=<span class="num">1</span>), <span class="kwa">parameter</span> :: K0 = <span class="num">0</span>, K1 = <span class="num">1</span>
	<span class="kwa">integer</span>, <span class="kwa">parameter</span> :: iter = <span class="num">50</span>
	<span class="kwa">real</span>*<span class="num">8</span>, <span class="kwa">parameter</span>  :: limit2 = <span class="num">4.0d0</span>
	<span class="kwb">double precision</span> :: absZ1, absZ2, invert
	<span class="kwa">character</span>(len=<span class="num">8</span>) argv
	<span class="kwa">complex</span>(kind=<span class="num">8</span>) Z1, Z2, C1, C2
	<span class="kwa">logical</span> in_mandelbrot
	<span class="slc">! Modified to use pointers</span>
	<span class="kwa">character</span>(len=<span class="num">1</span>), <span class="kwa">pointer</span>, <span class="kwa">dimension</span>(:) :: whole_data, pdata
	<span class="kwb">double precision</span>, <span class="kwa">dimension</span>(<span class="num">1</span>:<span class="num">2</span>) :: m1, m2 <span class="slc">! for mask</span>
	
	<span class="kwd">nullify</span>(pdata, whole_data)
	
	<span class="kwa">call</span> <span class="kwd">getarg</span>(<span class="num">1</span>,argv)
	<span class="kwa">read</span>(argv,*) N
	
	<span class="kwd">allocate</span>(<span class="kwd">whole_data</span>(N**<span class="num">2</span>/<span class="num">8</span>),STAT=state)
	<span class="slc">! Output pbm header</span>
	<span class="kwa">write</span>(*,<span class="str">'(a)'</span>) <span class="str">'P4'</span>
	<span class="kwa">write</span>(*,<span class="str">'(i0,a,i0)'</span>) N,<span class="str">' '</span>,N
	
	width_bytes = <span class="kwd">ishft</span>(N,-<span class="num">3</span>)
	invert = <span class="num">2.0d0</span>/N
	<span class="slc">! Modified</span>
	<span class="slc">!$omp parallel default(private) shared(whole_data,N,width_bytes,invert)</span>
	<span class="slc">!$omp do schedule(dynamic)</span>
	<span class="kwa">do</span> y=<span class="num">1</span>,N-<span class="num">1</span>
		bit_num = <span class="num">0</span>
		byte_acc = K0
		<span class="slc">! Adopted form c++ example</span>
		pdata =&gt; <span class="kwd">whole_data</span>((y-<span class="num">1</span>)*width_bytes:(y)*width_bytes)
		incr=<span class="num">0</span>
		<span class="kwa">do</span> x=<span class="num">1</span>,N-<span class="num">1</span>,<span class="num">2</span>
			C1 = <span class="kwd">cmplx</span>(x*invert-<span class="num">1.5d0</span>,y*invert-<span class="num">1.0d0</span>)
			C2 = <span class="kwd">cmplx</span>((x+<span class="num">1</span>)*invert-<span class="num">1.5d0</span>,y*invert-<span class="num">1.0d0</span>)
			Z1 = C1
			Z2 = C2
			in_mandelbrot = .true.
			res=<span class="num">3</span>
			<span class="kwa">do</span> i=<span class="num">1</span>,iter
				
				<span class="slc">! Adopted from C/C++ example</span>
				Z1 = Z1**<span class="num">2</span> + C1
				Z2 = Z2**<span class="num">2</span> + C2
				
				absZ1 = <span class="kwa">real</span>(Z1*<span class="kwd">conjg</span>(Z1))
				absZ2 = <span class="kwa">real</span>(Z2*<span class="kwd">conjg</span>(Z2))
				
				<span class="kwa">if</span> (absZ2 &lt;= limit2 .AND. absZ1 &lt;= limit2) <span class="kwa">then</span>
					mask = <span class="num">3</span>
				<span class="kwa">else if</span> (absZ2 &gt; limit2 .AND. absZ1 &lt;= limit2) <span class="kwa">then</span>
					mask = <span class="num">2</span>
				<span class="kwa">else if</span> (absZ2 &lt;= limit2 .AND. absZ1 &gt; limit2) <span class="kwa">then</span>
					mask = <span class="num">1</span>
				<span class="kwa">else if</span> (absZ2 &gt; limit2 .AND. absZ1 &gt; limit2) <span class="kwa">then</span>
					mask = <span class="num">0</span>
				<span class="kwa">end if</span>
				
				res = <span class="kwd">iand</span>(res,mask)
				
				<span class="kwa">if</span> (res==<span class="num">0</span>) exit
			<span class="kwa">end do</span>
			
			bit_num = bit_num + <span class="num">2</span>
			byte_acc = <span class="kwd">ior</span>(<span class="kwd">ishft</span>(byte_acc,<span class="num">2</span>),res)
			
			<span class="kwa">if</span> (bit_num == <span class="num">8</span>) <span class="kwa">then</span>
				<span class="slc">! All bits set so output them</span>
				incr=incr+<span class="num">1</span>
				<span class="kwd">pdata</span>(incr) = <span class="kwd">char</span>(byte_acc)
				byte_acc = K0
				bit_num = <span class="num">0</span>

			<span class="kwa">end if</span>
		<span class="kwa">end do</span>
	<span class="slc">! End of a row so left-justify the bits we have and output them</span>
	byte_acc = <span class="kwd">ishft</span>(byte_acc,<span class="num">8</span>-<span class="kwd">mod</span>(N,<span class="num">8</span>))
	<span class="kwd">pdata</span>(incr) = <span class="kwd">char</span>(byte_acc)

	<span class="kwa">end do</span>
	<span class="slc">!$omp end do nowait</span>
	<span class="slc">!$omp end parallel</span>
	<span class="kwa">write</span>(*,*) whole_data
	<span class="kwd">deallocate</span>(whole_data)
	<span class="kwd">nullify</span>(pdata, whole_data)
<span class="kwa">end program</span> mandelbrot
