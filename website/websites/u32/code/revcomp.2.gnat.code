<span class="slc">--</span>
<span class="slc">--  The Computer Language Benchmarks Game</span>
<span class="slc">--  http://benchmarksgame.alioth.debian.org/</span>
<span class="slc">--</span>
<span class="slc">--  Contributed by Pascal Obry on 2005/03/19</span>
<span class="slc">--  Modified by Bill Findlay  on 2005/04/04</span>
<span class="slc">--  Updated by Georg Bauhaus and Jonathan Parker (May 2012)</span>

<span class="kwa">with</span> Text_Input; <span class="kwa">use</span> Text_Input;
<span class="kwa">with</span> Line_IO;

<span class="kwa">procedure</span> Revcomp <span class="kwa">is</span>

   Multitasking_Version_Desired : <span class="kwa">constant</span> <span class="kwb">Boolean</span> := <span class="kwd">True</span>;

   Complement : <span class="kwa">constant array</span> (<span class="kwb">Character</span>) <span class="kwa">of</span> <span class="kwb">Character</span> :=
     (<span class="str">'A'</span> =&gt; <span class="str">'T'</span>, <span class="str">'C'</span> =&gt; <span class="str">'G'</span>, <span class="str">'G'</span> =&gt; <span class="str">'C'</span>, <span class="str">'T'</span> =&gt; <span class="str">'A'</span>, <span class="str">'U'</span> =&gt; <span class="str">'A'</span>,
      <span class="str">'M'</span> =&gt; <span class="str">'K'</span>, <span class="str">'R'</span> =&gt; <span class="str">'Y'</span>, <span class="str">'W'</span> =&gt; <span class="str">'W'</span>, <span class="str">'S'</span> =&gt; <span class="str">'S'</span>, <span class="str">'Y'</span> =&gt; <span class="str">'R'</span>,
      <span class="str">'K'</span> =&gt; <span class="str">'M'</span>, <span class="str">'V'</span> =&gt; <span class="str">'B'</span>, <span class="str">'H'</span> =&gt; <span class="str">'D'</span>, <span class="str">'D'</span> =&gt; <span class="str">'H'</span>, <span class="str">'B'</span> =&gt; <span class="str">'V'</span>,
      <span class="str">'N'</span> =&gt; <span class="str">'N'</span>,
      <span class="str">'a'</span> =&gt; <span class="str">'T'</span>, <span class="str">'c'</span> =&gt; <span class="str">'G'</span>, <span class="str">'g'</span> =&gt; <span class="str">'C'</span>, <span class="str">'t'</span> =&gt; <span class="str">'A'</span>, <span class="str">'u'</span> =&gt; <span class="str">'A'</span>,
      <span class="str">'m'</span> =&gt; <span class="str">'K'</span>, <span class="str">'r'</span> =&gt; <span class="str">'Y'</span>, <span class="str">'w'</span> =&gt; <span class="str">'W'</span>, <span class="str">'s'</span> =&gt; <span class="str">'S'</span>, <span class="str">'y'</span> =&gt; <span class="str">'R'</span>,
      <span class="str">'k'</span> =&gt; <span class="str">'M'</span>, <span class="str">'v'</span> =&gt; <span class="str">'B'</span>, <span class="str">'h'</span> =&gt; <span class="str">'D'</span>, <span class="str">'d'</span> =&gt; <span class="str">'H'</span>, <span class="str">'b'</span> =&gt; <span class="str">'V'</span>,
      <span class="str">'n'</span> =&gt; <span class="str">'N'</span>,
      <span class="kwa">others</span> =&gt; <span class="str">'?'</span>);

   Max_Line_Length : <span class="kwa">constant</span> := <span class="num">60</span>;

   End_Of_Line : <span class="kwa">constant</span> <span class="kwb">String</span> := Line_IO.Separator;

   <span class="kwa">procedure</span> Reverse_Fasta
     (Fasta_Line   : <span class="kwa">in</span>     String_Access;
      Fasta_Start  : <span class="kwa">in</span>     <span class="kwb">Natural</span>;
      Fasta_Finish : <span class="kwa">in</span>     <span class="kwb">Natural</span>;
      Bundle       : <span class="kwa">in out</span> <span class="kwb">String</span>)
   <span class="kwa">is</span>
      L : <span class="kwb">Natural</span> := Bundle<span class="kwd">'First</span>; <span class="slc">-- Leftmost char</span>
      R : <span class="kwb">Natural</span> := Fasta_Finish; <span class="slc">-- Rightmost char</span>
      c0, c1 : <span class="kwb">Character</span>;
   <span class="kwa">begin</span>
      <span class="kwa">if</span> R &lt; Fasta_Start <span class="kwa">then return</span>; <span class="kwa">end if</span>;

      c1 := Fasta_Line(R);
      <span class="kwa">loop</span>
         Bundle(L) := Complement(c1);
         R := R - <span class="num">1</span>;
         L := L + <span class="num">1</span>;
         <span class="kwa">if</span> R &gt; Fasta_Start <span class="kwa">then</span>
            c0 := Fasta_Line(R);
            c1 := Fasta_Line(R-<span class="num">1</span>);
            Bundle(L) := Complement(c0);
            L := L + <span class="num">1</span>;
            R := R - <span class="num">1</span>;
         <span class="kwa">else</span>
            <span class="kwa">if</span> R = Fasta_Start <span class="kwa">then</span>
               Bundle(L) := Complement(Fasta_Line(R));
            <span class="kwa">end if</span>;
            <span class="kwa">exit</span>;
         <span class="kwa">end if</span>;
      <span class="kwa">end loop</span>;

   <span class="kwa">end</span> Reverse_Fasta;

   <span class="kwa">procedure</span> Put_Reversed_Fasta
     (Fasta_Section     : <span class="kwa">in</span> String_Access;
      Fasta_Data_Length : <span class="kwa">in</span> <span class="kwb">Natural</span>)
   <span class="kwa">is</span>
      Lines_per_Bundle : <span class="kwa">constant</span> := <span class="num">2000</span>;
      Line_Feed_Len    : <span class="kwa">constant</span> <span class="kwb">Natural</span> := End_Of_Line<span class="kwd">'Length</span>;
      Line_Bundle : <span class="kwb">String</span>(<span class="num">1</span> .. Lines_per_Bundle*(Max_Line_Length + Line_Feed_Len));
      L        : <span class="kwb">Natural</span> := Fasta_Data_Length;
      B_start  : <span class="kwb">Natural</span> := Line_Bundle<span class="kwd">'First</span>;
      B_finish : <span class="kwb">Natural</span> := B_start + Max_Line_Length - <span class="num">1</span>;
   <span class="kwa">begin</span>

      <span class="slc">-- Append line feed string (End_Of_Line) to 2000 Line_Bundle lines:</span>

      <span class="kwa">while</span> L &gt;= Lines_per_Bundle * Max_Line_Length <span class="kwa">loop</span>
         B_start := Line_Bundle<span class="kwd">'First</span>;
         <span class="kwa">for</span> j <span class="kwa">in</span> <span class="num">1</span> .. Lines_per_Bundle <span class="kwa">loop</span>
            B_finish := B_start + Max_Line_Length - <span class="num">1</span>;
            Reverse_Fasta
              (Fasta_Line   =&gt; Fasta_Section,
               Fasta_Start  =&gt; L - Max_Line_Length + <span class="num">1</span>,
               Fasta_Finish =&gt; L,
               Bundle       =&gt; Line_Bundle(B_start .. B_finish));
            Line_Bundle(B_finish + <span class="num">1</span> .. B_finish + Line_Feed_Len) := End_Of_Line;
            B_start := B_finish + Line_Feed_Len + <span class="num">1</span>;
            L       := L - Max_Line_Length;
         <span class="kwa">end loop</span>;
         Line_IO.Put (Line_Bundle);
      <span class="kwa">end loop</span>;

      <span class="kwa">while</span> L &gt;= Max_Line_Length <span class="kwa">loop</span>
         Reverse_Fasta
           (Fasta_Line   =&gt; Fasta_Section,
            Fasta_Start  =&gt; L - Max_Line_Length + <span class="num">1</span>,
            Fasta_Finish =&gt; L,
            Bundle       =&gt; Line_Bundle(<span class="num">1</span> .. Max_Line_Length));
         Line_IO.Put_Line (Line_Bundle (<span class="num">1</span>..Max_Line_Length));
         L := L - Max_Line_Length;
      <span class="kwa">end loop</span>;

      <span class="kwa">if</span> L &gt; <span class="num">0</span> <span class="kwa">then</span>
         Reverse_Fasta
           (Fasta_Line   =&gt; Fasta_Section,
            Fasta_Start  =&gt; <span class="num">1</span>,
            Fasta_Finish =&gt; L,
            Bundle       =&gt; Line_Bundle(<span class="num">1</span> .. L));
         Line_IO.Put_Line (Line_Bundle (<span class="num">1</span> .. L));
      <span class="kwa">end if</span>;

   <span class="kwa">end</span> Put_Reversed_Fasta;

   <span class="kwa">procedure</span> Read_Reverse_Write_a_Section_p
     (Job_Is_Complete : <span class="kwa">out</span> <span class="kwb">Boolean</span>)
   <span class="kwa">is</span>
      Section_o_Fasta : String_Pointer (<span class="num">2</span>**<span class="num">20</span> * <span class="num">128</span>);
      Header          : <span class="kwb">String</span>(<span class="num">1</span>..Max_Line_Length) := (<span class="kwa">others</span> =&gt; <span class="str">'?'</span>);
      Section_Length  : <span class="kwb">Natural</span> := <span class="num">0</span>;
      Header_Length   : <span class="kwb">Natural</span> := <span class="num">0</span>;
   <span class="kwa">begin</span>
      Job_Is_Complete := <span class="kwd">False</span>;

      Text_Input.Read_Section
        (Data_Buffer     =&gt; Section_o_Fasta.Buffer,
         Data_Length     =&gt; Section_Length,
         Next_Header     =&gt; Header,
         Header_Length   =&gt; Header_Length,
         Max_Line_Length =&gt; <span class="num">100</span>); <span class="slc">-- use anything &gt;= actual limit of 60.</span>

      <span class="kwa">if</span> Header_Length &lt; <span class="num">1</span> <span class="kwa">then</span>   <span class="slc">-- null Header marks final section.</span>
         Job_Is_Complete := <span class="kwd">True</span>;
      <span class="kwa">end if</span>;

      <span class="kwa">if</span> Section_Length &gt; <span class="num">0</span> <span class="kwa">then</span>
         Put_Reversed_Fasta (Section_o_Fasta.Buffer, Section_Length);
      <span class="kwa">end if</span>;
      <span class="kwa">if</span> Header_Length &gt; <span class="num">0</span> <span class="kwa">then</span>
         Line_IO.Put_Line (Header(<span class="num">1</span>..Header_Length));
      <span class="kwa">end if</span>;

   <span class="kwa">end</span> Read_Reverse_Write_a_Section_p;

   <span class="kwa">task type</span> Read_Reverse_Write_a_Section <span class="kwa">is</span>
      <span class="kwa">entry</span> Start_Reading;
      <span class="kwa">entry</span> Done_Reading_Start_Writing (Reached_End_Of_File : <span class="kwa">out</span> <span class="kwb">Boolean</span>);
      <span class="kwa">entry</span> Done_Writing;
      <span class="kwa">pragma</span> Storage_Size (<span class="num">2</span>**<span class="num">20</span>);
   <span class="kwa">end</span> Read_Reverse_Write_a_Section;

   <span class="kwa">task body</span> Read_Reverse_Write_a_Section <span class="kwa">is</span>
      Section_o_Fasta : String_Pointer (<span class="num">2</span>**<span class="num">20</span> * <span class="num">128</span>);
      Header          : <span class="kwb">String</span>(<span class="num">1</span>..Max_Line_Length) := (<span class="kwa">others</span> =&gt; <span class="str">'?'</span>);
      Section_Length  : <span class="kwb">Natural</span> := <span class="num">0</span>;
      Header_Length   : <span class="kwb">Natural</span> := <span class="num">0</span>;
      Hit_End_Of_File : <span class="kwb">Boolean</span> := <span class="kwd">False</span>;
   <span class="kwa">begin</span>
      <span class="kwa">loop</span>
      <span class="kwa">select</span>
         <span class="kwa">accept</span> Start_Reading;

         Text_Input.Read_Section
           (Data_Buffer     =&gt; Section_o_Fasta.Buffer,
            Data_Length     =&gt; Section_Length,
            Next_Header     =&gt; Header,
            Header_Length   =&gt; Header_Length,
            Max_Line_Length =&gt; <span class="num">100</span>); <span class="slc">-- use anything &gt;= actual limit of 60.</span>

         <span class="kwa">if</span> Header_Length &lt; <span class="num">1</span> <span class="kwa">then</span>   <span class="slc">-- null Header marks final section.</span>
            Hit_End_Of_File := <span class="kwd">True</span>;
         <span class="kwa">end if</span>;

         <span class="kwa">accept</span> Done_Reading_Start_Writing (Reached_End_Of_File : <span class="kwa">out</span> <span class="kwb">Boolean</span>) <span class="kwa">do</span>
            Reached_End_Of_File := Hit_End_Of_File;
         <span class="kwa">end</span> Done_Reading_Start_Writing;

         <span class="kwa">if</span> Section_Length &gt; <span class="num">0</span> <span class="kwa">then</span>
            Put_Reversed_Fasta (Section_o_Fasta.Buffer, Section_Length);
         <span class="kwa">end if</span>;
         <span class="kwa">if</span> Header_Length &gt; <span class="num">0</span> <span class="kwa">then</span>
            Line_IO.Put_Line (Header(<span class="num">1</span>..Header_Length));
         <span class="kwa">end if</span>;

         <span class="kwa">accept</span> Done_Writing;
      <span class="kwa">or</span>
         <span class="kwa">terminate</span>;
      <span class="kwa">end select</span>;
      <span class="kwa">end loop</span>;
   <span class="kwa">end</span> Read_Reverse_Write_a_Section;

   Job_Is_Complete : <span class="kwb">Boolean</span>;

<span class="kwa">begin</span>

   <span class="kwa">if</span> Multitasking_Version_Desired <span class="kwa">then</span> <span class="slc">-- Do computation concurrently with Input</span>

      <span class="kwa">declare</span>
         <span class="kwa">type</span> Task_Id_Type <span class="kwa">is mod</span> <span class="num">2</span>;
         Do_a_Section : <span class="kwa">array</span> (Task_Id_Type) <span class="kwa">of</span> Read_Reverse_Write_a_Section;
         i : Task_Id_Type := Task_Id_Type<span class="kwd">'First</span>;
         Reached_End_Of_File : <span class="kwb">Boolean</span> := <span class="kwd">False</span>;
      <span class="kwa">begin</span>

         Read_Reverse_Write_a_Section_p (Job_Is_Complete);
         <span class="slc">--  All this does is handle the 1st line of the file (the Header).</span>

         Do_a_Section(i).Start_Reading;
         <span class="slc">--  Start 1st task reading 1st section.</span>

         <span class="kwa">loop</span>

            Do_a_Section(i).Done_Reading_Start_Writing (Reached_End_Of_File);
            <span class="slc">-- Block here until task i says its done reading the section.</span>
            <span class="slc">-- After completion of this rendezvous, task i is unblocked. Task i</span>
            <span class="slc">-- then begins computing and writing the reversed data. Task i </span>
            <span class="slc">-- remains unblocked until it finishes writing.</span>

            <span class="slc">-- Task i is done reading so we can unblock task i+1 to start reading:</span>
            <span class="kwa">if not</span> Reached_End_Of_File <span class="kwa">then</span>
               Do_a_Section(i+<span class="num">1</span>).Start_Reading;
            <span class="kwa">end if</span>;

            Do_a_Section(i).Done_Writing;
            <span class="slc">-- Block here until task i says it's done writing. (If task i+1 were</span>
            <span class="slc">-- to write while task i writes, then their output is interleaved.)</span>
            <span class="slc">-- Next go to top of loop to unblock task i+1 so that it can write.</span>

            <span class="kwa">exit when</span> Reached_End_Of_File;
            i := i + <span class="num">1</span>;

         <span class="kwa">end loop</span>;

      <span class="kwa">end</span>;

   <span class="kwa">else</span> <span class="slc">-- Use a Procedure rather than Tasks:</span>

      <span class="kwa">loop</span>
         Read_Reverse_Write_a_Section_p (Job_Is_Complete);
         <span class="kwa">exit when</span> Job_Is_Complete;
      <span class="kwa">end loop</span>;

   <span class="kwa">end if</span>; <span class="slc">-- Multitasking_Version_Desired</span>

   Line_IO.Close;

<span class="kwa">end</span> Revcomp;


<span class="kwa">with</span> Ada.Unchecked_Deallocation;
<span class="kwa">with</span> Ada.Finalization;

<span class="kwa">package</span> Text_Input <span class="kwa">is</span>

   <span class="slc">-- Use Stream_IO to Read data from Standard_Input</span>

   <span class="kwa">type</span> String_Access <span class="kwa">is access</span> <span class="kwb">String</span>;
   <span class="kwa">type</span> String_Pointer (Size : <span class="kwb">Positive</span>) <span class="kwa">is new</span> Ada.Finalization.Limited_Controlled <span class="kwa">with</span>
       <span class="kwa">record</span>
          Buffer : String_Access;
       <span class="kwa">end record</span>;

   overriding <span class="kwa">procedure</span> Initialize (Object : <span class="kwa">in out</span> String_Pointer);
   overriding <span class="kwa">procedure</span> Finalize (Object : <span class="kwa">in out</span> String_Pointer);

   <span class="kwa">procedure</span> Read_Section
     (Data_Buffer     : <span class="kwa">in out</span> String_Access;
      Data_Length     :    <span class="kwa">out</span> <span class="kwb">Natural</span>;
      Next_Header     :    <span class="kwa">out</span> <span class="kwb">String</span>;
      Header_Length   :    <span class="kwa">out</span> <span class="kwb">Natural</span>;
      Max_Line_Length : <span class="kwa">in</span>     <span class="kwb">Natural</span> := <span class="num">1024</span>);

   Section_Marker : <span class="kwa">constant</span> <span class="kwb">Character</span> := <span class="str">'&gt;'</span>;

   <span class="slc">-- Read_Section reads until EOF or Section_Marker is found at start</span>
   <span class="slc">-- of a line. Can accept any line of length &lt;= Max_Line_Length.</span>

   <span class="kwa">procedure</span> Free <span class="kwa">is new</span> Ada.Unchecked_Deallocation (<span class="kwb">String</span>, String_Access);

<span class="kwa">end</span> Text_Input;

<span class="kwa">with</span> Ada.IO_Exceptions;
<span class="kwa">with</span> Line_IO;

<span class="kwa">package body</span> Text_Input <span class="kwa">is</span>

   <span class="kwa">procedure</span> Read_Section
     (Data_Buffer     : <span class="kwa">in out</span> String_Access;
      Data_Length     :    <span class="kwa">out</span> <span class="kwb">Natural</span>;
      Next_Header     :    <span class="kwa">out</span> <span class="kwb">String</span>;
      Header_Length   :    <span class="kwa">out</span> <span class="kwb">Natural</span>;
      Max_Line_Length : <span class="kwa">in</span>     <span class="kwb">Natural</span> := <span class="num">1024</span>)
   <span class="kwa">is</span>
      Ptr : String_Access;
   <span class="kwa">begin</span>
      Data_Length   := <span class="num">0</span>;
      Header_Length := <span class="num">0</span>;

      Fill_Data_Buffer:
      <span class="kwa">loop</span>
         <span class="kwa">if</span> Data_Length + Max_Line_Length &gt; Data_Buffer<span class="kwd">'Length</span> <span class="kwa">then</span>
            Ptr := Data_Buffer;
            Data_Buffer := <span class="kwa">new</span> <span class="kwb">String</span> (<span class="num">1</span> .. <span class="num">2</span> * Data_Buffer<span class="kwd">'Length</span>);
            Data_Buffer (<span class="num">1</span> .. Data_Length) := Ptr (<span class="num">1</span> .. Data_Length);
            Free (Ptr);
         <span class="kwa">end if</span>;

         Get_Next_Line:
         <span class="kwa">declare</span>
            Line : <span class="kwa">constant</span> <span class="kwb">String</span> := Line_IO.Get_Line;
            Present_Line_Length : <span class="kwa">constant</span> <span class="kwb">Natural</span> := Line<span class="kwd">'Length</span>;
            Strt : <span class="kwb">Natural</span>;
         <span class="kwa">begin</span>

            <span class="kwa">if</span> Present_Line_Length &lt; <span class="num">1</span> <span class="kwa">then</span>
               Header_Length := <span class="num">0</span>;
               <span class="kwa">exit</span> Fill_Data_Buffer;
            <span class="kwa">end if</span>;

            <span class="kwa">if</span> Present_Line_Length &gt; Max_Line_Length <span class="kwa">then</span>
               <span class="kwa">raise</span> Program_Error;
            <span class="kwa">end if</span>;

            <span class="kwa">if</span> Line(Line<span class="kwd">'First</span>) = Section_Marker <span class="kwa">then</span>
               Strt := Next_Header<span class="kwd">'First</span>;
               Next_Header(Strt .. Strt + Present_Line_Length - <span class="num">1</span>) := Line;
               Header_Length := Present_Line_Length;
               <span class="kwa">exit</span> Fill_Data_Buffer;
            <span class="kwa">else</span>
               Data_Buffer(Data_Length+<span class="num">1</span> .. Data_Length+Present_Line_Length):=Line;
               Data_Length := Data_Length + Present_Line_Length;
            <span class="kwa">end if</span>;

         <span class="kwa">end</span> Get_Next_Line;

      <span class="kwa">end loop</span> Fill_Data_Buffer;

   <span class="kwa">exception</span>
      <span class="kwa">when</span> Ada.IO_Exceptions.End_Error =&gt;
        <span class="kwa">return</span>;
   <span class="kwa">end</span> Read_Section;

   overriding <span class="kwa">procedure</span> Initialize (Object : <span class="kwa">in out</span> String_Pointer) <span class="kwa">is</span>
   <span class="kwa">begin</span>
      Object.Buffer := <span class="kwa">new</span> <span class="kwb">String</span> (<span class="num">1</span> .. Object.Size);
   <span class="kwa">end</span> Initialize;

   overriding <span class="kwa">procedure</span> Finalize (Object : <span class="kwa">in out</span> String_Pointer) <span class="kwa">is</span>
   <span class="kwa">begin</span>
      Free (Object.Buffer);
   <span class="kwa">end</span> Finalize;

<span class="kwa">end</span> Text_Input;

<span class="kwa">package</span> Line_IO <span class="kwa">is</span>

   <span class="slc">--  Stream I/O of lines of text</span>

   <span class="kwa">pragma</span> Elaborate_Body (Line_IO);

   Separator : <span class="kwa">constant</span> <span class="kwb">String</span> := (<span class="num">1</span> =&gt; ASCII.LF);

   <span class="kwa">procedure</span> Put_Line (Item : <span class="kwb">String</span>);

   <span class="kwa">procedure</span> Put (Item : <span class="kwb">String</span>);

   <span class="kwa">function</span> Get_Line <span class="kwa">return</span> <span class="kwb">String</span>;

   <span class="kwa">procedure</span> Close;  <span class="slc">--  close output</span>

<span class="kwa">end</span> Line_IO;


<span class="kwa">with</span> Ada.Streams.Stream_IO;

<span class="kwa">package body</span> Line_IO <span class="kwa">is</span>

   <span class="kwa">use</span> Ada.Streams;

   <span class="kwa">subtype</span> Separator_Index <span class="kwa">is</span> Stream_Element_Offset
       <span class="kwa">range</span> <span class="num">0</span> .. Separator<span class="kwd">'Length</span> - <span class="num">1</span>;
   Separator_Bytes : <span class="kwa">constant</span> Stream_Element_Array (Separator_Index) :=
       (<span class="num">0</span> =&gt; <span class="kwb">Character</span><span class="kwd">'Pos</span> (Separator (<span class="num">1</span>)));
   <span class="slc">--  Converts Separator into type Stream_Element_Array. Used by Put_Line.</span>

   Stdin  : Stream_IO.File_Type;
   Stdout : Stream_IO.File_Type;

   <span class="kwa">procedure</span> Put_Line (Item : <span class="kwb">String</span>) <span class="kwa">is</span>
      <span class="kwa">subtype</span> Index <span class="kwa">is</span> Stream_Element_Offset <span class="kwa">range</span> <span class="num">1</span> .. Item<span class="kwd">'Length</span>;
      <span class="kwa">subtype</span> XBytes <span class="kwa">is</span> Stream_Element_Array (Index);
      Item_Bytes: XBytes;
      <span class="kwa">pragma</span> Import (Ada, Item_Bytes);
      <span class="kwa">for</span> Item_Bytes<span class="kwd">'Address</span> <span class="kwa">use</span> Item<span class="kwd">'Address</span>;
      <span class="kwa">pragma</span> Assert (Item<span class="kwd">'Size</span> = Item_Bytes<span class="kwd">'Size</span>);
   <span class="kwa">begin</span>
      Stream_IO.Write (Stdout, Item_Bytes);
      Stream_IO.Write (Stdout, Separator_Bytes);
   <span class="kwa">end</span> Put_Line;

   <span class="kwa">procedure</span> Put (Item : <span class="kwb">String</span>) <span class="kwa">is</span>
      <span class="kwa">subtype</span> Index <span class="kwa">is</span> Stream_Element_Offset <span class="kwa">range</span> <span class="num">1</span> .. Item<span class="kwd">'Length</span>;
      <span class="kwa">subtype</span> XBytes <span class="kwa">is</span> Stream_Element_Array (Index);
      Item_Bytes: XBytes;
      <span class="kwa">pragma</span> Import (Ada, Item_Bytes);
      <span class="kwa">for</span> Item_Bytes<span class="kwd">'Address</span> <span class="kwa">use</span> Item<span class="kwd">'Address</span>;
      <span class="kwa">pragma</span> Assert (Item<span class="kwd">'Size</span> = Item_Bytes<span class="kwd">'Size</span>);
   <span class="kwa">begin</span>
      Stream_IO.Write (Stdout, Item_Bytes);
   <span class="kwa">end</span> Put;

   <span class="slc">--  Declarations associated with filling a text buffer.</span>

   BUFSIZ: <span class="kwa">constant</span> := <span class="num">8</span>_192 * <span class="num">8</span>;
   <span class="kwa">pragma</span> Assert(<span class="kwb">Character</span><span class="kwd">'Size</span> = Stream_Element<span class="kwd">'Size</span>);

   SL : <span class="kwa">constant</span> <span class="kwb">Natural</span>   := Separator<span class="kwd">'Length</span>;

   <span class="kwa">subtype</span> Extended_Buffer_Index <span class="kwa">is</span> <span class="kwb">Positive</span> <span class="kwa">range</span> <span class="num">1</span> .. BUFSIZ + SL;
   <span class="kwa">subtype</span> Buffer_Index <span class="kwa">is</span> Extended_Buffer_Index
     <span class="kwa">range</span> Extended_Buffer_Index<span class="kwd">'First</span> .. Extended_Buffer_Index<span class="kwd">'Last</span> - SL;
   <span class="kwa">subtype</span> Extended_Bytes_Index <span class="kwa">is</span> Stream_Element_Offset
     <span class="kwa">range</span> <span class="num">1</span> .. Stream_Element_Offset(Extended_Buffer_Index<span class="kwd">'Last</span>);
   <span class="kwa">subtype</span> Bytes_Index <span class="kwa">is</span> Extended_Bytes_Index
     <span class="kwa">range</span> Extended_Bytes_Index<span class="kwd">'First</span>
     .. (Extended_Bytes_Index<span class="kwd">'Last</span> - Stream_Element_Offset(SL));

   <span class="kwa">subtype</span> Buffer_Data <span class="kwa">is</span> <span class="kwb">String</span>(Extended_Buffer_Index);
   <span class="kwa">subtype</span> Buffer_Bytes <span class="kwa">is</span> Stream_Element_Array(Extended_Bytes_Index);

   Buffer : Buffer_Data;
   Bytes  : Buffer_Bytes;
   <span class="kwa">for</span> Bytes<span class="kwd">'Address</span> <span class="kwa">use</span> Buffer<span class="kwd">'Address</span>;
   <span class="kwa">pragma</span> Import (Ada, Bytes);

   <span class="slc">-- start of next substring and last valid character in buffer</span>
   Position : <span class="kwb">Natural</span> <span class="kwa">range</span> <span class="num">0</span> .. Extended_Buffer_Index<span class="kwd">'Last</span>;
   Last     : <span class="kwb">Natural</span> <span class="kwa">range</span> <span class="num">0</span> .. Buffer_Index<span class="kwd">'Last</span>;
   End_Of_Input : <span class="kwb">Boolean</span>;

   <span class="kwa">function</span> Get_Line <span class="kwa">return</span> <span class="kwb">String</span> <span class="kwa">is</span>

      <span class="kwa">procedure</span> Reload <span class="kwa">is</span>
         <span class="slc">--  fill Buffer with bytes available</span>
         Last_Filled : Stream_Element_Offset;
      <span class="kwa">begin</span>
         <span class="kwa">if</span> Last &lt; Buffer_Index<span class="kwd">'Last</span> <span class="kwa">then</span>
            <span class="kwa">raise</span> Stream_IO.End_Error;
         <span class="kwa">end if</span>;
         Stream_IO.Read(Stdin,
           Item =&gt; Bytes(Bytes_Index),
           Last =&gt; Last_Filled);
         Last := <span class="kwb">Natural</span>(Last_Filled);
         Position := <span class="num">1</span>;
         Buffer(Last + <span class="num">1</span> .. Last + SL) := Separator;
      <span class="kwa">end</span> Reload;

      <span class="kwa">function</span> Separator_Position <span class="kwa">return</span> <span class="kwb">Natural</span> <span class="kwa">is</span>
         <span class="slc">--   index of next Separator_Sequence (may be sentinel)</span>
         K : Extended_Buffer_Index := Position;
      <span class="kwa">begin</span>
         <span class="kwa">loop</span>
            <span class="kwa">if</span> Buffer(K) = Separator(<span class="num">1</span>) <span class="kwa">then</span>
               <span class="kwa">exit</span>;
            <span class="kwa">elsif</span> Buffer(K+<span class="num">1</span>) = Separator(<span class="num">1</span>) <span class="kwa">then</span>
               K := K + <span class="num">1</span>; <span class="kwa">exit</span>;
            <span class="kwa">else</span>
               K := K + <span class="num">2</span>;
            <span class="kwa">end if</span>;
         <span class="kwa">end loop</span>;
        <span class="kwa">return</span> K;
      <span class="kwa">end</span> Separator_Position;

      Next_Separator : <span class="kwb">Natural</span> <span class="kwa">range</span> <span class="num">0</span> .. Extended_Buffer_Index<span class="kwd">'Last</span>;
   <span class="kwa">begin</span>  <span class="slc">-- Get_Line</span>

      <span class="kwa">if</span> End_Of_Input <span class="kwa">then</span>
         <span class="kwa">raise</span> Stream_IO.End_Error;
      <span class="kwa">end if</span>;

      Next_Separator := Separator_Position;

      <span class="kwa">if</span> Next_Separator &gt; Last <span class="kwa">then</span>
         <span class="kwa">declare</span>
            Result : <span class="kwa">constant</span> <span class="kwb">String</span> := Buffer(Position .. Last);
            <span class="kwa">subtype</span> XString <span class="kwa">is</span> <span class="kwb">String</span> (<span class="num">1</span> .. Last - Position + <span class="num">1</span>);
         <span class="kwa">begin</span>
            <span class="kwa">begin</span>
               Reload;
               <span class="kwa">return</span> XString(Result) &amp; Get_Line;
            <span class="kwa">exception</span>
               <span class="kwa">when</span> Stream_IO.End_Error =&gt;
                  End_Of_Input := <span class="kwd">True</span>;
                  <span class="kwa">return</span> XString(Result);
            <span class="kwa">end</span>;
         <span class="kwa">end</span>;
      <span class="kwa">else</span>
         <span class="kwa">declare</span>
            Result : <span class="kwb">String</span> <span class="kwa">renames</span> Buffer(Position .. Next_Separator - <span class="num">1</span>);
            <span class="kwa">subtype</span> XString <span class="kwa">is</span> <span class="kwb">String</span> (<span class="num">1</span> .. Next_Separator - Position);
         <span class="kwa">begin</span>
            Position := Next_Separator + SL;
            <span class="kwa">return</span> XString (Result);
         <span class="kwa">end</span>;
      <span class="kwa">end if</span>;

      <span class="kwa">raise</span> Program_Error;
   <span class="kwa">end</span> Get_Line;

   <span class="kwa">procedure</span> Close <span class="kwa">is</span>
   <span class="kwa">begin</span>
      Stream_IO.Close (Stdout);
   <span class="kwa">end</span> Close;

<span class="kwa">begin</span>
   Stream_IO.Open (Stdout,
      Mode =&gt; Stream_IO.Out_File,
      Name =&gt; <span class="str">&quot;/dev/stdout&quot;</span>);
   Stream_IO.Open (Stdin,
      Mode =&gt; Stream_IO.In_File,
      Name =&gt; <span class="str">&quot;/dev/stdin&quot;</span>);

   Buffer(Buffer_Index<span class="kwd">'Last</span> + <span class="num">1</span> .. Buffer<span class="kwd">'Last</span>) := Separator;
   Position := Buffer_Index<span class="kwd">'Last</span> + <span class="num">1</span>;
   Last     := Buffer_Index<span class="kwd">'Last</span>;
   End_Of_Input := <span class="kwd">False</span>;
<span class="kwa">end</span> Line_IO;

