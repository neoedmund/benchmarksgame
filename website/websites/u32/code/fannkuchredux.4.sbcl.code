<span class="slc">;;   The Computer Language Benchmarks Game</span>
<span class="slc">;;   http://benchmarksgame.alioth.debian.org/</span>
<span class="slc">;;;</span>
<span class="slc">;;; By Jon Smith (rev 4)</span>
<span class="slc">;;; </span>
<span class="slc">;;; This is a multi core implementation. It should be quite fast.</span>
<span class="slc">;;; It is now a mix of multiple techniques stolen from a number of other implementations.</span>
<span class="slc">;;; (It is essentially based on every other implementation available)</span>
<span class="slc">;;;</span>
<span class="slc">;;; To compile</span>
<span class="slc">;;; sbcl --load fannkuch.lisp --eval &quot;(save-lisp-and-die \&quot;fannkuch.core\&quot; :purify t :toplevel (lambda () (main) (quit)))&quot;</span>
<span class="slc">;;; To run</span>
<span class="slc">;;; sbcl --noinform --core fannkuch.core %A</span>
<span class="slc">;(setf *efficiency-note-cost-threshold* 1)</span>
<span class="slc">;(setf *efficiency-note-limit* 8)</span>

(<span class="kwa">declaim</span> (<span class="kwa">optimize</span> (<span class="kwa">speed</span> <span class="num">3</span>) (<span class="kwa">safety</span> <span class="num">0</span>) (<span class="kwa">space</span> <span class="num">1</span>) (<span class="kwa">debug</span> <span class="num">0</span>)))

(<span class="kwa">defmacro</span> sb (<span class="kwa">a</span>) `(<span class="kwa">the</span> fixnum ,a))
(<span class="kwa">deftype</span> sb () 'fixnum)

(<span class="kwa">defmacro</span> setlambda(<span class="kwa">n</span>)
  (<span class="kwa">declare</span> (<span class="kwa">type</span> fixnum n))
  (<span class="kwa">let</span> ((<span class="kwa">copy</span> (<span class="kwa">gensym</span>))
	(<span class="kwa">perm</span> (<span class="kwa">gensym</span>)))
  `(<span class="kwa">lambda</span> (,perm ,copy)
     (<span class="kwa">declare</span> (<span class="kwa">optimize</span> (<span class="kwa">speed</span> <span class="num">3</span>) (<span class="kwa">safety</span> <span class="num">0</span>) (<span class="kwa">space</span> <span class="num">0</span>) (<span class="kwa">debug</span> <span class="num">0</span>))
      (<span class="kwa">type</span> (<span class="kwa">simple-array</span> sb (,n)) ,copy ,perm))
     ,&#64;(<span class="kwa">loop</span> for i of-type fixnum from <span class="num">0</span> below n collect
	    `(<span class="kwa">setf</span> (<span class="kwa">aref</span> ,copy ,i) (<span class="kwa">aref</span> ,perm ,i))))))

(<span class="kwa">defmacro</span> countfliplambda (<span class="kwa">n</span>)
  (<span class="kwa">declare</span> (<span class="kwa">type</span> fixnum n))
  (<span class="kwa">let</span> ((<span class="kwa">copy</span> (<span class="kwa">gensym</span>))
	(<span class="kwa">c</span> (<span class="kwa">gensym</span>))
	(<span class="kwa">z</span> (<span class="kwa">gensym</span>)))
    `(<span class="kwa">lambda</span> (,copy &amp;aux (,c <span class="num">0</span>))
       (<span class="kwa">declare</span> (<span class="kwa">optimize</span> (<span class="kwa">speed</span> <span class="num">3</span>) (<span class="kwa">safety</span> <span class="num">0</span>) (<span class="kwa">space</span> <span class="num">0</span>) (<span class="kwa">debug</span> <span class="num">0</span>))
		(<span class="kwa">type</span> sb ,c)
		(<span class="kwa">type</span> (<span class="kwa">simple-array</span> sb (,n)) ,copy))
       (<span class="kwa">let</span> ((,z (<span class="kwa">aref</span> ,copy <span class="num">0</span>)))
	 (<span class="kwa">loop</span> until (= ,z <span class="num">0</span>) do
	      (<span class="kwa">progn</span>
		(<span class="kwa">case</span> ,z 
		  ,&#64;(<span class="kwa">loop</span> for i of-type sb from <span class="num">1</span> to (<span class="kwa">-</span> n <span class="num">1</span>) collect
			 `(,i
			   ,&#64;(<span class="kwa">loop</span> for j of-type sb from <span class="num">0</span> to (<span class="kwa">ash</span> i -<span class="num">1</span>)
				if (<span class="kwa">not</span> (= j (<span class="kwa">-</span> i j)))
				collect `(<span class="kwa">rotatef</span> (<span class="kwa">aref</span> ,copy ,j) 
						  (<span class="kwa">aref</span> ,copy ,(<span class="kwa">-</span> i j)))))))
		(<span class="kwa">incf</span> ,c)
		(<span class="kwa">setf</span> ,z (<span class="kwa">aref</span> ,copy <span class="num">0</span>)))))
       ,c)))
(<span class="kwa">eval-when</span> (:compile-toplevel :load-toplevel :execute)
  (<span class="kwa">defun</span> factorial (<span class="kwa">n</span>)
    (<span class="kwa">declare</span> (<span class="kwa">type</span> fixnum n))
    (<span class="kwa">if</span> (&gt; n <span class="num">2</span>)
	(* n (<span class="kwa">factorial</span> (<span class="kwa">-</span> n <span class="num">1</span>)))
	n)))

(<span class="kwa">let</span> ((<span class="kwa">factorial-array</span> (<span class="kwa">apply</span> #'vector (<span class="kwa">loop</span> for i from <span class="num">1</span> to <span class="num">16</span> collect (<span class="kwa">factorial</span> i)))))
  (<span class="kwa">declare</span> (<span class="kwa">type</span> (<span class="kwa">simple-array</span> fixnum (*))))
  (<span class="kwa">defun</span> pre-computed-factorial (<span class="kwa">n</span>)
    (<span class="kwa">declare</span> (<span class="kwa">type</span> fixnum n))
    (<span class="kwa">aref</span> factorial-array (<span class="kwa">-</span> n <span class="num">1</span>))))


(<span class="kwa">defun</span> nth-permutation (<span class="kwa">perm</span> copy count idx &amp;optional (<span class="kwa">len</span> (<span class="kwa">length</span> perm)))
  (<span class="kwa">declare</span> (<span class="kwa">type</span> (<span class="kwa">simple-array</span> fixnum (*)) perm copy count)
	   (<span class="kwa">type</span> fixnum idx len))
  (<span class="kwa">loop</span> for i from <span class="num">0</span> below len do (<span class="kwa">setf</span> (<span class="kwa">aref</span> perm i) i))
  (<span class="kwa">loop</span> for i of-type fixnum from (<span class="kwa">-</span> len <span class="num">1</span>) above <span class="num">0</span> do
       (<span class="kwa">let</span> ((<span class="kwa">d</span> (<span class="kwa">truncate</span> idx (<span class="kwa">the</span> fixnum (<span class="kwa">pre-computed-factorial</span> i)))))
	 (<span class="kwa">declare</span> (<span class="kwa">type</span> fixnum d))
	 (<span class="kwa">setf</span> (<span class="kwa">aref</span> count i) d)
	 (<span class="kwa">setf</span> idx (<span class="kwa">the</span> fixnum (<span class="kwa">mod</span> idx (<span class="kwa">the</span> fixnum(<span class="kwa">pre-computed-factorial</span> i)))))
	 (<span class="kwa">loop</span> for m of-type fixnum from <span class="num">0</span> to i do (<span class="kwa">setf</span> (<span class="kwa">aref</span> copy m) (<span class="kwa">aref</span> perm m)))
	 (<span class="kwa">loop</span> for j of-type fixnum from <span class="num">0</span> to i do
	      (<span class="kwa">if</span> (&lt;= (+ j d) i)
		  (<span class="kwa">setf</span> (<span class="kwa">aref</span> perm j) (<span class="kwa">aref</span> copy (+ j d)))
		  (<span class="kwa">setf</span> (<span class="kwa">aref</span> perm j) (<span class="kwa">aref</span> copy (<span class="kwa">-</span> (<span class="kwa">sb</span> (+ j d)) i <span class="num">1</span>))))))))

(<span class="kwa">defun</span> next-permutation (<span class="kwa">perm</span> count)
  (<span class="kwa">Declare</span> (<span class="kwa">type</span> (<span class="kwa">simple-array</span> sb (*)) perm count))
  (<span class="kwa">let</span> ((<span class="kwa">first</span> (<span class="kwa">aref</span> perm <span class="num">1</span>)))
    (<span class="kwa">setf</span> (<span class="kwa">aref</span> perm <span class="num">1</span>) (<span class="kwa">aref</span> perm <span class="num">0</span>))
    (<span class="kwa">setf</span> (<span class="kwa">aref</span> perm <span class="num">0</span>) first)
    (<span class="kwa">let</span> ((<span class="kwa">i</span> <span class="num">1</span>))
      (<span class="kwa">incf</span> (<span class="kwa">aref</span> count i))
      (<span class="kwa">do</span> ()
	  ((<span class="kwa">not</span> (&gt; (<span class="kwa">aref</span> count i) i)))
	(<span class="kwa">setf</span> (<span class="kwa">aref</span> count i) <span class="num">0</span>)
	(<span class="kwa">incf</span> i)
	(<span class="kwa">setf</span> (<span class="kwa">aref</span> perm <span class="num">0</span>) (<span class="kwa">aref</span> perm <span class="num">1</span>))
	(<span class="kwa">let</span> ((<span class="kwa">next-first</span> (<span class="kwa">aref</span> perm <span class="num">1</span>)))
	  (<span class="kwa">loop</span> for j from <span class="num">1</span> below i do
	       (<span class="kwa">setf</span> (<span class="kwa">aref</span> perm j) (<span class="kwa">aref</span> perm (+ j <span class="num">1</span>))))
	  (<span class="kwa">setf</span> (<span class="kwa">aref</span> perm i) first)
	  (<span class="kwa">setf</span> first next-first))
	(<span class="kwa">incf</span> (<span class="kwa">aref</span> count i))))))



(<span class="kwa">defun</span> fannkuch (<span class="kwa">n</span>)  
  (<span class="kwa">declare</span> (<span class="kwa">type</span> fixnum n))
  (<span class="kwa">flet</span> ((<span class="kwa">fannkuch-sub</span> (<span class="kwa">n</span> cflip copyfn start end)
	   (<span class="kwa">declare</span> (<span class="kwa">type</span> sb n start end)
		    (<span class="kwa">type</span> (<span class="kwa">function</span> ((<span class="kwa">simple-array</span> sb (*)))) cflip)
		    (<span class="kwa">type</span> (<span class="kwa">function</span> ((<span class="kwa">simple-array</span> sb (*)) (<span class="kwa">simple-array</span> sb (*)))) copyfn))
	   (<span class="kwa">let</span> ((<span class="kwa">csum</span> <span class="num">0</span>)
		 (<span class="kwa">fmax</span> <span class="num">0</span>)
		 (<span class="kwa">count</span> (<span class="kwa">make-array</span> n :element-type 'fixnum))
		 (<span class="kwa">copy</span> (<span class="kwa">make-array</span> n :element-type 'fixnum))
		 (<span class="kwa">perm</span> (<span class="kwa">make-array</span> n :element-type 'fixnum)))
	     (<span class="kwa">declare</span> (<span class="kwa">type</span> (<span class="kwa">simple-array</span> sb (*)) perm copy count)
		      (<span class="kwa">type</span> sb  csum fmax))
	     (<span class="kwa">nth-permutation</span> perm copy count start n)
	     (<span class="kwa">dotimes</span> (<span class="kwa">i</span> (<span class="kwa">-</span> end start))
	       (<span class="kwa">funcall</span> copyfn perm copy)
	       (<span class="kwa">let</span> ((<span class="kwa">c</span> (<span class="kwa">funcall</span> cflip copy)))
		 (<span class="kwa">declare</span> (<span class="kwa">type</span> sb c))
		 (<span class="kwa">setf</span> csum (<span class="kwa">sb</span> (+ csum  (<span class="kwa">sb</span> (<span class="kwa">if</span> (<span class="kwa">evenp</span> i) c (<span class="kwa">-</span> c))))))
		 (<span class="kwa">when</span> (&gt; c fmax)
		   (<span class="kwa">setf</span> fmax c)))
	       (<span class="kwa">when</span> (&lt; (+ <span class="num">1</span> i) end)
		 (<span class="kwa">next-permutation</span> perm count)))
	     (<span class="kwa">values</span> csum fmax))))


    (<span class="kwa">let</span>* ((<span class="kwa">cflip</span> (<span class="kwa">the</span> (<span class="kwa">function</span> ((<span class="kwa">simple-array</span> sb (*)))) (<span class="kwa">eval</span> `(<span class="kwa">countfliplambda</span> ,n))))
	   (<span class="kwa">copyfn</span> (<span class="kwa">the</span> (<span class="kwa">function</span> ((<span class="kwa">simple-array</span> sb (*)) (<span class="kwa">simple-array</span> sb (*)))) (<span class="kwa">eval</span> `(<span class="kwa">setlambda</span> ,n))))
	   (<span class="kwa">csum</span> <span class="num">0</span>) (<span class="kwa">fmax</span> <span class="num">0</span>))
      (<span class="kwa">declare</span> (<span class="kwa">type</span> sb csum fmax))
      #-sb-thread (<span class="kwa">multiple-value-setq</span> (<span class="kwa">csum</span> fmax) (<span class="kwa">fannkuch-sub</span> n cflip copyfn <span class="num">0</span> (<span class="kwa">pre-computed-factorial</span> n)))

      #+sb-thread
      (<span class="kwa">let</span>* ((<span class="kwa">cores</span> <span class="num">4</span>)
	     (<span class="kwa">index</span> <span class="num">0</span>)
	     (<span class="kwa">index-step</span> (<span class="kwa">truncate</span> (<span class="kwa">the</span> fixnum (+ (<span class="kwa">the</span> fixnum (<span class="kwa">pre-computed-factorial</span> n)) (<span class="kwa">-</span> cores <span class="num">1</span>))) cores))
	     (<span class="kwa">threads</span> (<span class="kwa">loop</span> for i from <span class="num">0</span> below cores
			 collecting  (<span class="kwa">sb-thread</span>:make-thread (<span class="kwa">let</span> ((<span class="kwa">start</span> index) (<span class="kwa">end</span> (+ index index-step)))
							      (<span class="kwa">declare</span> (<span class="kwa">fixnum</span> start end))
							      (<span class="kwa">lambda</span> () (<span class="kwa">fannkuch-sub</span> n cflip copyfn start end))))
			 do (<span class="kwa">The</span> fixnum (<span class="kwa">incf</span> index index-step)))))
	(<span class="kwa">declare</span> (<span class="kwa">type</span> fixnum cores index index index-step))
	(<span class="kwa">dolist</span> (<span class="kwa">thread</span> threads) 
	  (<span class="kwa">multiple-value-bind</span> (<span class="kwa">sum</span> max) (<span class="kwa">sb-thread</span>:join-thread thread)
	    (<span class="kwa">declare</span> (<span class="kwa">type</span> fixnum sum max))
	    (<span class="kwa">incf</span> csum sum)
	    (<span class="kwa">when</span> (&gt; max fmax)
	      (<span class="kwa">setf</span> fmax max)))))
      (<span class="kwa">format</span> t <span class="str">&quot;~s~%Pfannkuchen(~s) = ~s~%&quot;</span> csum n fmax))))

(<span class="kwa">defun</span> main ()  
  (<span class="kwa">let</span>* ((<span class="kwa">args</span> (<span class="kwa">cdr</span> sb-ext:*posix-argv*))
         (<span class="kwa">n</span> (<span class="kwa">parse-integer</span> (<span class="kwa">car</span> args))))
    (<span class="kwa">declare</span> (<span class="kwa">type</span> fixnum n))
    (<span class="kwa">fannkuch</span> n)))
