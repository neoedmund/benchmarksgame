<span class="slc">-- The Computer Language Benchmarks Game</span>
<span class="slc">-- http://benchmarksgame.alioth.debian.org/</span>
<span class="slc">-- contributed by Mike Pall</span>
<span class="slc">-- requires LGMP &quot;A GMP package for Lua 5.1&quot;</span>
<span class="slc">-- with matrix optimization, courtesy of Wim Couwenberg</span>

<span class="kwa">local</span> g, aux = {}, {}
require<span class="str">&quot;c-gmp&quot;</span>(g, aux)
<span class="kwa">local</span> add, mul, div = g.mpz_add, g.mpz_mul_si, g.mpz_tdiv_q
<span class="kwa">local</span> init, get = g.mpz_init_set_d, g.mpz_get_d

<span class="kwa">local</span> u, v, w

<span class="kwa">local function</span> <span class="kwd">produce</span>(n1, n2, d, k)
  <span class="kwd">mul</span>(n1, <span class="num">2</span>*k-<span class="num">1</span>, u)
  <span class="kwd">add</span>(n2, n2, v)
  <span class="kwd">mul</span>(n1, k-<span class="num">1</span>, w)
  <span class="kwd">add</span>(u, v, n1)
  <span class="kwd">mul</span>(n2, k+<span class="num">2</span>, u)
  <span class="kwd">add</span>(w, u, n2)
  <span class="kwd">mul</span>(d, <span class="num">2</span>*k+<span class="num">1</span>, d)
<span class="kwa">end</span>

<span class="kwa">local function</span> <span class="kwd">extract</span>(n1, n2, d, y)
  <span class="kwd">mul</span>(d, -<span class="num">10</span>*y, u)
  <span class="kwd">mul</span>(n1, <span class="num">10</span>, n1)
  <span class="kwd">add</span>(n1, u, n1)
  <span class="kwd">mul</span>(n2, <span class="num">10</span>, n2)
  <span class="kwd">add</span>(n2, u, n2)
<span class="kwa">end</span>

<span class="kwa">local function</span> <span class="kwd">digit</span>(n1, n2, d)
  <span class="kwa">local</span> y = <span class="kwd">get</span>(<span class="kwd">div</span>(n1, d, u))
  <span class="kwa">if</span> y == <span class="kwd">get</span>(<span class="kwd">div</span>(n2, d, v)) <span class="kwa">then return</span> y <span class="kwa">end</span>
<span class="kwa">end</span>

<span class="slc">-- Generate successive digits of PI.</span>
<span class="kwa">local function</span> <span class="kwd">pidigits</span>(N)
  <span class="kwa">local</span> <span class="kwb">write</span> = io.<span class="kwb">write</span>
  <span class="kwa">local</span> k = <span class="num">1</span>
  <span class="kwa">local</span> n1, n2, d = <span class="kwd">init</span>(<span class="num">4</span>), <span class="kwd">init</span>(<span class="num">3</span>), <span class="kwd">init</span>(<span class="num">1</span>)
  u, v, w = <span class="kwd">init</span>(<span class="num">0</span>), <span class="kwd">init</span>(<span class="num">0</span>), <span class="kwd">init</span>(<span class="num">0</span>)
  <span class="kwa">local</span> i = <span class="num">0</span>
  <span class="kwa">while</span> i &lt; N <span class="kwa">do</span>
    <span class="kwa">local</span> y = <span class="kwd">digit</span>(n1, n2, d)
    <span class="kwa">if</span> y <span class="kwa">then</span>
      <span class="kwb">write</span>(y)
      i = i + <span class="num">1</span>; <span class="kwa">if</span> i % <span class="num">10</span> == <span class="num">0</span> <span class="kwa">then</span> <span class="kwb">write</span>(<span class="str">&quot;</span><span class="esc">\t</span><span class="str">:&quot;</span>, i, <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span>) <span class="kwa">end</span>
      <span class="kwd">extract</span>(n1, n2, d, y)
    <span class="kwa">else</span>
      <span class="kwd">produce</span>(n1, n2, d, k)
      k = k + <span class="num">1</span>
    <span class="kwa">end</span>
  <span class="kwa">end</span>
  <span class="kwa">if</span> i % <span class="num">10</span> ~= <span class="num">0</span> <span class="kwa">then</span> <span class="kwb">write</span>(<span class="kwb">string</span>.<span class="kwd">rep</span>(<span class="str">&quot; &quot;</span>, <span class="num">10</span> - N % <span class="num">10</span>), <span class="str">&quot;</span><span class="esc">\t</span><span class="str">:&quot;</span>, N, <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span>) <span class="kwa">end</span>
<span class="kwa">end</span>

<span class="kwa">local</span> N = <span class="kwb">tonumber</span>(arg <span class="kwa">and</span> arg[<span class="num">1</span>]) <span class="kwa">or</span> <span class="num">27</span>
<span class="kwd">pidigits</span>(N)
