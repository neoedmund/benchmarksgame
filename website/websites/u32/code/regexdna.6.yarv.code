<span class="slc"># The Computer Language Benchmarks Game</span>
<span class="slc"># http://benchmarksgame.alioth.debian.org</span>
<span class="slc">#</span>
<span class="slc"># contributed by jose fco. gonzalez</span>
<span class="slc"># optimized &amp; parallelized by Rick Branson</span>
<span class="slc"># optimized for ruby2 by Aaron Tavistock</span>

<span class="kwa">require</span> <span class="str">'fiber'</span>

seq = <span class="kwb">$stdin</span>.read.<span class="kwd">force_encoding</span>(<span class="str">&quot;ASCII-8BIT&quot;</span><span class="opt">)</span>
origin_len = seq.size

seq.gsub!(<span class="kwc">/&gt;.*\n|\n/</span>,<span class="str">''</span><span class="opt">)</span>
clean_len = seq.size

matchers = [
  <span class="str">'agggtaaa|tttaccct'</span>,
  <span class="str">'[cgt]gggtaaa|tttaccc[acg]'</span>,
  <span class="str">'a[act]ggtaaa|tttacc[agt]t'</span>,
  <span class="str">'ag[act]gtaaa|tttac[agt]ct'</span>,
  <span class="str">'agg[act]taaa|ttta[agt]cct'</span>,
  <span class="str">'aggg[acg]aaa|ttt[cgt]ccct'</span>,
  <span class="str">'agggt[cgt]aa|tt[acg]accct'</span>,
  <span class="str">'agggta[cgt]a|t[acg]taccct'</span>,
  <span class="str">'agggtaa[cgt]|[acg]ttaccct'</span>
]

results = matchers.map <span class="kwa">do</span> |matcher|
  Fiber.new <span class="kwa">do</span>
    count = seq.<span class="kwd">scan</span>( Regexp.<span class="kwd">new</span>(matcher<span class="opt">) )</span>.size
    Fiber.<span class="kwa">yield</span> <span class="str">&quot;</span><span class="ipl">#{matcher}</span> <span class="str"></span><span class="ipl">#{count}</span><span class="str">&quot;</span>
  <span class="kwa">end</span>.resume
<span class="kwa">end</span>

replacements = {
  <span class="str">'B'</span> =&gt; <span class="str">'(c|g|t)</span><span class="str">',</span>
<span class="str">  '</span>D<span class="str">' =&gt; '</span>(a|g|t<span class="opt">)</span><span class="str">',</span>
<span class="str">  '</span>H<span class="str">' =&gt; '</span>(a|c|t<span class="opt">)</span><span class="str">',</span>
<span class="str">  '</span>K<span class="str">' =&gt; '</span>(g|t<span class="opt">)</span><span class="str">',</span>
<span class="str">  '</span>M<span class="str">' =&gt; '</span>(a|c<span class="opt">)</span><span class="str">',</span>
<span class="str">  '</span>N<span class="str">' =&gt; '</span>(a|c|g|t<span class="opt">)</span><span class="str">',</span>
<span class="str">  '</span>R<span class="str">' =&gt; '</span>(a|g<span class="opt">)</span><span class="str">',</span>
<span class="str">  '</span>S<span class="str">' =&gt; '</span>(c|t<span class="opt">)</span><span class="str">',</span>
<span class="str">  '</span>V<span class="str">' =&gt; '</span>(a|c|g<span class="opt">)</span><span class="str">',</span>
<span class="str">  '</span>W<span class="str">' =&gt; '</span>(a|t<span class="opt">)</span><span class="str">',</span>
<span class="str">  '</span>Y<span class="str">' =&gt; '</span>(c|t<span class="opt">)</span><span class="str">'</span>
<span class="str">}</span>
<span class="str">seq.gsub!(Regexp.new(replacements.keys.join('</span>|<span class="str">')</span><span class="opt">)</span>, replacements<span class="opt">)</span>

puts <span class="str">&quot;</span><span class="ipl">#{results.join(&quot;\n&quot;)}</span><span class="str"></span><span class="esc">\n\n</span><span class="str"></span><span class="ipl">#{origin_len}</span><span class="str"></span><span class="esc">\n</span><span class="str"></span><span class="ipl">#{clean_len}</span><span class="str"></span><span class="esc">\n</span><span class="str"></span><span class="ipl">#{seq.size}</span><span class="str">&quot;</span>
