<span class="slc">-- The Computer Language Benchmarks Game</span>
<span class="slc">-- http://benchmarksgame.alioth.debian.org/</span>
<span class="slc">-- contributed by Mike Pall</span>

<span class="kwa">local</span> Last = <span class="num">42</span>
<span class="kwa">local function</span> <span class="kwb">random</span>(<span class="kwb">max</span>)
  <span class="kwa">local</span> y = (Last * <span class="num">3877</span> + <span class="num">29573</span>) % <span class="num">139968</span>
  Last = y
  <span class="kwa">return</span> (<span class="kwb">max</span> * y) / <span class="num">139968</span>
<span class="kwa">end</span>

<span class="kwa">local function</span> <span class="kwd">make_repeat_fasta</span>(id, desc, s, n)
  <span class="kwa">local</span> <span class="kwb">write</span>, sub = io.<span class="kwb">write</span>, <span class="kwb">string</span>.sub
  <span class="kwb">write</span>(<span class="str">&quot;&gt;&quot;</span>, id, <span class="str">&quot; &quot;</span>, desc, <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span>)
  <span class="kwa">local</span> p, sn, s2 = <span class="num">1</span>, #s, s..s
  <span class="kwa">for</span> i=<span class="num">60</span>,n,<span class="num">60</span> <span class="kwa">do</span>
    <span class="kwb">write</span>(<span class="kwd">sub</span>(s2, p, p + <span class="num">59</span>), <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span>)
    p = p + <span class="num">60</span>; <span class="kwa">if</span> p &gt; sn <span class="kwa">then</span> p = p - sn <span class="kwa">end</span>
  <span class="kwa">end</span>
  <span class="kwa">local</span> tail = n % <span class="num">60</span>
  <span class="kwa">if</span> tail &gt; <span class="num">0</span> <span class="kwa">then</span> <span class="kwb">write</span>(<span class="kwd">sub</span>(s2, p, p + tail-<span class="num">1</span>), <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span>) <span class="kwa">end</span>
<span class="kwa">end</span>

<span class="kwa">local function</span> <span class="kwd">make_random_fasta</span>(id, desc, bs, n)
  io.<span class="kwb">write</span>(<span class="str">&quot;&gt;&quot;</span>, id, <span class="str">&quot; &quot;</span>, desc, <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span>)
  <span class="kwd">loadstring</span>([=[
    <span class="kwa">local</span> <span class="kwb">write</span>, char, unpack, n, <span class="kwb">random</span> = io.<span class="kwb">write</span>, <span class="kwb">string</span>.char, unpack, ...
    <span class="kwa">local</span> buf, p = {}, <span class="num">1</span>
    <span class="kwa">for</span> i=<span class="num">60</span>,n,<span class="num">60</span> <span class="kwa">do</span>
      <span class="kwa">for</span> j=p,p+<span class="num">59</span> <span class="kwa">do</span> ]=]..bs..[=[ <span class="kwa">end</span>
      buf[p+<span class="num">60</span>] = <span class="num">10</span>; p = p + <span class="num">61</span>
      <span class="kwa">if</span> p &gt;= <span class="num">2048</span> <span class="kwa">then</span> <span class="kwb">write</span>(<span class="kwd">char</span>(<span class="kwd">unpack</span>(buf, <span class="num">1</span>, p-<span class="num">1</span>))); p = <span class="num">1</span> <span class="kwa">end</span>
    <span class="kwa">end</span>
    <span class="kwa">local</span> tail = n % <span class="num">60</span>
    <span class="kwa">if</span> tail &gt; <span class="num">0</span> <span class="kwa">then</span>
      <span class="kwa">for</span> j=p,p+tail-<span class="num">1</span> <span class="kwa">do</span> ]=]..bs..[=[ <span class="kwa">end</span>
      p = p + tail; buf[p] = <span class="num">10</span>; p = p + <span class="num">1</span>
    <span class="kwa">end</span>
    <span class="kwb">write</span>(<span class="kwd">char</span>(<span class="kwd">unpack</span>(buf, <span class="num">1</span>, p-<span class="num">1</span>)))
  ]=], desc)(n, <span class="kwb">random</span>)
<span class="kwa">end</span>

<span class="kwa">local function</span> <span class="kwd">bisect</span>(c, p, lo, hi)
  <span class="kwa">local</span> n = hi - lo
  <span class="kwa">if</span> n == <span class="num">0</span> <span class="kwa">then return</span> <span class="str">&quot;buf[j] = &quot;</span>..c[hi]..<span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span> <span class="kwa">end</span>
  <span class="kwa">local</span> mid = math.<span class="kwb">floor</span>(n / <span class="num">2</span>)
  <span class="kwa">return</span> <span class="str">&quot;if r &lt; &quot;</span>..p[lo+mid]..<span class="str">&quot; then</span><span class="esc">\n</span><span class="str">&quot;</span>..<span class="kwd">bisect</span>(c, p, lo, lo+mid)..
         <span class="str">&quot;else</span><span class="esc">\n</span><span class="str">&quot;</span>..<span class="kwd">bisect</span>(c, p, lo+mid+<span class="num">1</span>, hi)..<span class="str">&quot;end</span><span class="esc">\n</span><span class="str">&quot;</span>
<span class="kwa">end</span>

<span class="kwa">local function</span> <span class="kwd">make_bisect</span>(tab)
  <span class="kwa">local</span> c, p, sum = {}, {}, <span class="num">0</span>
  <span class="kwa">for</span> i,row <span class="kwa">in</span> <span class="kwd">ipairs</span>(tab) <span class="kwa">do</span>
    c[i] = <span class="kwb">string</span>.<span class="kwd">byte</span>(row[<span class="num">1</span>])
    sum = sum + row[<span class="num">2</span>]
    p[i] = sum
  <span class="kwa">end</span>
  <span class="kwa">return</span> <span class="str">&quot;local r = random(1)</span><span class="esc">\n</span><span class="str">&quot;</span>..<span class="kwd">bisect</span>(c, p, <span class="num">1</span>, #tab)
<span class="kwa">end</span>

<span class="kwa">local</span> alu =
  <span class="str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span>..
  <span class="str">&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span>..
  <span class="str">&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span>..
  <span class="str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span>..
  <span class="str">&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span>..
  <span class="str">&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span>..
  <span class="str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span>

<span class="kwa">local</span> iub = make_bisect{
  { <span class="str">&quot;a&quot;</span>, <span class="num">0.27</span> },
  { <span class="str">&quot;c&quot;</span>, <span class="num">0.12</span> },
  { <span class="str">&quot;g&quot;</span>, <span class="num">0.12</span> },
  { <span class="str">&quot;t&quot;</span>, <span class="num">0.27</span> },
  { <span class="str">&quot;B&quot;</span>, <span class="num">0.02</span> },
  { <span class="str">&quot;D&quot;</span>, <span class="num">0.02</span> },
  { <span class="str">&quot;H&quot;</span>, <span class="num">0.02</span> },
  { <span class="str">&quot;K&quot;</span>, <span class="num">0.02</span> },
  { <span class="str">&quot;M&quot;</span>, <span class="num">0.02</span> },
  { <span class="str">&quot;N&quot;</span>, <span class="num">0.02</span> },
  { <span class="str">&quot;R&quot;</span>, <span class="num">0.02</span> },
  { <span class="str">&quot;S&quot;</span>, <span class="num">0.02</span> },
  { <span class="str">&quot;V&quot;</span>, <span class="num">0.02</span> },
  { <span class="str">&quot;W&quot;</span>, <span class="num">0.02</span> },
  { <span class="str">&quot;Y&quot;</span>, <span class="num">0.02</span> },
}

<span class="kwa">local</span> homosapiens = make_bisect{
  { <span class="str">&quot;a&quot;</span>, <span class="num">0.3029549426680</span> },
  { <span class="str">&quot;c&quot;</span>, <span class="num">0.1979883004921</span> },
  { <span class="str">&quot;g&quot;</span>, <span class="num">0.1975473066391</span> },
  { <span class="str">&quot;t&quot;</span>, <span class="num">0.3015094502008</span> },
}

<span class="kwa">local</span> N = <span class="kwb">tonumber</span>(arg <span class="kwa">and</span> arg[<span class="num">1</span>]) <span class="kwa">or</span> <span class="num">1000</span>
<span class="kwd">make_repeat_fasta</span>(<span class="str">'ONE'</span>, <span class="str">'Homo sapiens alu'</span>, alu, N*<span class="num">2</span>)
<span class="kwd">make_random_fasta</span>(<span class="str">'TWO'</span>, <span class="str">'IUB ambiguity codes'</span>, iub, N*<span class="num">3</span>)
<span class="kwd">make_random_fasta</span>(<span class="str">'THREE'</span>, <span class="str">'Homo sapiens frequency'</span>, homosapiens, N*<span class="num">5</span>)
