<span class="slc">// The Computer Language Benchmarks Game</span>
<span class="slc">// http://benchmarksgame.alioth.debian.org/</span>
<span class="slc">//</span>
<span class="slc">// Contributed by Valentin Kraevskiy</span>

<span class="kwa">let</span> pi = <span class="num">3.141592653589793</span>
<span class="kwa">let</span> daysPerYear = <span class="num">365.24</span>
<span class="kwa">let</span> solarMass = <span class="num">4.0</span> * pi ** <span class="num">2.0</span>

<span class="kwa">type</span> <span class="kwd">Planet</span> =
    {<span class="kwa">mutable</span> <span class="kwd">X</span>: <span class="kwb">float</span>; <span class="kwa">mutable</span> <span class="kwd">Y</span>: <span class="kwb">float</span>; <span class="kwa">mutable</span> <span class="kwd">Z</span>: <span class="kwb">float</span>
     <span class="kwa">mutable</span> <span class="kwd">VX</span>: <span class="kwb">float</span>; <span class="kwa">mutable</span> <span class="kwd">VY</span>: <span class="kwb">float</span>; <span class="kwa">mutable</span> <span class="kwd">VZ</span>: <span class="kwb">float</span>
     <span class="kwd">Mass</span>: <span class="kwb">float</span>}

<span class="kwa">let</span> jupiter =
    {<span class="kwd">X</span> = <span class="num">4.84143144246472090e+00</span>
     <span class="kwd">Y</span> = -<span class="num">1.16032004402742839e+00</span>
     <span class="kwd">Z</span> = -<span class="num">1.03622044471123109e-01</span>
     <span class="kwd">VX</span> = <span class="num">1.66007664274403694e-03</span> * daysPerYear
     <span class="kwd">VY</span> = <span class="num">7.69901118419740425e-03</span> * daysPerYear
     <span class="kwd">VZ</span> = -<span class="num">6.90460016972063023e-05</span> * daysPerYear
     <span class="kwd">Mass</span> = <span class="num">9.54791938424326609e-04</span> * solarMass}

<span class="kwa">let</span> saturn =
    {<span class="kwd">X</span> = <span class="num">8.34336671824457987e+00</span>
     <span class="kwd">Y</span> = <span class="num">4.12479856412430479e+00</span>
     <span class="kwd">Z</span> = -<span class="num">4.03523417114321381e-01</span>
     <span class="kwd">VX</span> = -<span class="num">2.76742510726862411e-03</span> * daysPerYear
     <span class="kwd">VY</span> = <span class="num">4.99852801234917238e-03</span> * daysPerYear
     <span class="kwd">VZ</span> = <span class="num">2.30417297573763929e-05</span> * daysPerYear
     <span class="kwd">Mass</span> = <span class="num">2.85885980666130812e-04</span> * solarMass}

<span class="kwa">let</span> uranus =
    {<span class="kwd">X</span> = <span class="num">1.28943695621391310e+01</span>
     <span class="kwd">Y</span> = -<span class="num">1.51111514016986312e+01</span>
     <span class="kwd">Z</span> = -<span class="num">2.23307578892655734e-01</span>
     <span class="kwd">VX</span> = <span class="num">2.96460137564761618e-03</span> * daysPerYear
     <span class="kwd">VY</span> = <span class="num">2.37847173959480950e-03</span> * daysPerYear
     <span class="kwd">VZ</span> = -<span class="num">2.96589568540237556e-05</span> * daysPerYear
     <span class="kwd">Mass</span> = <span class="num">4.36624404335156298e-05</span> * solarMass}

<span class="kwa">let</span> neptune =
    {<span class="kwd">X</span> = <span class="num">1.53796971148509165e+01</span>
     <span class="kwd">Y</span> = -<span class="num">2.59193146099879641e+01</span>
     <span class="kwd">Z</span> = <span class="num">1.79258772950371181e-01</span>
     <span class="kwd">VX</span> = <span class="num">2.68067772490389322e-03</span> * daysPerYear
     <span class="kwd">VY</span> = <span class="num">1.62824170038242295e-03</span> * daysPerYear
     <span class="kwd">VZ</span> = -<span class="num">9.51592254519715870e-05</span> * daysPerYear
     <span class="kwd">Mass</span> = <span class="num">5.15138902046611451e-05</span> * solarMass}

<span class="kwa">let</span> sun =
    {<span class="kwd">X</span> = <span class="num">0.0</span>; <span class="kwd">Y</span> = <span class="num">0.0</span>; <span class="kwd">Z</span> = <span class="num">0.0</span>
     <span class="kwd">VX</span> = <span class="num">0.0</span>; <span class="kwd">VY</span> = <span class="num">0.0</span>; <span class="kwd">VZ</span> = <span class="num">0.0</span>
     <span class="kwd">Mass</span> = solarMass}

<span class="kwa">let</span> offsetMomentum a =
    <span class="kwa">let</span> x, y, z =
        <span class="kwd">Array</span>.fold (<span class="kwa">fun</span> (x, y, z) body -&gt;
            <span class="kwa">let</span> c = body.<span class="kwd">Mass</span> / solarMass
            (x + c * body.<span class="kwd">VX</span>, y + c * body.<span class="kwd">VY</span>, z + c * body.<span class="kwd">VZ</span>))
            (<span class="num">0.0</span>, <span class="num">0.0</span>, <span class="num">0.0</span>) a
    a.[<span class="num">0</span>].<span class="kwd">VX</span> &lt;- - x
    a.[<span class="num">0</span>].<span class="kwd">VY</span> &lt;- - y
    a.[<span class="num">0</span>].<span class="kwd">VZ</span> &lt;- - z

<span class="kwa">let</span> move t =
    <span class="kwd">Array</span>.iter (<span class="kwa">fun</span> body -&gt;
        body.<span class="kwd">X</span> &lt;- body.<span class="kwd">X</span> + t * body.<span class="kwd">VX</span>
        body.<span class="kwd">Y</span> &lt;- body.<span class="kwd">Y</span> + t * body.<span class="kwd">VY</span>
        body.<span class="kwd">Z</span> &lt;- body.<span class="kwd">Z</span> + t * body.<span class="kwd">VZ</span>)

<span class="kwa">let</span> advance a t =
    <span class="kwa">for</span> i <span class="kwa">in</span> <span class="num">0</span>..<span class="kwd">Array</span>.length a - <span class="num">2</span> <span class="kwa">do</span>
        <span class="kwa">let</span> b1 = a.[i]
        <span class="kwa">for</span> j <span class="kwa">in</span> i + <span class="num">1</span>..<span class="kwd">Array</span>.length a - <span class="num">1</span> <span class="kwa">do</span>
            <span class="kwa">let</span> b2 = a.[j]
            <span class="kwa">let</span> dx, dy, dz = b1.<span class="kwd">X</span> - b2.<span class="kwd">X</span>, b1.<span class="kwd">Y</span> - b2.<span class="kwd">Y</span>, b1.<span class="kwd">Z</span> - b2.<span class="kwd">Z</span>
            <span class="kwa">let</span> dist = sqrt (dx * dx + dy * dy + dz * dz)
            <span class="kwa">let</span> mag = t / (dist * dist * dist)
            b1.<span class="kwd">VX</span> &lt;- b1.<span class="kwd">VX</span> - b2.<span class="kwd">Mass</span> * mag * dx
            b1.<span class="kwd">VY</span> &lt;- b1.<span class="kwd">VY</span> - b2.<span class="kwd">Mass</span> * mag * dy
            b1.<span class="kwd">VZ</span> &lt;- b1.<span class="kwd">VZ</span> - b2.<span class="kwd">Mass</span> * mag * dz
            b2.<span class="kwd">VX</span> &lt;- b2.<span class="kwd">VX</span> + b1.<span class="kwd">Mass</span> * mag * dx
            b2.<span class="kwd">VY</span> &lt;- b2.<span class="kwd">VY</span> + b1.<span class="kwd">Mass</span> * mag * dy
            b2.<span class="kwd">VZ</span> &lt;- b2.<span class="kwd">VZ</span> + b1.<span class="kwd">Mass</span> * mag * dz
    move t a

<span class="kwa">let rec</span> energy i e a =
    <span class="kwa">if</span> i &lt; <span class="kwd">Array</span>.length a
        <span class="kwa">then let</span> b1 = a.[i]
             <span class="kwa">let rec</span> energy' a j e =
                <span class="kwa">if</span> j &lt; <span class="kwd">Array</span>.length a
                <span class="kwa">then let</span> b2 = a.[j]
                     <span class="kwa">let</span> dx, dy, dz = b1.<span class="kwd">X</span> - b2.<span class="kwd">X</span>, b1.<span class="kwd">Y</span> - b2.<span class="kwd">Y</span>, b1.<span class="kwd">Z</span> - b2.<span class="kwd">Z</span>
                     <span class="kwa">let</span> dist = sqrt (dx * dx + dy * dy + dz * dz)
                     energy' a (j + <span class="num">1</span>)
                        (e - b1.<span class="kwd">Mass</span> * b2.<span class="kwd">Mass</span> / dist )
                <span class="kwa">else</span> e

             <span class="kwa">let</span> sq = b1.<span class="kwd">VX</span> * b1.<span class="kwd">VX</span> + b1.<span class="kwd">VY</span> * b1.<span class="kwd">VY</span> + b1.<span class="kwd">VZ</span> * b1.<span class="kwd">VZ</span>
             energy (i + <span class="num">1</span>)
                (energy' a (i + <span class="num">1</span>)
                    (e + <span class="num">0.5</span> * b1.<span class="kwd">Mass</span> * sq)) a
        <span class="kwa">else</span> e

<span class="kwa">let</span> planets = [|sun; jupiter; saturn; uranus; neptune|]
offsetMomentum planets

<span class="kwa">let</span> print = energy <span class="num">0 0.0</span> &gt;&gt; printf <span class="str">&quot;%.9f</span><span class="esc">\n</span><span class="str">&quot;</span>

[&lt;<span class="kwd">EntryPoint</span>&gt;]
<span class="kwa">let</span> main args =
    <span class="kwa">let</span> n = <span class="kwa">try</span> <span class="kwb">int</span> args.[<span class="num">0</span>] <span class="kwa">with</span> _ -&gt; <span class="num">20000000</span>
    print planets
    <span class="kwa">for</span> i <span class="kwa">in</span> <span class="num">1</span>..n <span class="kwa">do</span> advance planets <span class="num">0.01</span>
    print planets
    <span class="num">0</span>
