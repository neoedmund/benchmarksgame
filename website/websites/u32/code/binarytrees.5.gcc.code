<span class="com">/* The Computer Language Benchmarks Game</span>
<span class="com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * Contributed by Eckehard Berns</span>
<span class="com"> * Based on code by Kevin Carson</span>
<span class="com"> */</span>

<span class="ppc">#include &lt;stdlib.h&gt;</span>
<span class="ppc">#include &lt;stdio.h&gt;</span>
<span class="ppc">#include &lt;pthread.h&gt;</span>

<span class="kwc">typedef</span> <span class="kwb">struct</span> node {
   <span class="kwb">struct</span> node *left, *right;
   <span class="kwb">long</span> item;
} node;

<span class="kwb">static</span> node *
<span class="kwd">new_node</span>(node *left, node *right, <span class="kwb">long</span> item)
{
   node *ret;

   ret = <span class="kwd">malloc</span>(<span class="kwa">sizeof</span>(node));
   ret-&gt;left = left;
   ret-&gt;right = right;
   ret-&gt;item = item;

   <span class="kwa">return</span> ret;
}

<span class="kwb">static long</span>
<span class="kwd">item_check</span>(node *tree)
{
   <span class="kwa">if</span> (tree-&gt;left == NULL)
      <span class="kwa">return</span> tree-&gt;item;
   <span class="kwa">else</span>
      <span class="kwa">return</span> tree-&gt;item + <span class="kwd">item_check</span>(tree-&gt;left) -
          <span class="kwd">item_check</span>(tree-&gt;right);
}

<span class="kwb">static</span> node *
<span class="kwd">bottom_up_tree</span>(<span class="kwb">long</span> item, <span class="kwb">int</span> depth)
{
   <span class="kwa">if</span> (depth &gt; <span class="num">0</span>)
      <span class="kwa">return</span> <span class="kwd">new_node</span>(<span class="kwd">bottom_up_tree</span>(<span class="num">2</span> * item - <span class="num">1</span>, depth - <span class="num">1</span>),
          <span class="kwd">bottom_up_tree</span>(<span class="num">2</span> * item, depth - <span class="num">1</span>), item);
   <span class="kwa">else</span>
      <span class="kwa">return</span> <span class="kwd">new_node</span>(NULL, NULL, item);
}

<span class="kwb">static void</span>
<span class="kwd">delete_tree</span>(node *tree)
{
   <span class="kwa">if</span> (tree-&gt;left != NULL) {
      <span class="kwd">delete_tree</span>(tree-&gt;left);
      <span class="kwd">delete_tree</span>(tree-&gt;right);
   }
   <span class="kwd">free</span>(tree);
}

<span class="kwb">struct</span> worker_args {
   <span class="kwb">long</span> iter, check;
   <span class="kwb">int</span> depth;
   pthread_t id;
   <span class="kwb">struct</span> worker_args *next;
};

<span class="kwb">static void</span> *
<span class="kwd">check_tree_of_depth</span>(<span class="kwb">void</span> *_args)
{
   <span class="kwb">struct</span> worker_args *args = _args;
   <span class="kwb">long</span> i, iter, check, depth;
   node *tmp;

   iter = args-&gt;iter;
   depth = args-&gt;depth;

   check = <span class="num">0</span>;
   <span class="kwa">for</span> (i = <span class="num">1</span>; i &lt;= iter; i++) {
      tmp = <span class="kwd">bottom_up_tree</span>(i, depth);
      check += <span class="kwd">item_check</span>(tmp);
      <span class="kwd">delete_tree</span>(tmp);

      tmp = <span class="kwd">bottom_up_tree</span>(-i, depth);
      check += <span class="kwd">item_check</span>(tmp);
      <span class="kwd">delete_tree</span>(tmp);
   }

   args-&gt;check = check;
   <span class="kwa">return</span> NULL;
}

<span class="kwb">int</span>
<span class="kwd">main</span>(<span class="kwb">int</span> ac, <span class="kwb">char</span> **av)
{
   node *stretch, *longlived;
   <span class="kwb">struct</span> worker_args *args, *targs, *hargs;
   <span class="kwb">int</span> n, depth, mindepth, maxdepth, stretchdepth;

   n = ac &gt; <span class="num">1</span> ? <span class="kwd">atoi</span>(av[<span class="num">1</span>]) : <span class="num">10</span>;
   <span class="kwa">if</span> (n &lt; <span class="num">1</span>) {
      <span class="kwd">fprintf</span>(stderr, <span class="str">&quot;Wrong argument.</span><span class="esc">\n</span><span class="str">&quot;</span>);
      <span class="kwd">exit</span>(<span class="num">1</span>);
   }

   mindepth = <span class="num">4</span>;
   maxdepth = mindepth + <span class="num">2</span> &gt; n ? mindepth + <span class="num">2</span> : n;
   stretchdepth = maxdepth + <span class="num">1</span>;

   stretch = <span class="kwd">bottom_up_tree</span>(<span class="num">0</span>, stretchdepth);
   <span class="kwd">printf</span>(<span class="str">&quot;stretch tree of depth %u</span><span class="esc">\t</span> <span class="str">check: %li</span><span class="esc">\n</span><span class="str">&quot;</span>, stretchdepth,
       <span class="kwd">item_check</span>(stretch));
   <span class="kwd">delete_tree</span>(stretch);

   longlived = <span class="kwd">bottom_up_tree</span>(<span class="num">0</span>, maxdepth);

   hargs = NULL;
   targs = NULL;
   <span class="kwa">for</span> (depth = mindepth; depth &lt;= maxdepth; depth += <span class="num">2</span>) {

      args = <span class="kwd">malloc</span>(<span class="kwa">sizeof</span>(<span class="kwb">struct</span> worker_args));
      args-&gt;iter = <span class="num">1</span> &lt;&lt; (maxdepth - depth + mindepth);
      args-&gt;depth = depth;
      args-&gt;next = NULL;
      <span class="kwa">if</span> (targs == NULL) {
         hargs = args;
         targs = args;
      } <span class="kwa">else</span> {
         targs-&gt;next = args;
         targs = args;
      }
      <span class="kwd">pthread_create</span>(&amp;args-&gt;id, NULL, check_tree_of_depth, args);
   }

   <span class="kwa">while</span> (hargs != NULL) {
      args = hargs;
      <span class="kwd">pthread_join</span>(args-&gt;id, NULL);
      <span class="kwd">printf</span>(<span class="str">&quot;%ld</span><span class="esc">\t</span> <span class="str">trees of depth %d</span><span class="esc">\t</span> <span class="str">check: %ld</span><span class="esc">\n</span><span class="str">&quot;</span>,
          args-&gt;iter * <span class="num">2</span>, args-&gt;depth, args-&gt;check);
      hargs = args-&gt;next;
      <span class="kwd">free</span>(args);
   }

   <span class="kwd">printf</span>(<span class="str">&quot;long lived tree of depth %d</span><span class="esc">\t</span> <span class="str">check: %ld</span><span class="esc">\n</span><span class="str">&quot;</span>, maxdepth,
       <span class="kwd">item_check</span>(longlived));

   <span class="com">/* not in original C version: */</span>
   <span class="kwd">delete_tree</span>(longlived);

   <span class="kwa">return</span> <span class="num">0</span>;
}

