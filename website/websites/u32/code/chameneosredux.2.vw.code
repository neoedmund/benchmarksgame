<span class="com">&quot;* The Computer Language Benchmarks Game</span>
<span class="com">    http://benchmarksgame.alioth.debian.org/</span>
<span class="com">    contributed by Carlo Teixeira *&quot;</span>!

<span class="kwc">Object</span> <span class="kwb">subclass:</span> <span class="kwd">#Tests</span>
   <span class="kwb">instanceVariableNames:</span> <span class="str">''</span>
   <span class="kwb">classVariableNames:</span> <span class="str">''</span>
   <span class="kwb">poolDictionaries:</span> <span class="str">''</span>
   <span class="kwb">category:</span> <span class="str">'Shootout'</span>!

<span class="kwc">Tests</span> class
   <span class="kwb">instanceVariableNames:</span> <span class="str">''</span>!

<span class="com">&quot;-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- &quot;</span>!


!<span class="kwc">Tests</span> class <span class="kwb">methodsFor:</span> <span class="str">'benchmarking-scripts'</span>!

<span class="kwb">chameneosredux2</span>
   <span class="kwc">Mall</span> <span class="kwb">runBenchMark:</span> <span class="kwa">self</span> arg <span class="kwb">on:</span> <span class="kwa">self</span> stdout.
   ^<span class="str">''</span>! !

<span class="com">&quot;-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- &quot;</span>!


<span class="kwc">Object</span> <span class="kwb">subclass:</span> <span class="kwd">#Pair</span>
   <span class="kwb">instanceVariableNames:</span> <span class="str">'partner me sema '</span>
   <span class="kwb">classVariableNames:</span> <span class="str">''</span>
   <span class="kwb">poolDictionaries:</span> <span class="str">''</span>
   <span class="kwb">category:</span> <span class="str">'(none)'</span>!

<span class="kwc">Pair</span> class
   <span class="kwb">instanceVariableNames:</span> <span class="str">''</span>!

<span class="com">&quot;-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- &quot;</span>!


!<span class="kwc">Pair</span> class <span class="kwb">methodsFor:</span> <span class="str">'instance creation'</span>!

<span class="kwb">new</span>
   <span class="com">&quot;Answer a newly created and initialized instance.&quot;</span>
   ^<span class="kwa">super</span> new initialize.!

<span class="kwb">with:</span> me 
   <span class="com">&quot;Answer a newly created and initialized instance.&quot;</span>
<span class="kwa">self</span> halt.
   ^<span class="kwa">super</span> new initialize <span class="kwb">me:</span> me! !

<span class="com">&quot;-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- &quot;</span>!


<span class="kwc">Pair</span> <span class="kwb">comment:</span>
<span class="str">''</span>!

!<span class="kwc">Pair</span> <span class="kwb">methodsFor:</span> <span class="str">'accessing'</span>!

<span class="kwb">me</span>
   ^me!

<span class="kwb">me:</span> anObject
   me :<span class="kwb">=</span> anObject!

<span class="kwb">partner</span>
   ^partner!

<span class="kwb">partner:</span> anObject
   partner :<span class="kwb">=</span> anObject! !

!<span class="kwc">Pair</span> <span class="kwb">methodsFor:</span> <span class="str">'initialize-release'</span>!

<span class="kwb">initialize</span>
   <span class="com">&quot;Initialize a newly created instance. This method must answer the receiver.&quot;</span>

   partner :<span class="kwb">=</span> <span class="kwa">nil</span>.
   me :<span class="kwb">=</span> <span class="kwa">nil</span>.
   sema :<span class="kwb">=</span> <span class="kwc">Semaphore</span> new.
   ^<span class="kwa">self</span>!

<span class="kwb">release</span>
partner:<span class="kwb">=</span><span class="kwa">nil</span>.!

<span class="kwb">signal</span>
   sema signal!

<span class="kwb">wait</span>
   sema wait! !

<span class="kwc">Object</span> <span class="kwb">subclass:</span> <span class="kwd">#Mall</span>
   <span class="kwb">instanceVariableNames:</span> <span class="str">'guard maxRendezvous open process queue cache pairCache '</span>
   <span class="kwb">classVariableNames:</span> <span class="str">'Units '</span>
   <span class="kwb">poolDictionaries:</span> <span class="str">''</span>
   <span class="kwb">category:</span> <span class="str">'chameleon'</span>!

<span class="kwc">Mall</span> class
   <span class="kwb">instanceVariableNames:</span> <span class="str">''</span>!

<span class="com">&quot;-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- &quot;</span>!


!<span class="kwc">Mall</span> class <span class="kwb">methodsFor:</span> <span class="str">'printing'</span>!

<span class="kwb">generateReportFor:</span> creatures <span class="kwb">printOn:</span> stream 
   <span class="kwd">| sum |</span>
   sum :<span class="kwb">=</span> creatures <span class="kwb">inject:</span> <span class="num">0</span> <span class="kwb">into:</span> [<span class="kwd">:accum :each</span> | accum <span class="kwb">+</span> each creaturesMet].
   creatures <span class="kwb">do:</span> 
         [<span class="kwd">:aCreature</span> | 
         aCreature creaturesMet <span class="kwb">printOn:</span> stream.
         stream
            space;
            <span class="kwb">nextPutAll:</span> (<span class="kwa">self</span> units <span class="kwb">at:</span> aCreature selfMet <span class="kwb">+</span> <span class="num">1</span>);
            nl].
   stream space.
   sum printString 
      <span class="kwb">do:</span> [<span class="kwd">:el</span> | stream <span class="kwb">nextPutAll:</span> (<span class="kwa">self</span> units <span class="kwb">at:</span> el digitValue <span class="kwb">+</span> <span class="num">1</span>)]
      <span class="kwb">separatedBy:</span> [stream space].
   ^stream!

<span class="kwb">generateReportForColours:</span> colours <span class="kwb">printOn:</span> stream 
   stream space.
   colours <span class="kwb">do:</span> [<span class="kwd">:colour</span> | colour <span class="kwb">printOn:</span> stream] <span class="kwb">separatedBy:</span> [stream space].
   ^stream! !

!<span class="kwc">Mall</span> class <span class="kwb">methodsFor:</span> <span class="str">'initialize-release'</span>!

<span class="kwb">createAllowing:</span> maxRendezvous 
   <span class="com">&quot;Private&quot;</span>

   ^<span class="kwa">self</span> basicNew initialize <span class="kwb">maxRendezvous:</span> maxRendezvous!

<span class="kwb">createCreaturesWith:</span> aCollectionOfColours 
   <span class="com">&quot;Private&quot;</span>

   <span class="kwd">| aName |</span>
   aName :<span class="kwb">=</span> <span class="num">0</span>.
   ^aCollectionOfColours <span class="kwb">collect:</span> 
         [<span class="kwd">:aColour</span> | 
         aName :<span class="kwb">=</span> aName <span class="kwb">+</span> <span class="num">1</span>.
         <span class="kwc">Creature</span> <span class="kwb">withName:</span> aName <span class="kwb">colour:</span> aColour]!

<span class="kwb">initialize</span>
   <span class="com">&quot;self initialize&quot;</span>

   <span class="kwc">Units</span> :<span class="kwb">=</span> #(<span class="str">'zero'</span> <span class="str">'one'</span> <span class="str">'two'</span> <span class="str">'three'</span> <span class="str">'four'</span> <span class="str">'five'</span> <span class="str">'six'</span> <span class="str">'seven'</span> <span class="str">'eight'</span> <span class="str">'nine'</span>)!

<span class="kwb">new</span>
   ^<span class="kwa">self</span> shouldNotImplement!

<span class="kwb">openMallWith:</span> aCollectionOfColours <span class="kwb">forNumberOfMeets:</span> aNumber 
   <span class="kwd">| mall creatures guard |</span>
   mall :<span class="kwb">=</span> <span class="kwa">self</span> <span class="kwb">createAllowing:</span> aNumber.
   mall run.
   creatures :<span class="kwb">=</span> <span class="kwa">self</span> <span class="kwb">createCreaturesWith:</span> aCollectionOfColours.
   guard :<span class="kwb">=</span> <span class="kwc">Semaphore</span> new.
   <span class="kwa">self</span> 
      <span class="kwb">openMall:</span> mall
      <span class="kwb">forCreatures:</span> creatures
      <span class="kwb">usingGuard:</span> guard.
   <span class="kwa">self</span> 
      <span class="kwb">waitForClosingOfMall:</span> mall
      <span class="kwb">withCreatures:</span> creatures
      <span class="kwb">usingGuard:</span> guard.
   ^creatures! !

!<span class="kwc">Mall</span> class <span class="kwb">methodsFor:</span> <span class="str">'private'</span>!

<span class="kwb">openMall:</span> aMall <span class="kwb">forCreatures:</span> creatures <span class="kwb">usingGuard:</span> sema 
   <span class="kwd">| processes |</span>
   processes :<span class="kwb">=</span> creatures 
            <span class="kwb">collect:</span> [<span class="kwd">:aCreature</span> | 
               [aCreature <span class="kwb">visitMall:</span> aMall.
               sema signal] newProcess].
   processes <span class="kwb">do:</span> 
         [<span class="kwd">:proc</span> | 
         proc <span class="kwb">priority:</span> <span class="kwc">Processor</span> userBackgroundPriority.
         proc resume]!

<span class="kwb">waitForClosingOfMall:</span> aMall <span class="kwb">withCreatures:</span> creatures <span class="kwb">usingGuard:</span> guard 
   creatures size <span class="kwb">timesRepeat:</span> [guard wait].
   aMall close! !

!<span class="kwc">Mall</span> class <span class="kwb">methodsFor:</span> <span class="str">'accessing'</span>!

<span class="kwb">units</span>
   ^<span class="kwc">Units</span>! !

!<span class="kwc">Mall</span> class <span class="kwb">methodsFor:</span> <span class="str">'public'</span>!

<span class="kwb">runBenchMark:</span> number <span class="kwb">on:</span> anOutputStream 
   <span class="com">&quot;self runBenchMark: 60000 on: Transcript.&quot;</span>

   <span class="kwd">| firstTestColours secondTestColours blue red yellow creatures |</span>
   blue :<span class="kwb">=</span> <span class="kwc">ChameneosColour</span> blue.
   red :<span class="kwb">=</span> <span class="kwc">ChameneosColour</span> red.
   yellow :<span class="kwb">=</span> <span class="kwc">ChameneosColour</span> yellow.
   firstTestColours :<span class="kwb">=</span> <span class="kwc">Array</span> 
            <span class="kwb">with:</span> blue
            <span class="kwb">with:</span> red
            <span class="kwb">with:</span> yellow.
   secondTestColours :<span class="kwb">=</span> (<span class="kwc">OrderedCollection</span> new)
            <span class="kwb">add:</span> blue;
            <span class="kwb">add:</span> red;
            <span class="kwb">add:</span> yellow;
            <span class="kwb">add:</span> red;
            <span class="kwb">add:</span> yellow;
            <span class="kwb">add:</span> blue;
            <span class="kwb">add:</span> red;
            <span class="kwb">add:</span> yellow;
            <span class="kwb">add:</span> red;
            <span class="kwb">add:</span> blue;
            yourself.
   (<span class="kwc">ChameneosColour</span> <span class="kwb">generateReportOfColoursOn:</span> anOutputStream) nl.
   (<span class="kwa">self</span> <span class="kwb">generateReportForColours:</span> firstTestColours <span class="kwb">printOn:</span> anOutputStream) 
      nl.
   creatures :<span class="kwb">=</span> <span class="kwc">Mall</span> <span class="kwb">openMallWith:</span> firstTestColours <span class="kwb">forNumberOfMeets:</span> number.
   (<span class="kwa">self</span> <span class="kwb">generateReportFor:</span> creatures <span class="kwb">printOn:</span> anOutputStream)
      nl;
      nl.
   (<span class="kwa">self</span> <span class="kwb">generateReportForColours:</span> secondTestColours <span class="kwb">printOn:</span> anOutputStream) 
      nl.
   creatures :<span class="kwb">=</span> <span class="kwc">Mall</span> <span class="kwb">openMallWith:</span> secondTestColours <span class="kwb">forNumberOfMeets:</span> number.
   (<span class="kwa">self</span> <span class="kwb">generateReportFor:</span> creatures <span class="kwb">printOn:</span> anOutputStream)
      nl;
      nl! !

<span class="com">&quot;-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- &quot;</span>!


<span class="kwc">Mall</span> <span class="kwb">comment:</span>
<span class="str">''</span>!

!<span class="kwc">Mall</span> <span class="kwb">methodsFor:</span> <span class="str">'accessing'</span>!

<span class="kwb">maxRendezvous:</span> max 
   maxRendezvous :<span class="kwb">=</span> max! !

!<span class="kwc">Mall</span> <span class="kwb">methodsFor:</span> <span class="str">'private'</span>!

<span class="kwb">obtainPair</span>
   ^cache removeFirst!

<span class="kwb">processVisitors</span>
   [open] <span class="kwb">whileTrue:</span> 
         [<span class="num">1</span> <span class="kwb">to:</span> maxRendezvous
            <span class="kwb">do:</span> 
               [<span class="kwd">:x</span> | 
               <span class="kwd">| first second |</span>
               first :<span class="kwb">=</span> queue next.
               second :<span class="kwb">=</span> queue next.
               <span class="kwa">self</span> <span class="kwb">setPartnersOn:</span> first <span class="kwb">and:</span> second.
               first signal.
               second signal].
         [queue isEmpty] <span class="kwb">whileFalse:</span> [queue next signal]].
   process terminate.
   process :<span class="kwb">=</span> <span class="kwa">nil</span>!

<span class="kwb">releasePair:</span> pair 
   pair release.
   cache <span class="kwb">addFirst:</span> pair!

<span class="kwb">setPartnersOn:</span> first <span class="kwb">and:</span> second
   first <span class="kwb">partner:</span> second me.
   second <span class="kwb">partner:</span> first me.
!

<span class="kwb">shutdown</span>
   [queue isEmpty] <span class="kwb">whileFalse:</span> [queue next signal].
   process terminate.
   process :<span class="kwb">=</span> <span class="kwa">nil</span>! !

!<span class="kwc">Mall</span> <span class="kwb">methodsFor:</span> <span class="str">'initialize-release'</span>!

<span class="kwb">initialize</span>
   guard :<span class="kwb">=</span> <span class="kwc">Semaphore</span> forMutualExclusion.
   queue :<span class="kwb">=</span> <span class="kwc">SharedQueue</span> new.
   cache :<span class="kwb">=</span> <span class="kwc">OrderedCollection</span> new.
   <span class="num">1</span> <span class="kwb">to:</span> <span class="num">10</span> <span class="kwb">do:</span> [<span class="kwd">:x</span> | cache <span class="kwb">add:</span> <span class="kwc">Pair</span> new]!

<span class="kwb">run</span>
   open :<span class="kwb">=</span> <span class="kwa">true</span>.
   process <span class="kwb">ifNil:</span> 
         [process :<span class="kwb">=</span> [<span class="kwa">self</span> processVisitors] newProcess.
         process <span class="kwb">priority:</span> <span class="kwc">Processor</span> userBackgroundPriority <span class="kwb">-</span><span class="num">1</span> ].
   process resume! !

!<span class="kwc">Mall</span> <span class="kwb">methodsFor:</span> <span class="str">'controlling'</span>!

<span class="kwb">close</span>
   open :<span class="kwb">=</span> <span class="kwa">false</span>!

<span class="kwb">visitWith:</span> aChameneos 
   <span class="kwd">| pair partner |</span>
   pair :<span class="kwb">=</span> <span class="kwa">self</span> obtainPair.
   pair <span class="kwb">me:</span> aChameneos.
   queue <span class="kwb">nextPut:</span> pair.
   pair wait.
   partner :<span class="kwb">=</span> pair partner.
   <span class="kwa">self</span> <span class="kwb">releasePair:</span> pair.
   ^partner! !

<span class="kwc">Mall</span> initialize!

<span class="kwc">Object</span> <span class="kwb">subclass:</span> <span class="kwd">#Creature</span>
   <span class="kwb">instanceVariableNames:</span> <span class="str">'creatureName colour selfMet creaturesMet '</span>
   <span class="kwb">classVariableNames:</span> <span class="str">''</span>
   <span class="kwb">poolDictionaries:</span> <span class="str">''</span>
   <span class="kwb">category:</span> <span class="str">'chameleon'</span>!

<span class="kwc">Creature</span> class
   <span class="kwb">instanceVariableNames:</span> <span class="str">''</span>!

<span class="com">&quot;-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- &quot;</span>!


!<span class="kwc">Creature</span> class <span class="kwb">methodsFor:</span> <span class="str">'initialize-release'</span>!

<span class="kwb">withName:</span> aName <span class="kwb">colour:</span> aColour 
   ^(<span class="kwc">Creature</span> new initialize)
      <span class="kwb">name:</span> aName;
      <span class="kwb">colour:</span> aColour! !

<span class="com">&quot;-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- &quot;</span>!


!<span class="kwc">Creature</span> <span class="kwb">methodsFor:</span> <span class="str">'accessing'</span>!

<span class="kwb">colour</span>
   ^colour!

<span class="kwb">colour:</span> anObject 
   colour :<span class="kwb">=</span> anObject!

<span class="kwb">creaturesMet</span>
   ^creaturesMet!

<span class="kwb">creaturesMet:</span> anObject 
   creaturesMet :<span class="kwb">=</span> anObject!

<span class="kwb">name</span>
   ^creatureName!

<span class="kwb">name:</span> anObject 
   creatureName :<span class="kwb">=</span> anObject!

<span class="kwb">selfMet</span>
   ^selfMet!

<span class="kwb">selfMet:</span> anObject 
   ^selfMet :<span class="kwb">=</span> anObject! !

!<span class="kwc">Creature</span> <span class="kwb">methodsFor:</span> <span class="str">'initialize-release'</span>!

<span class="kwb">initialize</span>
   selfMet :<span class="kwb">=</span> <span class="num">0</span>.
   creaturesMet :<span class="kwb">=</span> <span class="num">0</span>! !

!<span class="kwc">Creature</span> <span class="kwb">methodsFor:</span> <span class="str">'controlling'</span>!

<span class="kwb">visitMall:</span> mall 
   
   [<span class="kwd">| partner |</span>
   partner :<span class="kwb">=</span> mall <span class="kwb">visitWith:</span> <span class="kwa">self</span>.
   partner <span class="kwb">ifNotNil:</span> 
         [colour :<span class="kwb">=</span> colour <span class="kwb">complementaryColourFor:</span> partner colour.
         <span class="kwa">self</span> <span class="kwb">==</span> partner <span class="kwb">ifTrue:</span> [selfMet :<span class="kwb">=</span> selfMet <span class="kwb">+</span> <span class="num">1</span>].
         creaturesMet :<span class="kwb">=</span> creaturesMet <span class="kwb">+</span> <span class="num">1</span>].
   partner isNil] 
         whileFalse! !

<span class="kwc">Object</span> <span class="kwb">subclass:</span> <span class="kwd">#ChameneosColour</span>
   <span class="kwb">instanceVariableNames:</span> <span class="str">'color '</span>
   <span class="kwb">classVariableNames:</span> <span class="str">'Blue Red Yellow '</span>
   <span class="kwb">poolDictionaries:</span> <span class="str">''</span>
   <span class="kwb">category:</span> <span class="str">'chameleon'</span>!

<span class="kwc">ChameneosColour</span> class
   <span class="kwb">instanceVariableNames:</span> <span class="str">''</span>!

<span class="com">&quot;-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- &quot;</span>!


!<span class="kwc">ChameneosColour</span> class <span class="kwb">methodsFor:</span> <span class="str">'accessing'</span>!

<span class="kwb">blue</span>
   ^<span class="kwc">Blue</span>!

<span class="kwb">blue:</span> anObject
   <span class="kwc">Blue</span> :<span class="kwb">=</span> anObject!

<span class="kwb">red</span>
   ^<span class="kwc">Red</span>!

<span class="kwb">red:</span> anObject
   <span class="kwc">Red</span> :<span class="kwb">=</span> anObject!

<span class="kwb">yellow</span>
   ^<span class="kwc">Yellow</span>!

<span class="kwb">yellow:</span> anObject
   <span class="kwc">Yellow</span> :<span class="kwb">=</span> anObject! !

!<span class="kwc">ChameneosColour</span> class <span class="kwb">methodsFor:</span> <span class="str">'initialize-release'</span>!

<span class="kwb">createBlue</span>
   <span class="com">&quot;comment stating purpose of message&quot;</span>

   ^<span class="kwa">super</span> new <span class="kwb">color:</span> <span class="kwd">#blue</span>!

<span class="kwb">createRed</span>
   <span class="com">&quot;comment stating purpose of message&quot;</span>

   ^<span class="kwa">super</span> new <span class="kwb">color:</span> <span class="kwd">#red</span>!

<span class="kwb">createYellow</span>
   <span class="com">&quot;comment stating purpose of message&quot;</span>

   ^<span class="kwa">super</span> new <span class="kwb">color:</span> <span class="kwd">#yellow</span>!

<span class="kwb">initialize</span>
   <span class="com">&quot;self initialize&quot;</span>

   <span class="kwc">Red</span> :<span class="kwb">=</span> <span class="kwa">self</span> createRed.
   <span class="kwc">Blue</span> :<span class="kwb">=</span> <span class="kwa">self</span> createBlue.
   <span class="kwc">Yellow</span> :<span class="kwb">=</span> <span class="kwa">self</span> createYellow! !

!<span class="kwc">ChameneosColour</span> class <span class="kwb">methodsFor:</span> <span class="str">'printing'</span>!

<span class="kwb">generateReportOfColoursOn:</span> readOut 
   <span class="kwd">| colours |</span>
   colours :<span class="kwb">=</span> <span class="kwc">Array</span> 
            <span class="kwb">with:</span> <span class="kwc">Blue</span>
            <span class="kwb">with:</span> <span class="kwc">Red</span>
            <span class="kwb">with:</span> <span class="kwc">Yellow</span>.
   colours <span class="kwb">do:</span> 
         [<span class="kwd">:aColour</span> | 
         colours <span class="kwb">do:</span> 
               [<span class="kwd">:anotherColour</span> | 
               aColour <span class="kwb">printOn:</span> readOut.
               readOut <span class="kwb">nextPutAll:</span> <span class="str">' + '</span>.
               anotherColour <span class="kwb">printOn:</span> readOut.
               readOut <span class="kwb">nextPutAll:</span> <span class="str">' -&gt; '</span>.
               (aColour <span class="kwb">complementaryColourFor:</span> anotherColour) <span class="kwb">printOn:</span> readOut.
               readOut nl]].
   ^readOut! !

<span class="com">&quot;-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- &quot;</span>!


!<span class="kwc">ChameneosColour</span> <span class="kwb">methodsFor:</span> <span class="str">'as yet unclassified'</span>!

<span class="kwb">complementaryColourFor:</span> aChameneosColour 
   <span class="com">&quot;determine the complementary colour defined as...&quot;</span>

   <span class="kwa">self</span> <span class="kwb">==</span> aChameneosColour <span class="kwb">ifTrue:</span> [^<span class="kwa">self</span>].
   <span class="kwa">self</span> isBlue 
      <span class="kwb">ifTrue:</span> 
         [aChameneosColour isRed 
            <span class="kwb">ifTrue:</span> [^<span class="kwa">self</span> class yellow]
            <span class="kwb">ifFalse:</span> [^<span class="kwa">self</span> class red]].
   <span class="kwa">self</span> isRed 
      <span class="kwb">ifTrue:</span> 
         [aChameneosColour isBlue 
            <span class="kwb">ifTrue:</span> [^<span class="kwa">self</span> class yellow]
            <span class="kwb">ifFalse:</span> [^<span class="kwa">self</span> class blue]].
   aChameneosColour isBlue 
      <span class="kwb">ifTrue:</span> [^<span class="kwa">self</span> class red]
      <span class="kwb">ifFalse:</span> [^<span class="kwa">self</span> class blue]! !

!<span class="kwc">ChameneosColour</span> <span class="kwb">methodsFor:</span> <span class="str">'testing'</span>!

<span class="kwb">hasSameColorAs:</span> aChameneos 
   ^<span class="kwa">self</span> color <span class="kwb">==</span> aChameneos color!

<span class="kwb">isBlue</span>
   ^<span class="kwa">self</span> <span class="kwb">==</span> <span class="kwa">self</span> class blue!

<span class="kwb">isRed</span>
   ^<span class="kwa">self</span> <span class="kwb">==</span> <span class="kwa">self</span> class red!

<span class="kwb">isYellow</span>
   ^<span class="kwa">self</span> <span class="kwb">==</span> <span class="kwa">self</span> class yellow! !

!<span class="kwc">ChameneosColour</span> <span class="kwb">methodsFor:</span> <span class="str">'accessing'</span>!

<span class="kwb">color</span>
   ^color!

<span class="kwb">color:</span> aColor 
   color :<span class="kwb">=</span> aColor! !

!<span class="kwc">ChameneosColour</span> <span class="kwb">methodsFor:</span> <span class="str">'printing'</span>!

<span class="kwb">printOn:</span> aStream 
   aStream <span class="kwb">nextPutAll:</span> <span class="kwa">self</span> color! !

<span class="kwc">ChameneosColour</span> initialize!
