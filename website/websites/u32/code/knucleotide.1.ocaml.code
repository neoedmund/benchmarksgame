<span class="com">(* </span>
<span class="com"> * The Computer Language Benchmarks Game</span>
<span class="com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * contributed by Troestler Christophe</span>
<span class="com"> * modified by Mauricio Fernandez</span>
<span class="com"> *)</span>

<span class="kwa">module</span> <span class="kwd">S</span> = <span class="kwa">struct</span>
  <span class="kwa">type</span> t = <span class="kwb">string</span>

  <span class="kwa">let</span> size = <span class="num">0x40000</span>

  <span class="kwa">let</span> equal (s1:<span class="kwb">string</span>) s2 = (s1 = s2)

  <span class="kwa">let</span> hash s =
    <span class="kwa">let</span> h = <span class="kwb">ref</span> <span class="num">0</span> <span class="kwa">in</span>
    <span class="kwa">for</span> i = <span class="num">0</span> <span class="kwa">to</span> <span class="kwc">String</span>.length s - <span class="num">1</span> <span class="kwa">do</span> h := !h * <span class="num">5</span> + <span class="kwc">Char</span>.code s.[i] <span class="kwa">done</span>;
    !h
<span class="kwa">end</span>

<span class="kwa">module</span> <span class="kwd">H</span> = <span class="kwc">Hashtbl</span>.<span class="kwd">Make</span>(<span class="kwd">S</span>)

<span class="com">(* [counts k dna] fills and return the hashtable [count] of</span>
<span class="com">   k-nucleotide keys and count values for a particular reading-frame</span>
<span class="com">   of length [k] of the string [dna].  Keys point to mutable values</span>
<span class="com">   for speed (to avoid looking twice the same key to reinsert the</span>
<span class="com">   value). *)</span>
<span class="kwa">let</span> count = <span class="kwc">H</span>.create <span class="kwc">S</span>.size
<span class="kwa">let</span> counts k dna =
  <span class="kwc">H</span>.clear count;
  <span class="kwa">let</span> key = <span class="kwc">String</span>.create k <span class="kwa">in</span>
    <span class="kwa">for</span> i = <span class="num">0</span> <span class="kwa">to</span> <span class="kwc">String</span>.length dna - k <span class="kwa">do</span>
      <span class="kwc">String</span>.unsafe_blit dna i key <span class="num">0</span> k;
      <span class="kwa">try</span> incr(<span class="kwc">H</span>.find count key) <span class="kwa">with</span> <span class="kwd">Not_found</span> -&gt; <span class="kwc">H</span>.add count (<span class="kwc">String</span>.copy key) (<span class="kwb">ref</span> <span class="num">1</span>)
    <span class="kwa">done</span>;
    count

<span class="com">(* [write_frequencies k dna] writes the frequencies for a</span>
<span class="com">   reading-frame of length [k] sorted by descending frequency and then</span>
<span class="com">   ascending k-nucleotide key. *)</span>
<span class="kwa">let</span> compare_freq ((k1:<span class="kwb">string</span>),(f1:<span class="kwb">float</span>)) (k2, f2) =
  <span class="kwa">if</span> f1 &gt; f2 <span class="kwa">then</span> -<span class="num">1</span> <span class="kwa">else if</span> f1 &lt; f2 <span class="kwa">then</span> <span class="num">1</span> <span class="kwa">else</span> compare k1 k2

<span class="kwa">let</span> write_frequencies k dna =
  <span class="kwa">let</span> cnt = counts k dna <span class="kwa">in</span>
  <span class="kwa">let</span> tot = <span class="kwb">float</span>(<span class="kwc">H</span>.fold (<span class="kwa">fun</span> _ n t -&gt; !n + t) cnt <span class="num">0</span>) <span class="kwa">in</span>
  <span class="kwa">let</span> frq = <span class="kwc">H</span>.fold (<span class="kwa">fun</span> k n l -&gt; (k, <span class="num">100</span>. *. <span class="kwb">float</span> !n /. tot) :: l) cnt [] <span class="kwa">in</span>
  <span class="kwa">let</span> frq = <span class="kwc">List</span>.sort compare_freq frq <span class="kwa">in</span>
  <span class="kwc">List</span>.iter (<span class="kwa">fun</span> (k,f) -&gt; <span class="kwc">Printf</span>.printf <span class="str">&quot;</span><span class="ipl">%s</span> <span class="str">%.3f</span><span class="esc">\n</span><span class="str">&quot;</span> k f) frq;
  print_string <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span>

<span class="kwa">let</span> write_count seq dna =
  <span class="kwa">let</span> cnt = counts (<span class="kwc">String</span>.length seq) dna <span class="kwa">in</span>
  <span class="kwc">Printf</span>.printf <span class="str">&quot;</span><span class="ipl">%d</span><span class="str"></span><span class="esc">\t</span><span class="str"></span><span class="ipl">%s</span><span class="str"></span><span class="esc">\n</span><span class="str">&quot;</span> (<span class="kwa">try</span> !(<span class="kwc">H</span>.find cnt seq) <span class="kwa">with</span> <span class="kwd">Not_found</span> -&gt; <span class="num">0</span>) seq

<span class="com">(* Extract DNA sequence &quot;THREE&quot; from stdin *)</span>
<span class="kwa">let</span> dna_three =
  <span class="kwa">let</span> is_not_three s = <span class="kwa">try</span> <span class="kwc">String</span>.sub s <span class="num">0 6</span> &lt;&gt; <span class="str">&quot;&gt;THREE&quot;</span> <span class="kwa">with</span> _ -&gt; <span class="kwa">true in</span>
  <span class="kwa">while</span> is_not_three(input_line stdin) <span class="kwa">do</span> () <span class="kwa">done</span>;
  <span class="kwa">let</span> buf = <span class="kwc">Buffer</span>.create <span class="num">1000</span> <span class="kwa">in</span>
  <span class="com">(* Skip possible comment *)</span>
  (<span class="kwa">try while true do</span>
     <span class="kwa">let</span> line = input_line stdin <span class="kwa">in</span>
     <span class="kwa">if</span> line.[<span class="num">0</span>] &lt;&gt; ';' <span class="kwa">then</span>
       (<span class="kwc">Buffer</span>.add_string buf (<span class="kwc">String</span>.uppercase line); raise <span class="kwd">Exit</span>)
   <span class="kwa">done with</span> _ -&gt; ());
  <span class="com">(* Read the DNA sequence *)</span>
  (<span class="kwa">try while true do</span>
       <span class="kwa">let</span> line = input_line stdin <span class="kwa">in</span>
       <span class="kwa">if</span> line.[<span class="num">0</span>] = '&gt;' <span class="kwa">then</span> raise <span class="kwd">End_of_file</span>;
       <span class="kwc">Buffer</span>.add_string buf (<span class="kwc">String</span>.uppercase line)
   <span class="kwa">done with</span> <span class="kwd">End_of_file</span> -&gt; ());
  <span class="kwc">Buffer</span>.contents buf

<span class="kwa">let</span> () = <span class="kwc">Gc</span>.set { (<span class="kwc">Gc</span>.get()) <span class="kwa">with</span> <span class="kwc">Gc</span>.minor_heap_size = <span class="num">1024</span> * <span class="num">2048</span> }

<span class="kwa">let</span> () =
  <span class="kwc">List</span>.iter (<span class="kwa">fun</span> i -&gt; write_frequencies i dna_three) [<span class="num">1</span>; <span class="num">2</span>];
  <span class="kwc">List</span>.iter (<span class="kwa">fun</span> k -&gt; write_count k dna_three)
    [<span class="str">&quot;GGT&quot;</span>; <span class="str">&quot;GGTA&quot;</span>; <span class="str">&quot;GGTATT&quot;</span>; <span class="str">&quot;GGTATTTTAATT&quot;</span>; <span class="str">&quot;GGTATTTTAATTTATAGT&quot;</span>]
