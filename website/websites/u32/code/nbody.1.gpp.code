<span class="com">/*</span>
<span class="com"> * The Computer Language Benchmarks Game</span>
<span class="com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * contributed by Jeffrey Beu</span>
<span class="com"> *  </span>
<span class="com"> */</span>

<span class="ppc">#include &lt;stdio.h&gt;</span>
<span class="ppc">#include &lt;stdlib.h&gt;</span>
<span class="ppc">#include &lt;math.h&gt;</span>

<span class="kwa">namespace</span> 
{

<span class="kwc">template</span>&lt; typename ...  &gt; <span class="kwb">struct</span> tuple{};

<span class="kwc">template</span>&lt;typename H, typename... T&gt;
<span class="kwb">struct</span> tuple&lt;H,T...&gt;
{
  <span class="kwc">typedef</span> H head;
  <span class="kwc">typedef</span> tuple&lt;T...&gt; tail;
 
  head fst;
  tail snd;
 
  <span class="kwd">tuple</span>(<span class="kwb">const</span> head&amp; a,<span class="kwb">const</span> tail&amp; b):<span class="kwd">fst</span>(a),<span class="kwd">snd</span>(b){}
  <span class="kwd">tuple</span>() = <span class="kwa">delete</span>;
};

tuple&lt;&gt; <span class="kwd">construct_tuple</span>()
{ <span class="kwa">return</span> tuple&lt;&gt;();  
}

<span class="kwc">template</span>&lt;<span class="kwc">class</span> H, <span class="kwc">class</span>...T&gt; tuple&lt;H,T...&gt; <span class="kwd">construct_tuple</span>(H h, T... a)
{
  tuple&lt;H,T...&gt; <span class="kwd">r</span>(h,<span class="kwd">construct_tuple</span>(a...));
  <span class="kwa">return</span> r;
}

<span class="kwc">template</span>&lt;<span class="kwc">class</span> OP&gt; <span class="kwb">void</span> <span class="kwd">FOREACH</span>(OP,tuple&lt;&gt;){}
<span class="kwc">template</span>&lt;typename OP,<span class="kwc">class</span> ...T&gt; <span class="kwb">void</span> <span class="kwd">FOREACH</span>(OP&amp; op,tuple&lt;T...&gt;&amp; t)
{
  <span class="kwd">op</span>(t.fst);
  <span class="kwd">FOREACH</span>(op,t.snd);
}

<span class="kwc">template</span>&lt;<span class="kwc">class</span> OP&gt; <span class="kwb">void</span> <span class="kwd">FOR</span>(OP,tuple&lt;&gt;){}

<span class="kwc">template</span>&lt;typename OP, <span class="kwc">class</span> ...T&gt; <span class="kwb">void</span> <span class="kwd">FOR</span>(OP&amp; op,tuple&lt;T...&gt;&amp; t)
{
  <span class="kwd">op</span>(t);
  <span class="kwd">FOR</span>(op,t.snd);
}



<span class="kwb">struct</span> body {
  <span class="kwb">double</span> x, y, z;
  <span class="kwb">double</span> vx, vy, vz;
  <span class="kwb">const double</span> mass;
};

<span class="kwb">const double</span> pi = <span class="num">3.141592653589793</span>;
<span class="kwb">const double</span> solar_mass = <span class="num">4</span> * pi * pi;
<span class="kwb">const double</span> days_per_year = <span class="num">365.24</span>;
<span class="kwb">const double</span> dt = <span class="num">0.01</span>;

<span class="kwb">const</span> body sun = 
{
  <span class="num">0</span>,<span class="num">0</span>,<span class="num">0</span>,
  <span class="num">0</span>,<span class="num">0</span>,<span class="num">0</span>,
  solar_mass
};

<span class="kwb">const</span> body jupiter =  
{
   <span class="num">4.84143144246472090e+00</span>,
  -<span class="num">1.16032004402742839e+00</span>,
  -<span class="num">1.03622044471123109e-01</span>,
   <span class="num">1.66007664274403694e-03</span> * days_per_year,
   <span class="num">7.69901118419740425e-03</span> * days_per_year,
  -<span class="num">6.90460016972063023e-05</span> * days_per_year,
   <span class="num">9.54791938424326609e-04</span> * solar_mass
};

<span class="kwb">const</span> body saturn = 
{        
   <span class="num">8.34336671824457987e+00</span>,
   <span class="num">4.12479856412430479e+00</span>,
  -<span class="num">4.03523417114321381e-01</span>,
  -<span class="num">2.76742510726862411e-03</span> * days_per_year,
   <span class="num">4.99852801234917238e-03</span> * days_per_year,
   <span class="num">2.30417297573763929e-05</span> * days_per_year,
   <span class="num">2.85885980666130812e-04</span> * solar_mass
};

<span class="kwb">const</span> body uranus =
{ 
   <span class="num">1.28943695621391310e+01</span>,
  -<span class="num">1.51111514016986312e+01</span>,
  -<span class="num">2.23307578892655734e-01</span>,
   <span class="num">2.96460137564761618e-03</span> * days_per_year,
   <span class="num">2.37847173959480950e-03</span> * days_per_year,
  -<span class="num">2.96589568540237556e-05</span> * days_per_year,
   <span class="num">4.36624404335156298e-05</span> * solar_mass
};

<span class="kwb">const</span> body neptune = 
{  
   <span class="num">1.53796971148509165e+01</span>,
  -<span class="num">2.59193146099879641e+01</span>,
   <span class="num">1.79258772950371181e-01</span>,
   <span class="num">2.68067772490389322e-03</span> * days_per_year,
   <span class="num">1.62824170038242295e-03</span> * days_per_year,
  -<span class="num">9.51592254519715870e-05</span> * days_per_year,
   <span class="num">5.15138902046611451e-05</span> * solar_mass
};


<span class="kwb">struct</span>
{ <span class="kwb">struct</span> 
  { <span class="kwc">template</span>&lt;<span class="kwc">class</span> T&gt; <span class="kwb">struct</span> foreach_block
    { T &amp;t;
      <span class="kwc">template</span>&lt;<span class="kwc">class</span> T2&gt; <span class="kwb">void</span> <span class="kwc">operator</span>()(T2&amp; b2)
      {
	<span class="kwc">auto</span>&amp; b = t.fst;
        <span class="kwb">double</span> dx = b.x - b2.x;
        <span class="kwb">double</span> dy = b.y - b2.y;
        <span class="kwb">double</span> dz = b.z - b2.z;
        <span class="kwb">double</span> distance = <span class="kwd">sqrt</span>(dx * dx + dy * dy + dz * dz);
        <span class="kwb">double</span> mag = dt / (distance * distance * distance);
        b.vx -= dx * b2.mass * mag;
        b.vy -= dy * b2.mass * mag;
        b.vz -= dz * b2.mass * mag;
        b2.vx += dx * b.mass * mag;
        b2.vy += dy * b.mass * mag;
        b2.vz += dz * b.mass * mag; 
      }     
    };

    
    <span class="kwc">template</span>&lt;<span class="kwc">class</span> T&gt; <span class="kwb">void</span> <span class="kwc">operator</span>()(T&amp; bodies)
    {
      foreach_block&lt;<span class="kwc">decltype</span>(bodies)&gt; run = {bodies};
      <span class="kwd">FOREACH</span>(run,bodies.snd);
    }
  }for_block;


  <span class="kwb">struct</span>
  {
    <span class="kwc">template</span>&lt;<span class="kwc">class</span> T&gt; <span class="kwb">void</span> <span class="kwc">operator</span>()(T&amp; body) 
    {
      body.x += dt * body.vx;
      body.y += dt * body.vy;
      body.z += dt * body.vz;
    }
  }foreach_block;
  
  <span class="kwc">template</span>&lt;<span class="kwc">class</span> T&gt; <span class="kwb">void</span> <span class="kwc">operator</span>()(T&amp; bodies)
  {
    <span class="kwd">FOR</span>(for_block,bodies);
    <span class="kwd">FOREACH</span>(foreach_block,bodies);
  }
  
}advance;

<span class="kwb">struct</span>
{
  <span class="kwb">struct</span> for_block
  { <span class="kwb">double</span> &amp;e;
    <span class="kwc">template</span>&lt;<span class="kwc">class</span> T&gt; <span class="kwb">struct</span> foreach_block
    { T &amp;t;
      <span class="kwb">double</span> &amp;e;
      <span class="kwc">template</span>&lt;<span class="kwc">class</span> T2&gt; <span class="kwb">void</span> <span class="kwc">operator</span>()(T2&amp; b2)
      {
	<span class="kwc">auto</span>&amp; b = t.fst;
        <span class="kwb">double</span> dx = b.x - b2.x;
        <span class="kwb">double</span> dy = b.y - b2.y;
        <span class="kwb">double</span> dz = b.z - b2.z;
        <span class="kwb">double</span> distance = <span class="kwd">sqrt</span>(dx * dx + dy * dy + dz * dz);
        e -= (b.mass * b2.mass) / distance;
      }  
    };
    
    <span class="kwc">template</span>&lt;<span class="kwc">class</span> T&gt; <span class="kwb">void</span> <span class="kwc">operator</span>()(T&amp; bodies)
    {
      <span class="kwc">auto</span>&amp; p = bodies.fst;
      e += <span class="num">0.5</span> * p.mass * (p.vx * p.vx + p.vy * p.vy + p.vz * p.vz);
      
      foreach_block&lt;<span class="kwc">decltype</span>(bodies)&gt; run = {bodies,e};
      <span class="kwd">FOREACH</span>(run,bodies.snd);
    }
  };

  <span class="kwc">template</span>&lt;<span class="kwc">class</span> T&gt; <span class="kwb">double</span> <span class="kwc">operator</span>()(T&amp; bodies)
  {
    <span class="kwb">double</span> e = <span class="num">0.0</span>;
    for_block run = {e};
    <span class="kwd">FOR</span>(run,bodies);
    <span class="kwa">return</span> e;
  }
  
}energy;

<span class="kwb">struct</span>
{
  <span class="kwb">struct</span> foreach_block
  {
    <span class="kwb">double</span> &amp;px, &amp;py, &amp;pz;
    <span class="kwc">template</span>&lt;<span class="kwc">class</span> T&gt; <span class="kwb">void</span> <span class="kwc">operator</span>()(T&amp; body) 
    {
      px += body.vx * body.mass;
      py += body.vy * body.mass;
      pz += body.vz * body.mass;
    }
  };
  
  <span class="kwc">template</span>&lt;<span class="kwc">class</span> T&gt; <span class="kwb">void</span> <span class="kwc">operator</span>()(T&amp; bodies)
  {
    <span class="kwb">double</span> px = <span class="num">0.0</span>, py = <span class="num">0.0</span>, pz = <span class="num">0.0</span>;
    foreach_block run = {px,py,pz};
    <span class="kwd">FOREACH</span>(run,bodies);
    
    bodies.fst.vx = -px / solar_mass;
    bodies.fst.vy = -py / solar_mass;
    bodies.fst.vz = -pz / solar_mass;
  }
  
}offset;


}

<span class="kwb">int</span> <span class="kwd">main</span>(<span class="kwb">int</span>,<span class="kwb">char</span>** argv)
{
 
  <span class="kwc">auto</span> solar_system = <span class="kwd">construct_tuple</span>(sun,jupiter,saturn,uranus,neptune);
  <span class="kwd">offset</span>(solar_system);

  <span class="kwd">printf</span> (<span class="str">&quot;%.9f</span><span class="esc">\n</span><span class="str">&quot;</span>, <span class="kwd">energy</span>(solar_system));
  
  <span class="kwb">int</span> n = <span class="kwd">atoi</span>(argv[<span class="num">1</span>]);
  
  <span class="kwa">for</span> (<span class="kwb">int</span> i = <span class="num">1</span>; i &lt;= n; i++)
  {
    <span class="kwd">advance</span>(solar_system);
  }

  <span class="kwd">printf</span> (<span class="str">&quot;%.9f</span><span class="esc">\n</span><span class="str">&quot;</span>, <span class="kwd">energy</span>(solar_system));

  <span class="kwa">return</span> <span class="num">0</span>;
}



