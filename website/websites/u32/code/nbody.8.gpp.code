<span class="com">/* The Computer Language Benchmarks Game</span>
<span class="com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Mark C. Lewis</span>
<span class="com">   modified slightly by Chad Whipkey</span>
<span class="com">   converted from java to c++,added sse support, by Branimir Maksimovic</span>
<span class="com">   converted from c++ to c, by Alexey Medvedchikov </span>
<span class="com">   converted from c to c++11, by Walter Landry</span>
<span class="com">   modified by Dmitri Naumov</span>
<span class="com">*/</span>

<span class="ppc">#include &lt;algorithm&gt;</span>
<span class="ppc">#include &lt;stdio.h&gt;</span>
<span class="ppc">#include &lt;cmath&gt;</span>
<span class="ppc">#include &lt;stdlib.h&gt;</span>
<span class="ppc">#include &lt;immintrin.h&gt;</span>
<span class="ppc">#include &lt;array&gt;</span>

<span class="kwc">constexpr</span> <span class="kwb">double</span> <span class="kwd">PI</span>(<span class="num">3.141592653589793</span>);
<span class="kwc">constexpr</span> <span class="kwb">double</span> <span class="kwd">SOLAR_MASS</span> ( <span class="num">4</span> * PI * PI );
<span class="kwc">constexpr</span> <span class="kwb">double</span> <span class="kwd">DAYS_PER_YEAR</span>(<span class="num">365.24</span>);

<span class="kwb">struct</span> body {
  <span class="kwb">double</span> x[<span class="num">3</span>], fill, v[<span class="num">3</span>], mass;
  <span class="kwc">constexpr</span> <span class="kwd">body</span>(<span class="kwb">double</span> x0, <span class="kwb">double</span> x1, <span class="kwb">double</span> x2, <span class="kwb">double</span> v0, <span class="kwb">double</span> v1, <span class="kwb">double</span> v2,  <span class="kwb">double</span> Mass):
    x{x0,x1,x2}, <span class="kwd">fill</span>(<span class="num">0</span>), v{v0,v1,v2}, <span class="kwd">mass</span>(Mass) {}
};

<span class="kwc">class</span> N_Body_System
{
  <span class="kwb">static</span> std::array&lt;body,<span class="num">5</span>&gt; bodies;

  <span class="kwb">void</span> <span class="kwd">offset_momentum</span>()
  {
    <span class="kwb">unsigned int</span> k;
    <span class="kwa">for</span>(<span class="kwc">auto</span> &amp;body: bodies)
      <span class="kwa">for</span>(k = <span class="num">0</span>; k &lt; <span class="num">3</span>; ++k)
        bodies[<span class="num">0</span>].v[k] -= body.v[k] * body.mass / SOLAR_MASS;
  }

<span class="kwc">public</span>:
  <span class="kwd">N_Body_System</span>()
  {
    <span class="kwd">offset_momentum</span>();
  }
  <span class="kwb">void</span> <span class="kwd">advance</span>(<span class="kwb">double</span> dt)
  {
    <span class="kwc">constexpr</span> <span class="kwb">unsigned int</span> N = ((bodies.<span class="kwd">size</span>() - <span class="num">1</span>) * bodies.<span class="kwd">size</span>()) / <span class="num">2</span>;

    <span class="kwb">static double</span> r[N][<span class="num">4</span>];
    <span class="kwb">static double</span> mag[N];

    <span class="kwb">unsigned int</span> i, m;
    __m128d dx[<span class="num">3</span>], dsquared, distance, dmag;

    i=<span class="num">0</span>;
    <span class="kwa">for</span>(<span class="kwc">auto</span> <span class="kwd">bi</span>(bodies.<span class="kwd">begin</span>()); bi!=bodies.<span class="kwd">end</span>(); ++bi)
      {
        <span class="kwc">auto</span> <span class="kwd">bj</span>(bi);
        <span class="kwa">for</span>(++bj; bj!=bodies.<span class="kwd">end</span>(); ++bj, ++i)
          <span class="kwa">for</span> (m=<span class="num">0</span>; m&lt;<span class="num">3</span>; ++m)
            r[i][m] = bi-&gt;x[m] - bj-&gt;x[m];
      }

    <span class="kwa">for</span> (i=<span class="num">0</span>; i&lt;N; i+=<span class="num">2</span>)
      {
        <span class="kwa">for</span> (m=<span class="num">0</span>; m&lt;<span class="num">3</span>; ++m)
          {
            dx[m] = <span class="kwd">_mm_loadl_pd</span>(dx[m], &amp;r[i][m]);
            dx[m] = <span class="kwd">_mm_loadh_pd</span>(dx[m], &amp;r[i+<span class="num">1</span>][m]);
          }

        dsquared = dx[<span class="num">0</span>] * dx[<span class="num">0</span>] + dx[<span class="num">1</span>] * dx[<span class="num">1</span>] + dx[<span class="num">2</span>] * dx[<span class="num">2</span>];
        distance = <span class="kwd">_mm_cvtps_pd</span>(<span class="kwd">_mm_rsqrt_ps</span>(<span class="kwd">_mm_cvtpd_ps</span>(dsquared)));

        <span class="kwa">for</span> (m=<span class="num">0</span>; m&lt;<span class="num">2</span>; ++m)
          distance = distance * <span class="kwd">_mm_set1_pd</span>(<span class="num">1.5</span>)
            - ((<span class="kwd">_mm_set1_pd</span>(<span class="num">0.5</span>) * dsquared) * distance)
            * (distance * distance);

        dmag = <span class="kwd">_mm_set1_pd</span>(dt) / (dsquared) * distance;
        <span class="kwd">_mm_store_pd</span>(&amp;mag[i], dmag);
      }

    i=<span class="num">0</span>;
    <span class="kwa">for</span>(<span class="kwc">auto</span> <span class="kwd">bi</span>(bodies.<span class="kwd">begin</span>()); bi!=bodies.<span class="kwd">end</span>(); ++bi)
      {
        <span class="kwc">auto</span> <span class="kwd">bj</span>(bi);
        <span class="kwa">for</span>(++bj; bj!=bodies.<span class="kwd">end</span>(); ++bj, ++i)
          <span class="kwa">for</span>(m=<span class="num">0</span>; m&lt;<span class="num">3</span>; ++m)
            {
              <span class="kwb">const double</span> x = r[i][m] * mag[i];
              bi-&gt;v[m] -= x * bj-&gt;mass;
              bj-&gt;v[m] += x * bi-&gt;mass;
            }
      }

    <span class="kwa">for</span>(<span class="kwc">auto</span> &amp;body: bodies)
      <span class="kwa">for</span>(m=<span class="num">0</span>; m&lt;<span class="num">3</span>; ++m)
        body.x[m] += dt * body.v[m];
  }

  <span class="kwb">double</span> <span class="kwd">energy</span>()
  {
    <span class="kwb">double</span> <span class="kwd">e</span>(<span class="num">0.0</span>);
    <span class="kwa">for</span>(<span class="kwc">auto</span> <span class="kwd">bi</span>(bodies.<span class="kwd">cbegin</span>()); bi!=bodies.<span class="kwd">cend</span>(); ++bi)
      {
        e += bi-&gt;mass * ( bi-&gt;v[<span class="num">0</span>] * bi-&gt;v[<span class="num">0</span>]
                          + bi-&gt;v[<span class="num">1</span>] * bi-&gt;v[<span class="num">1</span>]
                          + bi-&gt;v[<span class="num">2</span>] * bi-&gt;v[<span class="num">2</span>] ) / <span class="num">2</span>.;

        <span class="kwc">auto</span> <span class="kwd">bj</span>(bi);
        <span class="kwa">for</span>(++bj; bj!=bodies.<span class="kwd">end</span>(); ++bj)
          {
            <span class="kwb">double</span> distance = <span class="num">0</span>;
            <span class="kwa">for</span>(<span class="kwc">auto</span> k=<span class="num">0</span>; k&lt;<span class="num">3</span>; ++k)
            {
              <span class="kwb">const double</span> dx = bi-&gt;x[k] - bj-&gt;x[k];
              distance += dx * dx;
            }

            e -= (bi-&gt;mass * bj-&gt;mass) / std::<span class="kwd">sqrt</span>(distance);
          }
      }
    <span class="kwa">return</span> e;
  }
};


std::array&lt;body,<span class="num">5</span>&gt; N_Body_System::bodies{{
    <span class="com">/* sun */</span>
    <span class="kwd">body</span>(<span class="num">0</span>., <span class="num">0</span>., <span class="num">0</span>. ,
         <span class="num">0</span>., <span class="num">0</span>., <span class="num">0</span>. ,
         SOLAR_MASS),
    <span class="com">/* jupiter */</span>
    <span class="kwd">body</span>(<span class="num">4.84143144246472090e+00</span>,
         -<span class="num">1.16032004402742839e+00</span>,
         -<span class="num">1.03622044471123109e-01</span> ,
         <span class="num">1.66007664274403694e-03</span> * DAYS_PER_YEAR,
         <span class="num">7.69901118419740425e-03</span> * DAYS_PER_YEAR,
         -<span class="num">6.90460016972063023e-05</span> * DAYS_PER_YEAR ,
         <span class="num">9.54791938424326609e-04</span> * SOLAR_MASS
         ),
    <span class="com">/* saturn */</span>
    <span class="kwd">body</span>(<span class="num">8.34336671824457987e+00</span>,
         <span class="num">4.12479856412430479e+00</span>,
         -<span class="num">4.03523417114321381e-01</span> ,
         -<span class="num">2.76742510726862411e-03</span> * DAYS_PER_YEAR,
         <span class="num">4.99852801234917238e-03</span> * DAYS_PER_YEAR,
         <span class="num">2.30417297573763929e-05</span> * DAYS_PER_YEAR ,
         <span class="num">2.85885980666130812e-04</span> * SOLAR_MASS
         ),
    <span class="com">/* uranus */</span>
    <span class="kwd">body</span>(<span class="num">1.28943695621391310e+01</span>,
         -<span class="num">1.51111514016986312e+01</span>,
         -<span class="num">2.23307578892655734e-01</span> ,
         <span class="num">2.96460137564761618e-03</span> * DAYS_PER_YEAR,
         <span class="num">2.37847173959480950e-03</span> * DAYS_PER_YEAR,
         -<span class="num">2.96589568540237556e-05</span> * DAYS_PER_YEAR ,
         <span class="num">4.36624404335156298e-05</span> * SOLAR_MASS
         ),
    <span class="com">/* neptune */</span>
    <span class="kwd">body</span>(<span class="num">1.53796971148509165e+01</span>,
         -<span class="num">2.59193146099879641e+01</span>,
         <span class="num">1.79258772950371181e-01</span> ,
         <span class="num">2.68067772490389322e-03</span> * DAYS_PER_YEAR,
         <span class="num">1.62824170038242295e-03</span> * DAYS_PER_YEAR,
         -<span class="num">9.51592254519715870e-05</span> * DAYS_PER_YEAR ,
         <span class="num">5.15138902046611451e-05</span> * SOLAR_MASS
         )
  }};

<span class="kwb">int</span> <span class="kwd">main</span>(<span class="kwb">int</span> , <span class="kwb">char</span>** argv)
{
  <span class="kwb">int</span> i, n = <span class="kwd">atoi</span>(argv[<span class="num">1</span>]);
  N_Body_System system;

  <span class="kwd">printf</span>(<span class="str">&quot;%.9f</span><span class="esc">\n</span><span class="str">&quot;</span>, system.<span class="kwd">energy</span>());
  <span class="kwa">for</span> (i = <span class="num">0</span>; i &lt; n; ++i)
    system.<span class="kwd">advance</span>(<span class="num">0.01</span>);
  <span class="kwd">printf</span>(<span class="str">&quot;%.9f</span><span class="esc">\n</span><span class="str">&quot;</span>, system.<span class="kwd">energy</span>());

  <span class="kwa">return</span> <span class="num">0</span>;
}
