<span class="com">/* The Computer Language Benchmarks Game</span>
<span class="com">* http://benchmarksgame.alioth.debian.org/</span>
<span class="com">*</span>
<span class="com">* Contributed by Jon Harrop</span>
<span class="com">* Modified by Alex Mizrahi</span>
<span class="com">* Modified by Andreas Schäfer</span>
<span class="com">* Modified by aardsplat-guest</span>
<span class="com">*/</span>

<span class="ppc">#include &lt;iostream&gt;</span>
<span class="ppc">#include &lt;algorithm&gt;</span>
<span class="ppc">#include &lt;future&gt;</span>
<span class="ppc">#include &lt;vector&gt;</span>

<span class="ppc">#include &lt;boost/pool/object_pool.hpp&gt;</span>

<span class="kwc">constexpr</span> <span class="kwb">int</span> threads{<span class="num">16</span>};

<span class="kwb">struct</span> Node {
   Node *l,*r;
   <span class="kwb">int</span> i;
   <span class="kwd">Node</span>(<span class="kwb">int</span> i) : <span class="kwd">l</span>(<span class="num">0</span>),<span class="kwd">r</span>(<span class="num">0</span>),<span class="kwd">i</span>(i) {}
   <span class="kwd">Node</span>(Node *l,<span class="kwb">int</span> i,Node *r) : <span class="kwd">l</span>(l),<span class="kwd">r</span>(r),<span class="kwd">i</span>(i) {}
   <span class="kwb">int</span> <span class="kwd">check</span>() <span class="kwb">const</span>
   {
      <span class="kwa">if</span> (l)
         <span class="kwa">return</span> l-&gt;<span class="kwd">check</span>() + i - r-&gt;<span class="kwd">check</span>();
      <span class="kwa">else return</span> i;
   }
};

<span class="kwa">using</span> Node_pool = boost::object_pool&lt;Node&gt;;

Node *<span class="kwd">make</span>(<span class="kwb">int</span> i,<span class="kwb">int</span> d,Node_pool&amp; pool)
{
   <span class="kwa">if</span> (d==<span class="num">0</span>)
      <span class="kwa">return</span> pool.<span class="kwd">construct</span>(i);
   <span class="kwa">return</span> pool.<span class="kwd">construct</span>(<span class="kwd">make</span>(<span class="num">2</span>*i-<span class="num">1</span>,d-<span class="num">1</span>,pool),i,<span class="kwd">make</span>(<span class="num">2</span>*i,d-<span class="num">1</span>,pool));
}

<span class="kwb">int</span> <span class="kwd">make_iteration</span>(<span class="kwb">int</span> from,<span class="kwb">int</span> to,<span class="kwb">int</span> d,<span class="kwb">bool</span> thread)
{
   <span class="kwb">int</span> c{<span class="num">0</span>};
   <span class="kwa">if</span> (thread) {
      std::vector&lt;std::future&lt;<span class="kwb">int</span>&gt;&gt;futures{};
      <span class="kwa">for</span> (<span class="kwb">int</span> j=<span class="num">0</span>; j&lt;threads; ++j) {
         <span class="kwb">int</span> span{(to-from+<span class="num">1</span>)/threads};
         futures.<span class="kwd">emplace_back</span>(std::<span class="kwd">async</span>(std::launch::async,
            make_iteration,from+span*j,span+span*j,d,<span class="kwa">false</span>));
      }
      <span class="kwa">for</span> (<span class="kwc">auto</span>&amp; fti : futures) {
         c += fti.<span class="kwd">get</span>();
      }
   }
   <span class="kwa">else</span> {
      Node_pool pool;
      <span class="kwa">for</span> (<span class="kwb">int</span> i=from; i&lt;=to; ++i) {
         Node *a = <span class="kwd">make</span>(i,d,pool),*b = <span class="kwd">make</span>(-i,d,pool);
         c += a-&gt;<span class="kwd">check</span>() + b-&gt;<span class="kwd">check</span>();
      }
   }
   <span class="kwa">return</span> c;
}

<span class="kwb">int</span> <span class="kwd">main</span>(<span class="kwb">int</span> argc,<span class="kwb">char</span> *argv[])
{
   <span class="kwb">int</span> min_depth = <span class="num">4</span>,
      max_depth = std::<span class="kwd">max</span>(min_depth+<span class="num">2</span>,
         (argc == <span class="num">2</span> ? <span class="kwd">atoi</span>(argv[<span class="num">1</span>]) : <span class="num">10</span>)),
      stretch_depth = max_depth+<span class="num">1</span>;

   {
      Node_pool pool;
      Node *c = <span class="kwd">make</span>(<span class="num">0</span>,stretch_depth,pool);
      std::cout &lt;&lt; <span class="str">&quot;stretch tree of depth &quot;</span> &lt;&lt; stretch_depth &lt;&lt; <span class="str">&quot;</span><span class="esc">\t</span> <span class="str">&quot;</span>
         &lt;&lt; <span class="str">&quot;check: &quot;</span> &lt;&lt; c-&gt;<span class="kwd">check</span>() &lt;&lt; std::endl;
   }

   Node_pool long_lived_pool;
   Node *long_lived_tree=<span class="kwd">make</span>(<span class="num">0</span>,max_depth,long_lived_pool);

   <span class="kwa">for</span> (<span class="kwb">int</span> d=min_depth; d&lt;=max_depth; d+=<span class="num">2</span>) {
      <span class="kwb">int</span> iterations = <span class="num">1</span> &lt;&lt; (max_depth - d + min_depth);
      <span class="kwb">int</span>   c=<span class="num">0</span>;
      c = <span class="kwd">make_iteration</span>(<span class="num">1</span>,iterations,d,<span class="kwa">true</span>);
      std::cout &lt;&lt; (<span class="num">2</span>*iterations) &lt;&lt; <span class="str">&quot;</span><span class="esc">\t</span> <span class="str">trees of depth &quot;</span> &lt;&lt; d &lt;&lt; <span class="str">&quot;</span><span class="esc">\t</span> <span class="str">&quot;</span>
         &lt;&lt; <span class="str">&quot;check: &quot;</span> &lt;&lt; c &lt;&lt; std::endl;
   }

   std::cout &lt;&lt; <span class="str">&quot;long lived tree of depth &quot;</span> &lt;&lt; max_depth &lt;&lt; <span class="str">&quot;</span><span class="esc">\t</span> <span class="str">&quot;</span>
      &lt;&lt; <span class="str">&quot;check: &quot;</span> &lt;&lt; (long_lived_tree-&gt;<span class="kwd">check</span>()) &lt;&lt; <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span>;

   <span class="kwa">return</span> <span class="num">0</span>;
}
