<span class="slc">;;    The Computer Language Benchmarks Game</span>
<span class="slc">;;    http://benchmarksgame.alioth.debian.org/</span>
<span class="slc">;;</span>
<span class="slc">;;    Adapted from the C (gcc) code by Sebastien Loisel</span>
<span class="slc">;;</span>
<span class="slc">;;    Contributed by Christopher Neufeld</span>
<span class="slc">;;    Modified by Juho Snellman 2005-10-26</span>
<span class="slc">;;      * Use SIMPLE-ARRAY instead of ARRAY in declarations</span>
<span class="slc">;;      * Use TRUNCATE instead of / for fixnum division</span>
<span class="slc">;;      * Rearrange EVAL-A to make it more readable and a bit faster</span>
<span class="slc">;;    Modified by Andy Hefner 2008-09-18</span>
<span class="slc">;;      * Eliminate array consing</span>
<span class="slc">;;      * Clean up type declarations in eval-A</span>
<span class="slc">;;      * Distribute work across multiple cores on SBCL</span>
<span class="slc">;;    Modified by Witali Kusnezow 2008-12-02</span>
<span class="slc">;;      * use right shift instead of truncate for division in eval-A</span>
<span class="slc">;;      * redefine eval-A as a macro</span>


<span class="slc">;; This is our most expensive function.  Optimized with the knowledge</span>
<span class="slc">;; that 'n' will never be &quot;huge&quot;.  This will break if 'n' exceeds</span>
<span class="slc">;; approximately half of the square root of the largest fixnum</span>
<span class="slc">;; supported by the implementation.  On 32-bit sbcl,</span>
<span class="slc">;; 'most-positive-fixnum' is 536870911, and we can support values of</span>
<span class="slc">;; 'n' above 11000.</span>

(<span class="kwa">defmacro</span> eval-A (<span class="kwa">i</span> j)
  `(<span class="kwa">let</span>* ((<span class="kwa">n</span> (+ ,i ,j))
          (<span class="kwa">n</span>+<span class="num">1</span> (<span class="kwa">1</span>+ n)))
     (<span class="kwa">declare</span> (<span class="kwa">type</span> (<span class="kwa">integer</span> <span class="num">0 22000</span>) n n+<span class="num">1</span>))
     (/ (<span class="kwa">float</span> (+ (<span class="kwa">ash</span> (* n n+<span class="num">1</span>) -<span class="num">1</span>) ,i <span class="num">1</span>) <span class="num">0</span>d0))))

(<span class="kwa">defun</span> eval-At-times-u (<span class="kwa">u</span> n Au start end)
  (<span class="kwa">declare</span> (<span class="kwa">type</span> fixnum n start end)
           (<span class="kwa">type</span> (<span class="kwa">simple-array</span> double-float) u Au))
  (<span class="kwa">loop</span> for i from start below end do
        (<span class="kwa">setf</span> (<span class="kwa">aref</span> Au i)
              (<span class="kwa">loop</span> for j below n
                    summing (* (<span class="kwa">aref</span> u j) (<span class="kwa">eval-A</span> j i))
                    of-type double-float))))

(<span class="kwa">defun</span> eval-A-times-u (<span class="kwa">u</span> n Au start end)
  (<span class="kwa">declare</span> (<span class="kwa">type</span> fixnum n start end)
           (<span class="kwa">type</span> (<span class="kwa">simple-array</span> double-float) u Au))
  (<span class="kwa">loop</span> for i from start below end do
        (<span class="kwa">setf</span> (<span class="kwa">aref</span> Au i)
              (<span class="kwa">loop</span> for j below n
                    summing (* (<span class="kwa">aref</span> u j) (<span class="kwa">eval-A</span> i j))
                    of-type double-float))))

#+sb-thread
(<span class="kwa">defun</span> execute-parallel (<span class="kwa">start</span> end function)
  (<span class="kwa">declare</span> (<span class="kwa">optimize</span> (<span class="kwa">speed</span> <span class="num">0</span>)))
  (<span class="kwa">let</span>* ((<span class="kwa">num-threads</span> <span class="num">4</span>))
    (<span class="kwa">loop</span> with step = (<span class="kwa">truncate</span> (<span class="kwa">-</span> end start) num-threads)
          for index from start below end by step
          collecting (<span class="kwa">let</span> ((<span class="kwa">start</span> index)
                           (<span class="kwa">end</span> (<span class="kwa">min</span> end (+ index step))))
                       (<span class="kwa">sb-thread</span>:make-thread
                        (<span class="kwa">lambda</span> () (<span class="kwa">funcall</span> function start end))))
          into threads
          finally (<span class="kwa">mapcar</span> #'sb-thread:join-thread threads))))

#-sb-thread
(<span class="kwa">defun</span> execute-parallel (<span class="kwa">start</span> end function )
  (<span class="kwa">funcall</span> function start end))

(<span class="kwa">defun</span> eval-AtA-times-u (<span class="kwa">u</span> AtAu v n start end)
  (<span class="kwa">execute-parallel</span> start end
    (<span class="kwa">lambda</span> (<span class="kwa">start</span> end)
      (<span class="kwa">eval-A-times-u</span> u n v start end)))
  (<span class="kwa">execute-parallel</span> start end
    (<span class="kwa">lambda</span> (<span class="kwa">start</span> end)
      (<span class="kwa">eval-At-times-u</span> v n AtAu start end))))

(<span class="kwa">defun</span> main (&amp;optional n-supplied)
  (<span class="kwa">let</span> ((<span class="kwa">n</span> (<span class="kwa">or</span> n-supplied
               (<span class="kwa">parse-integer</span> (<span class="kwa">or</span> (<span class="kwa">car</span> (<span class="kwa">last</span> #+sbcl sb-ext:*posix-argv*
                                             #+clisp ext:*args*
                                             #+cmu extensions:*command-line-strings*
                                             #+gcl  si::*command-args*))
                                  <span class="str">&quot;2000&quot;</span>)))))
    (<span class="kwa">declare</span> (<span class="kwa">type</span> fixnum n))
    (<span class="kwa">or</span> (<span class="kwa">typep</span> (* (<span class="kwa">-</span> (* <span class="num">2</span> n) <span class="num">1</span>) (<span class="kwa">-</span> (* <span class="num">2</span> n) <span class="num">2</span>)) 'fixnum)
        (<span class="kwa">error</span> <span class="str">&quot;The supplied value of 'n' breaks the optimizations in EVAL-A&quot;</span>))
    (<span class="kwa">let</span> ((<span class="kwa">u</span> (<span class="kwa">make-array</span> n :element-type 'double-float :initial-element <span class="num">1.0</span>d0))
          (<span class="kwa">v</span> (<span class="kwa">make-array</span> n :element-type 'double-float))
          (<span class="kwa">tmp</span> (<span class="kwa">make-array</span> n :element-type 'double-float)))
      (<span class="kwa">declare</span> (<span class="kwa">type</span> (<span class="kwa">simple-array</span> double-float) U V))
      (<span class="kwa">dotimes</span> (<span class="kwa">i</span> <span class="num">10</span>)
        (<span class="kwa">eval-AtA-times-u</span> u v tmp n <span class="num">0</span> n)
        (<span class="kwa">eval-AtA-times-u</span> v u tmp n <span class="num">0</span> n))
      (<span class="kwa">let</span> ((<span class="kwa">vBv</span> <span class="num">0.0</span>d0)
            (<span class="kwa">vv</span> <span class="num">0.0</span>d0))
        (<span class="kwa">dotimes</span> (<span class="kwa">i</span> n)
          (<span class="kwa">incf</span> vBv (* (<span class="kwa">aref</span> u i) (<span class="kwa">aref</span> v i)))
          (<span class="kwa">incf</span> vv (* (<span class="kwa">aref</span> v i) (<span class="kwa">aref</span> v i))))
        (<span class="kwa">format</span> t <span class="str">&quot;~11,9F~%&quot;</span> (<span class="kwa">sqrt</span> (<span class="kwa">the</span> (<span class="kwa">double-float</span> <span class="num">0</span>d0) (/ vBv vv))))))))
