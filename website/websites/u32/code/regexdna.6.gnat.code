<span class="slc">--</span>
<span class="slc">-- The Computer Language Benchmarks Game</span>
<span class="slc">-- http://benchmarksgame.alioth.debian.org/</span>
<span class="slc">--</span>
<span class="slc">-- contributed by Francois Fabien (juillet 2012)</span>
<span class="slc">--</span>
<span class="slc">-- regex-dna benchmark using PCRE</span>
<span class="slc">-- with concurrent processing (multi-core).</span>
<span class="slc">--</span>
<span class="slc">-- compile with:</span>
<span class="slc">--   gnatmake -O3 -gnatn -gnatp regexdna.adb</span>
<span class="slc">--</span>
<span class="kwa">pragma</span> Restrictions (No_Abort_Statements);
<span class="kwa">pragma</span> Restrictions (Max_Select_Alternatives =&gt; <span class="num">0</span>);
<span class="kwa">pragma</span> Restrictions (Max_Asynchronous_Select_Nesting =&gt; <span class="num">0</span>);
<span class="kwa">pragma</span> Suppress (All_Checks);

<span class="kwa">with</span> Text_IO;           <span class="kwa">use</span> Text_IO;
<span class="kwa">with</span> Block_Input;       <span class="kwa">use</span> Block_Input;
<span class="kwa">with</span> Pcre;              <span class="kwa">use</span> Pcre;
<span class="kwa">with</span> DNA;               <span class="kwa">use</span> DNA;
<span class="kwa">with</span> System.Task_Info;  <span class="kwa">use</span> System.Task_Info;
<span class="kwa">with</span> Ada.Strings.Fixed; <span class="kwa">use</span> Ada.Strings.Fixed;
<span class="kwa">with</span> Ada.Strings.Maps;  <span class="kwa">use</span> Ada.Strings;

<span class="kwa">procedure</span> Regexdna <span class="kwa">is</span>

   <span class="kwa">package</span> Int_IO <span class="kwa">is new</span> Integer_IO (<span class="kwb">Integer</span>);

   Max_Size  : <span class="kwa">constant</span> := <span class="num">51</span>_000_000; <span class="slc">-- max input size</span>
   Input_Str : String_Access := <span class="kwa">new</span> <span class="kwb">String</span> (<span class="num">1</span> .. Max_Size);

   DNA_Code : String_Access;

   Initial_Length, Code_Length, Seq_Length : <span class="kwb">Natural</span> := <span class="num">0</span>;

   <span class="kwa">type</span> Count_Nbrs <span class="kwa">is range</span> <span class="num">0</span> .. <span class="num">2</span> ** <span class="num">15</span> - <span class="num">1</span>;
   <span class="kwa">for</span> Count_Nbrs<span class="kwd">'Size</span> <span class="kwa">use</span> <span class="num">16</span>;

   <span class="kwa">type</span> Counts_Arrays <span class="kwa">is array</span> (Variant_Index) <span class="kwa">of</span> Count_Nbrs;
   Counts : Counts_Arrays;

   Core_Nbr : <span class="kwa">constant</span> <span class="kwb">Positive</span> := Number_Of_Processors;

   <span class="slc">-- remove headers and ends of line from input file.</span>
   <span class="kwa">procedure</span> Strip_Input
     (Source, Dest : <span class="kwa">in</span> String_Access;
      Last_Src     : <span class="kwa">in</span> <span class="kwb">Natural</span>;
      Last_Dest    : <span class="kwa">out</span> <span class="kwb">Natural</span>)
   <span class="kwa">is</span>

      EOL        : <span class="kwa">constant</span> Maps.Character_Set := Maps.To_Set (ASCII.LF);
      End_Of_Cmt : <span class="kwb">Natural</span>;
      Test_Char  : <span class="kwb">Character</span>;
      Next, Pos  : <span class="kwb">Positive</span>                    := <span class="num">1</span>;
   <span class="kwa">begin</span>
      <span class="kwa">while</span> Next &lt;= Last_Src <span class="kwa">loop</span>
         Test_Char := Source.<span class="kwa">all</span> (Next);
         <span class="kwa">case</span> Test_Char <span class="kwa">is</span>
            <span class="kwa">when</span> ASCII.LF =&gt;
               Next := Next + <span class="num">1</span>;
            <span class="kwa">when</span> <span class="str">'&gt;'</span> =&gt;
               End_Of_Cmt := Index (Source.<span class="kwa">all</span> (Next .. Next + <span class="num">100</span>), EOL);
               Next       := End_Of_Cmt + <span class="num">1</span>;
            <span class="kwa">when others</span> =&gt;
               Dest.<span class="kwa">all</span> (Pos) := Test_Char;
               Pos            := Pos + <span class="num">1</span>;
               Next           := Next + <span class="num">1</span>;
         <span class="kwa">end case</span>;
      <span class="kwa">end loop</span>;
      Last_Dest := Pos - <span class="num">1</span>;
   <span class="kwa">end</span> Strip_Input;

   <span class="kwa">procedure</span> Count_Variant (Var : <span class="kwa">in</span> Variant_Index; Count : <span class="kwa">out</span> Count_Nbrs) <span class="kwa">is</span>
      Regexp       : Pcre_Type;
      Regexp_Extra : Pcre_Extra_type;
      Retcode      : <span class="kwb">Integer</span>;
      Position     : <span class="kwb">Natural</span>    := <span class="num">0</span>;
      L_Count      : Count_Nbrs := <span class="num">0</span>;
      m0, m1       : <span class="kwb">Integer</span>;
   <span class="kwa">begin</span>
      Compile
        (Pattern       =&gt; Variant_Labels (Var).<span class="kwa">all</span>,
         Options       =&gt; <span class="num">0</span>,
         Matcher       =&gt; Regexp,
         Matcher_Extra =&gt; Regexp_Extra);

      <span class="kwa">loop</span>
         Match
           (Regexp,
            Regexp_Extra,
            DNA_Code.<span class="kwa">all</span> (<span class="num">1</span>)<span class="kwd">'Address</span>,
            Code_Length,
            Position,
            <span class="num">0</span>,
            m0,
            m1,
            Retcode);
         <span class="kwa">exit when</span> Retcode &lt; <span class="num">0</span>;
         L_Count  := L_Count + <span class="num">1</span>;
         Position := m1;
      <span class="kwa">end loop</span>;
      Free (Regexp);
      Free (Regexp_Extra);
      Count := L_Count;

   <span class="kwa">end</span> Count_Variant;

   <span class="kwa">procedure</span> Replace_Variants
     (Source    : <span class="kwa">in</span> String_Access;
      Last_Src  : <span class="kwa">in</span> <span class="kwb">Natural</span>;
      Last_Dest : <span class="kwa">out</span> <span class="kwb">Natural</span>)
   <span class="kwa">is</span>

      Dest_Size    : <span class="kwa">constant</span> <span class="kwb">Natural</span> := <span class="kwb">Integer</span> (<span class="kwb">Float</span> (Last_Src) * <span class="num">1.35</span>);
      Dest         : String_Access    := <span class="kwa">new</span> <span class="kwb">String</span> (<span class="num">1</span> .. Dest_Size);
      Regexp       : Pcre_Type;
      Regexp_Extra : Pcre_Extra_type;
      Retcode      : <span class="kwb">Integer</span>;
      Position     : <span class="kwb">Integer</span>;
      Char_To_Copy : <span class="kwb">Integer</span>;
      Start, Stop  : <span class="kwb">Integer</span>          := <span class="num">1</span>;
      m0, m1       : <span class="kwb">Integer</span>;
      IUB          : Mut;
   <span class="kwa">begin</span>

      Compile
        (Pattern       =&gt; <span class="str">&quot;[BDHKMNRSVWY]&quot;</span>,
         Options       =&gt; <span class="num">0</span>,
         Matcher       =&gt; Regexp,
         Matcher_Extra =&gt; Regexp_Extra);

      Position := <span class="num">0</span>;
      <span class="kwa">loop</span>
         Match
           (Regexp,
            Regexp_Extra,
            Source.<span class="kwa">all</span> (<span class="num">1</span>)<span class="kwd">'Address</span>,
            Last_Src,
            Position,
            <span class="num">0</span>,
            m0,
            m1,
            Retcode);
         <span class="kwa">exit when</span> Retcode &lt; <span class="num">0</span>;
         Char_To_Copy         := m0 - Position;
         Stop                 := Start + Char_To_Copy - <span class="num">1</span>;
         Dest (Start .. Stop) := Source (Position + <span class="num">1</span> .. m0);
         <span class="slc">-- insert IUB into destination string</span>
         IUB                          := to_Mut (Source.<span class="kwa">all</span> (m1));
         Start                        := Stop + Iub_Table (IUB).Len + <span class="num">1</span>;
         Dest (Stop + <span class="num">1</span> .. Start - <span class="num">1</span>) := Iub_Table (IUB).Alt.<span class="kwa">all</span>;
         Position                     := m1;

      <span class="kwa">end loop</span>;
      <span class="slc">-- copy remaining part of the source</span>
      Char_To_Copy         := Last_Src - Position;
      Stop                 := Start + Char_To_Copy - <span class="num">1</span>;
      Dest (Start .. Stop) := Source (Position + <span class="num">1</span> .. Last_Src);
      Free (Regexp);
      Free (Regexp_Extra);
      Free (Dest);

      Last_Dest := Stop;
   <span class="kwa">end</span> Replace_Variants;

   <span class="kwa">procedure</span> Parallel_Job (Cores : <span class="kwa">in</span> <span class="kwb">Positive</span>) <span class="kwa">is</span>

      <span class="slc">-- synchronize the variant countings and replacing.</span>
      <span class="kwa">protected</span> Dispatcher <span class="kwa">is</span>
         <span class="kwa">entry</span> Give (Variant : <span class="kwa">out</span> <span class="kwb">Natural</span>);
         <span class="kwa">entry</span> Take (Variant : <span class="kwa">in</span> <span class="kwb">Natural</span>; Count : <span class="kwa">in</span> Count_Nbrs);
         <span class="kwa">entry</span> Endrep;
         <span class="kwa">entry</span> Report (Result : <span class="kwa">out</span> Counts_Arrays);
      <span class="kwa">private</span>
         Done               : <span class="kwb">Boolean</span> := <span class="kwd">False</span>;
         Counted, Replaced  : <span class="kwb">Boolean</span> := <span class="kwd">False</span>;
         Cur_Job, Jobs_Done : <span class="kwb">Natural</span> := <span class="num">0</span>;
         Var_Counts         : Counts_Arrays;
      <span class="kwa">end</span> Dispatcher;

      <span class="kwa">protected body</span> Dispatcher <span class="kwa">is</span>
         <span class="slc">-- assign a job to a worker</span>
         <span class="kwa">entry</span> Give (Variant : <span class="kwa">out</span> <span class="kwb">Natural</span>) <span class="kwa">when</span> <span class="kwd">True</span> <span class="kwa">is</span>
         <span class="kwa">begin</span>
            <span class="kwa">if</span> Cur_Job = Var_Size <span class="kwa">then</span>
               <span class="slc">-- when all jobs are given send termination signal to workers</span>
               Variant := <span class="num">0</span>;
            <span class="kwa">else</span>
               Cur_Job := Cur_Job + <span class="num">1</span>;
               Variant := Cur_Job;
            <span class="kwa">end if</span>;
         <span class="kwa">end</span> Give;
         <span class="slc">-- retrieve the result from a worker task</span>
         <span class="kwa">entry</span> Take (Variant : <span class="kwa">in</span> <span class="kwb">Natural</span>; Count : <span class="kwa">in</span> Count_Nbrs) <span class="kwa">when</span> <span class="kwd">True</span> <span class="kwa">is</span>
         <span class="kwa">begin</span>
            Var_Counts (Variant_Index (Variant))  := Count;
            Jobs_Done                             := Jobs_Done + <span class="num">1</span>;
            <span class="kwa">if</span> Jobs_Done = Var_Size <span class="kwa">then</span> <span class="slc">-- can transfer the result</span>
               Counted := <span class="kwd">True</span>;
               Done    := Replaced;<span class="slc">-- shortcut for Counted and Replaced</span>
            <span class="kwa">end if</span>;
         <span class="kwa">end</span> Take;
         <span class="slc">-- signalling end of replacement</span>
         <span class="kwa">entry</span> Endrep <span class="kwa">when</span> <span class="kwd">True</span> <span class="kwa">is</span>
         <span class="kwa">begin</span>
            Replaced := <span class="kwd">True</span>;
            Done     := Counted; <span class="slc">-- shortcut for Counted and Replaced</span>
         <span class="kwa">end</span> Endrep;
         <span class="slc">-- when all jobs are completed, give way to the main</span>
         <span class="kwa">entry</span> Report (Result : <span class="kwa">out</span> Counts_Arrays) <span class="kwa">when</span> Done <span class="kwa">is</span>
         <span class="kwa">begin</span>
            Result := Var_Counts;
         <span class="kwa">end</span> Report;

      <span class="kwa">end</span> Dispatcher;

      <span class="slc">-- Each Worker compute a single variant count in parallel</span>
      <span class="kwa">task type</span> Workers;

      <span class="kwa">task body</span> Workers <span class="kwa">is</span>
         Var     : <span class="kwb">Natural</span>;
         L_Count : Count_Nbrs;
      <span class="kwa">begin</span>
         Busy : <span class="kwa">loop</span>
            Dispatcher.Give (Var);
            <span class="kwa">exit</span> Busy <span class="kwa">when</span> Var = <span class="num">0</span>;
            Count_Variant (Variant_Index (Var), L_Count);
            Dispatcher.Take (Var, L_Count);
         <span class="kwa">end loop</span> Busy;
      <span class="kwa">end</span> Workers;

      Workshop : <span class="kwa">array</span> (<span class="num">1</span> .. Cores) <span class="kwa">of</span> Workers;

      <span class="kwa">task</span> Replacer;

      <span class="kwa">task body</span> Replacer <span class="kwa">is</span>
      <span class="kwa">begin</span>
         Replace_Variants (DNA_Code, Code_Length, Seq_Length);
         Dispatcher.Endrep;
      <span class="kwa">end</span> Replacer;

   <span class="kwa">begin</span>
      <span class="slc">-- wait for the jobs to be completed</span>
      Dispatcher.Report (Counts);
      <span class="kwa">delay</span> <span class="num">0.01</span>; <span class="slc">-- leave time for tasks termination.</span>
   <span class="kwa">end</span> Parallel_Job;

<span class="kwa">begin</span>
   Open_Stdin;
   Read (Input_Str.<span class="kwa">all</span>, Initial_Length);
   Close_Stdin;

   DNA_Code := <span class="kwa">new</span> <span class="kwb">String</span> (<span class="num">1</span> .. Initial_Length);

   Strip_Input (Input_Str, DNA_Code, Initial_Length, Code_Length);
   Free (Input_Str);

   <span class="kwa">if</span> Core_Nbr &gt; <span class="num">1</span> <span class="kwa">then</span>
      Parallel_Job (Core_Nbr);
   <span class="kwa">else</span>
      <span class="kwa">for</span> V <span class="kwa">in</span> Variant_Index<span class="kwd">'Range</span> <span class="kwa">loop</span>
         Count_Variant (V, Counts (V));
      <span class="kwa">end loop</span>;
      Replace_Variants (DNA_Code, Code_Length, Seq_Length);
   <span class="kwa">end if</span>;

   <span class="kwa">for</span> V <span class="kwa">in</span> Variant_Index<span class="kwd">'Range</span> <span class="kwa">loop</span>
      Put_Line (Variant_Labels (V).<span class="kwa">all</span> &amp; Count_Nbrs<span class="kwd">'Image</span> (Counts (V)));
   <span class="kwa">end loop</span>;

   New_Line;
   Int_IO.Put (Initial_Length, Width =&gt; <span class="num">6</span>);
   New_Line;
   Int_IO.Put (Code_Length, Width =&gt; <span class="num">6</span>);
   New_Line;
   Int_IO.Put (Seq_Length, Width =&gt; <span class="num">6</span>);
   New_Line;

   Free (DNA_Code);
<span class="kwa">end</span> Regexdna;
<span class="slc">------------------------------------------------------------------------------</span>
<span class="slc">-- Constants</span>
<span class="slc">------------------------------------------------------------------------------</span>
<span class="kwa">with</span> Unchecked_Conversion;
<span class="kwa">with</span> Unchecked_Deallocation;

<span class="kwa">package</span> DNA <span class="kwa">is</span>

   <span class="kwa">type</span> String_Access <span class="kwa">is access all</span> <span class="kwb">String</span>;
   <span class="kwa">procedure</span> Free <span class="kwa">is new</span> Unchecked_Deallocation (<span class="kwb">String</span>, String_Access);


   Var_Size : <span class="kwa">constant</span> := <span class="num">9</span>;
   <span class="kwa">type</span> Variant_Index <span class="kwa">is range</span> <span class="num">1</span> .. Var_Size;
   <span class="kwa">for</span> Variant_Index<span class="kwd">'Size</span> <span class="kwa">use</span> <span class="num">8</span>;

   Variant_Labels : <span class="kwa">constant array</span> (Variant_Index) <span class="kwa">of</span> String_Access :=
     (<span class="kwa">new</span> <span class="kwb">String</span><span class="str">'(&quot;agggtaaa|tttaccct&quot;),</span>
<span class="str">      new String'</span>(<span class="str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span>),
      <span class="kwa">new</span> <span class="kwb">String</span><span class="str">'(&quot;a[act]ggtaaa|tttacc[agt]t&quot;),</span>
<span class="str">      new String'</span>(<span class="str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span>),
      <span class="kwa">new</span> <span class="kwb">String</span><span class="str">'(&quot;agg[act]taaa|ttta[agt]cct&quot;),</span>
<span class="str">      new String'</span>(<span class="str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span>),
      <span class="kwa">new</span> <span class="kwb">String</span><span class="str">'(&quot;agggt[cgt]aa|tt[acg]accct&quot;),</span>
<span class="str">      new String'</span>(<span class="str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span>),
      <span class="kwa">new</span> <span class="kwb">String</span><span class="str">'(&quot;agggtaa[cgt]|[acg]ttaccct&quot;));</span>
<span class="str"></span>
<span class="str">   type Mut is ('</span>B<span class="str">','</span>D<span class="str">','</span>H<span class="str">','</span>K<span class="str">','</span>M<span class="str">','</span>N<span class="str">','</span>R<span class="str">','</span>S<span class="str">','</span>V<span class="str">','</span>W<span class="str">','</span>Y<span class="str">');</span>
<span class="str">   for Mut'Size use Character'Size;</span>
<span class="str"></span>
<span class="str">   for Mut use -- map to character values</span>
<span class="str">     ('</span>B<span class="str">' =&gt; 66,</span>
<span class="str">      '</span>D<span class="str">' =&gt; 68,</span>
<span class="str">      '</span>H<span class="str">' =&gt; 72,</span>
<span class="str">      '</span>K<span class="str">' =&gt; 75,</span>
<span class="str">      '</span>M<span class="str">' =&gt; 77,</span>
<span class="str">      '</span>N<span class="str">' =&gt; 78,</span>
<span class="str">      '</span>R<span class="str">' =&gt; 82,</span>
<span class="str">      '</span>S<span class="str">' =&gt; 83,</span>
<span class="str">      '</span>V<span class="str">' =&gt; 86,</span>
<span class="str">      '</span>W<span class="str">' =&gt; 87,</span>
<span class="str">      '</span>Y<span class="str">' =&gt; 89);</span>
<span class="str"></span>
<span class="str">   function to_Mut is new Unchecked_Conversion (</span>
<span class="str">      Source =&gt; Character,</span>
<span class="str">      Target =&gt; Mut);</span>
<span class="str"></span>
<span class="str">   type Iub_Rec is record</span>
<span class="str">      Alt : String_Access;</span>
<span class="str">      Len : Positive;</span>
<span class="str">   end record;</span>
<span class="str"></span>
<span class="str">   Iub_Table : constant array (Mut) of Iub_Rec :=</span>
<span class="str">     ((new String'</span>(<span class="str">&quot;(c|g|t)&quot;</span>), <span class="num">7</span>),
      (<span class="kwa">new</span> <span class="kwb">String</span><span class="str">'(&quot;(a|g|t)&quot;), 7),</span>
<span class="str">      (new String'</span>(<span class="str">&quot;(a|c|t)&quot;</span>), <span class="num">7</span>),
      (<span class="kwa">new</span> <span class="kwb">String</span><span class="str">'(&quot;(g|t)&quot;), 5),</span>
<span class="str">      (new String'</span>(<span class="str">&quot;(a|c)&quot;</span>), <span class="num">5</span>),
      (<span class="kwa">new</span> <span class="kwb">String</span><span class="str">'(&quot;(a|c|g|t)&quot;), 9),</span>
<span class="str">      (new String'</span>(<span class="str">&quot;(a|g)&quot;</span>), <span class="num">5</span>),
      (<span class="kwa">new</span> <span class="kwb">String</span><span class="str">'(&quot;(c|g)&quot;), 5),</span>
<span class="str">      (new String'</span>(<span class="str">&quot;(a|c|g)&quot;</span>), <span class="num">7</span>),
      (<span class="kwa">new</span> <span class="kwb">String</span><span class="str">'(&quot;(a|t)&quot;), 5),</span>
<span class="str">      (new String'</span>(<span class="str">&quot;(c|t)&quot;</span>), <span class="num">5</span>));
<span class="kwa">end</span> DNA;
<span class="slc">-----------------------------------------------------------------------</span>
<span class="slc">--  interface to library PCRE : regular expression</span>
<span class="slc">-----------------------------------------------------------------------</span>
<span class="kwa">with</span> System; <span class="kwa">use</span> System;

<span class="kwa">package</span> Pcre <span class="kwa">is</span>

   Pcre_Error : <span class="kwa">exception</span>;

   <span class="kwa">type</span> Pcre_Type <span class="kwa">is private</span>;
   <span class="kwa">type</span> Pcre_Extra_type <span class="kwa">is private</span>;

   Null_Pcre       : <span class="kwa">constant</span> Pcre_Type;
   Null_Pcre_Extra : <span class="kwa">constant</span> Pcre_Extra_type;

   <span class="kwa">procedure</span> Compile
     (Pattern       : <span class="kwa">in</span> <span class="kwb">String</span>;
      Options       : <span class="kwa">in</span> <span class="kwb">Integer</span>;
      Matcher       : <span class="kwa">out</span> Pcre_Type;
      Matcher_Extra : <span class="kwa">out</span> Pcre_Extra_type);

   <span class="kwa">procedure</span> Match
     (Matcher             : <span class="kwa">in</span> Pcre_Type;
      Matcher_Extra       : <span class="kwa">in</span> Pcre_Extra_type;
      Subject             : System.Address;
      <span class="slc">-- Address of the first element of a string;</span>
      Length, Startoffset : <span class="kwa">in</span> <span class="kwb">Integer</span>;
      Options             : <span class="kwa">in</span> <span class="kwb">Integer</span>;
      Match_0, Match_1    : <span class="kwa">out</span> <span class="kwb">Integer</span>;
      Result              : <span class="kwa">out</span> <span class="kwb">Integer</span>);

   <span class="kwa">procedure</span> Free (M : Pcre_Type);

   <span class="kwa">procedure</span> Free (M : Pcre_Extra_type);

<span class="kwa">private</span>

   <span class="kwa">type</span> Pcre_Type <span class="kwa">is new</span> System.Address;
   <span class="kwa">type</span> Pcre_Extra_type <span class="kwa">is new</span> System.Address;

   Null_Pcre       : <span class="kwa">constant</span> Pcre_Type       := Pcre_Type (Null_Address);
   Null_Pcre_Extra : <span class="kwa">constant</span> Pcre_Extra_type :=
      Pcre_Extra_type (Null_Address);

<span class="kwa">end</span> Pcre;
<span class="slc">------------------------------------------------------------------------------</span>
<span class="kwa">with</span> Interfaces.C.Strings;     <span class="kwa">use</span> Interfaces.C.Strings;
<span class="kwa">with</span> Interfaces.C;             <span class="kwa">use</span> Interfaces.C;
<span class="kwa">with</span> Ada.Unchecked_Conversion;

<span class="kwa">package body</span> Pcre <span class="kwa">is</span>

   <span class="kwa">pragma</span> Linker_Options (<span class="str">&quot;-lpcre&quot;</span>);

   <span class="kwa">use</span> Interfaces;

   <span class="kwa">function</span> To_chars_ptr <span class="kwa">is new</span> Ada.Unchecked_Conversion (
      Address,
      chars_ptr);

   <span class="kwa">function</span> Pcre_Compile
     (pattern   : chars_ptr;
      options   : <span class="kwb">Integer</span>;
      errptr    : <span class="kwa">access</span> chars_ptr;
      erroffset : <span class="kwa">access</span> <span class="kwb">Integer</span>;
      tableptr  : chars_ptr)
      <span class="kwa">return</span>      Pcre_Type;
   <span class="kwa">pragma</span> Import (C, Pcre_Compile, <span class="str">&quot;pcre_compile&quot;</span>);

   <span class="kwa">function</span> Pcre_Study
     (code    : Pcre_Type;
      options : <span class="kwb">Integer</span>;
      errptr  : <span class="kwa">access</span> chars_ptr)
      <span class="kwa">return</span>    Pcre_Extra_type;
   <span class="kwa">pragma</span> Import (C, Pcre_Study, <span class="str">&quot;pcre_study&quot;</span>);

   <span class="kwa">function</span> Pcre_Exec
     (code        : Pcre_Type;
      extra       : Pcre_Extra_type;
      subject     : chars_ptr;
      length      : <span class="kwb">Integer</span>;
      startoffset : <span class="kwb">Integer</span>;
      options     : <span class="kwb">Integer</span>;
      ovector     : System.Address;
      ovecsize    : C.int)
      <span class="kwa">return</span>        <span class="kwb">Integer</span>;
   <span class="kwa">pragma</span> Import (C, Pcre_Exec, <span class="str">&quot;pcre_exec&quot;</span>);

   <span class="kwa">procedure</span> Compile
     (Pattern       : <span class="kwa">in</span> <span class="kwb">String</span>;
      Options       : <span class="kwa">in</span> <span class="kwb">Integer</span>;
      Matcher       : <span class="kwa">out</span> Pcre_Type;
      Matcher_Extra : <span class="kwa">out</span> Pcre_Extra_type)
   <span class="kwa">is</span>
      Regexp       : Pcre_Type;
      Regexp_Extra : Pcre_Extra_type;
      Error_Ptr    : <span class="kwa">aliased</span> chars_ptr;
      Error_Offset : <span class="kwa">aliased</span> <span class="kwb">Integer</span>;
      Pat          : chars_ptr := New_String (Pattern);
   <span class="kwa">begin</span>
      Regexp :=
         Pcre_Compile
           (Pat,
            Options,
            Error_Ptr<span class="kwd">'Access</span>,
            Error_Offset<span class="kwd">'Access</span>,
            Null_Ptr);
      Free (Pat);

      <span class="kwa">if</span> Regexp = Null_Pcre <span class="kwa">then</span>
         <span class="kwa">raise</span> Pcre_Error;
      <span class="kwa">end if</span>;
      Matcher      := Regexp;
      Regexp_Extra := Pcre_Study (Regexp, <span class="num">0</span>, Error_Ptr<span class="kwd">'Access</span>);
      <span class="kwa">if</span> Regexp_Extra = Null_Pcre_Extra <span class="kwa">then</span>
         <span class="kwa">raise</span> Pcre_Error;
      <span class="kwa">end if</span>;
      Matcher_Extra := Regexp_Extra;
   <span class="kwa">end</span> Compile;

   <span class="kwa">procedure</span> Match
     (Matcher             : <span class="kwa">in</span> Pcre_Type;
      Matcher_Extra       : <span class="kwa">in</span> Pcre_Extra_type;
      Subject             : System.Address;
      <span class="slc">-- Address of the first element of a string;</span>
      Length, Startoffset : <span class="kwa">in</span> <span class="kwb">Integer</span>;
      Options             : <span class="kwa">in</span> <span class="kwb">Integer</span>;
      Match_0, Match_1    : <span class="kwa">out</span> <span class="kwb">Integer</span>;
      Result              : <span class="kwa">out</span> <span class="kwb">Integer</span>)
   <span class="kwa">is</span>
      Vecsize : <span class="kwa">constant</span> := <span class="num">3</span>; <span class="slc">-- top-level matching</span>

      m : <span class="kwa">array</span> (<span class="num">0</span> .. Vecsize - <span class="num">1</span>) <span class="kwa">of</span> C.int;
      <span class="kwa">pragma</span> Convention (C, m);
      <span class="kwa">pragma</span> Volatile (m); <span class="slc">-- used by the C library</span>

      Start  : <span class="kwa">constant</span> chars_ptr :=
         To_chars_ptr (Subject);
   <span class="kwa">begin</span>

      Result  :=
         Pcre_Exec
           (Matcher,
            Matcher_Extra,
            Start,
            Length,
            Startoffset,
            Options,
            m (<span class="num">0</span>)<span class="kwd">'Address</span>,
            C.int (Vecsize));
      Match_0 := <span class="kwb">Integer</span> (m (<span class="num">0</span>));
      Match_1 := <span class="kwb">Integer</span> (m (<span class="num">1</span>));

   <span class="kwa">end</span> Match;

   <span class="kwa">type</span> Access_Free <span class="kwa">is access procedure</span> (Item : System.Address);
   Pcre_Free : Access_Free;
   <span class="kwa">pragma</span> Import (C, Pcre_Free, <span class="str">&quot;pcre_free&quot;</span>);

   <span class="kwa">procedure</span> Free (M : Pcre_Type) <span class="kwa">is</span>
   <span class="kwa">begin</span>
      Pcre_Free (System.Address (M));
   <span class="kwa">end</span> Free;

   <span class="kwa">procedure</span> Free (M : Pcre_Extra_type) <span class="kwa">is</span>
   <span class="kwa">begin</span>
      Pcre_Free (System.Address (M));
   <span class="kwa">end</span> Free;

<span class="kwa">end</span> Pcre;
<span class="slc">-------------------------------------------------------------------------------</span>
<span class="kwa">package</span> Block_Input <span class="kwa">is</span>

   <span class="kwa">procedure</span> Read (Item : <span class="kwa">in out</span> <span class="kwb">String</span>; Last : <span class="kwa">out</span> <span class="kwb">Natural</span>);

   <span class="kwa">procedure</span> Open_Stdin;

   <span class="kwa">procedure</span> Close_Stdin;

   <span class="kwa">pragma</span> Inline (Read);

<span class="kwa">end</span> Block_Input;
<span class="slc">------------------------------------------------------------------------------</span>
<span class="kwa">with</span> Ada.Streams.Stream_IO;
<span class="kwa">with</span> Unchecked_Conversion;

<span class="kwa">package body</span> Block_Input <span class="kwa">is</span>

   <span class="kwa">use</span> Ada.Streams;

   Stdin : Stream_IO.File_Type;

   <span class="kwa">procedure</span> Read (Item : <span class="kwa">in out</span> <span class="kwb">String</span>; Last : <span class="kwa">out</span> <span class="kwb">Natural</span>) <span class="kwa">is</span>

      Block_Size : <span class="kwa">constant</span> := <span class="num">16</span> * <span class="num">1024</span>;

      <span class="kwa">subtype</span> Index <span class="kwa">is</span> Stream_Element_Offset <span class="kwa">range</span>
         Stream_Element_Offset (<span class="num">1</span>) .. Stream_Element_Offset (Block_Size);
      <span class="kwa">subtype</span> XString <span class="kwa">is</span> <span class="kwb">String</span> (<span class="num">1</span> .. Block_Size);
      <span class="kwa">subtype</span> XBytes <span class="kwa">is</span> Stream_Element_Array (Index);
      <span class="kwa">function</span> To_String <span class="kwa">is new</span> Unchecked_Conversion (
         Source =&gt; XBytes,
         Target =&gt; XString);

      One_Block : XBytes;
      Str_Block : XString;
      Final     : Stream_Element_Offset;
      Start     : <span class="kwb">Natural</span> := Item<span class="kwd">'First</span>;
      Stop      : <span class="kwb">Natural</span>;
   <span class="kwa">begin</span>
      <span class="kwa">while not</span> Stream_IO.End_Of_File (Stdin) <span class="kwa">loop</span>
         Stream_IO.Read (Stdin, One_Block, Final);
         Str_Block            := To_String (One_Block);
         Stop                 := Start + <span class="kwb">Natural</span> (Final) - <span class="num">1</span>;
         Item (Start .. Stop) := Str_Block (<span class="num">1</span> .. <span class="kwb">Natural</span> (Final));
         Start                := Stop + <span class="num">1</span>;
      <span class="kwa">end loop</span>;
      Last := Stop;
   <span class="kwa">end</span> Read;

   <span class="kwa">procedure</span> Open_Stdin <span class="kwa">is</span>
   <span class="kwa">begin</span>
      Stream_IO.Open
        (File =&gt; Stdin,
         Mode =&gt; Stream_IO.In_File,
         Name =&gt; <span class="str">&quot;/dev/stdin&quot;</span>);
   <span class="kwa">end</span> Open_Stdin;

   <span class="kwa">procedure</span> Close_Stdin <span class="kwa">is</span>
   <span class="kwa">begin</span>
      Stream_IO.Close (Stdin);
   <span class="kwa">end</span> Close_Stdin;

<span class="kwa">end</span> Block_Input;
