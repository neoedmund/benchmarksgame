<span class="com">/* The Computer Language Benchmarks Game</span>
<span class="com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   conversion to Scala by Rex Kerr</span>
<span class="com">   from Java version by Oleg Mazurov and Isaac Gouy</span>
<span class="com">*/</span>

<span class="kwa">object</span> fannkuchredux
{
  <span class="kwa">def</span> <span class="kwd">fannkuch</span>(n: Int): Int = {
    <span class="kwa">val</span> perm1 = Array.<span class="kwd">range</span>(<span class="num">0</span>,n)
    <span class="kwa">val</span> perm, count = <span class="kwa">new</span> Array[Int](n)
    <span class="kwa">var</span> f, i, k, r, flips, nperm, checksum = <span class="num">0</span>

    r = n
    <span class="kwa">while</span> (r&gt;<span class="num">0</span>) {
      i = <span class="num">0</span>
      <span class="kwa">while</span> (r != <span class="num">1</span>) { <span class="kwd">count</span>(r-<span class="num">1</span>) = r; r -= <span class="num">1</span> }
      <span class="kwa">while</span> (i &lt; n) { <span class="kwd">perm</span>(i) = <span class="kwd">perm1</span>(i); i += <span class="num">1</span> }
      
      <span class="slc">// Count flips and update max  and checksum</span>
      f = <span class="num">0</span>
      k = <span class="kwd">perm</span>(<span class="num">0</span>)
      <span class="kwa">while</span> (k != <span class="num">0</span>) {
        i = <span class="num">0</span>
        <span class="kwa">while</span> (<span class="num">2</span>*i &lt; k) {
          <span class="kwa">val</span> t = <span class="kwd">perm</span>(i); <span class="kwd">perm</span>(i) = <span class="kwd">perm</span>(k-i); <span class="kwd">perm</span>(k-i) = t
          i += <span class="num">1</span>
        }
        k = <span class="kwd">perm</span>(<span class="num">0</span>)
        f += <span class="num">1</span>
      }
      <span class="kwa">if</span> (f&gt;flips) flips = f
      <span class="kwa">if</span> ((nperm&amp;<span class="num">0x1</span>)==<span class="num">0</span>) checksum += f
      <span class="kwa">else</span> checksum -= f

      <span class="slc">// Use incremental change to generate another permutation</span>
      <span class="kwa">var</span> go = true
      <span class="kwa">while</span> (go) {
        <span class="kwa">if</span> (r == n) {
          <span class="kwd">println</span>(checksum)
          <span class="kwa">return</span> flips
        }
        <span class="kwa">val</span> p0 = <span class="kwd">perm1</span>(<span class="num">0</span>)
        i = <span class="num">0</span>
        <span class="kwa">while</span> (i &lt; r) {
          <span class="kwa">val</span> j = i+<span class="num">1</span>
          <span class="kwd">perm1</span>(i) = <span class="kwd">perm1</span>(j)
          i = j
        }
        <span class="kwd">perm1</span>(r) = p0

        <span class="kwd">count</span>(r) -= <span class="num">1</span>
        <span class="kwa">if</span> (<span class="kwd">count</span>(r) &gt; <span class="num">0</span>) go = false
        <span class="kwa">else</span> r += <span class="num">1</span>
      }
      nperm += <span class="num">1</span>
    }
    flips
  }

  <span class="kwa">def</span> <span class="kwd">main</span>(args: Array[String]) {
    <span class="kwa">val</span> n = (<span class="kwa">if</span> (args.length &gt; <span class="num">0</span>) <span class="kwd">args</span>(<span class="num">0</span>).toInt <span class="kwa">else</span> <span class="num">7</span>)
    <span class="kwd">println</span>(<span class="str">&quot;Pfannkuchen(&quot;</span>+n+<span class="str">&quot;) = &quot;</span>+<span class="kwd">fannkuch</span>(n))
  }
}
