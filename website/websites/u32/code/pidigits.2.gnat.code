<span class="slc">--  The Computer Language Benchmarks Game</span>
<span class="slc">--  http://benchmarksgame.alioth.debian.org</span>
<span class="slc">--  Calculate digits of pi using the Unbounded Spigot Algorithm (step-by-step)</span>
<span class="slc">--</span>
<span class="slc">--  contributed by Paolo Bonzini &amp; Sean Bartlett</span>
<span class="slc">--  modified by Michael Mellor</span>

<span class="kwa">with</span> Ada.Text_IO;                       <span class="kwa">use</span> Ada.Text_IO;
<span class="kwa">with</span> Ada.Integer_Text_IO;               <span class="kwa">use</span> Ada.Integer_Text_IO;
<span class="kwa">with</span> Ada.Command_Line;                  <span class="kwa">use</span> Ada.Command_Line;
<span class="kwa">with</span> Ada.Calendar;                      <span class="kwa">use</span> Ada.Calendar;

<span class="kwa">with</span> GMP_mini_bindings;                 <span class="kwa">use</span> GMP_mini_bindings;
<span class="kwa">with</span> Interfaces.C;

<span class="kwa">procedure</span> pidigits <span class="kwa">is</span>

  <span class="kwa">procedure</span> Print_pi_digits(num_digits: <span class="kwb">Integer</span>) <span class="kwa">is</span>

    <span class="kwa">use</span> Interfaces.C;

    numer, accum, denom, tmp1, tmp2: mpz_t;

    <span class="kwa">function</span> Extract_digit <span class="kwa">return</span> Interfaces.C.int <span class="kwa">is</span>
    <span class="kwa">begin</span>
      <span class="kwa">if</span> mpz_cmp(numer, accum) &gt; <span class="num">0</span> <span class="kwa">then</span>
        <span class="kwa">return</span> -<span class="num">1</span>;
      <span class="kwa">end if</span>;

      <span class="slc">-- Compute (numer * 3 + accum) / denom</span>
      mpz_mul_2exp(tmp1, numer, <span class="num">1</span>);
      mpz_add(tmp1, tmp1, numer);
      mpz_add(tmp1, tmp1, accum);
      mpz_fdiv_qr(tmp1, tmp2, tmp1, denom);

      <span class="slc">-- Now, if (numer * 4 + accum) % denom...</span>
      mpz_add(tmp2, tmp2, numer);

      <span class="slc">-- ... is normalized, then the two divisions have the same result.</span>
      <span class="kwa">if</span> mpz_cmp(tmp2, denom) &gt;= <span class="num">0</span> <span class="kwa">then</span>
        <span class="kwa">return</span> -<span class="num">1</span>;
      <span class="kwa">end if</span>;

      <span class="kwa">return</span> Interfaces.C.int(mpz_get_ui(tmp1));
    <span class="kwa">end</span> Extract_digit;

    k: Interfaces.C.unsigned;

    <span class="kwa">procedure</span> Next_term <span class="kwa">is</span>
      y2: <span class="kwa">constant</span> Interfaces.C.unsigned:= k*<span class="num">2</span> + <span class="num">1</span>;
    <span class="kwa">begin</span>
      mpz_mul_2exp(tmp1, numer, <span class="num">1</span>);
      mpz_add(accum, accum, tmp1);
      mpz_mul_ui(accum, accum, y2);
      mpz_mul_ui(numer, numer, k);
      mpz_mul_ui(denom, denom, y2);
    <span class="kwa">end</span> Next_term;

    d: Interfaces.C.int;

    <span class="kwa">procedure</span> Eliminate_digit <span class="kwa">is</span>
    <span class="kwa">begin</span>
      mpz_submul_ui(accum, denom, Interfaces.C.unsigned(d));
      mpz_mul_ui(accum, accum, <span class="num">10</span>);
      mpz_mul_ui(numer, numer, <span class="num">10</span>);
    <span class="kwa">end</span> Eliminate_digit;

    i, c: <span class="kwb">Integer</span>:= <span class="num">0</span>;
    line: <span class="kwb">String</span>(<span class="num">1</span> .<span class="num">.10</span>);

  <span class="kwa">begin</span>
    k := <span class="num">0</span>;
    mpz_init(tmp1);
    mpz_init(tmp2);
    mpz_init_set_ui(numer, <span class="num">1</span>);
    mpz_init_set_ui(accum, <span class="num">0</span>);
    mpz_init_set_ui(denom, <span class="num">1</span>);
    <span class="slc">--</span>
    <span class="kwa">loop</span>
      <span class="kwa">loop</span>
        k:= k + <span class="num">1</span>;
        Next_term;
        d:= Extract_digit;
        <span class="kwa">exit when</span> d /= -<span class="num">1</span>;
      <span class="kwa">end loop</span>;
      c:= c + <span class="num">1</span>;
      line(c) := <span class="kwb">Character</span><span class="kwd">'Val</span>(<span class="kwb">Character</span><span class="kwd">'Pos</span>(<span class="str">'0'</span>)+d);
      i:= i + <span class="num">1</span>;
      <span class="kwa">if</span> c = <span class="num">10</span> <span class="kwa">then</span>
        Put(line &amp; ASCII.HT &amp; <span class="str">':'</span>);
        Put(i,<span class="num">0</span>); New_Line;
        c:= <span class="num">0</span>;
      <span class="kwa">end if</span>;
      <span class="kwa">exit when</span> i &gt;= num_digits;
      Eliminate_digit;
    <span class="kwa">end loop</span>;

    <span class="kwa">if</span> c/=<span class="num">0</span> <span class="kwa">then</span>
      Put(line(<span class="num">1</span>..c));
      <span class="kwa">for</span> i <span class="kwa">in</span> c+<span class="num">1</span>.<span class="num">.10</span> <span class="kwa">loop</span>
        Put(<span class="str">' '</span>);
      <span class="kwa">end loop</span>;
      Put(ASCII.HT &amp; <span class="str">':'</span>);
      Put(i,<span class="num">0</span>);
      New_Line;
    <span class="kwa">end if</span>;
  <span class="kwa">end</span> Print_pi_digits;

  n: <span class="kwb">Integer</span>;

  t0,t1: Time;
  timing: <span class="kwa">constant</span> <span class="kwb">Boolean</span>:= <span class="kwd">False</span>;

<span class="kwa">begin</span>
  n:= <span class="num">2</span>_500;
  <span class="kwa">if</span> Argument_Count=<span class="num">1</span> <span class="kwa">then</span>
    n:= <span class="kwb">Integer</span><span class="kwd">'Value</span>(Argument(<span class="num">1</span>));
  <span class="kwa">end if</span>;
  <span class="kwa">if</span> timing <span class="kwa">then</span>
    t0:= Clock;
  <span class="kwa">end if</span>;
  Print_pi_digits(n);
  <span class="kwa">if</span> timing <span class="kwa">then</span>
    t1:= Clock;
    Put(<span class="str">&quot;Time in seconds: &quot;</span> &amp; <span class="kwb">Duration</span><span class="kwd">'Image</span>(t1-t0) &amp; <span class="str">&quot; [press return]&quot;</span>);
    Skip_Line;
  <span class="kwa">end if</span>;
<span class="kwa">end</span> pidigits;
<span class="kwa">with</span> Interfaces.C;

<span class="kwa">package</span> GMP_mini_bindings <span class="kwa">is</span>

  <span class="kwa">pragma</span> Linker_Options(<span class="str">&quot;-lgmp&quot;</span>);

  <span class="slc">-- types</span>

  <span class="kwa">type</span> mp_limb_t <span class="kwa">is new</span> Interfaces.C.unsigned;
  <span class="kwa">type</span> mp_ptr <span class="kwa">is access</span> mp_limb_t;

  <span class="kwa">type</span> mpz_t <span class="kwa">is record</span>
    mp_alloc, mp_size : Interfaces.C.int;
    mp_d    : mp_ptr;
  <span class="kwa">end record</span>;

  <span class="slc">-- initialization and input from integer</span>

  <span class="kwa">procedure</span> mpz_init (Dest: <span class="kwa">out</span> mpz_t);
  <span class="kwa">pragma</span> Import(C, mpz_init, <span class="str">&quot;__gmpz_init&quot;</span>);

  <span class="kwa">procedure</span> mpz_init_set_ui (Dest: <span class="kwa">out</span> mpz_t; Src: <span class="kwa">in</span> Interfaces.C.unsigned);
  <span class="kwa">pragma</span> Import(C, mpz_init_set_ui, <span class="str">&quot;__gmpz_init_set_ui&quot;</span>);

  <span class="slc">-- comparisons</span>

  <span class="kwa">function</span> mpz_cmp (Op1, Op2 : mpz_t) <span class="kwa">return</span> Interfaces.C.int;
  <span class="kwa">pragma</span> Import (C, mpz_cmp, <span class="str">&quot;__gmpz_cmp&quot;</span>);

  <span class="slc">-- +, -, *, /</span>

  <span class="kwa">procedure</span> mpz_add (Dest: <span class="kwa">out</span> mpz_t; Src1, Src2: <span class="kwa">in</span> mpz_t);
  <span class="kwa">pragma</span> Import(C, mpz_add, <span class="str">&quot;__gmpz_add&quot;</span>);

  <span class="kwa">procedure</span> mpz_submul_ui (Dest: <span class="kwa">out</span> mpz_t; Src1: <span class="kwa">in</span> mpz_t; Src2: <span class="kwa">in</span> Interfaces.C.unsigned);
  <span class="kwa">pragma</span> Import(C, mpz_submul_ui, <span class="str">&quot;__gmpz_submul_ui&quot;</span>);

  <span class="kwa">procedure</span> mpz_mul_ui (Dest: <span class="kwa">out</span> mpz_t; Src1: <span class="kwa">in</span> mpz_t; Src2: <span class="kwa">in</span> Interfaces.C.unsigned);
  <span class="kwa">pragma</span> Import(C, mpz_mul_ui, <span class="str">&quot;__gmpz_mul_ui&quot;</span>);

  <span class="kwa">procedure</span> mpz_mul_si (Dest: <span class="kwa">out</span> mpz_t; Src1: <span class="kwa">in</span> mpz_t; Src2: <span class="kwa">in</span> Interfaces.C.int);
  <span class="kwa">pragma</span> Import(C, mpz_mul_si, <span class="str">&quot;__gmpz_mul_si&quot;</span>);

  <span class="kwa">procedure</span> mpz_mul_2exp (Dest: <span class="kwa">out</span> mpz_t; Src: <span class="kwa">in</span> mpz_t; Exponent: <span class="kwa">in</span> Interfaces.C.unsigned);
  <span class="kwa">pragma</span> Import(C, mpz_mul_2exp, <span class="str">&quot;__gmpz_mul_2exp&quot;</span>);

  <span class="kwa">procedure</span> mpz_tdiv_q (Dest: <span class="kwa">out</span> mpz_t; Src1, Src2: <span class="kwa">in</span> mpz_t);
  <span class="kwa">pragma</span> Import(C, mpz_tdiv_q, <span class="str">&quot;__gmpz_tdiv_q&quot;</span>);

  <span class="kwa">procedure</span> mpz_fdiv_qr (Q, R: <span class="kwa">out</span> mpz_t; Num, Den: <span class="kwa">in</span> mpz_t);
  <span class="kwa">pragma</span> Import(C, mpz_fdiv_qr, <span class="str">&quot;__gmpz_fdiv_qr&quot;</span>);

  <span class="slc">-- output to integer</span>

  <span class="kwa">function</span>  mpz_get_ui (Src: <span class="kwa">in</span> mpz_t) <span class="kwa">return</span> Interfaces.C.unsigned;
  <span class="kwa">pragma</span> Import(C, mpz_get_ui, <span class="str">&quot;__gmpz_get_ui&quot;</span>);

<span class="kwa">end</span> GMP_mini_bindings;
