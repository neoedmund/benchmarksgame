<span class="slc">--  The Computer Language Benchmarks Game</span>
<span class="slc">--  http://benchmarksgame.alioth.debian.org</span>
<span class="slc">--</span>
<span class="slc">--  Contributed by Jim Rogers</span>
<span class="slc">--  Modified by Pascal Obry, Gautier de Montmollin, Georg Bauhaus, Jonathan Parker</span>

<span class="kwa">pragma</span> Restrictions (No_Abort_Statements);
<span class="kwa">pragma</span> Restrictions (Max_Asynchronous_Select_Nesting =&gt; <span class="num">0</span>);

<span class="kwa">with</span> Ada.Command_Line;      <span class="kwa">use</span> Ada.Command_Line;

<span class="kwa">with</span> Interfaces;            <span class="kwa">use</span> Interfaces;
<span class="kwa">with</span> Ada.Streams.Stream_IO; <span class="kwa">use</span> Ada.Streams;

<span class="kwa">procedure</span> Mandelbrot <span class="kwa">is</span>

   <span class="kwa">type</span> Real <span class="kwa">is digits</span> <span class="num">15</span>;
   <span class="kwa">type</span> M8 <span class="kwa">is mod</span> <span class="num">8</span>;
   <span class="kwa">type</span> PCount <span class="kwa">is range</span> <span class="num">0</span> .. <span class="num">2</span>**<span class="num">20</span> - <span class="num">1</span>;

   Iter        : <span class="kwa">constant</span> := <span class="num">50</span>;
   Limit       : <span class="kwa">constant</span> := <span class="num">4.0</span>;
   Size        : <span class="kwa">constant</span> <span class="kwb">Positive</span> := <span class="kwb">Positive</span><span class="kwd">'Value</span> (Argument (<span class="num">1</span>));
   Two_on_Size : <span class="kwa">constant</span> Real := <span class="num">2.0</span> / Real (Size);

   <span class="kwa">subtype</span> Output_Index <span class="kwa">is</span> Stream_Element_Offset <span class="kwa">range</span> <span class="num">1</span> .. Stream_Element_Offset<span class="kwd">'Last</span>;
   <span class="kwa">subtype</span> Output_Queue <span class="kwa">is</span> Stream_Element_Array;
   <span class="kwa">type</span> Output <span class="kwa">is access</span> Output_Queue;

   <span class="kwa">task type</span> X_Step <span class="kwa">is</span>
      <span class="kwa">entry</span> Compute_Z (Y1, Y2 : PCount);
      <span class="kwa">entry</span> Get_Output (Result : <span class="kwa">out</span> Output);
   <span class="kwa">end</span> X_Step;

   <span class="kwa">procedure</span> Allocate_Output_Queue (Y1, Y2 : PCount; Result : <span class="kwa">out</span> Output);
   <span class="kwa">pragma</span> Precondition
     (Output_Index<span class="kwd">'First</span> = <span class="num">1</span>);
   <span class="kwa">pragma</span> Postcondition
     (Result<span class="kwd">'First</span> = Output_Index<span class="kwd">'First</span> <span class="kwa">and</span>
      Result<span class="kwd">'Last</span> = Output_Index<span class="kwd">'Max</span>
        (<span class="num">0</span>, Stream_Element_Offset (<span class="kwb">Integer</span> (Y2 - Y1) * (Size / <span class="num">8</span> + <span class="kwb">Boolean</span><span class="kwd">'Pos</span> (Size <span class="kwa">mod</span> <span class="num">8</span> &gt; <span class="num">0</span>)))));

   <span class="kwa">procedure</span> Compute (Y1, Y2 : PCount; Result : Output)
   <span class="kwa">is</span>
      <span class="kwa">subtype</span> Instruction_Stream_Index <span class="kwa">is</span> <span class="kwb">Integer</span> <span class="kwa">range</span> <span class="num">1</span> .. <span class="num">2</span>;
      <span class="kwa">pragma</span> Assert (Instruction_Stream_Index<span class="kwd">'First</span> = <span class="num">1</span>);

      Bit_Num  : M8         := <span class="num">0</span>;
      Byte_Acc : Unsigned_8 := <span class="num">0</span>;
      Byte_Acc_Storage : <span class="kwa">array</span> (Instruction_Stream_Index) <span class="kwa">of</span> Unsigned_8;
      Last     : Stream_Element_Offset := Result<span class="kwd">'First</span> - <span class="num">1</span>;
   <span class="kwa">begin</span>
      <span class="kwa">for</span> Y <span class="kwa">in</span> Y1 .. Y2 - <span class="num">1</span> <span class="kwa">loop</span>
         <span class="kwa">for</span> X <span class="kwa">in</span> <span class="num">0</span> .. Size / Instruction_Stream_Index<span class="kwd">'Last</span> - <span class="num">1</span> <span class="kwa">loop</span>
            <span class="kwa">declare</span>
               Cr_1 : <span class="kwa">constant</span> Real := Two_on_Size * (Real (<span class="num">2</span>*X)) - <span class="num">1.5</span>;
               Ci_1 : <span class="kwa">constant</span> Real := Two_on_Size * (Real (Y)) - <span class="num">1.0</span>;
               Zr_1 : Real := Cr_1;
               Zi_1 : Real := Ci_1;
               ZZi_1 : Real := Zi_1 * Zi_1;
               ZZr_1 : Real := Zr_1 * Zr_1;
               Z_1_Exceeded_Limit : <span class="kwb">Boolean</span> := <span class="kwd">False</span>;
               Tmp_1 : Real;

               Cr_2 : <span class="kwa">constant</span> Real := Two_on_Size * (Real (<span class="num">2</span>*X + <span class="num">1</span>)) - <span class="num">1.5</span>;
               Ci_2 : <span class="kwa">constant</span> Real := Two_on_Size * (Real (Y)) - <span class="num">1.0</span>;
               Zr_2 : Real := Cr_2;
               Zi_2 : Real := Ci_2;
               ZZi_2 : Real := Zi_2 * Zi_2;
               ZZr_2 : Real := Zr_2 * Zr_2;
               Z_2_Exceeded_Limit : <span class="kwb">Boolean</span> := <span class="kwd">False</span>;
               Tmp_2 : Real;
            <span class="kwa">begin</span>
               <span class="kwa">for</span> I <span class="kwa">in</span> <span class="num">1</span> .. Iter <span class="kwa">loop</span>

                  Tmp_1 := Zr_1 * Zi_1;
                  Tmp_2 := Zr_2 * Zi_2;
                  Zr_1 := Cr_1 - ZZi_1;
                  Zr_2 := Cr_2 - ZZi_2;
                  Zi_1 := Ci_1 + Tmp_1 + Tmp_1;
                  Zi_2 := Ci_2 + Tmp_2 + Tmp_2;
                  Zr_1 := Zr_1 + ZZr_1;
                  Zr_2 := Zr_2 + ZZr_2;

                  <span class="kwa">if not</span> Z_1_Exceeded_Limit <span class="kwa">then</span>
                     <span class="kwa">if</span> ZZi_1 + ZZr_1 &gt; Limit <span class="kwa">then</span>
                        Z_1_Exceeded_Limit := <span class="kwd">True</span>;
                     <span class="kwa">end if</span>;
                  <span class="kwa">end if</span>;
                  <span class="kwa">if not</span> Z_1_Exceeded_Limit <span class="kwa">then</span>
                     ZZr_1 := Zr_1 * Zr_1;
                     ZZi_1 := Zi_1 * Zi_1;
                  <span class="kwa">end if</span>;

                  <span class="kwa">if not</span> Z_2_Exceeded_Limit <span class="kwa">then</span>
                     <span class="kwa">if</span> ZZi_2 + ZZr_2 &gt; Limit <span class="kwa">then</span>
                        Z_2_Exceeded_Limit := <span class="kwd">True</span>;
                     <span class="kwa">end if</span>;
                  <span class="kwa">end if</span>;
                  <span class="kwa">if not</span> Z_2_Exceeded_Limit <span class="kwa">then</span>
                     ZZr_2 := Zr_2 * Zr_2;
                     ZZi_2 := Zi_2 * Zi_2;
                  <span class="kwa">end if</span>;

                  <span class="kwa">exit when</span> Z_2_Exceeded_Limit <span class="kwa">and</span> Z_1_Exceeded_Limit;
               <span class="kwa">end loop</span>;

               <span class="kwa">if</span> Z_1_Exceeded_Limit <span class="kwa">then</span>
                  Byte_Acc := Shift_Left (Byte_Acc, <span class="num">1</span>) <span class="kwa">or</span> <span class="num">16</span>#<span class="num">00</span>#;
               <span class="kwa">else</span>
                  Byte_Acc := Shift_Left (Byte_Acc, <span class="num">1</span>) <span class="kwa">or</span> <span class="num">16</span>#<span class="num">01</span>#;
               <span class="kwa">end if</span>;
               Byte_Acc_Storage (<span class="num">1</span>) := Byte_Acc;

               <span class="kwa">if</span> Z_2_Exceeded_Limit <span class="kwa">then</span>
                  Byte_Acc := Shift_Left (Byte_Acc, <span class="num">1</span>) <span class="kwa">or</span> <span class="num">16</span>#<span class="num">00</span>#;
               <span class="kwa">else</span>
                  Byte_Acc := Shift_Left (Byte_Acc, <span class="num">1</span>) <span class="kwa">or</span> <span class="num">16</span>#<span class="num">01</span>#;
               <span class="kwa">end if</span>;
               Byte_Acc_Storage (<span class="num">2</span>) := Byte_Acc;
            <span class="kwa">end</span>;

            <span class="kwa">for</span> j <span class="kwa">in</span> Byte_Acc_Storage<span class="kwd">'Range</span> <span class="kwa">loop</span>

               Bit_Num := Bit_Num + <span class="num">1</span>;

               <span class="kwa">if</span> Bit_Num = <span class="num">0</span> <span class="kwa">then</span>
                  Last := Last + <span class="num">1</span>;
                  Result (Last) := Stream_Element (Byte_Acc_Storage (j));
                  Byte_Acc := <span class="num">0</span>;
               <span class="kwa">end if</span>;

            <span class="kwa">end loop</span>;
         <span class="kwa">end loop</span>;

         <span class="kwa">case</span> M8 (Size <span class="kwa">mod</span> <span class="num">8</span>) <span class="kwa">is</span>
            <span class="kwa">when</span> <span class="num">0</span> =&gt;
               <span class="kwa">null</span>;
            <span class="kwa">when</span> <span class="num">1</span> | <span class="num">3</span> | <span class="num">5</span> | <span class="num">7</span> =&gt;
               <span class="kwa">pragma</span> Assert (<span class="kwd">False</span>);  <span class="slc">-- odd Size not covered</span>
               <span class="kwa">null</span>;
            <span class="kwa">when</span> <span class="num">2</span> | <span class="num">4</span> | <span class="num">6</span> =&gt;
               Byte_Acc_Storage (<span class="num">2</span>) := Shift_Left (Byte_Acc, <span class="num">8</span> - (Size <span class="kwa">mod</span> <span class="num">8</span>));
               Last := Last + <span class="num">1</span>;
               Result (Last) := Stream_Element (Byte_Acc_Storage (<span class="num">2</span>));
               Byte_Acc := <span class="num">0</span>;
               Bit_Num  := <span class="num">0</span>;
         <span class="kwa">end case</span>;
      <span class="kwa">end loop</span>;
   <span class="kwa">end</span> Compute;

   <span class="kwa">task body</span> X_Step <span class="kwa">is</span>
      Y1, Y2 : PCount;
      Data   : Output;
   <span class="kwa">begin</span>
      <span class="kwa">accept</span> Compute_Z (Y1, Y2 : PCount) <span class="kwa">do</span>
         X_Step.Y1 := Y1;
         X_Step.Y2 := Y2;
      <span class="kwa">end</span> Compute_Z;

      Allocate_Output_Queue (Y1, Y2, Result =&gt; Data);
      Compute (Y1, Y2, Result =&gt; Data);

      <span class="kwa">accept</span> Get_Output (Result : <span class="kwa">out</span> Output) <span class="kwa">do</span>
         Result := Data;
      <span class="kwa">end</span> Get_Output;
   <span class="kwa">end</span> X_Step;

   <span class="kwa">procedure</span> Allocate_Output_Queue (Y1, Y2 : PCount; Result : <span class="kwa">out</span> Output) <span class="kwa">is</span>
      Limit : <span class="kwa">constant</span> <span class="kwb">Natural</span> := <span class="kwb">Natural</span><span class="kwd">'Max</span>
        (<span class="num">0</span>,
         <span class="kwb">Integer</span> (Y2 - Y1) * (Size / <span class="num">8</span> + <span class="kwb">Boolean</span><span class="kwd">'Pos</span> (Size <span class="kwa">mod</span> <span class="num">8</span> &gt; <span class="num">0</span>)));
   <span class="kwa">begin</span>
      Result := <span class="kwa">new</span> Output_Queue (<span class="num">1</span> .. Output_Index<span class="kwd">'Base</span> (Limit));
   <span class="kwa">end</span> Allocate_Output_Queue;

<span class="kwa">begin</span>
   <span class="kwa">pragma</span> Assert (Size <span class="kwa">mod</span> <span class="num">2</span> = <span class="num">0</span>, <span class="str">&quot;Size must be even at present&quot;</span>);

   <span class="kwa">declare</span>
      <span class="kwa">subtype</span> Worker_Index <span class="kwa">is</span> <span class="kwb">Natural</span> <span class="kwa">range</span> <span class="num">0</span> .. <span class="num">32</span>;
      Chunk_Size : <span class="kwa">constant</span> <span class="kwb">Positive</span> :=
        (Size + Worker_Index<span class="kwd">'Last</span>) / Worker_Index<span class="kwd">'Last</span>;
      Worker     : <span class="kwa">array</span> (Worker_Index) <span class="kwa">of</span> X_Step;
      <span class="kwa">pragma</span>       Assert (Worker<span class="kwd">'Length</span> * Chunk_Size &gt;= Size);
      <span class="kwa">pragma</span>       Assert (Worker<span class="kwd">'First</span> = <span class="num">0</span>);
   <span class="kwa">begin</span>
      <span class="kwa">for</span> P <span class="kwa">in</span> Worker<span class="kwd">'Range</span> <span class="kwa">loop</span>
         Worker (P).Compute_Z
           (Y1 =&gt; PCount (P * Chunk_Size),
            Y2 =&gt; PCount (<span class="kwb">Positive</span><span class="kwd">'Min</span> ((P + <span class="num">1</span>) * Chunk_Size, Size)));
      <span class="kwa">end loop</span>;

      <span class="kwa">declare</span>
         Stdout : Stream_IO.File_Type;
         Header : <span class="kwa">constant</span> <span class="kwb">String</span> := <span class="str">&quot;P4&quot;</span> &amp; ASCII.LF &amp;
           Argument (<span class="num">1</span>) &amp; <span class="str">&quot; &quot;</span> &amp; Argument (<span class="num">1</span>) &amp; ASCII.LF;
         Buffer : Output;

         Header_Bytes : Stream_Element_Array (<span class="num">1</span> .. Header<span class="kwd">'Length</span>);
         <span class="kwa">pragma</span> Import (Ada, Header_Bytes);
         <span class="kwa">for</span> Header_Bytes<span class="kwd">'Address</span> <span class="kwa">use</span> Header<span class="kwd">'Address</span>;
      <span class="kwa">begin</span>
         Stream_IO.Open (Stdout, Stream_IO.Out_File, <span class="str">&quot;/dev/stdout&quot;</span>);
         Stream_IO.Write (Stdout, Header_Bytes);
         <span class="kwa">for</span> P <span class="kwa">in</span> Worker<span class="kwd">'Range</span> <span class="kwa">loop</span>
            Worker (P).Get_Output (Result =&gt; Buffer);
            Stream_IO.Write (Stdout, Buffer.<span class="kwa">all</span>);
         <span class="kwa">end loop</span>;
      <span class="kwa">end</span>;
   <span class="kwa">end</span>;

<span class="kwa">end</span> Mandelbrot;

