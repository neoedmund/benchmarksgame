#lang racket/base

<span class="slc">;;; The Computer Language Benchmarks Game</span>
<span class="slc">;;; http://benchmarksgame.alioth.debian.org/</span>
<span class="slc">;;; contributed by Eli Barzilay</span>

(<span class="kwa">define</span> translation (<span class="kwa">make-vector</span> <span class="num">128</span>))

(<span class="kwa">for</span> ([from (<span class="kwa">in-string</span> <span class="str">&quot;ACGTUMRWSYKVHDBN&quot;</span>)]
      [to   (<span class="kwa">in-string</span> <span class="str">&quot;TGCAAKYWSRMBDHVN&quot;</span>)])
  (<span class="kwa">let</span> ([to (<span class="kwa">char-</span>&gt;integer to)])
    (<span class="kwa">vector-set</span>! translation (<span class="kwa">char-</span>&gt;integer from) to)
    (<span class="kwa">vector-set</span>! translation (<span class="kwa">char-</span>&gt;integer (<span class="kwa">char-downcase</span> from)) to)))

(<span class="kwa">define</span> I (<span class="kwa">current-input-port</span>))
(<span class="kwa">define</span> O (<span class="kwa">current-output-port</span>))

(<span class="kwa">define</span> marker (<span class="kwa">char-</span>&gt;integer #\&gt;))

(<span class="kwa">require</span> racket/require (<span class="kwa">for-syntax</span> racket/base)
         (<span class="kwa">filtered-in</span> (<span class="kwa">lambda</span> (<span class="kwa">name</span>) (<span class="kwa">regexp-replace</span> #rx<span class="str">&quot;unsafe-&quot;</span> name <span class="str">&quot;&quot;</span>))
                      racket/unsafe/ops))

(<span class="kwa">define</span> line-length <span class="num">60</span>)
(<span class="kwa">define</span> buf-size (* <span class="num">64 1024</span>))
(<span class="kwa">define</span> out-buf <span class="slc">; so there's always enough room for newlines</span>
  (<span class="kwa">make-bytes</span> (+ buf-size <span class="num">1</span> (<span class="kwa">quotient</span> buf-size line-length))))
(<span class="kwa">define</span> LF (<span class="kwa">char-</span>&gt;integer #<span class="esc">\n</span>ewline))

#|
The basic idea is to read the input in chunks, and keep pointers to
them, then on output process each chunk to translate and reverse it
before dumping it out.
|#

(<span class="kwa">define</span> (<span class="kwa">output</span> chunks)
  (<span class="kwa">let</span> loop ([chunks chunks] [col line-length])
    (<span class="kwa">when</span> (<span class="kwa">pair</span>? chunks)
      (<span class="kwa">let</span> ([chunk (<span class="kwa">car</span> chunks)])
        (<span class="kwa">let</span> ([start  (<span class="kwa">vector-ref</span> chunk <span class="num">0</span>)]
              [end    (<span class="kwa">vector-ref</span> chunk <span class="num">1</span>)]
              [in-buf (<span class="kwa">vector-ref</span> chunk <span class="num">2</span>)])
          (<span class="kwa">let</span> chunk-loop ([i end] [j <span class="num">0</span>] [col col])
            (<span class="kwa">if</span> (<span class="kwa">fx</span>&gt; i start)
              (<span class="kwa">let</span>* ([i (<span class="kwa">fx-</span> i <span class="num">1</span>)] [b (<span class="kwa">bytes-ref</span> in-buf i)])
                (<span class="kwa">if</span> (<span class="kwa">fx</span>= b LF)
                  (<span class="kwa">chunk-loop</span> i j col)
                  (<span class="kwa">let</span> ([b (<span class="kwa">vector-ref</span> translation b)])
                    (<span class="kwa">if</span> (<span class="kwa">fx</span>= <span class="num">0</span> col)
                      (<span class="kwa">begin</span> (<span class="kwa">bytes-set</span>! out-buf j LF)
                             (<span class="kwa">bytes-set</span>! out-buf (<span class="kwa">fx</span>+ j <span class="num">1</span>) b)
                             (<span class="kwa">chunk-loop</span> i (<span class="kwa">fx</span>+ j <span class="num">2</span>) (<span class="kwa">fx-</span> line-length <span class="num">1</span>)))
                      (<span class="kwa">begin</span> (<span class="kwa">bytes-set</span>! out-buf j b)
                             (<span class="kwa">chunk-loop</span> i (<span class="kwa">fx</span>+ j <span class="num">1</span>) (<span class="kwa">fx-</span> col <span class="num">1</span>)))))))
              (<span class="kwa">begin</span> (<span class="kwa">write-bytes</span> out-buf O <span class="num">0</span> j)
                     (<span class="kwa">loop</span> (<span class="kwa">cdr</span> chunks) col))))))))
  (<span class="kwa">newline</span> O))

(<span class="kwa">define-syntax</span> case-regexp-posns
  (<span class="kwa">syntax-rules</span> (=&gt; else)
    [(<span class="kwa">_</span> rx buf start [id B1 ...] [else B2 ...])
     (<span class="kwa">let</span> ([m (<span class="kwa">regexp-match-positions</span> rx buf start)])
       (<span class="kwa">if</span> m (<span class="kwa">let</span> ([id (<span class="kwa">car</span> m)]) B1 ...) (<span class="kwa">begin</span> B2 ...)))]))

(<span class="kwa">let</span> ([m (<span class="kwa">regexp-match</span> #rx<span class="str">&quot;^([^</span><span class="esc">\n</span><span class="str">]+)</span><span class="esc">\n</span><span class="str">&quot;</span> I)]) (<span class="kwa">display</span> (<span class="kwa">car</span> m)))

(<span class="kwa">let</span> loop ([buf (<span class="kwa">read-bytes</span> buf-size I)] [start <span class="num">0</span>] [chunks '()])
  (<span class="kwa">if</span> (<span class="kwa">eof-object</span>? buf)
    (<span class="kwa">begin</span> (<span class="kwa">output</span> chunks) (<span class="kwa">void</span>))
    (<span class="kwa">case-regexp-posns</span> #rx<span class="str">&quot;&gt;&quot;</span> buf start
      [p1 (<span class="kwa">output</span> (<span class="kwa">cons</span> (<span class="kwa">vector</span> start (<span class="kwa">car</span> p1) buf) chunks))
          (<span class="kwa">case-regexp-posns</span> #rx<span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span> buf (<span class="kwa">cdr</span> p1)
            [p2 (<span class="kwa">write-bytes</span> buf O (<span class="kwa">car</span> p1) (<span class="kwa">cdr</span> p2))
                (<span class="kwa">loop</span> buf (<span class="kwa">cdr</span> p2) '())]
            [else (<span class="kwa">write-bytes</span> buf O (<span class="kwa">car</span> p1))
                  (<span class="kwa">let</span> header-loop ()
                    (<span class="kwa">let</span> ([buf (<span class="kwa">read-bytes</span> buf-size I)])
                      (<span class="kwa">case-regexp-posns</span> #rx<span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span> buf <span class="num">0</span>
                        [p2 (<span class="kwa">write-bytes</span> buf O <span class="num">0</span> (<span class="kwa">cdr</span> p2))
                            (<span class="kwa">loop</span> buf (<span class="kwa">cdr</span> p2) '())]
                        [else (<span class="kwa">write-bytes</span> buf O) (<span class="kwa">header-loop</span>)])))])]
      [else (<span class="kwa">loop</span> (<span class="kwa">read-bytes</span> buf-size I) <span class="num">0</span>
                  (<span class="kwa">cons</span> (<span class="kwa">vector</span> start (<span class="kwa">bytes-length</span> buf) buf) chunks))])))
