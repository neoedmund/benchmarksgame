#lang racket/base

<span class="slc">;;; The Computer Language Benchmarks Game</span>
<span class="slc">;;; http://benchmarksgame.alioth.debian.org/</span>

<span class="slc">;;; Derived from C version by Joern Inge Vestgaarden </span>
<span class="slc">;;;                 and Jorge Peixoto de Morais Neto</span>
<span class="slc">;;; Contributed by Sam Tobin-Hochstadt</span>

(<span class="kwa">require</span> racket/cmdline racket/require (<span class="kwa">for-syntax</span> racket/base) (<span class="kwa">only-in</span> racket/flonum for/flvector)
         (<span class="kwa">filtered-in</span> (Î» (<span class="kwa">name</span>) (<span class="kwa">regexp-replace</span> #rx<span class="str">&quot;unsafe-&quot;</span> name <span class="str">&quot;&quot;</span>))
                       racket/unsafe/ops))

(<span class="kwa">define</span> +alu+
  (<span class="kwa">bytes-append</span> #<span class="str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span>
                #<span class="str">&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span>
                #<span class="str">&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span>
                #<span class="str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span>
                #<span class="str">&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span>
                #<span class="str">&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span>
                #<span class="str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span>))

(<span class="kwa">define</span> (<span class="kwa">build-table</span> t)
  (<span class="kwa">cons</span> (<span class="kwa">apply</span> bytes (<span class="kwa">map</span> (<span class="kwa">compose</span> char-&gt;integer car) t))
        (<span class="kwa">for</span>/flvector ([i t]) (<span class="kwa">cdr</span> i))))

(<span class="kwa">define</span> IUB
  (<span class="kwa">build-table</span>
   '([#<span class="esc">\a</span> . <span class="num">0.27</span>] [#\c . <span class="num">0.12</span>] [#\g . <span class="num">0.12</span>] [#<span class="esc">\t</span> . <span class="num">0.27</span>] [#\B . <span class="num">0.02</span>]
     [#\D . <span class="num">0.02</span>] [#\H . <span class="num">0.02</span>] [#\K . <span class="num">0.02</span>] [#\M . <span class="num">0.02</span>] [#\N . <span class="num">0.02</span>]
     [#\R . <span class="num">0.02</span>] [#\S . <span class="num">0.02</span>] [#\V . <span class="num">0.02</span>] [#\W . <span class="num">0.02</span>] [#\Y . <span class="num">0.02</span>])))

(<span class="kwa">define</span> HOMOSAPIEN
  (<span class="kwa">build-table</span> '([#<span class="esc">\a</span> . <span class="num">0.3029549426680</span>] [#\c . <span class="num">0.1979883004921</span>]
                 [#\g . <span class="num">0.1975473066391</span>] [#<span class="esc">\t</span> . <span class="num">0.3015094502008</span>])))

<span class="slc">;; -------------</span>

(<span class="kwa">define</span> line-length <span class="num">60</span>)

(<span class="kwa">define</span> IA <span class="num">3877</span>)
(<span class="kwa">define</span> IC <span class="num">29573</span>)
(<span class="kwa">define</span> IM <span class="num">139968</span>)

<span class="slc">;; -------------------------------</span>

(<span class="kwa">define</span> LAST <span class="num">42</span>)

<span class="slc">;; -------------------------------</span>

(<span class="kwa">define</span> (<span class="kwa">make-cumulative-table</span> frequency-table)
  (<span class="kwa">define</span> bs (<span class="kwa">car</span> frequency-table))
  (<span class="kwa">define</span> ps (<span class="kwa">cdr</span> frequency-table))
  (<span class="kwa">define</span> len (<span class="kwa">bytes-length</span> bs))
  (<span class="kwa">let</span> loop ([i <span class="num">0</span>] [cum <span class="num">0.0</span>])
    (<span class="kwa">when</span> (<span class="kwa">fx</span>&lt; i len)
      (<span class="kwa">define</span> this (<span class="kwa">flvector-ref</span> ps i))
      (<span class="kwa">define</span> new (<span class="kwa">fl</span>+ this cum))
      (<span class="kwa">flvector-set</span>! ps i new)
      (<span class="kwa">loop</span> (<span class="kwa">fx</span>+ <span class="num">1</span> i) new))))

<span class="slc">;; -------------</span>

(<span class="kwa">define</span> (<span class="kwa">random-next</span> max)
  (<span class="kwa">set</span>! LAST (<span class="kwa">fxmodulo</span> (<span class="kwa">fx</span>+ IC (<span class="kwa">fx</span>* LAST IA)) IM))
  (<span class="kwa">fl</span>/ (<span class="kwa">fl</span>* max (<span class="kwa">fx-</span>&gt;fl LAST)) (<span class="kwa">fx-</span>&gt;fl IM)))

<span class="slc">;; -------------</span>

(<span class="kwa">define</span> (<span class="kwa">repeat-fasta</span> s count)
  (<span class="kwa">define</span> out (<span class="kwa">current-output-port</span>))  
  (<span class="kwa">define</span> len (<span class="kwa">bytes-length</span> s))
  (<span class="kwa">define</span> s2 (<span class="kwa">make-bytes</span> (<span class="kwa">fx</span>+ len line-length)))  
  (<span class="kwa">bytes-copy</span>! s2 <span class="num">0</span> s <span class="num">0</span> len)
  (<span class="kwa">bytes-copy</span>! s2 len s <span class="num">0</span> line-length)
  (<span class="kwa">let</span> loop ([count count] [pos <span class="num">0</span>])
    (<span class="kwa">define</span> line (<span class="kwa">fxmin</span> line-length count))
    (<span class="kwa">write-bytes</span> s2 out pos (<span class="kwa">fx</span>+ pos line))
    (<span class="kwa">newline</span> out)    
    (<span class="kwa">define</span> count* (<span class="kwa">fx-</span> count line))
    (<span class="kwa">when</span> (<span class="kwa">fx</span>&gt; count* <span class="num">0</span>)
      (<span class="kwa">define</span> pos* (<span class="kwa">fx</span>+ pos line))      
      (<span class="kwa">loop</span> count* (<span class="kwa">if</span> (<span class="kwa">fx</span>&gt;= pos* len) (<span class="kwa">fx-</span> pos* len) pos*)))))


<span class="slc">;; -------------</span>

(<span class="kwa">define-syntax-rule</span> (<span class="kwa">random-fasta</span> genelist cnt)
  (<span class="kwa">let</span> ()
    (<span class="kwa">define</span> out (<span class="kwa">current-output-port</span>))
    (<span class="kwa">define</span> ps (<span class="kwa">cdr</span> genelist))
    (<span class="kwa">define</span> cs (<span class="kwa">car</span> genelist))
    (<span class="kwa">let</span> loop ([count cnt])
      (<span class="kwa">define</span> line (<span class="kwa">fxmin</span> line-length count)) 
      (<span class="kwa">define</span> buf (<span class="kwa">make-bytes</span> (<span class="kwa">fx</span>+ <span class="num">1</span> line-length)))
      (<span class="kwa">let</span> inner ([pos <span class="num">0</span>])
        (<span class="kwa">define</span> r (<span class="kwa">random-next</span> <span class="num">1.0</span>))
        (<span class="kwa">define</span> i (<span class="kwa">let</span> wh ([i <span class="num">0</span>]) (<span class="kwa">if</span> (<span class="kwa">fl</span>&lt; (<span class="kwa">flvector-ref</span> ps i) r) (<span class="kwa">wh</span> (<span class="kwa">fx</span>+ i <span class="num">1</span>)) i)))
        (<span class="kwa">bytes-set</span>! buf pos (<span class="kwa">bytes-ref</span> cs i))
        (<span class="kwa">define</span> pos+ (<span class="kwa">fx</span>+ pos <span class="num">1</span>))
        (<span class="kwa">when</span> (<span class="kwa">fx</span>&lt; pos+ line)
          (<span class="kwa">inner</span> pos+)))
      (<span class="kwa">bytes-set</span>! buf line (<span class="kwa">char-</span>&gt;integer #<span class="esc">\n</span>ewline))
      (<span class="kwa">write-bytes</span> buf out <span class="num">0</span> (<span class="kwa">fx</span>+ line <span class="num">1</span>))
      (<span class="kwa">define</span> count- (<span class="kwa">fx-</span> count line))
      (<span class="kwa">when</span> (<span class="kwa">fx</span>&gt; count- <span class="num">0</span>)
        (<span class="kwa">loop</span> count-)))))

<span class="slc">;; -------------------------------</span>
  
(<span class="kwa">define</span> n (<span class="kwa">command-line</span> #:args (<span class="kwa">n</span>) (<span class="kwa">string-</span>&gt;number n)))

(<span class="kwa">make-cumulative-table</span> IUB)
(<span class="kwa">make-cumulative-table</span> HOMOSAPIEN)

(<span class="kwa">display</span> <span class="str">&quot;&gt;ONE Homo sapiens alu</span><span class="esc">\n</span><span class="str">&quot;</span>)
(<span class="kwa">repeat-fasta</span> +alu+ (* n <span class="num">2</span>))
(<span class="kwa">display</span> <span class="str">&quot;&gt;TWO IUB ambiguity codes</span><span class="esc">\n</span><span class="str">&quot;</span>)
(<span class="kwa">random-fasta</span> IUB (* n <span class="num">3</span>))
(<span class="kwa">display</span> <span class="str">&quot;&gt;THREE Homo sapiens frequency</span><span class="esc">\n</span><span class="str">&quot;</span>)
(<span class="kwa">random-fasta</span> HOMOSAPIEN (* n <span class="num">5</span>))
