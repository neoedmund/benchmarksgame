<span class="com">/* The Computer Language Benchmarks Game</span>
<span class="com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * Original C contributed by Sebastien Loisel</span>
<span class="com"> * Conversion to C++ by Jon Harrop</span>
<span class="com"> * OpenMP parallelize by The Anh Tran</span>
<span class="com"> * Add SSE by The Anh Tran</span>
<span class="com"> * Reconversion into C by Dan Farina</span>
<span class="com"> */</span>

<span class="ppc">#define _GNU_SOURCE</span>
<span class="ppc">#include &lt;omp.h&gt;</span>
<span class="ppc">#include &lt;math.h&gt;</span>
<span class="ppc">#include &lt;sched.h&gt;</span>
<span class="ppc">#include &lt;stdio.h&gt;</span>
<span class="ppc">#include &lt;stdlib.h&gt;</span>

<span class="ppc">#define false 0</span>
<span class="ppc">#define true  1</span>

<span class="com">/* define SIMD data type. 2 doubles encapsulated in one XMM register */</span>
<span class="kwc">typedef</span> <span class="kwb">double</span> v2dt <span class="kwd">__attribute__</span>((<span class="kwd">vector_size</span>(<span class="num">16</span>)));
<span class="kwb">static const</span> v2dt v1 = {<span class="num">1.0</span>, <span class="num">1.0</span>};

<span class="com">/* parameter for evaluate functions */</span>
<span class="kwb">struct</span> Param
{
    <span class="kwb">double</span>* u;          <span class="com">/* source vector */</span>
    <span class="kwb">double</span>* tmp;        <span class="com">/* temporary */</span>
    <span class="kwb">double</span>* v;          <span class="com">/* destination vector */</span>

    <span class="kwb">int</span> N;              <span class="com">/* source/destination vector length */</span>
    <span class="kwb">int</span> N2;             <span class="com">/* = N/2 */</span>

    <span class="kwb">int</span> r_begin;        <span class="com">/* working range of each thread */</span>
    <span class="kwb">int</span> r_end;
};

<span class="com">/* Return: 1.0 / (i + j) * (i + j +1) / 2 + i + 1; */</span>
<span class="kwb">static double</span>
<span class="kwd">eval_A</span>(<span class="kwb">int</span> i, <span class="kwb">int</span> j)
{
    <span class="com">/*</span>
<span class="com">     * 1.0 / (i + j) * (i + j +1) / 2 + i + 1;</span>
<span class="com">     * n * (n+1) is even number. Therefore, just (&gt;&gt; 1) for (/2)</span>
<span class="com">     */</span>
    <span class="kwb">int</span> d = (((i+j) * (i+j+<span class="num">1</span>)) &gt;&gt; <span class="num">1</span>) + i+<span class="num">1</span>;

    <span class="kwa">return</span> <span class="num">1.0</span> / d;
}

<span class="com">/*</span>
<span class="com"> * Return type: 2 doubles in xmm register [double1, double2]</span>
<span class="com"> *  double1 = 1.0 / (i + j) * (i + j +1) / 2 + i + 1;</span>
<span class="com"> *  double2 = 1.0 / (i+1 + j) * (i+1 + j +1) / 2 + i+1 + 1;</span>
<span class="com"> */</span>
<span class="kwb">static</span> v2dt
<span class="kwd">eval_A_i</span>(<span class="kwb">int</span> i, <span class="kwb">int</span> j)
{
    <span class="kwb">int</span> d1 = (((i+j) * (i+j+<span class="num">1</span>)) &gt;&gt; <span class="num">1</span>) + i+<span class="num">1</span>;
    <span class="kwb">int</span> d2 = (((i+<span class="num">1</span> +j) * (i+<span class="num">1</span> +j+<span class="num">1</span>)) &gt;&gt; <span class="num">1</span>) + (i+<span class="num">1</span>) +<span class="num">1</span>;
    v2dt r = {d1, d2};

    <span class="kwa">return</span> v1 / r;
}

<span class="com">/*</span>
<span class="com"> * Return type: 2 doubles in xmm register [double1, double2]</span>
<span class="com"> *  double1 = 1.0 / (i + j) * (i + j +1) / 2 + i + 1;</span>
<span class="com"> *  double2 = 1.0 / (i + j+1) * (i + j+1 +1) / 2 + i + 1;</span>
<span class="com"> */</span>
<span class="kwb">static</span> v2dt
<span class="kwd">eval_A_j</span>(<span class="kwb">int</span> i, <span class="kwb">int</span> j)
{
    <span class="kwb">int</span> d1 = (((i+j) * (i+j+<span class="num">1</span>)) &gt;&gt; <span class="num">1</span>) + i+<span class="num">1</span>;
    <span class="kwb">int</span> d2 = (((i+ j+<span class="num">1</span>) * (i+ j+<span class="num">1</span> +<span class="num">1</span>)) &gt;&gt; <span class="num">1</span>) + i+<span class="num">1</span>;
    v2dt r = {d1, d2};

    <span class="kwa">return</span> v1 / r;
}


<span class="com">/* This function is called by many threads */</span>
<span class="kwb">static void</span>
<span class="kwd">eval_A_times_u</span>(<span class="kwb">struct</span> Param *p)
{
    <span class="com">/* alias of source vector */</span>
    <span class="kwb">const</span> v2dt  *pU = (<span class="kwb">void</span> *) p-&gt;u;
    <span class="kwb">int</span>          i;
    <span class="kwb">int</span>          ie;

    <span class="kwa">for</span> (i = p-&gt;r_begin, ie = p-&gt;r_end; i &lt; ie; i++)
    {
        v2dt sum = {<span class="num">0</span>, <span class="num">0</span>};

        <span class="com">/* xmm = 2 doubles. This loop run from [0 .. N/2) */</span>
        <span class="kwb">int</span> j;
        <span class="kwa">for</span> (j = <span class="num">0</span>; j &lt; p-&gt;N2; j++)
            sum += pU[j] * <span class="kwd">eval_A_j</span>(i, j*<span class="num">2</span>);

        <span class="com">/* write result */</span>
        {
            <span class="kwb">double</span> *mem = (<span class="kwb">void</span> *) &amp;sum;

            p-&gt;tmp[i] = mem[<span class="num">0</span>] + mem[<span class="num">1</span>];
        }

        <span class="com">/* If source vector is odd size. This should be called &lt;= 1 time */</span>
        <span class="kwa">for</span> (j = j*<span class="num">2</span>; <span class="kwd">__builtin_expect</span>(j &lt; p-&gt;N, <span class="kwa">false</span>); j++)
            p-&gt;tmp[i] += <span class="kwd">eval_A</span>(i, j) * p-&gt;u[j];
    }
}

<span class="kwb">static void</span>
<span class="kwd">eval_At_times_u</span>(<span class="kwb">struct</span> Param *p)
{
    <span class="kwb">const</span> v2dt  *pT = (<span class="kwb">void</span> *) p-&gt;tmp;
    <span class="kwb">int</span>          i;
    <span class="kwb">int</span>          ie;

    <span class="kwa">for</span> (i = p-&gt;r_begin, ie = p-&gt;r_end; i &lt; ie; i++)
    {
        v2dt    sum = {<span class="num">0</span>, <span class="num">0</span>};
        <span class="kwb">int</span>     j;

        <span class="kwa">for</span> (j = <span class="num">0</span>; j &lt; p-&gt;N2; j++)
            sum += pT[j] * <span class="kwd">eval_A_i</span>(j*<span class="num">2</span>, i);

        {
            <span class="kwb">double</span> *mem = (<span class="kwb">void</span> *) &amp;sum;

            p-&gt;v[i] = mem[<span class="num">0</span>] + mem[<span class="num">1</span>];
        }

        <span class="com">/* odd size array */</span>
        <span class="kwa">for</span> (j = j*<span class="num">2</span>; <span class="kwd">__builtin_expect</span>(j &lt; p-&gt;N, <span class="kwa">false</span>); j++)
            p-&gt;v[i] += <span class="kwd">eval_A</span>(j, i) * p-&gt;tmp[j];
    }
}

<span class="com">/*</span>
<span class="com"> * Called by N threads.</span>
<span class="com"> *</span>
<span class="com"> * Each thread modifies its portion in destination vector -&gt; barrier needed to</span>
<span class="com"> * sync access</span>
<span class="com"> */</span>
<span class="kwb">static void</span>
<span class="kwd">eval_AtA_times_u</span>(<span class="kwb">struct</span> Param *p)
{
    <span class="kwd">eval_A_times_u</span>(p);
<span class="ppc">#pragma omp barrier</span>

    <span class="kwd">eval_At_times_u</span>(p);
<span class="ppc">#pragma omp barrier</span>
}

<span class="com">/*</span>
<span class="com"> * Shootout bench uses affinity to emulate single core processor.  This</span>
<span class="com"> * function searches for appropriate number of threads to spawn.</span>
<span class="com"> */</span>
<span class="kwb">static int</span>
<span class="kwd">GetThreadCount</span>()
{
    cpu_set_t   cs;
    <span class="kwb">int</span>         i;
    <span class="kwb">int</span>         count = <span class="num">0</span>;

    <span class="kwd">CPU_ZERO</span>(&amp;cs);
    <span class="kwd">sched_getaffinity</span>(<span class="num">0</span>, <span class="kwa">sizeof</span>(cs), &amp;cs);

    <span class="kwa">for</span> (i = <span class="num">0</span>; i &lt; <span class="num">16</span>; i++)
        <span class="kwa">if</span> (<span class="kwd">CPU_ISSET</span>(i, &amp;cs))
            count++;

    <span class="kwa">return</span> count;
}

<span class="kwb">static double</span>
<span class="kwd">spectral_game</span>(<span class="kwb">int</span> N)
{
    <span class="com">/* Align 64 byte for L2 cache line */</span>
    <span class="kwd">__attribute__</span>((<span class="kwd">aligned</span>(<span class="num">64</span>))) <span class="kwb">double</span> u[N];
    <span class="kwd">__attribute__</span>((<span class="kwd">aligned</span>(<span class="num">64</span>))) <span class="kwb">double</span> tmp[N];
    <span class="kwd">__attribute__</span>((<span class="kwd">aligned</span>(<span class="num">64</span>))) <span class="kwb">double</span> v[N];

    <span class="kwb">double</span>      vBv = <span class="num">0.0</span>;
    <span class="kwb">double</span>      vv  = <span class="num">0.0</span>;

<span class="ppc">#pragma omp parallel default(shared) num_threads(GetThreadCount())</span>
    {
        <span class="kwb">int</span> i;

<span class="ppc">#pragma omp for schedule(static)</span>
        <span class="kwa">for</span> (i = <span class="num">0</span>; i &lt; N; i++)
            u[i] = <span class="num">1.0</span>;

        <span class="com">/*</span>
<span class="com">         * this block will be executed by NUM_THREADS variable declared in this</span>
<span class="com">         * block is private for each thread</span>
<span class="com">         */</span>
        <span class="kwb">int</span>             threadid    = <span class="kwd">omp_get_thread_num</span>();
        <span class="kwb">int</span>             threadcount = <span class="kwd">omp_get_num_threads</span>();
        <span class="kwb">int</span>             chunk       = N / threadcount;
        <span class="kwb">int</span>             ite;
        <span class="kwb">struct</span> Param    my_param;

        my_param.tmp = tmp;
        my_param.N   = N;
        my_param.N2  = N/<span class="num">2</span>;

        <span class="com">/*</span>
<span class="com">         * calculate each thread's working range [range1 .. range2) =&gt; static</span>
<span class="com">         * schedule here</span>
<span class="com">         */</span>
        my_param.r_begin   = threadid * chunk;
        my_param.r_end  = (threadid &lt; (threadcount -<span class="num">1</span>)) ?
            (my_param.r_begin + chunk) : N;

        <span class="kwa">for</span> (ite = <span class="num">0</span>; ite &lt; <span class="num">10</span>; ite++)
        {
            my_param.u = u;     <span class="com">/* source vec is u */</span>
            my_param.v = v;     <span class="com">/* destination vec is v */</span>
            <span class="kwd">eval_AtA_times_u</span>(&amp;my_param);

            my_param.u = v;     <span class="com">/* source is v */</span>
            my_param.v = u;     <span class="com">/* destination is u */</span>
            <span class="kwd">eval_AtA_times_u</span>(&amp;my_param);
        }

        <span class="com">/* multi thread adding */</span>
        {
            <span class="kwb">int</span> i;

<span class="ppc">#pragma omp for schedule(static) reduction( + : vBv, vv ) nowait</span>

            <span class="kwa">for</span> (i = <span class="num">0</span>; i &lt; N; i++)
            {
                vv  += v[i] * v[i];
                vBv += u[i] * v[i];
            }
        }
    }
    <span class="com">/* end parallel region */</span>

    <span class="kwa">return</span> <span class="kwd">sqrt</span>(vBv/vv);
}

<span class="kwb">int</span>
<span class="kwd">main</span>(<span class="kwb">int</span> argc, <span class="kwb">char</span> *argv[])
{
    <span class="kwb">int</span> N = ((argc &gt;= <span class="num">2</span>) ? <span class="kwd">atoi</span>(argv[<span class="num">1</span>]) : <span class="num">2000</span>);

    <span class="kwd">printf</span>(<span class="str">&quot;%.9f</span><span class="esc">\n</span><span class="str">&quot;</span>, <span class="kwd">spectral_game</span>(N));
    <span class="kwa">return</span> <span class="num">0</span>;
}
