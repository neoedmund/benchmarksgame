<span class="com">/* The Computer Language Benchmarks Game</span>
<span class="com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Branimir Maksimovic</span>
<span class="com">*/</span>
<span class="ppc">#include &lt;cstdlib&gt;</span>
<span class="ppc">#include &lt;cstdio&gt;</span>
<span class="ppc">#include &lt;algorithm&gt;</span>

<span class="kwc">typedef</span> <span class="kwb">unsigned char</span> int_t;

<span class="kwb">void</span> <span class="kwd">rotate</span>(int_t* p, <span class="kwb">int</span> n)
{
   int_t tmp = p[<span class="num">0</span>];
   <span class="kwa">for</span>(<span class="kwb">int</span> i = <span class="num">0</span>; i &lt; n; ++i)p[i]=p[i+<span class="num">1</span>];
   p[n] = tmp;
}

<span class="kwb">bool</span> <span class="kwd">next_permutation</span>(int_t* beg, <span class="kwb">int</span> n, int_t* c)
{
   <span class="kwb">int</span> i = <span class="num">1</span>;
   <span class="kwa">while</span>(i&lt;n)
   {
      <span class="kwd">rotate</span>(beg,i);
      <span class="kwa">if</span>(c[i]&gt;=i)c[i++]=<span class="num">0</span>;
      <span class="kwa">else break</span>;
   }
   <span class="kwa">if</span>(i&gt;=n)<span class="kwa">return false</span>;
   ++c[i];
   <span class="kwa">return true</span>;
}


<span class="kwb">struct</span> Result{
   <span class="kwb">int</span> checksum;
   <span class="kwb">int</span> maxflips;
};

Result <span class="kwd">fannkuch</span>(<span class="kwb">int</span> n)
{
   Result tmp = {<span class="num">0</span>};
   <span class="kwb">int</span> i=<span class="num">0</span>,permcount=<span class="num">0</span>;
   int_t perm[<span class="num">16</span>],tperm[<span class="num">16</span>],cnt[<span class="num">16</span>]={<span class="num">0</span>};
   
   std::<span class="kwd">generate</span>(perm,perm+n,[&amp;i](){ <span class="kwa">return</span> ++i; });
   
   <span class="kwa">do</span>
   {
      std::<span class="kwd">copy</span>(perm,perm+n,tperm);
      <span class="kwb">int</span> flips = <span class="num">0</span>;
      <span class="kwa">while</span>(tperm[<span class="num">0</span>] != <span class="num">1</span>)
      {
         std::<span class="kwd">reverse</span>(tperm,tperm+tperm[<span class="num">0</span>]);
         ++flips;
      }
      tmp.checksum += (permcount%<span class="num">2</span> == <span class="num">0</span>)?flips:-flips;
      tmp.maxflips = std::<span class="kwd">max</span>(tmp.maxflips,flips);
   }<span class="kwa">while</span>(++permcount,<span class="kwd">next_permutation</span>(perm,n,cnt));

   <span class="kwa">return</span> tmp;
}

<span class="kwb">int</span> <span class="kwd">main</span>(<span class="kwb">int</span> argc, <span class="kwb">char</span>** argv)
{
   <span class="kwb">int</span> n = <span class="num">7</span>;
   <span class="kwa">if</span>(argc &gt; <span class="num">1</span>)n = <span class="kwd">atoi</span>(argv[<span class="num">1</span>]);
   <span class="kwa">if</span>(n &lt; <span class="num">3</span> || n &gt; <span class="num">16</span>)
   {
      <span class="kwd">printf</span>(<span class="str">&quot;n should be between [3 and 16]</span><span class="esc">\n</span><span class="str">&quot;</span>);
      <span class="kwa">return</span> <span class="num">0</span>;
   }
   Result r = <span class="kwd">fannkuch</span>(n);
   <span class="kwd">printf</span>(<span class="str">&quot;%d</span><span class="esc">\n</span><span class="str">Pfannkuchen(%d) = %d</span><span class="esc">\n</span><span class="str">&quot;</span>,r.checksum,n,r.maxflips);
}
