<span class="com">(* The Computer Language Benchmarks Game</span>
<span class="com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   from C# version by Isaac Gouy, transliterated from Mike Pall's Lua program </span>
<span class="com"></span>
<span class="com">*)</span>
<span class="kwa">open</span> <span class="kwd">System</span>

<span class="kwa">let</span> fannkuch n =
   <span class="kwa">let</span> p = <span class="kwd">Array</span>.init n id
   <span class="kwa">let</span> q = <span class="kwd">Array</span>.init n id
   <span class="kwa">let</span> s = <span class="kwd">Array</span>.init n id
   <span class="kwa">let mutable</span> sign = <span class="num">1</span>
   <span class="kwa">let mutable</span> maxflips = <span class="num">0</span>
   <span class="kwa">let mutable</span> sum = <span class="num">0</span>
   <span class="kwa">let mutable</span> m = n - <span class="num">1</span>
   <span class="kwa">let mutable</span> ret = <span class="kwa">false</span>
   <span class="kwa">let mutable</span> res = (<span class="num">0</span>,<span class="num">0</span>)
   <span class="kwa">while</span> not ret <span class="kwa">do</span> 
         <span class="slc">// Copy and flip.</span>
         <span class="kwa">let mutable</span> q0 = p.[<span class="num">0</span>]                                    <span class="slc">// Cache 0th element.</span>
         <span class="kwa">if</span> (q0 &lt;&gt; <span class="num">0</span>) <span class="kwa">then</span>
            <span class="kwa">for</span> i <span class="kwa">in</span> <span class="num">1</span> .. n - <span class="num">1</span> <span class="kwa">do</span> q.[i] &lt;- p.[i]             <span class="slc">// Work on a copy.</span>
            <span class="kwa">let mutable</span> flips = <span class="num">1</span>
            <span class="kwa">let mutable</span> brk = <span class="kwa">false</span>
            <span class="kwa">while</span> not brk <span class="kwa">do</span>
              <span class="kwa">let mutable</span> qq = q.[q0] 
              <span class="kwa">if</span> (qq = <span class="num">0</span>) <span class="kwa">then</span>                                <span class="slc">// ... until 0th element is 0.</span>
                  sum &lt;- sum + sign*flips
                  <span class="kwa">if</span> (flips &gt; maxflips) <span class="kwa">then</span> maxflips &lt;- flips    <span class="slc">// New maximum?</span>
                  brk &lt;- <span class="kwa">true</span>
               
              <span class="kwa">else</span>
                  q.[q0] &lt;- q0
                  <span class="kwa">if</span> (q0 &gt;= <span class="num">3</span>) <span class="kwa">then</span>
                      <span class="kwa">let mutable</span> i = <span class="num">1</span>
                      <span class="kwa">let mutable</span> j = q0 - <span class="num">1</span>
                      <span class="kwa">let mutable</span> brk2 = <span class="kwa">false</span>
                      <span class="kwa">while</span> not brk2 <span class="kwa">do</span> 
                          <span class="kwa">let</span> t = q.[i]
                          q.[i] &lt;- q.[j]
                          q.[j] &lt;- t
                          i &lt;- i + <span class="num">1</span>
                          j &lt;- j - <span class="num">1</span>
                          <span class="kwa">if</span> (i &gt;= j) <span class="kwa">then</span> brk2 &lt;- <span class="kwa">true</span>
               
                  q0 &lt;- qq
                  flips &lt;- flips+<span class="num">1</span>
            
             <span class="slc">// Permute.</span>
         <span class="kwa">if</span> (sign = <span class="num">1</span>) <span class="kwa">then</span>
             <span class="kwa">let</span> t = p.[<span class="num">1</span>]
             p.[<span class="num">1</span>] &lt;- p.[<span class="num">0</span>]
             p.[<span class="num">0</span>] &lt;- t
             sign &lt;- -<span class="num">1</span> <span class="slc">// Rotate 0&lt;-1.</span>
         <span class="kwa">else</span> 
             <span class="kwa">let</span> t = p.[<span class="num">1</span>]
             p.[<span class="num">1</span>] &lt;- p.[<span class="num">2</span>]
             p.[<span class="num">2</span>] &lt;- t
             sign &lt;- <span class="num">1</span>  <span class="slc">// Rotate 0&lt;-1 and 0&lt;-1&lt;-2.</span>
             <span class="kwa">let mutable</span> i = <span class="num">2</span>
             <span class="kwa">let mutable</span> brk2 = <span class="kwa">false</span> 
             <span class="kwa">while</span> not ret &amp;&amp; not brk2 <span class="kwa">do</span> 
                 <span class="kwa">if</span> i &lt; n <span class="kwa">then</span> 
                     
                     <span class="kwa">let mutable</span> sx = s.[i]
                     <span class="kwa">if</span> (sx &lt;&gt; <span class="num">0</span>) <span class="kwa">then</span> 
                         s.[i] &lt;- sx-<span class="num">1</span>
                         brk2 &lt;- <span class="kwa">true</span>
                     elif (i = m) <span class="kwa">then</span> 
                         ret &lt;- <span class="kwa">true</span>
                         res &lt;- (sum, maxflips)  <span class="slc">// Out of permutations.</span>
                     <span class="kwa">else</span> 
                         s.[i] &lt;- i
                         <span class="slc">// Rotate 0&lt;-...&lt;-i+1.</span>
                         <span class="kwa">let</span> t = p.[<span class="num">0</span>]
                         <span class="kwa">for</span> j <span class="kwa">in</span> <span class="num">0</span> .. i <span class="kwa">do</span>
                             p.[j] &lt;- p.[j+<span class="num">1</span>]
                         p.[i+<span class="num">1</span>] &lt;- t
                     i &lt;- i + <span class="num">1</span>
                 <span class="kwa">else</span> 
                     brk2 &lt;- <span class="kwa">true</span>
   res

[&lt;<span class="kwd">EntryPoint</span>&gt;]
<span class="kwa">let</span> main argv = 
    <span class="kwa">let</span> n = <span class="kwa">if</span> (argv.<span class="kwd">Length</span> &gt; <span class="num">0</span>) <span class="kwa">then</span> <span class="kwd">Int32</span>.<span class="kwd">Parse</span>(argv.[<span class="num">0</span>]) <span class="kwa">else</span> <span class="num">7</span>
    <span class="kwa">let</span> (sum,maxflips) = fannkuch n
    <span class="kwd">Console</span>.<span class="kwd">Write</span>(<span class="str">&quot;</span><span class="ipl">{0}</span><span class="str"></span><span class="esc">\n</span><span class="str">Pfannkuchen(</span><span class="ipl">{1}</span><span class="str">) =</span> <span class="ipl">{2}</span><span class="str"></span><span class="esc">\n</span><span class="str">&quot;</span>, sum, n, maxflips)
    <span class="num">0</span>
