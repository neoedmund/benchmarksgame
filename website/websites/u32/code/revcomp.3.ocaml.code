<span class="com">(* The Computer Language Benchmarks Game</span>
<span class="com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="com"> *</span>
<span class="com"> * Contributed by Paolo Ribeca</span>
<span class="com"> *)</span>

<span class="kwa">let</span> chars_per_line = <span class="num">60</span>
<span class="kwa">and</span> lines_per_worker =
  <span class="kwa">match</span> <span class="kwc">Sys</span>.word_size <span class="kwa">with</span>
  | <span class="num">32</span> -&gt; <span class="num">200000</span>
  | <span class="num">64</span> -&gt; <span class="num">500000</span>
  | _ -&gt; <span class="kwa">assert false</span>

<span class="kwa">let</span> rc_table = <span class="kwc">String</span>.make <span class="num">256</span> '<span class="esc">\000</span>'
<span class="kwa">let</span> _ =
  rc_table.[<span class="kwc">Char</span>.code '<span class="kwd">A</span>'] &lt;- '<span class="kwd">T</span>'; rc_table.[<span class="kwc">Char</span>.code '<span class="kwd">T</span>'] &lt;- '<span class="kwd">A</span>';
  rc_table.[<span class="kwc">Char</span>.code 'w'] &lt;- '<span class="kwd">W</span>'; rc_table.[<span class="kwc">Char</span>.code 's'] &lt;- '<span class="kwd">S</span>';
  rc_table.[<span class="kwc">Char</span>.code 'a'] &lt;- '<span class="kwd">T</span>'; rc_table.[<span class="kwc">Char</span>.code 't'] &lt;- '<span class="kwd">A</span>';
  rc_table.[<span class="kwc">Char</span>.code '<span class="kwd">C</span>'] &lt;- '<span class="kwd">G</span>'; rc_table.[<span class="kwc">Char</span>.code '<span class="kwd">G</span>'] &lt;- '<span class="kwd">C</span>';
  rc_table.[<span class="kwc">Char</span>.code 'c'] &lt;- '<span class="kwd">G</span>'; rc_table.[<span class="kwc">Char</span>.code 'g'] &lt;- '<span class="kwd">C</span>';
  rc_table.[<span class="kwc">Char</span>.code '<span class="kwd">U</span>'] &lt;- '<span class="kwd">A</span>'; rc_table.[<span class="kwc">Char</span>.code 'u'] &lt;- '<span class="kwd">A</span>';
  rc_table.[<span class="kwc">Char</span>.code '<span class="kwd">M</span>'] &lt;- '<span class="kwd">K</span>'; rc_table.[<span class="kwc">Char</span>.code '<span class="kwd">K</span>'] &lt;- '<span class="kwd">M</span>';
  rc_table.[<span class="kwc">Char</span>.code 'm'] &lt;- '<span class="kwd">K</span>'; rc_table.[<span class="kwc">Char</span>.code 'k'] &lt;- '<span class="kwd">M</span>';
  rc_table.[<span class="kwc">Char</span>.code '<span class="kwd">R</span>'] &lt;- '<span class="kwd">Y</span>'; rc_table.[<span class="kwc">Char</span>.code '<span class="kwd">Y</span>'] &lt;- '<span class="kwd">R</span>';
  rc_table.[<span class="kwc">Char</span>.code 'r'] &lt;- '<span class="kwd">Y</span>'; rc_table.[<span class="kwc">Char</span>.code 'y'] &lt;- '<span class="kwd">R</span>';
  rc_table.[<span class="kwc">Char</span>.code '<span class="kwd">W</span>'] &lt;- '<span class="kwd">W</span>'; rc_table.[<span class="kwc">Char</span>.code '<span class="kwd">S</span>'] &lt;- '<span class="kwd">S</span>';
  rc_table.[<span class="kwc">Char</span>.code 'w'] &lt;- '<span class="kwd">W</span>'; rc_table.[<span class="kwc">Char</span>.code 's'] &lt;- '<span class="kwd">S</span>';
  rc_table.[<span class="kwc">Char</span>.code '<span class="kwd">V</span>'] &lt;- '<span class="kwd">B</span>'; rc_table.[<span class="kwc">Char</span>.code '<span class="kwd">B</span>'] &lt;- '<span class="kwd">V</span>';
  rc_table.[<span class="kwc">Char</span>.code 'v'] &lt;- '<span class="kwd">B</span>'; rc_table.[<span class="kwc">Char</span>.code 'b'] &lt;- '<span class="kwd">V</span>';
  rc_table.[<span class="kwc">Char</span>.code '<span class="kwd">H</span>'] &lt;- '<span class="kwd">D</span>'; rc_table.[<span class="kwc">Char</span>.code '<span class="kwd">D</span>'] &lt;- '<span class="kwd">H</span>';
  rc_table.[<span class="kwc">Char</span>.code 'h'] &lt;- '<span class="kwd">D</span>'; rc_table.[<span class="kwc">Char</span>.code 'd'] &lt;- '<span class="kwd">H</span>';
  rc_table.[<span class="kwc">Char</span>.code '<span class="kwd">N</span>'] &lt;- '<span class="kwd">N</span>'; rc_table.[<span class="kwc">Char</span>.code 'n'] &lt;- '<span class="kwd">N</span>'

<span class="kwa">let</span> _ =
  <span class="kwa">let</span> aug_chars_per_line = chars_per_line + <span class="num">1</span>
  <span class="kwa">and</span> in_ack, out_ack = <span class="kwc">Unix</span>.pipe () <span class="kwa">and</span> in_end, out_end = <span class="kwc">Unix</span>.pipe ()
  <span class="kwa">and</span> put out_pipe () =
    <span class="kwa">if</span> <span class="kwc">Unix</span>.write out_pipe <span class="str">&quot; &quot;</span> <span class="num">0 1</span> &lt;&gt; <span class="num">1</span> <span class="kwa">then</span>
      failwith <span class="str">&quot;Pipe problem&quot;</span>
  <span class="kwa">and</span> get in_pipe () =
    <span class="kwa">let</span> res = <span class="str">&quot; &quot;</span> <span class="kwa">in</span>
    <span class="kwa">if</span> <span class="kwc">Unix</span>.read in_pipe res <span class="num">0 1</span> &lt;&gt; <span class="num">1</span> <span class="kwa">then</span>
      failwith <span class="str">&quot;Pipe problem&quot;</span> <span class="kwa">in</span>
  <span class="kwa">let</span> put_ack = put out_ack <span class="kwa">and</span> get_ack = get in_ack
  <span class="kwa">and</span> put_end_ack = put out_end <span class="kwa">and</span> get_end_ack = get in_end <span class="kwa">in</span>
  <span class="kwa">let rec</span> spawn tag beg first =
    <span class="kwa">let</span> output_tag () =
      print_string tag;
      print_char '<span class="esc">\n</span>';
      flush stdout
    <span class="kwa">and</span> buf = <span class="kwc">String</span>.create (lines_per_worker * chars_per_line + <span class="num">2</span>)
    <span class="kwa">and</span> len = <span class="kwb">ref</span> (<span class="kwc">String</span>.length beg) <span class="kwa">in</span>
    <span class="kwc">String</span>.blit beg <span class="num">0</span> buf <span class="num">0</span> !len;
    <span class="kwa">let</span> process_buffer () =
      <span class="kwa">let</span> red_len = !len - <span class="num">1</span> <span class="kwa">in</span>
      <span class="kwa">let</span> mid_point = red_len / <span class="num">2</span> <span class="kwa">in</span>
      <span class="kwa">for</span> i = <span class="num">0</span> <span class="kwa">to</span> mid_point <span class="kwa">do</span>
	<span class="kwa">let</span> ri = red_len - i <span class="kwa">and</span> tmp = buf.[i] <span class="kwa">in</span>
	buf.[i] &lt;- rc_table.[<span class="kwc">Char</span>.code buf.[ri]];
	buf.[ri] &lt;- rc_table.[<span class="kwc">Char</span>.code tmp]
      <span class="kwa">done</span>
    <span class="kwa">and</span> write_by_cols rem eol =
      <span class="kwa">let</span> len = !len <span class="kwa">and</span> dne = <span class="kwb">ref</span> <span class="num">0</span> <span class="kwa">in</span>
      <span class="kwa">if</span> rem &gt; <span class="num">0</span> <span class="kwa">then begin</span>
	<span class="kwa">let</span> to_do = min rem (len - !dne) <span class="kwa">in</span>
	output stdout buf !dne to_do;
	output_char stdout '<span class="esc">\n</span>';
	dne := !dne + to_do
      <span class="kwa">end</span>;
      <span class="kwa">while</span> len - !dne &gt;= chars_per_line <span class="kwa">do</span>
	output stdout buf !dne chars_per_line;
	output_char stdout '<span class="esc">\n</span>';
	dne := !dne + chars_per_line
      <span class="kwa">done</span>;
      <span class="kwa">let</span> rem = len - !dne <span class="kwa">in</span>
      <span class="kwa">if</span> rem &gt; <span class="num">0</span> <span class="kwa">then begin</span>
	output stdout buf !dne rem;
	<span class="kwa">if</span> eol <span class="kwa">then</span>
	  output_char stdout '<span class="esc">\n</span>'
      <span class="kwa">end</span>;
      flush stdout;
      <span class="kwa">if</span> eol <span class="kwa">then</span>
	<span class="num">0</span>
      <span class="kwa">else</span>
	rem <span class="kwa">in</span>
    <span class="kwa">try</span>
      <span class="kwa">for</span> i = <span class="num">2</span> <span class="kwa">to</span> lines_per_worker <span class="kwa">do</span>
	really_input stdin buf !len aug_chars_per_line;
	<span class="kwa">let</span> new_len = <span class="kwb">ref</span> (!len + chars_per_line) <span class="kwa">in</span>
	<span class="kwa">if</span> buf.[!len] = '&gt;' || buf.[!new_len] &lt;&gt; '<span class="esc">\n</span>' <span class="kwa">then begin</span>
	  <span class="kwa">while</span> buf.[!len] &lt;&gt; '&gt;' <span class="kwa">do</span>
	    incr len
	  <span class="kwa">done</span>;
	  <span class="kwa">let</span> ptr = <span class="kwb">ref</span> !len <span class="kwa">in</span>
	  <span class="com">(* Needed to patch the hideous bug in the output of the C program *)</span>
	  <span class="kwa">if</span> buf.[!len - <span class="num">1</span>] &lt;&gt; '<span class="esc">\n</span>' <span class="kwa">then begin</span>
	    <span class="kwc">String</span>.blit buf !len buf (!len + <span class="num">1</span>) aug_chars_per_line;
	    buf.[!len] &lt;- '<span class="esc">\n</span>';
	    incr new_len;
	    incr ptr
	  <span class="kwa">end else</span>
	    decr len;
	  <span class="kwa">while</span> !ptr &lt; !new_len &amp;&amp; buf.[!ptr] &lt;&gt; '<span class="esc">\n</span>' <span class="kwa">do</span>
	    incr ptr
	  <span class="kwa">done</span>;
	  <span class="kwa">match</span> <span class="kwc">Unix</span>.fork () <span class="kwa">with</span>
	  | <span class="num">0</span> -&gt;
	      <span class="kwa">let</span> aug_len = !len + <span class="num">1</span> <span class="kwa">in</span>
	      <span class="kwa">if</span> !ptr = !new_len <span class="kwa">then</span>
		spawn
		  (<span class="kwc">String</span>.sub buf
		    aug_len (!new_len - aug_len) ^ input_line stdin)
		  <span class="str">&quot;&quot;</span> <span class="kwa">true</span>
	      <span class="kwa">else</span>
		<span class="kwa">let</span> aug_ptr = !ptr + <span class="num">1</span> <span class="kwa">in</span>
		spawn
		  (<span class="kwc">String</span>.sub buf aug_len (!ptr - aug_len))
		  (<span class="kwc">String</span>.sub buf aug_ptr (!new_len - !ptr) ^ input_line stdin)
		  <span class="kwa">true</span>
	  | _ -&gt;
	      get_ack ();
	      output_tag ();
	      process_buffer ();
	      <span class="kwa">let</span> rem = write_by_cols <span class="num">0</span> first <span class="kwa">in</span>
	      <span class="kwa">if</span> first <span class="kwa">then</span>
		put_ack ();
	      exit rem
	<span class="kwa">end</span>;
	len := !new_len
      <span class="kwa">done</span>;
      <span class="kwa">match</span> <span class="kwc">Unix</span>.fork () <span class="kwa">with</span>
      | <span class="num">0</span> -&gt; spawn tag <span class="str">&quot;&quot;</span> <span class="kwa">false</span>
      | pid -&gt;
	  process_buffer ();
	  <span class="kwa">match</span> <span class="kwc">Unix</span>.waitpid [] pid <span class="kwa">with</span>
	  | _, <span class="kwc">Unix</span>.<span class="kwd">WEXITED</span> rem -&gt;
	      <span class="kwa">let</span> rem = write_by_cols (chars_per_line - rem) first <span class="kwa">in</span>
	      <span class="kwa">if</span> first <span class="kwa">then</span>
		put_ack ();
	      exit rem
	  | _ -&gt; <span class="kwa">assert false</span>
    <span class="kwa">with</span> <span class="kwd">End_of_file</span> -&gt;
      <span class="kwa">while</span> buf.[!len] &lt;&gt; '<span class="esc">\n</span>' <span class="kwa">do</span>
	incr len
      <span class="kwa">done</span>;
      get_ack ();
      put_end_ack ();
      output_tag ();
      process_buffer ();
      <span class="kwa">let</span> rem = write_by_cols <span class="num">0</span> first <span class="kwa">in</span>
      <span class="kwa">if</span> first <span class="kwa">then</span>
	put_ack ();
      exit rem <span class="kwa">in</span>
  <span class="kwa">match</span> <span class="kwc">Unix</span>.fork () <span class="kwa">with</span>
  | <span class="num">0</span> -&gt;
      put_ack ();
      spawn (read_line ()) <span class="str">&quot;&quot;</span> <span class="kwa">true</span>
  | _ -&gt;
      get_end_ack ();
      get_ack ();
      exit <span class="num">0</span>
