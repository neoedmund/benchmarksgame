<span class="com">/* The Computer Language Benchmarks Game</span>
<span class="com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">   contributed by Kevin Carson</span>
<span class="com">   compilation:</span>
<span class="com">       gcc -O3 -fomit-frame-pointer -funroll-loops -static binary-trees.c -lm</span>
<span class="com">       icc -O3 -ip -unroll -static binary-trees.c -lm</span>
<span class="com">*/</span>

<span class="ppc">#include &lt;malloc.h&gt;</span>
<span class="ppc">#include &lt;math.h&gt;</span>
<span class="ppc">#include &lt;stdio.h&gt;</span>
<span class="ppc">#include &lt;stdlib.h&gt;</span>


<span class="kwc">typedef</span> <span class="kwb">struct</span> tn {
    <span class="kwb">struct</span> tn*    left;
    <span class="kwb">struct</span> tn*    right;
    <span class="kwb">long</span>          item;
} treeNode;


treeNode* <span class="kwd">NewTreeNode</span>(treeNode* left, treeNode* right, <span class="kwb">long</span> item)
{
    treeNode*    <span class="kwa">new</span>;

    <span class="kwa">new</span> = (treeNode*)<span class="kwd">malloc</span>(<span class="kwa">sizeof</span>(treeNode));

    <span class="kwa">new</span>-&gt;left = left;
    <span class="kwa">new</span>-&gt;right = right;
    <span class="kwa">new</span>-&gt;item = item;

    <span class="kwa">return new</span>;
} <span class="com">/* NewTreeNode() */</span>


<span class="kwb">long</span> <span class="kwd">ItemCheck</span>(treeNode* tree)
{
    <span class="kwa">if</span> (tree-&gt;left == NULL)
        <span class="kwa">return</span> tree-&gt;item;
    <span class="kwa">else</span>
        <span class="kwa">return</span> tree-&gt;item + <span class="kwd">ItemCheck</span>(tree-&gt;left) - <span class="kwd">ItemCheck</span>(tree-&gt;right);
} <span class="com">/* ItemCheck() */</span>


treeNode* <span class="kwd">BottomUpTree</span>(<span class="kwb">long</span> item, <span class="kwb">unsigned</span> depth)
{
    <span class="kwa">if</span> (depth &gt; <span class="num">0</span>)
        <span class="kwa">return</span> NewTreeNode
        (
            <span class="kwd">BottomUpTree</span>(<span class="num">2</span> * item - <span class="num">1</span>, depth - <span class="num">1</span>),
            <span class="kwd">BottomUpTree</span>(<span class="num">2</span> * item, depth - <span class="num">1</span>),
            item
        );
    <span class="kwa">else</span>
        <span class="kwa">return</span> <span class="kwd">NewTreeNode</span>(NULL, NULL, item);
} <span class="com">/* BottomUpTree() */</span>


<span class="kwb">void</span> <span class="kwd">DeleteTree</span>(treeNode* tree)
{
    <span class="kwa">if</span> (tree-&gt;left != NULL)
    {
        <span class="kwd">DeleteTree</span>(tree-&gt;left);
        <span class="kwd">DeleteTree</span>(tree-&gt;right);
    }

    <span class="kwd">free</span>(tree);
} <span class="com">/* DeleteTree() */</span>


<span class="kwb">int</span> <span class="kwd">main</span>(<span class="kwb">int</span> argc, <span class="kwb">char</span>* argv[])
{
    <span class="kwb">unsigned</span>   N, depth, minDepth, maxDepth, stretchDepth;
    treeNode   *stretchTree, *longLivedTree, *tempTree;

    N = <span class="kwd">atol</span>(argv[<span class="num">1</span>]);

    minDepth = <span class="num">4</span>;

    <span class="kwa">if</span> ((minDepth + <span class="num">2</span>) &gt; N)
        maxDepth = minDepth + <span class="num">2</span>;
    <span class="kwa">else</span>
        maxDepth = N;

    stretchDepth = maxDepth + <span class="num">1</span>;

    stretchTree = <span class="kwd">BottomUpTree</span>(<span class="num">0</span>, stretchDepth);
    printf
    (
        <span class="str">&quot;stretch tree of depth %u</span><span class="esc">\t</span> <span class="str">check: %li</span><span class="esc">\n</span><span class="str">&quot;</span>,
        stretchDepth,
        <span class="kwd">ItemCheck</span>(stretchTree)
    );

    <span class="kwd">DeleteTree</span>(stretchTree);

    longLivedTree = <span class="kwd">BottomUpTree</span>(<span class="num">0</span>, maxDepth);

    <span class="kwa">for</span> (depth = minDepth; depth &lt;= maxDepth; depth += <span class="num">2</span>)
    {
        <span class="kwb">long</span>    i, iterations, check;

        iterations = <span class="kwd">pow</span>(<span class="num">2</span>, maxDepth - depth + minDepth);

        check = <span class="num">0</span>;

        <span class="kwa">for</span> (i = <span class="num">1</span>; i &lt;= iterations; i++)
        {
            tempTree = <span class="kwd">BottomUpTree</span>(i, depth);
            check += <span class="kwd">ItemCheck</span>(tempTree);
            <span class="kwd">DeleteTree</span>(tempTree);

            tempTree = <span class="kwd">BottomUpTree</span>(-i, depth);
            check += <span class="kwd">ItemCheck</span>(tempTree);
            <span class="kwd">DeleteTree</span>(tempTree);
        } <span class="com">/* for(i = 1...) */</span>

        printf
        (
            <span class="str">&quot;%li</span><span class="esc">\t</span> <span class="str">trees of depth %u</span><span class="esc">\t</span> <span class="str">check: %li</span><span class="esc">\n</span><span class="str">&quot;</span>,
            iterations * <span class="num">2</span>,
            depth,
            check
        );
    } <span class="com">/* for(depth = minDepth...) */</span>

    printf
    (
        <span class="str">&quot;long lived tree of depth %u</span><span class="esc">\t</span> <span class="str">check: %li</span><span class="esc">\n</span><span class="str">&quot;</span>,
        maxDepth,
        <span class="kwd">ItemCheck</span>(longLivedTree)
    );

    <span class="kwa">return</span> <span class="num">0</span>;
} <span class="com">/* main() */</span>
