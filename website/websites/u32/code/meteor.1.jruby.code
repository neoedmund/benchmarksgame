<span class="slc">#!/usr/bin/env ruby</span>
<span class="slc">#</span>
<span class="slc"># The Computer Language Shootout</span>
<span class="slc">#   http://shootout.alioth.debian.org</span>
<span class="slc">#   contributed by Kevin Barnes (Ruby novice)</span>

<span class="kwa">def</span> blank_board
  <span class="num">0b111111100000100000100000100000100000100000100000100000100000100000</span>
<span class="kwa">end</span>

<span class="kwa">def</span> <span class="kwd">is_even</span>( location<span class="opt">)</span>
  (location % <span class="num">12</span><span class="opt">)</span> &lt; <span class="num">6</span>
<span class="kwa">end</span>

<span class="kwa">def</span> create_collector_support
    odd_map = [<span class="num">0b11</span>, <span class="num">0b110</span>, <span class="num">0b1100</span>, <span class="num">0b11000</span>, <span class="num">0b10000</span>] 
    even_map = [<span class="num">0b1</span>, <span class="num">0b11</span>, <span class="num">0b110</span>, <span class="num">0b1100</span>, <span class="num">0b11000</span>] 
    
    all_odds = Array.<span class="kwd">new</span>(<span class="num">0b100000</span><span class="opt">)</span>
    all_evens = Array.<span class="kwd">new</span>(<span class="num">0b100000</span><span class="opt">)</span>
    bit_counts = Array.<span class="kwd">new</span>(<span class="num">0b100000</span><span class="opt">)</span>
    new_regions = Array.<span class="kwd">new</span>(<span class="num">0b100000</span><span class="opt">)</span>
    <span class="num">0</span>.<span class="kwd">upto</span>(<span class="num">0b11111</span><span class="opt">)</span> <span class="kwa">do</span> | i |
      bit_count = odd = even = <span class="num">0</span>
      <span class="num">0</span>.<span class="kwd">upto</span>(<span class="num">4</span><span class="opt">)</span> <span class="kwa">do</span> | bit |
        <span class="kwa">if</span> (i[bit] == <span class="num">1</span><span class="opt">)</span> <span class="kwa">then</span>
          bit_count += <span class="num">1</span>
          odd |= odd_map[bit]
          even |= even_map[bit]
        <span class="kwa">end</span>
      <span class="kwa">end</span>
      all_odds[i] = odd
      all_evens[i] = even
      bit_counts[i] = bit_count
      new_regions[i] = <span class="kwd">create_regions</span>( i<span class="opt">)</span>
    <span class="kwa">end</span>

    &#64;<span class="kwb">&#64;converter</span> = []
    <span class="num">10</span>.times { | row | &#64;&#64;converter.push((row % 2 == 0) ? all_evens : all_odds) }
    &#64;<span class="kwb">&#64;bit_counts</span> = bit_counts
    &#64;<span class="kwb">&#64;regions</span> = new_regions.collect { | set | set.collect { | value | [ value, bit_counts[value], value] } }

  <span class="kwa">end</span>
  
<span class="kwa">def</span> <span class="kwd">prunable</span>( board, location, slotting = <span class="kwa">false</span><span class="opt">)</span>
  collectors = []
  (location / <span class="num">6</span><span class="opt">)</span>.to_i.<span class="kwd">upto</span>(<span class="num">9</span><span class="opt">)</span> <span class="kwa">do</span> | row_on | 
    regions = &#64;<span class="kwb">&#64;regions</span>[(board &gt;&gt; (row_on * <span class="num">6</span><span class="opt">))</span> &amp; <span class="num">0b11111</span> ^ <span class="num">0b11111</span>]
    converter = &#64;<span class="kwb">&#64;converter</span>[row_on]
    initial_collector_count = collectors.length
    regions.each <span class="kwa">do</span> | region |
      collector_found = <span class="kwa">nil</span>
      region_mask = region[<span class="num">0</span>]
      initial_collector_count.times <span class="kwa">do</span> | collector_num |
        collector = collectors[collector_num]
        <span class="kwa">if</span> (collector<span class="opt">)</span> <span class="kwa">then</span>
          collector_mask = collector[<span class="num">0</span>]
          <span class="kwa">if</span> (collector_mask &amp; region_mask != <span class="num">0</span><span class="opt">)</span> <span class="kwa">then</span>
            <span class="kwa">if</span> (collector_found<span class="opt">)</span> <span class="kwa">then</span>
              collector_found[<span class="num">0</span>] |= collector_mask
              collector_found[<span class="num">1</span>] += collector[<span class="num">1</span>]
              collector_found[<span class="num">2</span>] |= collector[<span class="num">2</span>]
              collectors[collector_num] = <span class="kwa">nil</span>
            <span class="kwa">else</span>
              collector_found = collector
              collector[<span class="num">1</span>] += region[<span class="num">1</span>]
              collector[<span class="num">2</span>] |= region_mask
            <span class="kwa">end</span>
          <span class="kwa">end</span>
        <span class="kwa">end</span>
      <span class="kwa">end</span>
      <span class="kwa">if</span> (collector_found == <span class="kwa">nil</span><span class="opt">)</span> <span class="kwa">then</span>
        collectors.<span class="kwd">push</span>(Array.<span class="kwd">new</span>(region<span class="opt">))</span>
      <span class="kwa">end</span>
    <span class="kwa">end</span>
    collectors.length.times <span class="kwa">do</span> | collector_num |
      collector = collectors[collector_num]
      <span class="kwa">if</span> (collector<span class="opt">)</span> <span class="kwa">then</span>
        <span class="kwa">if</span> (collector[<span class="num">2</span>] == <span class="num">0</span><span class="opt">)</span> <span class="kwa">then</span>
          <span class="kwa">return true if</span> (collector[<span class="num">1</span>] % <span class="num">5</span> != <span class="num">0</span><span class="opt">)</span>
          collectors[collector_num] = <span class="kwa">nil</span>
        <span class="kwa">else</span>
          <span class="kwa">return false if</span> (collector[<span class="num">2</span>] == <span class="num">0b11111</span> &amp;&amp; !slotting<span class="opt">)</span>
          collector[<span class="num">0</span>] = converter[collector[<span class="num">2</span>]]
          collector[<span class="num">2</span>] = <span class="num">0</span>
        <span class="kwa">end</span>
      <span class="kwa">end</span>
    <span class="kwa">end</span>
    collectors.compact!
  <span class="kwa">end</span>
  <span class="kwa">return false if</span> (collectors.length &lt;= <span class="num">1</span><span class="opt">)</span> 
  collectors.any? { | collector | (collector[1] % 5) != 0 }
<span class="kwa">end</span>
  
<span class="kwa">def</span> <span class="kwd">as_binary</span>( value<span class="opt">)</span>
  rtn = <span class="str">&quot;&quot;</span>
  <span class="num">5</span>.times <span class="kwa">do</span> | i |
    rtn += <span class="str">&quot;</span><span class="ipl">#{value[i]}</span><span class="str">&quot;</span>
  <span class="kwa">end</span>
  rtn
<span class="kwa">end</span>
  
<span class="kwa">def</span> <span class="kwd">create_regions</span>( value <span class="opt">)</span>
  regions = []
  cur_region = <span class="num">0</span>
  <span class="num">5</span>.times <span class="kwa">do</span> | bit |
    <span class="kwa">if</span> (value[bit] == <span class="num">1</span><span class="opt">)</span> <span class="kwa">then</span>
      cur_region |= <span class="num">1</span> &lt;&lt; bit
    <span class="kwa">else</span>
      <span class="kwa">if</span> (cur_region !=<span class="num">0</span> <span class="opt">)</span> <span class="kwa">then</span>
        regions.<span class="kwd">push</span>( cur_region<span class="opt">)</span>
        cur_region = <span class="num">0</span>;
      <span class="kwa">end</span>
    <span class="kwa">end</span>
  <span class="kwa">end</span>
  regions.<span class="kwd">push</span>(cur_region<span class="opt">)</span> <span class="kwa">if</span> (cur_region != <span class="num">0</span><span class="opt">)</span>
  regions
<span class="kwa">end</span>

<span class="kwa">def</span> <span class="kwd">print_board</span>( board, padding = <span class="str">&quot;&quot;</span>, rows = <span class="num">10</span>, row_offset = <span class="num">0</span><span class="opt">)</span>
  rows.times <span class="kwa">do</span> | row |
    rtn = padding
    rtn = <span class="str">&quot;</span><span class="ipl">#{rtn}</span> <span class="str">&quot;</span> <span class="kwa">if</span> ((row + row_offset<span class="opt">)</span> % <span class="num">2</span><span class="opt">)</span> == <span class="num">1</span> 
    <span class="num">6</span>.times <span class="kwa">do</span> | col | 
      rtn = <span class="str">&quot;</span><span class="ipl">#{rtn}</span><span class="str"></span><span class="ipl">#{board[row*6+col]}</span> <span class="str">&quot;</span> 
    <span class="kwa">end</span>
    print <span class="str">&quot;</span><span class="ipl">#{rtn}</span><span class="str"></span><span class="esc">\n</span><span class="str">&quot;</span>
  <span class="kwa">end</span>
<span class="kwa">end</span>  

<span class="kwa">class</span> Rotation
  attr_reader <span class="kwc">:start_masks</span>
  
  &#64;<span class="kwb">&#64;rotation_even_adder</span> = { :west =&gt; -1, :east =&gt; 1, :nw =&gt; -7, :ne =&gt; -6, :sw =&gt; 5, :se =&gt; 6 }
  &#64;<span class="kwb">&#64;rotation_odd_adder</span> = { :west =&gt; -1, :east =&gt; 1, :nw =&gt; -6, :ne =&gt; -5, :sw =&gt; 6, :se =&gt; 7 }
  
  <span class="kwa">def</span> <span class="kwd">initialize</span>( directions <span class="opt">)</span>
    values, min = <span class="kwd">get_values</span>( directions <span class="opt">)</span>
    <span class="kwb">&#64;even_offsets</span>, <span class="kwb">&#64;odd_offsets</span> = <span class="kwd">normalize_offsets</span>( values, min<span class="opt">)</span>
      
    <span class="kwb">&#64;even_mask</span> = <span class="kwd">mask_for_offsets</span>( <span class="kwb">&#64;even_offsets</span><span class="opt">)</span>
    <span class="kwb">&#64;odd_mask</span> = <span class="kwd">mask_for_offsets</span>( <span class="kwb">&#64;odd_offsets</span><span class="opt">)</span>

    <span class="kwb">&#64;start_masks</span> = Array.<span class="kwd">new</span>(<span class="num">60</span><span class="opt">)</span>
    
    <span class="num">0</span>.<span class="kwd">upto</span>(<span class="num">59</span><span class="opt">)</span> <span class="kwa">do</span> | offset |
      mask = <span class="kwd">is_even</span>(offset<span class="opt">)</span> ? (<span class="kwb">&#64;even_mask</span> &lt;&lt; offset<span class="opt">)</span> : (<span class="kwb">&#64;odd_mask</span> &lt;&lt; offset<span class="opt">)</span>
      <span class="kwa">if</span> (blank_board &amp; mask == <span class="num">0</span> &amp;&amp; !<span class="kwd">prunable</span>(blank_board | mask, <span class="num">0</span>, <span class="kwa">true</span><span class="opt">))</span> <span class="kwa">then</span>
        <span class="kwb">&#64;start_masks</span>[offset] = mask
      <span class="kwa">else</span>
        <span class="kwb">&#64;start_masks</span>[offset] = <span class="kwa">false</span> 
      <span class="kwa">end</span>
    <span class="kwa">end</span>
  <span class="kwa">end</span>
  
  <span class="kwa">def</span> <span class="kwd">offsets</span>( location<span class="opt">)</span>
    <span class="kwa">if</span> <span class="kwd">is_even</span>( location<span class="opt">)</span> <span class="kwa">then</span>
      <span class="kwb">&#64;even_offsets</span>.collect { | value | value + location }
    <span class="kwa">else</span>
      <span class="kwb">&#64;odd_offsets</span>.collect { | value | value + location }
    <span class="kwa">end</span>
  <span class="kwa">end</span>
  
  <span class="kwa">def</span> <span class="kwd">normalize_offsets</span>( values, min<span class="opt">)</span>
    even_min = <span class="kwd">is_even</span>(min<span class="opt">)</span>
    other_min = even_min ? min + <span class="num">6</span> : min + <span class="num">7</span>
    other_values = values.collect <span class="kwa">do</span> | value | 
      <span class="kwa">if</span> <span class="kwd">is_even</span>(value<span class="opt">)</span> <span class="kwa">then</span> 
        value + <span class="num">6</span> - other_min 
      <span class="kwa">else</span> 
        value + <span class="num">7</span> - other_min 
      <span class="kwa">end</span>
    <span class="kwa">end</span>
    values.collect! { | value | value - min }
    
    <span class="kwa">if</span> even_min <span class="kwa">then</span>
      [values, other_values]
    <span class="kwa">else</span>
      [other_values, values]
    <span class="kwa">end</span>
  <span class="kwa">end</span>
  
  <span class="kwa">def</span> <span class="kwd">mask_for_offsets</span>( offsets <span class="opt">)</span>
    mask = <span class="num">0</span>
    offsets.each { | value | mask = mask + ( 1 &lt;&lt; value ) }
    mask
  <span class="kwa">end</span>

  <span class="kwa">def</span> <span class="kwd">start_adjust</span>( directions <span class="opt">)</span>
    south = east = <span class="num">0</span>;
    directions.each <span class="kwa">do</span> | direction |
      east += <span class="num">1</span> <span class="kwa">if</span> ( direction == <span class="kwc">:sw</span> || direction == <span class="kwc">:nw</span> || direction == <span class="kwc">:west</span> <span class="opt">)</span>
      south += <span class="num">1</span> <span class="kwa">if</span> ( direction == <span class="kwc">:nw</span> || direction == <span class="kwc">:ne</span> <span class="opt">)</span>   
    <span class="kwa">end</span>
    [south, east]
  <span class="kwa">end</span>

  <span class="kwa">def</span> <span class="kwd">get_values</span> ( directions <span class="opt">)</span>
    south, east = <span class="kwd">start_adjust</span>(directions<span class="opt">)</span>
    min = start = south * <span class="num">6</span> + east
    values = [ start ]
    directions.each <span class="kwa">do</span> | direction |
      <span class="kwa">if</span> (start % <span class="num">12</span> &gt;= <span class="num">6</span><span class="opt">)</span> <span class="kwa">then</span> 
        start += &#64;<span class="kwb">&#64;rotation_odd_adder</span>[direction]
      <span class="kwa">else</span> 
        start += &#64;<span class="kwb">&#64;rotation_even_adder</span>[direction]
      <span class="kwa">end</span>
      min = start <span class="kwa">if</span> (start &lt; min<span class="opt">)</span>
      values += [ start ]
    <span class="kwa">end</span>
    
    <span class="kwa">if</span> (values.length != <span class="num">5</span><span class="opt">)</span>
      values.uniq!
    <span class="kwa">end</span>
    
    [ values, min ]
  <span class="kwa">end</span>
<span class="kwa">end</span>

<span class="kwa">class</span> Piece
  attr_reader <span class="kwc">:rotations</span>, <span class="kwc">:type</span>, <span class="kwc">:masks</span>
  attr_accessor <span class="kwc">:placed</span>
  
  &#64;<span class="kwb">&#64;flip_converter</span> = { :west =&gt; :west, :east =&gt; :east, :nw =&gt; :sw, :ne =&gt; :se, :sw =&gt; :nw, :se =&gt; :ne }
  &#64;<span class="kwb">&#64;rotate_converter</span> = { :west =&gt; :nw, :east =&gt; :se, :nw =&gt; :ne, :ne =&gt; :east, :sw =&gt; :west, :se =&gt; :sw }
  
  <span class="kwa">def</span> <span class="kwd">initialize</span>( directions, type <span class="opt">)</span>
    <span class="kwb">&#64;type</span> = type
    <span class="kwb">&#64;rotations</span> = Array.<span class="kwd">new</span>(<span class="opt">)</span>;
    <span class="kwb">&#64;map</span> = {}
    <span class="kwd">generate_rotations</span>( directions <span class="opt">)</span>
    directions.collect! { | value | &#64;&#64;flip_converter[value] }
    <span class="kwd">generate_rotations</span>( directions <span class="opt">)</span>
    
    <span class="kwb">&#64;masks</span> = Array.<span class="kwd">new</span>(<span class="opt">)</span>;
    <span class="num">0</span>.<span class="kwd">upto</span>(<span class="num">59</span><span class="opt">)</span> <span class="kwa">do</span> | i |
      <span class="kwb">&#64;masks</span>[i] = <span class="kwb">&#64;rotations</span>.collect <span class="kwa">do</span> | rotation | 
        mask = rotation.start_masks[i]
        <span class="kwb">&#64;map</span>[mask] = [ i, rotation ] <span class="kwa">if</span> (mask<span class="opt">)</span> 
        mask || <span class="kwa">nil</span>
      <span class="kwa">end</span>
      <span class="kwb">&#64;masks</span>[i].compact!
    <span class="kwa">end</span>
  <span class="kwa">end</span>
  
  <span class="kwa">def</span> <span class="kwd">generate_rotations</span>( directions <span class="opt">)</span> 
    <span class="num">6</span>.times <span class="kwa">do</span>
      rotations.<span class="kwd">push</span>( Rotation.<span class="kwd">new</span>(directions<span class="opt">))</span>
      directions.collect! { | value | &#64;&#64;rotate_converter[value] }
    <span class="kwa">end</span>
  <span class="kwa">end</span>
  
  <span class="kwa">def</span> <span class="kwd">fill_array</span>( board_array<span class="opt">)</span>
    location, rotation = <span class="kwb">&#64;map</span>[<span class="kwb">&#64;placed</span>]
    rotation.<span class="kwd">offsets</span>(location<span class="opt">)</span>.each <span class="kwa">do</span> | offset |
      row, col = offset.<span class="kwd">divmod</span>(<span class="num">6</span><span class="opt">)</span>
      board_array[ row*<span class="num">5</span> + col ] = <span class="kwb">&#64;type</span>.to_s
    <span class="kwa">end</span>
  <span class="kwa">end</span>
<span class="kwa">end</span>

<span class="kwa">class</span> Processor 
  attr <span class="kwc">:pieces</span>, <span class="kwc">:board</span>
  
  <span class="kwa">def</span> <span class="kwd">initialize</span>(<span class="opt">)</span> 
    create_collector_support
    <span class="kwb">&#64;pieces</span> = [ 
      Piece.<span class="kwd">new</span>( [ <span class="kwc">:east</span>, <span class="kwc">:east</span>, <span class="kwc">:east</span>, <span class="kwc">:se</span> ], <span class="num">0</span><span class="opt">)</span>,
      Piece.<span class="kwd">new</span>( [ <span class="kwc">:ne</span>, <span class="kwc">:east</span>, <span class="kwc">:ne</span>, <span class="kwc">:nw</span> ], <span class="num">1</span><span class="opt">)</span>,
      Piece.<span class="kwd">new</span>( [ <span class="kwc">:nw</span>, <span class="kwc">:ne</span>, <span class="kwc">:east</span>, <span class="kwc">:east</span> ], <span class="num">2</span><span class="opt">)</span>,
      Piece.<span class="kwd">new</span>( [ <span class="kwc">:east</span>, <span class="kwc">:east</span>, <span class="kwc">:sw</span>, <span class="kwc">:se</span> ], <span class="num">3</span><span class="opt">)</span>,
      Piece.<span class="kwd">new</span>( [ <span class="kwc">:ne</span>, <span class="kwc">:nw</span>, <span class="kwc">:se</span>, <span class="kwc">:east</span>, <span class="kwc">:se</span> ], <span class="num">4</span><span class="opt">)</span>,
      Piece.<span class="kwd">new</span>( [ <span class="kwc">:east</span>, <span class="kwc">:ne</span>, <span class="kwc">:se</span>, <span class="kwc">:ne</span> ], <span class="num">5</span><span class="opt">)</span>,
      Piece.<span class="kwd">new</span>( [ <span class="kwc">:east</span>, <span class="kwc">:sw</span>, <span class="kwc">:sw</span>, <span class="kwc">:se</span> ], <span class="num">6</span><span class="opt">)</span>,
      Piece.<span class="kwd">new</span>( [ <span class="kwc">:ne</span>, <span class="kwc">:se</span>, <span class="kwc">:east</span>, <span class="kwc">:ne</span> ], <span class="num">7</span><span class="opt">)</span>,
      Piece.<span class="kwd">new</span>( [ <span class="kwc">:se</span>, <span class="kwc">:se</span>, <span class="kwc">:east</span>, <span class="kwc">:se</span> ], <span class="num">8</span><span class="opt">)</span>,
      Piece.<span class="kwd">new</span>( [ <span class="kwc">:se</span>, <span class="kwc">:se</span>, <span class="kwc">:se</span>, <span class="kwc">:west</span> ], <span class="num">9</span><span class="opt">)</span> ];
      
    <span class="kwb">&#64;all_pieces</span> = Array.<span class="kwd">new</span>( <span class="kwb">&#64;pieces</span><span class="opt">)</span>

    <span class="kwb">&#64;min_board</span> = <span class="str">&quot;99999999999999999999999999999999999999999999999999&quot;</span>
    <span class="kwb">&#64;max_board</span> = <span class="str">&quot;00000000000000000000000000000000000000000000000000&quot;</span>
    <span class="kwb">&#64;stop_count</span> = <span class="kwc">ARGV</span>[<span class="num">0</span>].to_i || <span class="num">2089</span>
    <span class="kwb">&#64;all_boards</span> = {}
    <span class="kwb">&#64;boards_found</span> = <span class="num">0</span>
  <span class="kwa">end</span>
  
  <span class="kwa">def</span> find_all
    <span class="kwd">find_top</span>( <span class="num">0</span><span class="opt">)</span>
    <span class="kwd">find_top</span>( <span class="num">1</span><span class="opt">)</span>
    print_results
  <span class="kwa">end</span>

  <span class="kwa">def</span> print_results
    print <span class="str">&quot;</span><span class="ipl">#{&#64;boards_found}</span> <span class="str">solutions found</span><span class="esc">\n\n</span><span class="str">&quot;</span>
    <span class="kwd">print_full_board</span>( <span class="kwb">&#64;min_board</span><span class="opt">)</span>
    print <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span>
    <span class="kwd">print_full_board</span>( <span class="kwb">&#64;max_board</span><span class="opt">)</span>
    print <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span>
  <span class="kwa">end</span>

  <span class="kwa">def</span> <span class="kwd">find_top</span>( rotation_skip<span class="opt">)</span> 
    board = blank_board
    <span class="kwb">&#64;pieces</span>.length.times <span class="kwa">do</span>
      piece = <span class="kwb">&#64;pieces</span>.shift
      piece.masks[<span class="num">0</span>].each <span class="kwa">do</span> | mask |
        <span class="kwa">if</span> ((rotation_skip += <span class="num">1</span><span class="opt">)</span> % <span class="num">2</span> == <span class="num">0</span><span class="opt">)</span> <span class="kwa">then</span>
          piece.placed = mask
          <span class="kwd">find</span>( <span class="num">1</span>, <span class="num">1</span>, board | mask<span class="opt">)</span> 
        <span class="kwa">end</span>
      <span class="kwa">end</span>
      <span class="kwb">&#64;pieces</span>.<span class="kwd">push</span>(piece<span class="opt">)</span>
    <span class="kwa">end</span>
  <span class="kwa">end</span>

  <span class="kwa">def</span> <span class="kwd">find</span>( start_location, placed, board<span class="opt">)</span> 
    <span class="kwa">while</span> board[start_location] == <span class="num">1</span>
      start_location += <span class="num">1</span> 
    <span class="kwa">end</span>

    <span class="kwa">return if</span> (start_location &lt; <span class="num">28</span> &amp;&amp; <span class="kwd">prunable</span>( board, start_location<span class="opt">))</span>
    
    <span class="kwb">&#64;pieces</span>.length.times <span class="kwa">do</span>
      piece = <span class="kwb">&#64;pieces</span>.shift
      piece.masks[start_location].each <span class="kwa">do</span> | mask |
        <span class="kwa">if</span> (mask &amp; board == <span class="num">0</span><span class="opt">)</span> <span class="kwa">then</span>
          piece.placed = mask
          <span class="kwa">if</span> (placed == <span class="num">9</span><span class="opt">)</span> <span class="kwa">then</span>
            add_board
          <span class="kwa">else</span>
            <span class="kwd">find</span>( start_location + <span class="num">1</span>, placed + <span class="num">1</span>, board | mask<span class="opt">)</span> 
          <span class="kwa">end</span>
        <span class="kwa">end</span>
      <span class="kwa">end</span>
      <span class="kwb">&#64;pieces</span>.<span class="kwd">push</span>(piece<span class="opt">)</span>
    <span class="kwa">end</span>
  <span class="kwa">end</span>
  
  <span class="kwa">def</span> <span class="kwd">print_full_board</span>( board_string<span class="opt">)</span>
    <span class="num">10</span>.times <span class="kwa">do</span> | row |
      print <span class="str">&quot; &quot;</span> <span class="kwa">if</span> (row % <span class="num">2</span> == <span class="num">1</span><span class="opt">)</span> 
      <span class="num">5</span>.times <span class="kwa">do</span> | col |
        print <span class="str">&quot;</span><span class="ipl">#{board_string[row*5 + col,1]}</span> <span class="str">&quot;</span>
      <span class="kwa">end</span>
      print <span class="str">&quot;</span><span class="esc">\n</span><span class="str">&quot;</span>
    <span class="kwa">end</span>
  <span class="kwa">end</span>
  
  <span class="kwa">def</span> add_board
    board_array = Array.<span class="kwd">new</span>(<span class="num">50</span><span class="opt">)</span>
    <span class="kwb">&#64;all_pieces</span>.each <span class="kwa">do</span> | piece |
      piece.<span class="kwd">fill_array</span>( board_array <span class="opt">)</span>
    <span class="kwa">end</span>
    start_board = board_string = board_array.<span class="kwd">join</span>(<span class="str">&quot;&quot;</span><span class="opt">)</span>
    <span class="kwd">save</span>( board_string<span class="opt">)</span>
    board_string = <span class="kwd">flip</span>( board_string<span class="opt">)</span>
    <span class="kwd">save</span>( board_string<span class="opt">)</span>
  <span class="kwa">end</span>

  <span class="kwa">def</span> <span class="kwd">flip</span>( board_string<span class="opt">)</span>
    new_string = <span class="str">&quot;&quot;</span>
    <span class="num">50</span>.times <span class="kwa">do</span> | i |
      row, col = i.<span class="kwd">divmod</span>(<span class="num">5</span><span class="opt">)</span>
      new_string += board_string[((<span class="num">9</span> - row<span class="opt">)</span> * <span class="num">5</span><span class="opt">)</span> + (<span class="num">4</span> - col<span class="opt">)</span>, <span class="num">1</span>]
    <span class="kwa">end</span>
    new_string
  <span class="kwa">end</span>
      
  <span class="kwa">def</span> <span class="kwd">save</span>( board_string<span class="opt">)</span>
    <span class="kwa">if</span> (<span class="kwb">&#64;all_boards</span>[board_string] == <span class="kwa">nil</span><span class="opt">)</span> <span class="kwa">then</span>
      <span class="kwb">&#64;min_board</span> = board_string <span class="kwa">if</span> (board_string &lt; <span class="kwb">&#64;min_board</span><span class="opt">)</span>
      <span class="kwb">&#64;max_board</span> = board_string <span class="kwa">if</span> (board_string &gt; <span class="kwb">&#64;max_board</span><span class="opt">)</span>
      <span class="kwb">&#64;all_boards</span>.<span class="kwd">store</span>(board_string,<span class="kwa">true</span><span class="opt">)</span>
      <span class="kwb">&#64;boards_found</span> += <span class="num">1</span>

      <span class="kwa">if</span> (<span class="kwb">&#64;boards_found</span> == <span class="kwb">&#64;stop_count</span><span class="opt">)</span> <span class="kwa">then</span>
        print_results
        <span class="kwd">exit</span>(<span class="num">0</span><span class="opt">)</span>
      <span class="kwa">end</span>
    <span class="kwa">end</span>
  <span class="kwa">end</span>
  
<span class="kwa">end</span>

proc = Processor.new.find_all

