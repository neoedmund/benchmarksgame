<span class="com">/* The Computer Language Benchmarks Game</span>
<span class="com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="com">   contributed by Isaac Gouy </span>
<span class="com"></span>
<span class="com">   TypeScript install check, transliterated from C#</span>
<span class="com">*/</span>

<span class="slc">/// &lt;reference path=&quot;/usr/local/src/typescript/node.d.ts&quot; /&gt;</span>


<span class="kwa">class</span> NBodySystem {
   <span class="kwa">private</span> bodies: Body[];

   <span class="kwb">constructor</span>(){
      <span class="kwa">this</span>.bodies = [
         Body.<span class="kwd">Sun</span>(),		
         Body.<span class="kwd">Jupiter</span>(),
         Body.<span class="kwd">Saturn</span>(),
         Body.<span class="kwd">Uranus</span>(),
         Body.<span class="kwd">Neptune</span>()
      ];

      <span class="kwa">var</span> px = <span class="num">0.0</span>;
      <span class="kwa">var</span> py = <span class="num">0.0</span>;	
      <span class="kwa">var</span> pz = <span class="num">0.0</span>;			
	
      <span class="kwa">var</span> size = <span class="kwa">this</span>.bodies.length;
      <span class="kwa">for</span> (<span class="kwa">var</span> i=<span class="num">0</span>; i&lt;size; i++){	
         <span class="kwa">var</span> b = <span class="kwa">this</span>.bodies[i];
         <span class="kwa">var</span> m = b.mass;
         px += b.vx * m;
         py += b.vy * m;
         pz += b.vz * m;			
      }		
      <span class="kwa">this</span>.bodies[<span class="num">0</span>].<span class="kwd">offsetMomentum</span>(px,py,pz);
   }

   <span class="kwd">advance</span>(dt: <span class="kwb">number</span>): <span class="kwa">void</span> {
      <span class="kwa">var</span> dx, dy, dz, distance, mag: <span class="kwb">number</span>;
      <span class="kwa">var</span> size = <span class="kwa">this</span>.bodies.length;	
	
      <span class="kwa">for</span> (<span class="kwa">var</span> i=<span class="num">0</span>; i&lt;size; i++) {
         <span class="kwa">for</span> (<span class="kwa">var</span> j=i+<span class="num">1</span>; j &lt; size; j++) {	
            dx = <span class="kwa">this</span>.bodies[i].x - <span class="kwa">this</span>.bodies[j].x;
            dy = <span class="kwa">this</span>.bodies[i].y - <span class="kwa">this</span>.bodies[j].y;
            dz = <span class="kwa">this</span>.bodies[i].z - <span class="kwa">this</span>.bodies[j].z;
				
            distance = Math.<span class="kwd">sqrt</span>(dx*dx + dy*dy + dz*dz);				   
            mag = dt / (distance * distance * distance);
				
            <span class="kwa">this</span>.bodies[i].vx -= dx * <span class="kwa">this</span>.bodies[j].mass * mag;
            <span class="kwa">this</span>.bodies[i].vy -= dy * <span class="kwa">this</span>.bodies[j].mass * mag;
            <span class="kwa">this</span>.bodies[i].vz -= dz * <span class="kwa">this</span>.bodies[j].mass * mag;
                                
            <span class="kwa">this</span>.bodies[j].vx += dx * <span class="kwa">this</span>.bodies[i].mass * mag;
            <span class="kwa">this</span>.bodies[j].vy += dy * <span class="kwa">this</span>.bodies[i].mass * mag;
            <span class="kwa">this</span>.bodies[j].vz += dz * <span class="kwa">this</span>.bodies[i].mass * mag;
         }
      }		
		
      <span class="kwa">for</span> (<span class="kwa">var</span> i=<span class="num">0</span>; i&lt;size; i++) {
         <span class="kwa">var</span> body = <span class="kwa">this</span>.bodies[i];
         body.x += dt * body.vx;
         body.y += dt * body.vy;
         body.z += dt * body.vz;
      }		
   }

   <span class="kwd">energy</span>(): <span class="kwb">number</span> {		
      <span class="kwa">var</span> dx, dy, dz, distance: <span class="kwb">number</span>;	
      <span class="kwa">var</span> e = <span class="num">0.0</span>;		   
      <span class="kwa">var</span> size = <span class="kwa">this</span>.bodies.length;
		
      <span class="kwa">for</span> (<span class="kwa">var</span> i=<span class="num">0</span>; i &lt; size; i++) {
         e += <span class="num">0.5</span> * <span class="kwa">this</span>.bodies[i].mass * 
            ( <span class="kwa">this</span>.bodies[i].vx * <span class="kwa">this</span>.bodies[i].vx 
            + <span class="kwa">this</span>.bodies[i].vy * <span class="kwa">this</span>.bodies[i].vy 
            + <span class="kwa">this</span>.bodies[i].vz * <span class="kwa">this</span>.bodies[i].vz );
			   
         <span class="kwa">for</span> (<span class="kwa">var</span> j=i+<span class="num">1</span>; j &lt; size; j++) {
            dx = <span class="kwa">this</span>.bodies[i].x - <span class="kwa">this</span>.bodies[j].x;
            dy = <span class="kwa">this</span>.bodies[i].y - <span class="kwa">this</span>.bodies[j].y;
            dz = <span class="kwa">this</span>.bodies[i].z - <span class="kwa">this</span>.bodies[j].z;
                                
            distance = Math.<span class="kwd">sqrt</span>(dx*dx + dy*dy + dz*dz);
            e -= (<span class="kwa">this</span>.bodies[i].mass * <span class="kwa">this</span>.bodies[j].mass) / distance;
         }
      }
      <span class="kwa">return</span> e;
   }
}


<span class="kwa">class</span> Body {
   <span class="kwa">private static</span> PI = <span class="num">3.141592653589793</span>;
   <span class="kwa">private static</span> SOLAR_MASS = <span class="num">4</span> * Body.PI * Body.PI;
   <span class="kwa">private static</span> DAYS_PER_YEAR = <span class="num">365.24</span>;

   <span class="kwb">constructor</span>(
      <span class="kwa">public</span> x: <span class="kwb">number</span>, 
      <span class="kwa">public</span> y: <span class="kwb">number</span>, 
      <span class="kwa">public</span> z: <span class="kwb">number</span>, 
      <span class="kwa">public</span> vx: <span class="kwb">number</span>,
      <span class="kwa">public</span> vy: <span class="kwb">number</span>, 
      <span class="kwa">public</span> vz: <span class="kwb">number</span>,
      <span class="kwa">public</span> mass: <span class="kwb">number</span>
   ) { }

   <span class="kwa">static</span> <span class="kwd">Jupiter</span>(){
      <span class="kwa">return new</span> <span class="kwd">Body</span>(
         <span class="num">4.84143144246472090e+00</span>,
         -<span class="num">1.16032004402742839e+00</span>,
         -<span class="num">1.03622044471123109e-01</span>,
         <span class="num">1.66007664274403694e-03</span> * Body.DAYS_PER_YEAR,
         <span class="num">7.69901118419740425e-03</span> * Body.DAYS_PER_YEAR,
         -<span class="num">6.90460016972063023e-05</span> * Body.DAYS_PER_YEAR,
         <span class="num">9.54791938424326609e-04</span> * Body.SOLAR_MASS
      );
   }

   <span class="kwa">static</span> <span class="kwd">Saturn</span>(){
      <span class="kwa">return new</span> <span class="kwd">Body</span>(
         <span class="num">8.34336671824457987e+00</span>,
         <span class="num">4.12479856412430479e+00</span>,
         -<span class="num">4.03523417114321381e-01</span>,
         -<span class="num">2.76742510726862411e-03</span> * Body.DAYS_PER_YEAR,
         <span class="num">4.99852801234917238e-03</span> * Body.DAYS_PER_YEAR,
         <span class="num">2.30417297573763929e-05</span> * Body.DAYS_PER_YEAR,
         <span class="num">2.85885980666130812e-04</span> * Body.SOLAR_MASS
      );
   }

   <span class="kwa">static</span> <span class="kwd">Uranus</span>(){
      <span class="kwa">return new</span> <span class="kwd">Body</span>(
         <span class="num">1.28943695621391310e+01</span>,
         -<span class="num">1.51111514016986312e+01</span>,
         -<span class="num">2.23307578892655734e-01</span>,
         <span class="num">2.96460137564761618e-03</span> * Body.DAYS_PER_YEAR,
         <span class="num">2.37847173959480950e-03</span> * Body.DAYS_PER_YEAR,
         -<span class="num">2.96589568540237556e-05</span> * Body.DAYS_PER_YEAR,
         <span class="num">4.36624404335156298e-05</span> * Body.SOLAR_MASS
      );
   }

   <span class="kwa">static</span> <span class="kwd">Neptune</span>(){
      <span class="kwa">return new</span> <span class="kwd">Body</span>(
         <span class="num">1.53796971148509165e+01</span>,
         -<span class="num">2.59193146099879641e+01</span>,
         <span class="num">1.79258772950371181e-01</span>,
         <span class="num">2.68067772490389322e-03</span> * Body.DAYS_PER_YEAR,
         <span class="num">1.62824170038242295e-03</span> * Body.DAYS_PER_YEAR,
         -<span class="num">9.51592254519715870e-05</span> * Body.DAYS_PER_YEAR,
         <span class="num">5.15138902046611451e-05</span> * Body.SOLAR_MASS
      );
   }

   <span class="kwa">static</span> <span class="kwd">Sun</span>(){
      <span class="kwa">return new</span> <span class="kwd">Body</span>(
         <span class="num">0</span>,
         <span class="num">0</span>,
         <span class="num">0</span>,
         <span class="num">0</span>,
         <span class="num">0</span>,
         <span class="num">0</span>,
         Body.SOLAR_MASS
      );
   }

   <span class="kwd">offsetMomentum</span>(px, py, pz : <span class="kwb">number</span>): Body {
      <span class="kwa">this</span>.vx = -px / Body.SOLAR_MASS;
      <span class="kwa">this</span>.vy = -py / Body.SOLAR_MASS;
      <span class="kwa">this</span>.vz = -pz / Body.SOLAR_MASS;	   
      <span class="kwa">return this</span>;
   }
}


<span class="kwa">var</span> n = +process.argv[<span class="num">2</span>];
<span class="kwa">var</span> nbodies = <span class="kwa">new</span> <span class="kwd">NBodySystem</span>();

console.<span class="kwd">log</span>(nbodies.<span class="kwd">energy</span>().<span class="kwd">toFixed</span>(<span class="num">9</span>));
<span class="kwa">for</span> (<span class="kwa">var</span> i=<span class="num">0</span>; i&lt;n; i++){ nbodies.<span class="kwd">advance</span>(<span class="num">0.01</span>); }
console.<span class="kwd">log</span>(nbodies.<span class="kwd">energy</span>().<span class="kwd">toFixed</span>(<span class="num">9</span>));

