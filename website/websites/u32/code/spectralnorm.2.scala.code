<span class="com">/* The Computer Language Benchmarks Game</span>
<span class="com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="com">   contributed by Eric Willigers</span>
<span class="com">   based on Java version by The Anh Tran</span>
<span class="com">*/</span>

<span class="kwa">object</span> spectralnorm {
   <span class="kwa">val</span> nthread = Runtime.getRuntime.availableProcessors
   <span class="kwa">val</span> barrier = <span class="kwa">new</span> java.util.concurrent.<span class="kwd">CyclicBarrier</span>(nthread)

   <span class="kwa">def</span> <span class="kwd">main</span>(args: Array[String]) {
      <span class="kwa">val</span> n = <span class="kwa">if</span> (args.length &gt; <span class="num">0</span>) Integer parseInt <span class="kwd">args</span>(<span class="num">0</span>)  <span class="kwa">else</span> <span class="num">1000</span>
      <span class="kwa">val</span> fmt = <span class="kwa">new</span> java.text.<span class="kwd">DecimalFormat</span>(<span class="str">&quot;#.000000000&quot;</span>)
      <span class="kwd">println</span>(fmt format <span class="kwd">run</span>(n))
   }

   <span class="kwa">def</span> <span class="kwd">run</span>(n: Int) = {
      <span class="kwa">val</span> u = <span class="kwa">new</span> Array[Double](n)
      <span class="kwa">val</span> v = <span class="kwa">new</span> Array[Double](n)
      <span class="kwa">val</span> tmp = <span class="kwa">new</span> Array[Double](n)
      <span class="kwa">val</span> chunk = n / nthread
      <span class="kwa">var</span> vBv = <span class="num">0</span>.
      <span class="kwa">var</span> vv = <span class="num">0</span>.
      java.util.Arrays.<span class="kwd">fill</span>(u, <span class="num">1</span>.)
      Array <span class="kwd">range</span>(<span class="num">0</span>, nthread) map { i =&gt;
         <span class="kwa">val</span> rbegin = i * chunk
         <span class="kwa">val</span> rend = <span class="kwa">if</span> (i &lt; (nthread -<span class="num">1</span>)) rbegin + chunk <span class="kwa">else</span> n
         <span class="kwa">new</span> <span class="kwd">Approximate</span>(u, v, tmp, rbegin, rend)         
      } foreach { a=&gt;
         a <span class="kwd">join</span>()
         vBv += a.m_vBv
         vv += a.m_vv
      }
      Math <span class="kwd">sqrt</span>(vBv/vv)
   }

   <span class="kwa">final class</span> <span class="kwd">Approximate</span>(u: Array[Double], v: Array[Double], tmp: Array[Double], rbegin: Int, rend: Int) <span class="kwa">extends</span> Thread {
      <span class="kwa">var</span> m_vBv = <span class="num">0</span>.
      <span class="kwa">var</span> m_vv = <span class="num">0</span>.
      <span class="kwd">start</span>()

      <span class="kwa">override def</span> <span class="kwd">run</span>() {
         <span class="kwa">for</span> (i &lt;- <span class="num">0</span> until <span class="num">10</span>) {
            <span class="kwd">MultiplyAtAv</span>(u, tmp, v)
            <span class="kwd">MultiplyAtAv</span>(v, tmp, u)            
         }
         <span class="kwa">for</span> (i &lt;- rbegin until rend) {
            m_vBv += <span class="kwd">u</span>(i) * <span class="kwd">v</span>(i)
            m_vv  += <span class="kwd">v</span>(i) * <span class="kwd">v</span>(i)
         }
      }

      <span class="kwc">&#64;inline</span>
      <span class="kwa">def</span> <span class="kwd">eval_A</span>(i: Int, j: Int) = <span class="num">1.0</span> / ( ((i+j) * (i+j+<span class="num">1</span>) &gt;&gt;&gt; <span class="num">1</span>) +i+<span class="num">1</span> )

      <span class="kwa">def</span> <span class="kwd">MultiplyAv</span>(v: Array[Double], Av: Array[Double]) {
         <span class="kwa">for</span> (i &lt;- rbegin until rend) {
            <span class="kwa">var</span> sum = <span class="num">0</span>.
            <span class="kwa">var</span> j = <span class="num">0</span>
            <span class="kwa">while</span> (j &lt; v.length) {
               sum += <span class="kwd">eval_A</span>(i, j) * <span class="kwd">v</span>(j)
               j += <span class="num">1</span>
            }
            <span class="kwd">Av</span>(i) = sum
         }
      }

      <span class="kwa">def</span> <span class="kwd">MultiplyAtv</span>(v: Array[Double], Atv: Array[Double]) {
         <span class="kwa">for</span> (i &lt;- rbegin until rend) {
            <span class="kwa">var</span> sum = <span class="num">0</span>.
            <span class="kwa">var</span> j = <span class="num">0</span>
            <span class="kwa">while</span> (j &lt; v.length) {
               sum += <span class="kwd">eval_A</span>(j, i) * <span class="kwd">v</span>(j)
               j += <span class="num">1</span>
            }
            <span class="kwd">Atv</span>(i) = sum
         }
      }

      <span class="kwa">def</span> <span class="kwd">MultiplyAtAv</span>(v: Array[Double], tmp: Array[Double], AtAv: Array[Double]) {
         <span class="kwd">MultiplyAv</span>(v, tmp)
         barrier <span class="kwd">await</span>()
         <span class="kwd">MultiplyAtv</span>(tmp, AtAv)
         barrier <span class="kwd">await</span>()
      }
   }
}
