<span class="com">{-  The Computer Language Benchmarks Game </span>
<span class="com"></span>
<span class="com">    http://benchmarkgame.alioth.debian.org/</span>
<span class="com"></span>
<span class="com">    contributed by Bryan O'Sullivan</span>
<span class="com">    parallelized by Maxim Sokolov</span>
<span class="com">-}</span>

<span class="kwd">import</span> Control.Monad
<span class="kwd">import</span> Control.Concurrent
<span class="kwd">import</span> Control.Concurrent.MVar
<span class="kwd">import</span> Data.ByteString.Unsafe
<span class="kwd">import</span> Foreign.Ptr
<span class="kwd">import</span> Foreign.Marshal.<span class="kwb">Array</span>
<span class="kwd">import</span> Foreign.Storable
<span class="kwd">import</span> System.Environment
<span class="kwd">import</span> System.<span class="kwb">IO</span>
<span class="kwd">import qualified</span> Data.ByteString.Char8 <span class="kwd">as</span> B
<span class="kwd">import qualified</span> Data.ByteString.Lazy.Char8 <span class="kwd">as</span> L
<span class="kwd">import</span> GHC.Word
<span class="kwd">import</span> Data.<span class="kwb">Char</span>

modulus = <span class="num">139968</span>

kWidth = <span class="num">60</span>
kLines = <span class="num">1024</span>
kBlockSize = kWidth * kLines
kNewLine = <span class="kwc">fromIntegral</span> $ <span class="kwc">ord</span> '<span class="esc">\n</span>'

main = <span class="kwd">do</span>
    n &lt;- <span class="kwc">getArgs</span> &gt;&gt;= <span class="kwc">readIO</span>.<span class="kwc">head</span>
    writeAlu <span class="str">&quot;&gt;ONE Homo sapiens alu&quot;</span> (L.<span class="kwc">take</span> (<span class="kwc">fromIntegral</span> n*<span class="num">2</span>) (L.<span class="kwc">cycle</span> alu))
    make <span class="str">&quot;&gt;TWO IUB ambiguity codes&quot;</span> (n*<span class="num">3</span>) iub <span class="num">42</span> &gt;&gt;=
      void . make <span class="str">&quot;&gt;THREE Homo sapiens frequency&quot;</span> (n*<span class="num">5</span>) homosapiens

writeAlu name s0 = B.<span class="kwc">putStrLn</span> name &gt;&gt; go s0
    <span class="kwd">where</span> go s = L.<span class="kwc">putStrLn</span> h &gt;&gt; <span class="kwc">unless</span> (L.<span class="kwc">null</span> t) (go t)
            <span class="kwd">where</span> (h,t) = L.<span class="kwc">splitAt</span> <span class="num">60</span> s

make name n0 tbl seed0 = <span class="kwd">do</span>
    B.<span class="kwc">putStrLn</span> name
    <span class="kwd">let</span> !lookupTable = buildLookupTable tbl
    ready &lt;- newMVar ()
    input &lt;- newMVar (seed0, ready, n0)
    finished &lt;- newEmptyMVar
    replicateM_ <span class="num">4</span> . forkIO $ worker input finished lookupTable
    takeMVar finished

buildLookupTable tbl = 
    <span class="kwd">let</span> fill ((c,p):cps) j =
            <span class="kwd">let</span> !k = <span class="kwc">min</span> modulus (<span class="kwa">floor</span> (<span class="kwc">fromIntegral</span> modulus * (p::<span class="kwb">Float</span>) + <span class="num">1</span>))
            <span class="kwd">in</span> B.<span class="kwc">replicate</span> (k - j) c : fill cps k
        fill _ _ = []
     <span class="kwd">in</span> B.<span class="kwc">concat</span> $ fill (<span class="kwc">scanl1</span> (\(_,p) (c,q) -&gt; (c,p+q)) tbl) <span class="num">0</span>

worker input finished lookupTable = <span class="kwd">do</span>
    rand &lt;- mallocArray kBlockSize
    buf &lt;- mallocArray (kBlockSize + kLines) :: <span class="kwb">IO</span> (Ptr Word8)
    forever $ <span class="kwd">do</span>
        (seed0, prevReady, count0) &lt;- takeMVar input
        <span class="kwd">let</span> !n = <span class="kwc">min</span> kBlockSize count0
            !count1 = count0 - n
        seed1 &lt;- fillRandomBlock n rand seed0
        ready &lt;- newEmptyMVar
        <span class="kwc">when</span> (count1 &gt; <span class="num">0</span>) $ <span class="kwd">do</span>
            putMVar input (seed1, ready, count1)
        k &lt;- fillBuf n lookupTable rand buf
        _ &lt;- takeMVar prevReady
        hPutBuf <span class="kwc">stdout</span> buf k
        <span class="kwd">if</span> count1 == <span class="num">0</span>
            <span class="kwd">then</span> putMVar finished seed1
            <span class="kwd">else</span> putMVar ready ()

fillRandomBlock !n0 !ptr !seed0 = <span class="kwd">do</span>
    <span class="kwd">let</span> go !j !seed
            | j &lt; n0 = <span class="kwd">do</span>
                    <span class="kwd">let</span> newseed = <span class="kwc">rem</span> (seed * <span class="num">3877</span> + <span class="num">29573</span>) modulus
                    pokeElemOff ptr j newseed
                    go (j + <span class="num">1</span>) newseed
            | <span class="kwc">otherwise</span> = <span class="kwc">return</span> seed
    go <span class="num">0</span> seed0

fillBuf n0 !lookupTable !rand !buf = <span class="kwd">do</span>
    <span class="kwd">let</span> go !i !j
            | i &lt; n0 = <span class="kwd">do</span>
                rnd &lt;- peekElemOff rand i
                j1 &lt;- <span class="kwd">if</span> i &gt; <span class="num">0</span> &amp;&amp; <span class="kwc">rem</span> i <span class="num">60</span> == <span class="num">0</span>
                        <span class="kwd">then do</span>
                            pokeElemOff buf j kNewLine
                            <span class="kwc">return</span> $ j + <span class="num">1</span>
                        <span class="kwd">else</span> <span class="kwc">return</span> $ j
                pokeElemOff buf j1 (unsafeIndex lookupTable rnd)
                go (i+<span class="num">1</span>) (j1+<span class="num">1</span>)
            | <span class="kwc">otherwise</span> = <span class="kwd">do</span>
                pokeElemOff buf j kNewLine
                <span class="kwc">return</span> (j+<span class="num">1</span>)
    go <span class="num">0 0</span>

alu = <span class="str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGGGAGGCCGAGGCGGGCGGATCACCTGAGG\</span>
<span class="str">    \TCAGGAGTTCGAGACCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAATACAAAAATTAGCCGGG\</span>
<span class="str">    \CGTGGTGGCGCGCGCCTGTAATCCCAGCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGGAGGC\</span>
<span class="str">    \GGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCCAGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span>

iub = [('a',<span class="num">0.27</span>),('c',<span class="num">0.12</span>),('g',<span class="num">0.12</span>),('t',<span class="num">0.27</span>),('B',<span class="num">0.02</span>)
      ,('D',<span class="num">0.02</span>),('H',<span class="num">0.02</span>),('K',<span class="num">0.02</span>),('M',<span class="num">0.02</span>),('N',<span class="num">0.02</span>)
      ,('R',<span class="num">0.02</span>),('S',<span class="num">0.02</span>),('V',<span class="num">0.02</span>),('W',<span class="num">0.02</span>),('Y',<span class="num">0.02</span>)]

homosapiens = [('a',<span class="num">0.3029549426680</span>),('c',<span class="num">0.1979883004921</span>)
              ,('g',<span class="num">0.1975473066391</span>),('t',<span class="num">0.3015094502008</span>)]
