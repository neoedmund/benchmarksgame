<span class="slc">--</span>
<span class="slc">-- The Computer Language Benchmarks Game</span>
<span class="slc">-- http://benchmarksgame.alioth.debian.org/</span>
<span class="slc">--</span>
<span class="slc">-- Contributed by Don Stewart</span>
<span class="slc">--</span>

<span class="kwd">import</span> System.Environment
<span class="kwd">import</span> Data.Bits
<span class="kwd">import</span> Text.Printf

<span class="slc">--</span>
<span class="slc">-- an artificially strict tree. </span>
<span class="slc">--</span>
<span class="slc">-- normally you would ensure the branches are lazy, but this benchmark</span>
<span class="slc">-- requires strict allocation.</span>
<span class="slc">--</span>
<span class="kwd">data</span> Tree = Nil | Node !<span class="kwb">Int</span> !Tree !Tree

minN = <span class="num">4</span>

io s n t = printf <span class="str">&quot;</span><span class="ipl">%s</span> <span class="str">of depth</span> <span class="ipl">%d</span><span class="str"></span><span class="esc">\t</span> <span class="str">check:</span> <span class="ipl">%d</span><span class="str"></span><span class="esc">\n</span><span class="str">&quot;</span> s n t

main = <span class="kwd">do</span>
    n &lt;- <span class="kwc">getArgs</span> &gt;&gt;= <span class="kwc">readIO</span> . <span class="kwc">head</span>
    <span class="kwd">let</span> maxN     = <span class="kwc">max</span> (minN + <span class="num">2</span>) n
        stretchN = maxN + <span class="num">1</span>

    <span class="slc">-- stretch memory tree</span>
    <span class="kwd">let</span> c = check (make <span class="num">0</span> stretchN)
    io <span class="str">&quot;stretch tree&quot;</span> stretchN c

    <span class="slc">-- allocate a long lived tree</span>
    <span class="kwd">let</span> !long    = make <span class="num">0</span> maxN

    <span class="slc">-- allocate, walk, and deallocate many bottom-up binary trees</span>
    <span class="kwd">let</span> vs = depth minN maxN
    <span class="kwc">mapM_</span> (\((m,d,i)) -&gt; io (<span class="kwc">show</span> m ++ <span class="str">&quot;</span><span class="esc">\t</span> <span class="str">trees&quot;</span>) d i) vs

    <span class="slc">-- confirm the the long-lived binary tree still exists</span>
    io <span class="str">&quot;long lived tree&quot;</span> maxN (check long)

<span class="slc">-- generate many trees</span>
depth :: <span class="kwb">Int</span> -&gt; <span class="kwb">Int</span> -&gt; [(<span class="kwb">Int</span>,<span class="kwb">Int</span>,<span class="kwb">Int</span>)]
depth d m
    | d &lt;= m    = (<span class="num">2</span>*n,d,sumT d n <span class="num">0</span>) : depth (d+<span class="num">2</span>) m
    | <span class="kwc">otherwise</span> = []
  <span class="kwd">where</span> n = <span class="num">1</span> `shiftL` (m - d + minN)

<span class="slc">-- allocate and check lots of trees</span>
sumT :: <span class="kwb">Int</span> -&gt; <span class="kwb">Int</span> -&gt; <span class="kwb">Int</span> -&gt; <span class="kwb">Int</span>
sumT d <span class="num">0</span> t = t
sumT  d i t = sumT d (i-<span class="num">1</span>) (t + a + b)
  <span class="kwd">where</span> a = check (make i    d)
        b = check (make (-i) d)

<span class="slc">-- traverse the tree, counting up the nodes</span>
check :: Tree -&gt; <span class="kwb">Int</span>
check Nil          = <span class="num">0</span>
check (Node i l r) = i + check l - check r

<span class="slc">-- build a tree</span>
make :: <span class="kwb">Int</span> -&gt; <span class="kwb">Int</span> -&gt; Tree
make i <span class="num">0</span> = Node i Nil Nil
make i d = Node i (make (i2-<span class="num">1</span>) d2) (make i2 d2)
  <span class="kwd">where</span> i2 = <span class="num">2</span>*i; d2 = d-<span class="num">1</span>
