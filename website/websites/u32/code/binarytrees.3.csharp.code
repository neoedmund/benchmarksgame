
<span class="kwa">namespace</span> BenchmarkGameBTrees
{
    <span class="com">/*</span>
<span class="com">          The Computer Language Benchmarks Game</span>
<span class="com">          http://benchmarksgame.alioth.debian.org/ </span>
<span class="com"></span>
<span class="com">          contributed by Marek Safar  </span>
<span class="com">          optimized by kasthack</span>
<span class="com">    */</span>
    <span class="kwa">using</span> System;
    <span class="kwa">using</span> System.Threading;
    <span class="kwa">using</span> System.Threading.Tasks;

    <span class="kwa">class</span> BinaryTrees
    {
        <span class="kwb">const int</span> minDepth = <span class="num">4</span>;
        <span class="kwa">public static</span> <span class="kwb">void</span> <span class="kwd">Main</span>(String[] args)
        {
            <span class="kwb">int</span> n = <span class="num">0</span>;
            <span class="kwa">if</span> (args.Length &gt; <span class="num">0</span>) n = Int32.<span class="kwd">Parse</span>(args[<span class="num">0</span>]);
            <span class="kwb">int</span> maxDepth = Math.<span class="kwd">Max</span>(minDepth + <span class="num">2</span>, n);
            <span class="kwb">int</span> stretchDepth = maxDepth + <span class="num">1</span>;
            <span class="kwb">int</span> check = (TreeNode.<span class="kwd">bottomUpTree</span>(<span class="num">0</span>, stretchDepth)).<span class="kwd">itemCheck</span>();
            Console.<span class="kwd">WriteLine</span>(<span class="str">&quot;stretch tree of depth</span> <span class="ipl">{0}</span><span class="str"></span><span class="esc">\t</span> <span class="str">check:</span> <span class="ipl">{1}</span><span class="str">&quot;</span>, stretchDepth, check);
            TreeNode longLivedTree = TreeNode.<span class="kwd">bottomUpTree</span>(<span class="num">0</span>, maxDepth);
            <span class="kwa">for</span> (<span class="kwb">int</span> depth = minDepth; depth &lt;= maxDepth; depth += <span class="num">2</span>)
            {
                <span class="kwb">int</span> iterations = <span class="num">1</span> &lt;&lt; (maxDepth - depth + minDepth);
                check = <span class="num">0</span>;
                <span class="com">/*</span>
<span class="com">                for (int i = 1; i &lt;= iterations; i++)</span>
<span class="com">                {</span>
<span class="com">                    check += (TreeNode.bottomUpTree(i, depth)).itemCheck();</span>
<span class="com">                    check += (TreeNode.bottomUpTree(-i, depth)).itemCheck();</span>
<span class="com">                }</span>
<span class="com">                */</span>
                Parallel.<span class="kwd">For</span>(<span class="num">1</span>, iterations + <span class="num">1</span>,
                    () =&gt; <span class="num">0</span>,
                    (i, loop, localCheck) =&gt;
                    {
                        <span class="kwa">return</span> localCheck + (TreeNode.<span class="kwd">bottomUpTree</span>(i, depth)).<span class="kwd">itemCheck</span>() + (TreeNode.<span class="kwd">bottomUpTree</span>(-i, depth)).<span class="kwd">itemCheck</span>();
                    },
                    localCheck =&gt; Interlocked.<span class="kwd">Add</span>(<span class="kwa">ref</span> check, localCheck)
                );

                Console.<span class="kwd">WriteLine</span>(<span class="str">&quot;</span><span class="ipl">{0}</span><span class="str"></span><span class="esc">\t</span> <span class="str">trees of depth</span> <span class="ipl">{1}</span><span class="str"></span><span class="esc">\t</span> <span class="str">check:</span> <span class="ipl">{2}</span><span class="str">&quot;</span>,
                    iterations * <span class="num">2</span>, depth, check);
            }
            Console.<span class="kwd">WriteLine</span>(<span class="str">&quot;long lived tree of depth</span> <span class="ipl">{0}</span><span class="str"></span><span class="esc">\t</span> <span class="str">check:</span> <span class="ipl">{1}</span><span class="str">&quot;</span>,
                maxDepth, longLivedTree.<span class="kwd">itemCheck</span>());
        }

        <span class="kwa">class</span> TreeNode
        {
            <span class="kwa">private</span> TreeNode left, right;
            <span class="kwa">private</span> <span class="kwb">int</span> item;
            <span class="kwd">TreeNode</span>(<span class="kwb">int</span> item)
            {
                <span class="kwa">this</span>.item = item;
            }
            <span class="kwa">internal static</span> TreeNode <span class="kwd">bottomUpTree</span>(<span class="kwb">int</span> item, <span class="kwb">int</span> depth)
            {
                TreeNode t;
                <span class="kwd">ChildTreeNodes</span>(out t, item, depth - <span class="num">1</span>);
                <span class="kwa">return</span> t;
            }
            <span class="kwa">static</span> <span class="kwb">void</span> <span class="kwd">ChildTreeNodes</span>(out TreeNode node, <span class="kwb">int</span> item, <span class="kwb">int</span> depth)
            {
                node = <span class="kwa">new</span> <span class="kwd">TreeNode</span>(item);
                <span class="kwa">if</span> (depth &gt; <span class="num">0</span>)
                {
                    <span class="kwd">ChildTreeNodes</span>(out node.left, <span class="num">2</span> * item - <span class="num">1</span>, depth - <span class="num">1</span>);
                    <span class="kwd">ChildTreeNodes</span>(out node.right, <span class="num">2</span> * item, depth - <span class="num">1</span>);
                }
            }
            <span class="kwa">internal</span> <span class="kwb">int</span> <span class="kwd">itemCheck</span>()
            {
                <span class="kwa">if</span> (right == <span class="kwa">null</span>) <span class="kwa">return</span> item;
                <span class="kwa">else return</span> item + left.<span class="kwd">itemCheck</span>() - right.<span class="kwd">itemCheck</span>();
            }
        }
    }
}
