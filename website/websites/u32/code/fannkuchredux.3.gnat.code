<span class="slc">--</span>
<span class="slc">-- The Computer Language Benchmarks Game</span>
<span class="slc">-- http://benchmarksgame.alioth.debian.org/</span>
<span class="slc">--</span>
<span class="slc">-- Based on code by Dave Fladebo, Eckehard Berns, Heiner Marxen, Hongwei Xi,</span>
<span class="slc">-- and The Anh Tran, and on the Java version of fannkuchredux by Oleg Mazurov.</span>
<span class="slc">-- Updated by Jonathan Parker and Georg Bauhaus, Nov 2012.</span>
<span class="slc">--</span>

<span class="kwa">with</span> Ada.Command_Line;
<span class="kwa">with</span> Ada.Text_Io; <span class="kwa">use</span> Ada.Text_Io;
<span class="kwa">with</span> System;

<span class="kwa">procedure</span> Fannkuchredux <span class="kwa">is</span>

   Multitasking_Desired : <span class="kwa">constant</span> <span class="kwb">Boolean</span> := <span class="kwd">True</span>;

   <span class="kwa">type</span> Fann_Int <span class="kwa">is mod</span> <span class="num">2</span>**System.Word_Size;

   <span class="kwa">pragma</span> Assert (Ada.Command_Line.Argument_Count = <span class="num">1</span>,
     <span class="str">&quot;Exactly one input argument is required.&quot;</span>);

   N_image : <span class="kwa">constant</span> <span class="kwb">String</span>   := Ada.Command_Line.Argument (<span class="num">1</span>);
   N       : <span class="kwa">constant</span> Fann_Int := Fann_Int<span class="kwd">'Value</span> (N_image);

   <span class="kwa">pragma</span> Assert (N &gt; <span class="num">1</span>,  <span class="str">&quot;Input argument N must be integer &gt; 1.&quot;</span>);

   Fann_0     : <span class="kwa">constant</span> Fann_Int := <span class="num">0</span>;
   Fann_First : <span class="kwa">constant</span> Fann_Int := Fann_0;
   Fann_Last  : <span class="kwa">constant</span> Fann_Int := Fann_0 + (N - <span class="num">1</span>);

   <span class="kwa">subtype</span> Perm_Index <span class="kwa">is</span> Fann_Int <span class="kwa">range</span> Fann_First .. Fann_Last;

   <span class="kwa">type</span> Permutation <span class="kwa">is array</span>(Perm_Index) <span class="kwa">of</span> Fann_Int;

   <span class="slc">-- The N! permutations are indexed from 0 to N!-1.  The indices</span>
   <span class="slc">-- and the factorials have type Perm_id_Range.</span>

   <span class="kwa">type</span> Perm_id_Range <span class="kwa">is mod</span> <span class="num">2</span>**System.Word_Size;
   <span class="kwa">pragma</span> Assert (N &lt; <span class="num">13</span> <span class="kwa">or</span> System.Word_Size = <span class="num">64</span>);
   <span class="kwa">pragma</span> Assert (N &lt; <span class="num">21</span>, <span class="str">&quot;Input argument N must be integer &lt; 21.&quot;</span>);

   <span class="kwa">subtype</span> Enum_Index <span class="kwa">is</span> Fann_Int <span class="kwa">range</span> Fann_First .. Fann_Last+<span class="num">1</span>;
   <span class="kwa">type</span> Enumeration <span class="kwa">is array</span>(Enum_Index) <span class="kwa">of</span> Perm_id_Range; <span class="slc">-- holds N!'s</span>

   No_of_Tasks : <span class="kwa">constant</span> := <span class="num">12</span>;
   <span class="slc">-- Using stnd setting of 12, Chunk_Size = (N! / No_of_Tasks) is even for N&gt;3.</span>

   <span class="kwa">type</span> Task_id_Range <span class="kwa">is range</span> <span class="num">1</span> .. No_of_Tasks;

   <span class="kwa">type</span> Checksum_Int <span class="kwa">is range</span>
      -<span class="num">2</span>**(System.Word_Size-<span class="num">1</span>)+<span class="num">1</span> .. <span class="num">2</span>**(System.Word_Size-<span class="num">1</span>)-<span class="num">1</span>;


   <span class="kwa">procedure</span> Swap (Perm1: <span class="kwa">in out</span> Permutation; Hi, Lo: Fann_Int) <span class="kwa">is</span>
      Tmp : <span class="kwa">constant</span> Fann_Int := Perm1(Hi);
   <span class="kwa">begin</span>
      Perm1(Hi) := Perm1(Lo);
      Perm1(Lo) := Tmp;
   <span class="kwa">end</span> Swap;

   <span class="kwa">function</span> Count_of_Flips
     (Perm : <span class="kwa">in</span> Permutation)
      <span class="kwa">return</span> Fann_Int
   <span class="kwa">is</span>
      Lo_1st : <span class="kwa">constant</span> Fann_Int := Fann_First + <span class="num">1</span>;
      Hi, Hi_1st, Tmp : Fann_Int;
      Flip_Count  : Fann_Int := <span class="num">0</span>;
      P_1st : Fann_Int;
      Perm1 : Permutation;
   <span class="kwa">begin</span>
      P_1st := Perm(Perm<span class="kwd">'First</span>);

      <span class="kwa">for</span> i <span class="kwa">in</span> Perm<span class="kwd">'Range</span> <span class="kwa">loop</span>
         Perm1(i) := Perm(i);
      <span class="kwa">end loop</span>;

      <span class="kwa">loop</span>                      <span class="slc">-- Flip until P_1st = Fann_First</span>

         <span class="kwa">exit when</span> P_1st = Fann_First;
         Flip_Count := Flip_Count + <span class="num">1</span>;
         Hi_1st := P_1st - <span class="num">1</span>;

         <span class="kwa">if</span> Lo_1st &lt; Hi_1st <span class="kwa">then</span>
            Hi := Hi_1st;
            <span class="kwa">for</span> Lo <span class="kwa">in</span> Lo_1st .. Lo_1st+<span class="num">16</span> <span class="kwa">loop</span>
               Swap (Perm1, Hi, Lo);
               <span class="kwa">exit when</span> Lo+<span class="num">3</span> &gt; Hi;
               Hi := Hi - <span class="num">1</span>;
            <span class="kwa">end loop</span>;
         <span class="kwa">end if</span>;

         Tmp          := Perm1(P_1st);
         Perm1(P_1st) := P_1st;
         P_1st        := Tmp;

      <span class="kwa">end loop</span>;

      <span class="kwa">return</span> Flip_Count;

   <span class="kwa">end</span> Count_of_Flips;

   <span class="kwa">procedure</span> Get_First_Permutation
     (Perm_id   : <span class="kwa">in</span>     Perm_id_Range;
      Factorial : <span class="kwa">in</span>     Enumeration;
      Perm      :     <span class="kwa">out</span> Permutation;
      Count     :     <span class="kwa">out</span> Permutation)
   <span class="kwa">is</span>
      d : Fann_Int;
      p_id : Perm_id_Range := Perm_id;
      Perm1 : Permutation;
   <span class="kwa">begin</span>
      Perm  := (<span class="kwa">others</span> =&gt; Fann_Int<span class="kwd">'First</span>);
      Count := (<span class="kwa">others</span> =&gt; Fann_Int<span class="kwd">'First</span>);

      <span class="kwa">for</span> i <span class="kwa">in</span> Perm<span class="kwd">'Range</span> <span class="kwa">loop</span>
         Perm(i) := i;
      <span class="kwa">end loop</span>;

      <span class="kwa">for</span> i <span class="kwa">in reverse</span> Fann_First+<span class="num">1</span> .. Fann_Last <span class="kwa">loop</span>
         d        := Fann_Int (p_id  /  Factorial(i));
         p_id     := p_id <span class="kwa">mod</span> Factorial(i);
         Count(i) := d;

         Perm1 := Perm;
         <span class="kwa">for</span> j <span class="kwa">in</span> Fann_First .. i <span class="kwa">loop</span>
            <span class="kwa">if</span> j+d &lt;= i <span class="kwa">then</span>
               Perm(j) :=  Perm1(j+d);
            <span class="kwa">else</span>
               Perm(j) :=  Perm1(j+d-i-<span class="num">1</span>);
            <span class="kwa">end if</span>;
         <span class="kwa">end loop</span>;
      <span class="kwa">end loop</span>;

   <span class="kwa">end</span> Get_First_Permutation;

   <span class="kwa">procedure</span> Get_Next_Permutation
     (Perm  : <span class="kwa">in out</span> Permutation;
      Count : <span class="kwa">in out</span> Permutation)
   <span class="kwa">is</span>
      Rotation_Upper_Bound : <span class="kwa">constant</span> Fann_Int := <span class="num">17</span>;
      <span class="kwa">pragma</span> Assert (Rotation_Upper_Bound &gt;= Perm<span class="kwd">'Last</span>);
      <span class="kwa">pragma</span> Assert (Perm<span class="kwd">'First</span> = <span class="num">0</span>);
      First, Next_First : Fann_Int;
      i : Fann_Int := <span class="num">1</span>;
   <span class="kwa">begin</span>
      First    := Perm(<span class="num">1</span>);
      Perm(<span class="num">1</span>)  := Perm(<span class="num">0</span>);
      Perm(<span class="num">0</span>)  := First;
      Count(i) := Count(i) + <span class="num">1</span>;

      <span class="kwa">if</span> Count(i) &gt; i <span class="kwa">then</span>
      <span class="kwa">loop</span>
         <span class="kwa">exit when</span> Count(i) &lt;= i;
         Count(i) := <span class="num">0</span>;

         i := i + <span class="num">1</span>;

         Next_First := Perm(<span class="num">1</span>);
         Perm(<span class="num">0</span>)    := Next_First;
         <span class="kwa">for</span> j <span class="kwa">in</span> <span class="num">2</span> .. Rotation_Upper_Bound <span class="kwa">loop</span>
            Perm(j-<span class="num">1</span>) := Perm(j);
            <span class="kwa">exit when</span> j = i;
         <span class="kwa">end loop</span>;
         Perm(i) := First;
         First   := Next_First;

         Count(i) := Count(i) + <span class="num">1</span>;

      <span class="kwa">end loop</span>;
      <span class="kwa">end if</span>;

   <span class="kwa">end</span> Get_Next_Permutation;

   <span class="kwa">procedure</span> Get_Checksum_and_Flips
     (Task_id   : <span class="kwa">in</span>     Task_id_Range;
      Factorial : <span class="kwa">in</span>     Enumeration;
      Max_Flips :    <span class="kwa">out</span> Fann_Int;
      Checksum  :    <span class="kwa">out</span> Checksum_Int)
   <span class="kwa">is</span>
      Perm_id, Perm_id_Min, Perm_id_Max : Perm_id_Range;
      Flip_Count  : Fann_Int;
      Perm, Count : Permutation;
      Chunk_Size  : Perm_id_Range;
   <span class="kwa">begin</span>

      Chunk_Size := Factorial(N) / No_of_Tasks;
      <span class="kwa">pragma</span> Assert (Chunk_Size <span class="kwa">mod</span> <span class="num">2</span> = <span class="num">0</span>);
      <span class="slc">--  so checksums work if No_of_Tasks&gt;1.</span>

      Perm_id_Min := Perm_id_Range (Task_id - Task_id_Range<span class="kwd">'First</span>) * Chunk_Size;
      Perm_id_Max := Perm_id_Range<span class="kwd">'Min</span> (Factorial(N), Perm_id_Min+Chunk_Size)-<span class="num">1</span>;
      <span class="slc">--  for the First task:   Perm_id_Min = 0;  Perm_id_Max := Chunk_Size-1</span>
      <span class="slc">--  Perm_id ultimately runs from 0 .. Factorial(N)-1</span>

      Get_First_Permutation (Perm_id_Min, Factorial, Perm, Count);
      <span class="slc">--  Initialize Perm and Count</span>

      Max_Flips := <span class="num">1</span>;
      Checksum  := <span class="num">0</span>;
      Perm_id   := Perm_id_Min;
      <span class="kwa">loop</span>

         <span class="kwa">if</span>  Perm(<span class="num">0</span>) &gt; <span class="num">0</span>  <span class="kwa">then</span>
            Flip_Count := Count_of_Flips (Perm);
            Max_Flips  := Fann_Int<span class="kwd">'Max</span> (Max_Flips, Flip_Count);
            <span class="kwa">if</span> Perm_id <span class="kwa">mod</span> <span class="num">2</span> = <span class="num">0</span> <span class="kwa">then</span>
               Checksum := Checksum + Checksum_Int (Flip_Count);
            <span class="kwa">else</span>
               Checksum := Checksum - Checksum_Int (Flip_Count);
            <span class="kwa">end if</span>;
         <span class="kwa">end if</span>;

         <span class="kwa">exit when</span> Perm_id &gt;= Perm_id_Max;
         Perm_id := Perm_id + <span class="num">1</span>;
         Get_Next_Permutation (Perm, Count);

      <span class="kwa">end loop</span>;

   <span class="kwa">end</span> Get_Checksum_and_Flips;

   <span class="kwa">task type</span> Flip_Counter <span class="kwa">is</span>
      <span class="kwa">pragma</span> Storage_Size (<span class="num">2</span>**<span class="num">12</span>);
      <span class="kwa">entry</span> Start
        (Task_id   : <span class="kwa">in</span> Task_id_Range;
         Factorial : <span class="kwa">in</span> Enumeration);
      <span class="kwa">entry</span> Return_Result
        (Partial_Flip_Count : <span class="kwa">out</span> Fann_Int;
         Partial_Checksum   : <span class="kwa">out</span> Checksum_Int);
   <span class="kwa">end</span> Flip_Counter;


   <span class="kwa">task body</span> Flip_Counter <span class="kwa">is</span>
      Task_id_Local : Task_id_Range;
      Max_Flips     : Fann_Int;
      Checksum      : Checksum_Int;
      F : Enumeration;
   <span class="kwa">begin</span>
      <span class="kwa">accept</span> Start
        (Task_id   : <span class="kwa">in</span> Task_id_Range;
         Factorial : <span class="kwa">in</span> Enumeration)
      <span class="kwa">do</span>
         Task_id_Local := Task_id;
         F := Factorial;
      <span class="kwa">end</span> Start;

      Get_Checksum_and_Flips (Task_id_Local, F, Max_Flips, Checksum);

      <span class="kwa">accept</span> Return_Result
        (Partial_Flip_Count : <span class="kwa">out</span> Fann_Int;
         Partial_Checksum   : <span class="kwa">out</span> Checksum_Int)
      <span class="kwa">do</span>
         Partial_Flip_Count := Max_Flips;
         Partial_Checksum   := Checksum;
      <span class="kwa">end</span> Return_Result;
   <span class="kwa">end</span> Flip_Counter;

   <span class="kwa">type</span> Flip_Data   <span class="kwa">is array</span> (Task_id_Range) <span class="kwa">of</span> Fann_Int;
   <span class="kwa">type</span> Chksum_Data <span class="kwa">is array</span> (Task_id_Range) <span class="kwa">of</span> Checksum_Int;
   Flip_Count_Storage : Flip_Data   := (<span class="kwa">others</span> =&gt; <span class="num">0</span>);
   Checksum_Storage   : Chksum_Data := (<span class="kwa">others</span> =&gt; <span class="num">0</span>);
   Max_Flips : Fann_Int     := <span class="num">0</span>;
   Checksum  : Checksum_Int := <span class="num">0</span>;

   Factorial : Enumeration;

<span class="kwa">begin</span>
   <span class="kwa">if not</span> (N &gt; <span class="num">3</span> <span class="kwa">or</span> (<span class="kwa">not</span> Multitasking_Desired <span class="kwa">and</span> No_of_Tasks = <span class="num">1</span>)) <span class="kwa">then</span>
      Put_Line
        (<span class="str">&quot;Set Multitasking_Desired = False and No_of_Tasks = 1 for N &lt; 4&quot;</span>);
      <span class="kwa">raise</span> Program_Error;
   <span class="kwa">end if</span>;

   Factorial(<span class="num">0</span>) := <span class="num">1</span>;
   <span class="kwa">for</span> i <span class="kwa">in</span> Enum_Index <span class="kwa">range</span> <span class="num">1</span> .. Enum_Index<span class="kwd">'Last</span> <span class="kwa">loop</span>
      Factorial(i) := Factorial(i-<span class="num">1</span>) * Perm_id_Range (i);
   <span class="kwa">end loop</span>;

   <span class="kwa">if</span> Multitasking_Desired <span class="kwa">then</span>

      <span class="kwa">declare</span>  <span class="slc">-- and launch 1 task for each t in Task_id_Range:</span>

         Counter : <span class="kwa">array</span>(Task_id_Range) <span class="kwa">of</span> Flip_Counter; <span class="slc">-- the tasks.</span>

      <span class="kwa">begin</span>

         <span class="kwa">for</span> t <span class="kwa">in</span> Task_id_Range <span class="kwa">loop</span>
            Counter(t).Start (t, Factorial);
         <span class="kwa">end loop</span>;

         <span class="kwa">for</span> t <span class="kwa">in</span> Task_id_Range <span class="kwa">loop</span>
            Counter(t).Return_Result (Max_Flips, Checksum);
            Flip_Count_Storage(t) := Max_Flips;
            Checksum_Storage(t)   := Checksum;
         <span class="kwa">end loop</span>;

      <span class="kwa">end</span>;

   <span class="kwa">else</span>  <span class="slc">-- Sequential:</span>

      <span class="kwa">for</span> t <span class="kwa">in</span> Task_id_Range <span class="kwa">loop</span>
         Get_Checksum_and_Flips (t, Factorial, Max_Flips, Checksum);
         Flip_Count_Storage(t) := Max_Flips;
         Checksum_Storage(t)   := Checksum;
      <span class="kwa">end loop</span>;

   <span class="kwa">end if</span>;

   Max_Flips := <span class="num">0</span>;
   <span class="kwa">for</span> t <span class="kwa">in</span> Task_id_Range <span class="kwa">loop</span>
      <span class="kwa">if</span> Flip_Count_Storage(t) &gt; Max_Flips <span class="kwa">then</span>
         Max_Flips := Flip_Count_Storage(t);
      <span class="kwa">end if</span>;
   <span class="kwa">end loop</span>;

   Checksum := <span class="num">0</span>;
   <span class="kwa">for</span> t <span class="kwa">in</span> Task_id_Range <span class="kwa">loop</span>
      Checksum := Checksum + Checksum_Storage(t);
   <span class="kwa">end loop</span>;

   <span class="kwa">declare</span>
      C_Image : <span class="kwa">constant</span> <span class="kwb">String</span> := Checksum_Int<span class="kwd">'Image</span> (Checksum);
   <span class="kwa">begin</span>
      Put_Line (C_image(<span class="num">2</span>..C_image<span class="kwd">'Last</span>));
      Put (<span class="str">&quot;Pfannkuchen(&quot;</span>); Put (N_image); Put (<span class="str">&quot;) =&quot;</span>);
      Put (Fann_Int<span class="kwd">'Image</span> (Max_Flips));
   <span class="kwa">end</span>;

<span class="kwa">end</span> Fannkuchredux;

