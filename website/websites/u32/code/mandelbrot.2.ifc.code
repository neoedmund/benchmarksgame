<span class="slc">! The Computer Language Benchmarks Game</span>
<span class="slc">! http://benchmarksgame.alioth.debian.org/</span>
<span class="slc">!</span>
<span class="slc">!      contributed by George R. Gonzalez</span>
<span class="slc">!      fixed by Simon Geard</span>

<span class="kwa">program</span> mandelbrot
    <span class="kwa">IMPLICIT NONE</span>
    <span class="kwa">INTEGER</span>, <span class="kwa">PARAMETER</span>                      :: WantedPrecision = <span class="num">8</span>, Iterations = <span class="num">50</span>
    <span class="kwa">INTEGER</span>                                 :: w, h,   Len,   i
    <span class="kwa">INTEGER</span>                                 :: y, x, LenOut, row
    <span class="kwa">REAL</span>( WantedPrecision )                 :: limit, limit2
    <span class="kwa">REAL</span>( WantedPrecision )                 :: rx, ry, rw, rh
    <span class="kwa">REAL</span>( WantedPrecision )                 :: Zr, Zi, Cr, Ci, Tr, Ti
    <span class="kwa">REAL</span>( WantedPrecision )                 :: zero, one, v1p5, two
    <span class="kwa">CHARACTER</span>(<span class="num">10</span>)                           :: NUM
    <span class="kwa">INTEGER</span>(<span class="num">1</span>), ALLOCATABLE, <span class="kwa">DIMENSION</span>( : ) :: OUTA
    <span class="kwa">INTEGER</span>                                 :: OUTP, OUTB, OutUnit
    <span class="kwa">INTEGER</span>(<span class="num">1</span>), ALLOCATABLE, <span class="kwa">DIMENSION</span>( : ) :: OutBuf
    <span class="kwa">INTEGER</span>(<span class="num">1</span>)                              :: B
    <span class="kwa">LOGICAL</span>                                 :: Ans
    <span class="kwa">CONTINUE</span>
    OutUnit = <span class="num">6</span> 
    <span class="kwa">Call</span> <span class="kwd">GetArg</span>( <span class="num">1</span>, NUM )
    <span class="kwa">READ</span>( NUM, *, <span class="kwa">END</span> = <span class="num">100</span> ) w;  h = w;    rw = w; rh = h
    Len = w * h
    <span class="kwd">ALLOCATE</span>( <span class="kwd">OUTA</span> ( Len ) )
    OUTA = <span class="num">0</span>
    OUTB = <span class="num">0</span>;
    limit = <span class="num">2.0</span>; limit2 = limit * limit
    <span class="kwa">IF</span>( w &lt; <span class="num">1000</span> ) <span class="kwa">THEN</span>
        <span class="kwa">WRITE</span>( UNIT = OutUnit, FMT = <span class="str">&quot;( 'P4', /, I3, 1X, I3 )&quot;</span> ) w, h
    <span class="kwa">ELSE</span>
        <span class="kwa">WRITE</span>( UNIT = OutUnit, FMT = <span class="str">&quot;( 'P4', /, I4, 1X, I4 )&quot;</span> ) w, h
    <span class="kwa">ENDIF</span>

    <span class="kwa">DO</span> y = <span class="num">0</span>,h-<span class="num">1</span>
        ry = y

        <span class="kwa">DO</span> x = <span class="num">0</span>,w-<span class="num">1</span> 
            rx = x;
            Zr = <span class="num">0.0</span>;Zi = <span class="num">0.0</span>;Tr = <span class="num">0.0</span>;Ti = <span class="num">0.0</span>;
            Cr = <span class="num">2.0</span> * rx / rw - <span class="num">1.5</span>
            Ci = <span class="num">2.0</span> * ry / rh - <span class="num">1.0</span>
            Ans = .TRUE.
            i = <span class="num">0</span>; 
            OUTB = OUTB + <span class="num">1</span>

            <span class="kwa">DO WHILE</span>(  i &lt; Iterations   .AND.   Ans  ) 
                Zi    =       <span class="num">2.0</span> * Zr * Zi + Ci
                Zr    =       Tr - Ti + Cr
                Ti    =       Zi * Zi
                Tr    =       Zr * Zr
                i     =       i + <span class="num">1</span>
                Ans   =       Tr + Ti &lt;= limit2
            <span class="kwa">END DO</span>

            <span class="kwa">IF</span>( Ans ) <span class="kwd">OUTA</span>( OUTB ) = <span class="num">1</span>;
          <span class="kwa">END DO</span>

    <span class="kwa">END DO</span>

   LenOut = Len / <span class="num">8</span> + <span class="num">10</span> + h;
   <span class="kwd">ALLOCATE</span>( <span class="kwd">OutBuf</span>( LenOut ) )

   I = <span class="num">0</span>;  OUTP = <span class="num">0</span>; B = <span class="num">0</span>; row = <span class="num">0</span>

   <span class="kwa">DO WHILE</span>( I &lt; OUTB )
      I = I + <span class="num">1</span>
      B = <span class="kwd">ISHFT</span>( B, <span class="num">1</span> ) + <span class="kwd">OUTA</span>( I )
      row = row + <span class="num">1</span>
      <span class="kwa">IF</span>( <span class="kwd">IAND</span>( I, <span class="num">7</span> ) == <span class="num">0</span> ) <span class="kwa">THEN</span>
         OUTP = OUTP + <span class="num">1</span>
         <span class="kwd">OutBuf</span>( OUTP ) = B;
         B              = <span class="num">0</span>
      <span class="kwa">ELSEIF</span>(  row &gt;= w - <span class="num">1</span> ) <span class="kwa">THEN</span>
         OUTP = OUTP + <span class="num">1</span>

         <span class="kwa">DO WHILE</span>( <span class="kwd">IAND</span>( I, <span class="num">7</span> ) /= <span class="num">0</span> )
            B = <span class="kwd">ISHFT</span>( B, <span class="num">1</span> )
            I = I + <span class="num">1</span>
         <span class="kwa">END DO</span>

         <span class="kwd">OutBuf</span>( OUTP ) = B;
         B              = <span class="num">0</span>
         row            = <span class="num">0</span>
      <span class="kwa">ENDIF</span>
   <span class="kwa">ENDDO</span>


   <span class="kwa">WRITE</span>( OutUnit, FMT = <span class="str">&quot;(10000000A1)&quot;</span> , advance=<span class="str">'no'</span>) ( <span class="kwd">OutBuf</span>(I),I=<span class="num">1</span>,OUTP )

<span class="num">100</span>     <span class="kwa">CONTINUE</span>

<span class="kwa">end program</span> mandelbrot

