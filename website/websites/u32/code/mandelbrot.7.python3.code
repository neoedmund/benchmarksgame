<span class="slc"># The Computer Language Benchmarks Game</span>
<span class="slc"># http://benchmarksgame.alioth.debian.org/</span>
<span class="slc">#</span>
<span class="slc"># contributed by Joerg Baumann</span>

<span class="kwa">from</span> contextlib <span class="kwa">import</span> closing
<span class="kwa">from</span> itertools <span class="kwa">import</span> islice
<span class="kwa">from</span> os <span class="kwa">import</span> cpu_count
<span class="kwa">from</span> sys <span class="kwa">import</span> argv, stdout

<span class="kwa">def</span> <span class="kwd">pixels</span>(y, n, <span class="kwb">abs</span>):
    range7 = <span class="kwd">bytearray</span>(<span class="kwb">range</span>(<span class="num">7</span>))
    pixel_bits = <span class="kwd">bytearray</span>(<span class="num">128</span> &gt;&gt; pos <span class="kwa">for</span> pos <span class="kwa">in</span> <span class="kwb">range</span>(<span class="num">8</span>))
    c1 = <span class="num">2</span>. / <span class="kwb">float</span>(n)
    c0 = -<span class="num">1.5</span> + <span class="num">1</span>j * y * c1 - <span class="num">1</span>j
    x = <span class="num">0</span>
    <span class="kwa">while True</span>:
        pixel = <span class="num">0</span>
        c = x * c1 + c0
        <span class="kwa">for</span> pixel_bit <span class="kwa">in</span> pixel_bits:
            z = c
            <span class="kwa">for</span> _ <span class="kwa">in</span> range7:
                <span class="kwa">for</span> _ <span class="kwa">in</span> range7:
                    z = z * z + c
                <span class="kwa">if</span> <span class="kwb">abs</span>(z) &gt;= <span class="num">2</span>.: <span class="kwa">break</span>
            <span class="kwa">else</span>:
                pixel += pixel_bit
            c += c1
        <span class="kwa">yield</span> pixel
        x += <span class="num">8</span>

<span class="kwa">def</span> <span class="kwd">compute_row</span>(p):
    y, n = p

    result = <span class="kwd">bytearray</span>(<span class="kwd">islice</span>(<span class="kwd">pixels</span>(y, n, <span class="kwb">abs</span>), (n + <span class="num">7</span>) // <span class="num">8</span>))
    result[-<span class="num">1</span>] &amp;= <span class="num">0xff</span> &lt;&lt; (<span class="num">8</span> - n % <span class="num">8</span>)
    <span class="kwa">return</span> y, result

<span class="kwa">def</span> <span class="kwd">ordered_rows</span>(rows, n):
    order = [<span class="kwa">None</span>] * n
    i = <span class="num">0</span>
    j = n
    <span class="kwa">while</span> i &lt; <span class="kwb">len</span>(order):
        <span class="kwa">if</span> j &gt; <span class="num">0</span>:
            row = <span class="kwd">next</span>(rows)
            order[row[<span class="num">0</span>]] = row
            j -= <span class="num">1</span>

        <span class="kwa">if</span> order[i]:
            <span class="kwa">yield</span> order[i]
            order[i] = <span class="kwa">None</span>
            i += <span class="num">1</span>

<span class="kwa">def</span> <span class="kwd">compute_rows</span>(n, f):
    row_jobs = ((y, n) <span class="kwa">for</span> y <span class="kwa">in</span> <span class="kwb">range</span>(n))

    <span class="kwa">if</span> <span class="kwd">cpu_count</span>() &lt; <span class="num">2</span>:
        <span class="kwa">yield from</span> <span class="kwb">map</span>(f, row_jobs)
    <span class="kwa">else</span>:
        <span class="kwa">from</span> multiprocessing <span class="kwa">import</span> Pool
        with <span class="kwd">Pool</span>() <span class="kwa">as</span> pool:
            unordered_rows = pool.<span class="kwd">imap_unordered</span>(f, row_jobs)
            <span class="kwa">yield from</span> <span class="kwd">ordered_rows</span>(unordered_rows, n)

<span class="kwa">def</span> <span class="kwd">mandelbrot</span>(n):
    write = stdout.<span class="kwb">buffer</span>.write

    with <span class="kwd">closing</span>(<span class="kwd">compute_rows</span>(n, compute_row)) <span class="kwa">as</span> rows:
        <span class="kwd">write</span>(<span class="str">&quot;P4</span><span class="esc">\n</span><span class="str">{0} {0}</span><span class="esc">\n</span><span class="str">&quot;</span>.<span class="kwd">format</span>(n).<span class="kwd">encode</span>())
        <span class="kwa">for</span> row <span class="kwa">in</span> rows:
            <span class="kwd">write</span>(row[<span class="num">1</span>])

<span class="kwa">if</span> __name__ == <span class="str">'__main__'</span>:
    <span class="kwd">mandelbrot</span>(<span class="kwb">int</span>(argv[<span class="num">1</span>]))
